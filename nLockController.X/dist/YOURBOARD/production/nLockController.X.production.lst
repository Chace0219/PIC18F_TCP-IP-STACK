

Microchip Technology PIC18 PRO Macro Assembler V1.35 build -356382666 
                                                                                               Wed Oct 05 05:07:18 2016

Microchip Technology Omniscient Code Generator v1.35 (PRO mode) build 201507080246
     1                           	processor	18F97J60
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	pm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1
     6                           	psect	idataBANK1,global,class=CODE,delta=1
     7                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1
     8                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     9                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1
    10                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1
    11                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    12                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    13                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1
    14                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1
    15                           	psect	bssBANK3,global,class=BANK3,space=1,delta=1
    16                           	psect	bssBIGRAM,global,class=BIGRAM,space=1,delta=1
    17                           	psect	cstackBANK2,global,class=BANK2,space=1,delta=1
    18                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    19                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    20                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1
    21                           	psect	text0,global,reloc=2,class=CODE,delta=1
    22                           	psect	text1,global,reloc=2,class=CODE,delta=1
    23                           	psect	text2,global,reloc=2,class=CODE,delta=1
    24                           	psect	text3,global,reloc=2,class=CODE,delta=1
    25                           	psect	text4,global,reloc=2,class=CODE,delta=1
    26                           	psect	text5,global,reloc=2,class=CODE,delta=1
    27                           	psect	text6,global,reloc=2,class=CODE,delta=1
    28                           	psect	text7,global,reloc=2,class=CODE,delta=1
    29                           	psect	text8,global,reloc=2,class=CODE,delta=1
    30                           	psect	text9,global,reloc=2,class=CODE,delta=1
    31                           	psect	text10,global,reloc=2,class=CODE,delta=1
    32                           	psect	text11,global,reloc=2,class=CODE,delta=1
    33                           	psect	text12,global,reloc=2,class=CODE,delta=1
    34                           	psect	text13,global,reloc=2,class=CODE,delta=1
    35                           	psect	text14,global,reloc=2,class=CODE,delta=1
    36                           	psect	text15,global,reloc=2,class=CODE,delta=1
    37                           	psect	text16,global,reloc=2,class=CODE,delta=1
    38                           	psect	text17,global,reloc=2,class=CODE,delta=1
    39                           	psect	text18,global,reloc=2,class=CODE,delta=1
    40                           	psect	text19,global,reloc=2,class=CODE,delta=1
    41                           	psect	text20,global,reloc=2,class=CODE,delta=1
    42                           	psect	text21,global,reloc=2,class=CODE,delta=1
    43                           	psect	text22,global,reloc=2,class=CODE,delta=1
    44                           	psect	text23,global,reloc=2,class=CODE,delta=1
    45                           	psect	text24,global,reloc=2,class=CODE,delta=1
    46                           	psect	text25,global,reloc=2,class=CODE,delta=1
    47                           	psect	text26,global,reloc=2,class=CODE,delta=1
    48                           	psect	text27,global,reloc=2,class=CODE,delta=1
    49                           	psect	text28,global,reloc=2,class=CODE,delta=1
    50                           	psect	text29,global,reloc=2,class=CODE,delta=1
    51                           	psect	text30,global,reloc=2,class=CODE,delta=1
    52                           	psect	text31,global,reloc=2,class=CODE,delta=1
    53                           	psect	text32,global,reloc=2,class=CODE,delta=1
    54                           	psect	text33,global,reloc=2,class=CODE,delta=1
    55                           	psect	text34,global,reloc=2,class=CODE,delta=1
    56                           	psect	text35,global,reloc=2,class=CODE,delta=1
    57                           	psect	text36,global,reloc=2,class=CODE,delta=1
    58                           	psect	text37,global,reloc=2,class=CODE,delta=1
    59                           	psect	text38,global,reloc=2,class=CODE,delta=1
    60                           	psect	text39,global,reloc=2,class=CODE,delta=1
    61                           	psect	text40,global,reloc=2,class=CODE,delta=1
    62                           	psect	text41,global,reloc=2,class=CODE,delta=1
    63                           	psect	text42,global,reloc=2,class=CODE,delta=1
    64                           	psect	text43,global,reloc=2,class=CODE,delta=1
    65                           	psect	text44,global,reloc=2,class=CODE,delta=1
    66                           	psect	text45,global,reloc=2,class=CODE,delta=1
    67                           	psect	text46,global,reloc=2,class=CODE,delta=1
    68                           	psect	text47,global,reloc=2,class=CODE,delta=1
    69                           	psect	text48,global,reloc=2,class=CODE,delta=1
    70                           	psect	text49,global,reloc=2,class=CODE,delta=1
    71                           	psect	text50,global,reloc=2,class=CODE,delta=1
    72                           	psect	text51,global,reloc=2,class=CODE,delta=1
    73                           	psect	text52,global,reloc=2,class=CODE,delta=1
    74                           	psect	text53,global,reloc=2,class=CODE,delta=1
    75                           	psect	text54,global,reloc=2,class=CODE,delta=1
    76                           	psect	text55,global,reloc=2,class=CODE,delta=1
    77                           	psect	text56,global,reloc=2,class=CODE,delta=1
    78                           	psect	text57,global,reloc=2,class=CODE,delta=1
    79                           	psect	text58,global,reloc=2,class=CODE,delta=1
    80                           	psect	text59,global,reloc=2,class=CODE,delta=1
    81                           	psect	text60,global,reloc=2,class=CODE,delta=1
    82                           	psect	text61,global,reloc=2,class=CODE,delta=1
    83                           	psect	text62,global,reloc=2,class=CODE,delta=1
    84                           	psect	text63,global,reloc=2,class=CODE,delta=1
    85                           	psect	text64,global,reloc=2,class=CODE,delta=1
    86                           	psect	text65,global,reloc=2,class=CODE,delta=1
    87                           	psect	text66,global,reloc=2,class=CODE,delta=1
    88                           	psect	text67,global,reloc=2,class=CODE,delta=1
    89                           	psect	text68,global,reloc=2,class=CODE,delta=1
    90                           	psect	text69,global,reloc=2,class=CODE,delta=1
    91                           	psect	text70,global,reloc=2,class=CODE,delta=1
    92                           	psect	text71,global,reloc=2,class=CODE,delta=1
    93                           	psect	text72,global,reloc=2,class=CODE,delta=1
    94                           	psect	text73,global,reloc=2,class=CODE,delta=1
    95                           	psect	text74,global,reloc=2,class=CODE,delta=1
    96                           	psect	text75,global,reloc=2,class=CODE,delta=1
    97                           	psect	text76,global,reloc=2,class=CODE,delta=1
    98                           	psect	text77,global,reloc=2,class=CODE,delta=1
    99                           	psect	text78,global,reloc=2,class=CODE,delta=1
   100                           	psect	text79,global,reloc=2,class=CODE,delta=1
   101                           	psect	text80,global,reloc=2,class=CODE,delta=1
   102                           	psect	text81,global,reloc=2,class=CODE,delta=1
   103                           	psect	text82,global,reloc=2,class=CODE,delta=1
   104                           	psect	text83,global,reloc=2,class=CODE,delta=1
   105                           	psect	text84,global,reloc=2,class=CODE,delta=1
   106                           	psect	text85,global,reloc=2,class=CODE,delta=1
   107                           	psect	text86,global,reloc=2,class=CODE,delta=1
   108                           	psect	text87,global,reloc=2,class=CODE,delta=1
   109                           	psect	text88,global,reloc=2,class=CODE,delta=1
   110                           	psect	text89,global,reloc=2,class=CODE,delta=1
   111                           	psect	text90,global,reloc=2,class=CODE,delta=1
   112                           	psect	text91,global,reloc=2,class=CODE,delta=1
   113                           	psect	text92,global,reloc=2,class=CODE,delta=1
   114                           	psect	text93,global,reloc=2,class=CODE,delta=1
   115                           	psect	text94,global,reloc=2,class=CODE,delta=1
   116                           	psect	text95,global,reloc=2,class=CODE,delta=1
   117                           	psect	text96,global,reloc=2,class=CODE,delta=1
   118                           	psect	text97,global,reloc=2,class=CODE,delta=1
   119                           	psect	text98,global,reloc=2,class=CODE,delta=1
   120                           	psect	text99,global,reloc=2,class=CODE,delta=1
   121                           	psect	text100,global,reloc=2,class=CODE,delta=1
   122                           	psect	text101,global,reloc=2,class=CODE,delta=1
   123                           	psect	text102,global,reloc=2,class=CODE,delta=1
   124                           	psect	text103,global,reloc=2,class=CODE,delta=1
   125                           	psect	text104,global,reloc=2,class=CODE,delta=1
   126                           	psect	text105,global,reloc=2,class=CODE,delta=1
   127                           	psect	text106,global,reloc=2,class=CODE,delta=1
   128                           	psect	text107,global,reloc=2,class=CODE,delta=1
   129                           	psect	text108,global,reloc=2,class=CODE,delta=1
   130                           	psect	text109,global,reloc=2,class=CODE,delta=1
   131                           	psect	text110,global,reloc=2,class=CODE,delta=1
   132                           	psect	text111,global,reloc=2,class=CODE,delta=1
   133                           	psect	text112,global,reloc=2,class=CODE,delta=1
   134                           	psect	text113,global,reloc=2,class=CODE,delta=1
   135                           	psect	text114,global,reloc=2,class=CODE,delta=1
   136                           	psect	text115,global,reloc=2,class=CODE,delta=1
   137                           	psect	text116,global,reloc=2,class=CODE,delta=1
   138                           	psect	text117,global,reloc=2,class=CODE,delta=1
   139                           	psect	text118,global,reloc=2,class=CODE,delta=1
   140                           	psect	text119,global,reloc=2,class=CODE,delta=1
   141                           	psect	text120,global,reloc=2,class=CODE,delta=1
   142                           	psect	text121,global,reloc=2,class=CODE,delta=1
   143                           	psect	text122,global,reloc=2,class=CODE,delta=1
   144                           	psect	text123,global,reloc=2,class=CODE,delta=1
   145                           	psect	text124,global,reloc=2,class=CODE,delta=1
   146                           	psect	text125,global,reloc=2,class=CODE,delta=1
   147                           	psect	text126,global,reloc=2,class=CODE,delta=1
   148                           	psect	text127,global,reloc=2,class=CODE,delta=1
   149                           	psect	text128,global,reloc=2,class=CODE,delta=1
   150                           	psect	text129,global,reloc=2,class=CODE,delta=1
   151                           	psect	text130,global,reloc=2,class=CODE,delta=1
   152                           	psect	text131,global,reloc=2,class=CODE,delta=1
   153                           	psect	text132,global,reloc=2,class=CODE,delta=1
   154                           	psect	text133,global,reloc=2,class=CODE,delta=1
   155                           	psect	intcodelo,global,reloc=2,class=CODE,delta=1
   156                           	psect	text135,global,reloc=2,class=CODE,delta=1
   157                           	psect	text136,global,reloc=2,class=CODE,delta=1
   158                           	psect	text137,global,reloc=2,class=CODE,delta=1
   159                           	psect	text138,global,reloc=2,class=CODE,delta=1
   160                           	psect	text139,global,reloc=2,class=CODE,delta=1
   161                           	psect	text140,global,reloc=2,class=CODE,delta=1
   162                           	psect	text141,global,reloc=2,class=CODE,delta=1
   163                           	psect	text142,global,reloc=2,class=CODE,delta=1
   164                           	psect	intcode,global,reloc=2,class=CODE,delta=1
   165                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
   166                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1
   167                           	psect	rparam,global,class=COMRAM,space=1,delta=1
   168                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
   169  0000                     
   170                           	psect	idataCOMRAM
   171  0054DA                     __pidataCOMRAM:
   172                           	opt stack 0
   173                           
   174                           ;initializer for _SocketWithRxData
   175  0054DA  FF                 	db	255
   176                           
   177                           	psect	idataBANK1
   178  0051CA                     __pidataBANK1:
   179                           	opt stack 0
   180                           
   181                           ;initializer for InitializeBoard@F7567
   182  0051CA  30                 	db	48
   183  0051CB  30                 	db	48
   184  0051CC  2D                 	db	45
   185  0051CD  30                 	db	48
   186  0051CE  31                 	db	49
   187  0051CF  2D                 	db	45
   188  0051D0  32                 	db	50
   189  0051D1  42                 	db	66
   190  0051D2  2D                 	db	45
   191  0051D3  30                 	db	48
   192  0051D4  30                 	db	48
   193  0051D5  2D                 	db	45
   194  0051D6  30                 	db	48
   195  0051D7  30                 	db	48
   196  0051D8  2D                 	db	45
   197  0051D9  31                 	db	49
   198  0051DA  31                 	db	49
   199  0051DB  00                 	db	0
   200                           
   201                           ;initializer for _dwLFSRRandSeed
   202  0051DC  9F9E               	dw	40862
   203  0051DE  41FE               	dw	16894
   204                           
   205                           ;initializer for _m_doorIndicatorOpenTooLongTimerStartValue
   206  0051E0  0190               	dw	400
   207  0051E2  0000               	dw	0
   208                           
   209                           ;initializer for _m_doorSwitchPressedTooLongTimerStartValue
   210  0051E4  04B0               	dw	1200
   211  0051E6  0000               	dw	0
   212                           
   213                           ;initializer for _LastPutSocket
   214  0051E8  FF                 	db	255
   215                           
   216                           ;initializer for _m_firstConnectionAfterBootFlag
   217  0051E9  01                 	db	1
   218  0000                     _EDMADST	set	3828
   219  0000                     _EDMAND	set	3826
   220  0000                     _EDMAST	set	3824
   221  0000                     _ERXND	set	3818
   222  0000                     _ERXST	set	3816
   223  0000                     _ETXND	set	3814
   224  0000                     _ETXST	set	3812
   225  0000                     _EWRPT	set	3810
   226  0000                     _ECON2bits	set	3838
   227  0000                     _EPKTCNT	set	3801
   228  0000                     _ERXRDPTH	set	3821
   229  0000                     _ERXRDPTL	set	3820
   230  0000                     _ESTATbits	set	3837
   231  0000                     _MAADR1	set	3716
   232  0000                     _MAADR2	set	3717
   233  0000                     _MAADR3	set	3714
   234  0000                     _MAADR4	set	3715
   235  0000                     _MAADR5	set	3712
   236  0000                     _MAADR6	set	3713
   237  0000                     _MABBIPG	set	3748
   238  0000                     _MACON1	set	3744
   239  0000                     _MACON3	set	3746
   240  0000                     _MACON4	set	3747
   241  0000                     _MAIPGH	set	3751
   242  0000                     _MAIPGL	set	3750
   243  0000                     _MAMXFLH	set	3755
   244  0000                     _MAMXFLL	set	3754
   245  0000                     _MICMD	set	3762
   246  0000                     _MIRDH	set	3769
   247  0000                     _MIRDL	set	3768
   248  0000                     _MIREGADR	set	3764
   249  0000                     _MISTATbits	set	3722
   250  0000                     _ERDPT	set	3962
   251  0000                     _ADCON0	set	4034
   252  0000                     _ADCON0bits	set	4034
   253  0000                     _ADCON1	set	4033
   254  0000                     _ADCON2	set	4032
   255  0000                     _ECON1bits	set	4050
   256  0000                     _EIRbits	set	3936
   257  0000                     _ERDPTH	set	3963
   258  0000                     _ERDPTL	set	3962
   259  0000                     _INTCON	set	4082
   260  0000                     _INTCON2bits	set	4081
   261  0000                     _INTCON3bits	set	4080
   262  0000                     _INTCONbits	set	4082
   263  0000                     _IPR1bits	set	3999
   264  0000                     _LATCbits	set	3979
   265  0000                     _LATDbits	set	3980
   266  0000                     _LATFbits	set	3982
   267  0000                     _OSCTUNE	set	3995
   268  0000                     _PIE1bits	set	3997
   269  0000                     _PIR1bits	set	3998
   270  0000                     _PORTHbits	set	3975
   271  0000                     _PR2	set	4043
   272  0000                     _PRODH	set	4084
   273  0000                     _PRODL	set	4083
   274  0000                     _RCONbits	set	4048
   275  0000                     _SSP1BUF	set	4041
   276  0000                     _SSP1CON1	set	4038
   277  0000                     _SSP1CON1bits	set	4038
   278  0000                     _SSP1STATbits	set	4039
   279  0000                     _T0CON	set	4053
   280  0000                     _T1CON	set	4045
   281  0000                     _T2CON	set	4042
   282  0000                     _TMR0H	set	4055
   283  0000                     _TMR0L	set	4054
   284  0000                     _TMR1H	set	4047
   285  0000                     _TMR1L	set	4046
   286  0000                     _TMR2	set	4044
   287  0000                     _TRISA	set	3986
   288  0000                     _TRISBbits	set	3987
   289  0000                     _TRISCbits	set	3988
   290  0000                     _TRISD	set	3989
   291  0000                     _TRISDbits	set	3989
   292  0000                     _TRISF	set	3991
   293  0000                     _TRISG	set	3992
   294  0000                     _TRISH	set	3993
   295  0000                     _TRISHbits	set	3993
   296                           
   297                           	psect	smallconst
   298  001000                     __psmallconst:
   299                           	opt stack 0
   300  001000  00                 	db	0
   301  001001                     STR_1:
   302  001001  31                 	db	49	;'1'
   303  001002  2E                 	db	46
   304  001003  30                 	db	48	;'0'
   305  001004  34                 	db	52	;'4'
   306  001005  00                 	db	0
   307  001006                     STR_3:
   308  001006  4E                 	db	78	;'N'
   309  001007  44                 	db	68	;'D'
   310  001008  53                 	db	83	;'S'
   311  001009  00                 	db	0
   312  0000                     
   313                           ; #config settings
   314  00100A  00                 	db	0	; dummy byte at the end
   315  0000                     
   316                           	psect	cinit
   317  003CB4                     __pcinit:
   318                           	opt stack 0
   319  003CB4                     start_initialization:
   320                           	opt stack 0
   321  003CB4                     __initialization:
   322                           	opt stack 0
   323                           
   324                           ; Clear objects allocated to BIGRAM (500 bytes)
   325  003CB4  EE03  F041         	lfsr	0,__pbssBIGRAM
   326  003CB8  EE11 F0F4          	lfsr	1,500
   327  003CBC                     clear_0:
   328  003CBC  6AEE               	clrf	postinc0,c
   329  003CBE  50E5               	movf	postdec1,w,c
   330  003CC0  50E1               	movf	fsr1l,w,c
   331  003CC2  E1FC               	bnz	clear_0
   332  003CC4  50E2               	movf	fsr1h,w,c
   333  003CC6  E1FA               	bnz	clear_0
   334                           
   335                           ; Clear objects allocated to BANK3 (65 bytes)
   336  003CC8  EE03  F000         	lfsr	0,__pbssBANK3
   337  003CCC  0E41               	movlw	65
   338  003CCE                     clear_1:
   339  003CCE  6AEE               	clrf	postinc0,c
   340  003CD0  06E8               	decf	wreg,f,c
   341  003CD2  E1FD               	bnz	clear_1
   342                           
   343                           ; Clear objects allocated to BANK2 (230 bytes)
   344  003CD4  EE02  F000         	lfsr	0,__pbssBANK2
   345  003CD8  0EE6               	movlw	230
   346  003CDA                     clear_2:
   347  003CDA  6AEE               	clrf	postinc0,c
   348  003CDC  06E8               	decf	wreg,f,c
   349  003CDE  E1FD               	bnz	clear_2
   350                           
   351                           ; Clear objects allocated to BANK1 (200 bytes)
   352  003CE0  EE01  F000         	lfsr	0,__pbssBANK1
   353  003CE4  0EC8               	movlw	200
   354  003CE6                     clear_3:
   355  003CE6  6AEE               	clrf	postinc0,c
   356  003CE8  06E8               	decf	wreg,f,c
   357  003CEA  E1FD               	bnz	clear_3
   358                           
   359                           ; Clear objects allocated to BANK0 (56 bytes)
   360  003CEC  EE00  F0C7         	lfsr	0,__pbssBANK0
   361  003CF0  0E38               	movlw	56
   362  003CF2                     clear_4:
   363  003CF2  6AEE               	clrf	postinc0,c
   364  003CF4  06E8               	decf	wreg,f,c
   365  003CF6  E1FD               	bnz	clear_4
   366                           
   367                           ; Clear objects allocated to COMRAM (26 bytes)
   368  003CF8  EE00  F029         	lfsr	0,__pbssCOMRAM
   369  003CFC  0E1A               	movlw	26
   370  003CFE                     clear_5:
   371  003CFE  6AEE               	clrf	postinc0,c
   372  003D00  06E8               	decf	wreg,f,c
   373  003D02  E1FD               	bnz	clear_5
   374                           
   375                           ; Initialize objects allocated to BANK1 (32 bytes)
   376                           ; load TBLPTR registers with __pidataBANK1
   377  003D04  0ECA               	movlw	low __pidataBANK1
   378  003D06  6EF6               	movwf	tblptrl,c
   379  003D08  0E51               	movlw	high __pidataBANK1
   380  003D0A  6EF7               	movwf	tblptrh,c
   381  003D0C  0E00               	movlw	low (__pidataBANK1 shr (0+16))
   382  003D0E  6EF8               	movwf	tblptru,c
   383  003D10  EE01  F0C8         	lfsr	0,__pdataBANK1
   384  003D14  EE10 F020          	lfsr	1,32
   385  003D18                     copy_data0:
   386  003D18  0009               	tblrd		*+
   387  003D1A  CFF5 FFEE          	movff	tablat,postinc0
   388  003D1E  50E5               	movf	postdec1,w,c
   389  003D20  50E1               	movf	fsr1l,w,c
   390  003D22  E1FA               	bnz	copy_data0
   391                           
   392                           ; Initialize objects allocated to COMRAM (1 bytes)
   393                           ; load TBLPTR registers with __pidataCOMRAM
   394  003D24  0EDA               	movlw	low __pidataCOMRAM
   395  003D26  6EF6               	movwf	tblptrl,c
   396  003D28  0E54               	movlw	high __pidataCOMRAM
   397  003D2A  6EF7               	movwf	tblptrh,c
   398  003D2C  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   399  003D2E  6EF8               	movwf	tblptru,c
   400  003D30  0009               	tblrd		*+	;fetch initializer
   401  003D32  CFF5 F043          	movff	tablat,__pdataCOMRAM
   402  003D36                     end_of_initialization:
   403                           	opt stack 0
   404  003D36                     __end_of__initialization:
   405                           	opt stack 0
   406  003D36  9044               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   407  003D38  9244               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   408  003D3A  0100               	movlb	0
   409  003D3C  EF3F  F018         	goto	_main	;jump to C main() function
   410                           tblptru	equ	0xFF8
   411                           tblptrh	equ	0xFF7
   412                           tblptrl	equ	0xFF6
   413                           tablat	equ	0xFF5
   414                           postinc0	equ	0xFEE
   415                           wreg	equ	0xFE8
   416                           postdec1	equ	0xFE5
   417                           fsr1h	equ	0xFE2
   418                           fsr1l	equ	0xFE1
   419                           
   420                           	psect	bssCOMRAM
   421  000029                     __pbssCOMRAM:
   422                           	opt stack 0
   423  000029                     _vTickReading:
   424                           	opt stack 0
   425  000029                     	ds	6
   426  00002F                     _m_tmpLong:
   427                           	opt stack 0
   428  00002F                     	ds	4
   429  000033                     _UDPRxCount:
   430                           	opt stack 0
   431  000033                     	ds	2
   432  000035                     _m_tmpInt:
   433                           	opt stack 0
   434  000035                     	ds	2
   435  000037                     _wGetOffset:
   436                           	opt stack 0
   437  000037                     	ds	2
   438  000039                     _wPutOffset:
   439                           	opt stack 0
   440  000039                     	ds	2
   441  00003B                     _Flags:
   442                           	opt stack 0
   443  00003B                     	ds	1
   444  00003C                     _WasDiscarded:
   445                           	opt stack 0
   446  00003C                     	ds	1
   447  00003D                     _doorIndicatorState:
   448                           	opt stack 0
   449  00003D                     	ds	1
   450  00003E                     _m_doorIndicatorInvertPolarityFlag:
   451                           	opt stack 0
   452  00003E                     	ds	1
   453  00003F                     _m_doorSwitchPressedTooLongFunctionalityIsActiveFlag:
   454                           	opt stack 0
   455  00003F                     	ds	1
   456  000040                     _m_flashDiodeEnable:
   457                           	opt stack 0
   458  000040                     	ds	1
   459  000041                     _m_udpSocket:
   460                           	opt stack 0
   461  000041                     	ds	1
   462  000042                     _m_wiegandCounter:
   463                           	opt stack 0
   464  000042                     	ds	1
   465                           tblptru	equ	0xFF8
   466                           tblptrh	equ	0xFF7
   467                           tblptrl	equ	0xFF6
   468                           tablat	equ	0xFF5
   469                           postinc0	equ	0xFEE
   470                           wreg	equ	0xFE8
   471                           postdec1	equ	0xFE5
   472                           fsr1h	equ	0xFE2
   473                           fsr1l	equ	0xFE1
   474                           
   475                           	psect	dataCOMRAM
   476  000043                     __pdataCOMRAM:
   477                           	opt stack 0
   478  000043                     _SocketWithRxData:
   479                           	opt stack 0
   480  000043                     	ds	1
   481                           tblptru	equ	0xFF8
   482                           tblptrh	equ	0xFF7
   483                           tblptrl	equ	0xFF6
   484                           tablat	equ	0xFF5
   485                           postinc0	equ	0xFEE
   486                           wreg	equ	0xFE8
   487                           postdec1	equ	0xFE5
   488                           fsr1h	equ	0xFE2
   489                           fsr1l	equ	0xFE1
   490                           
   491                           	psect	bssBANK0
   492  0000C7                     __pbssBANK0:
   493                           	opt stack 0
   494  0000C7                     _UDPTxCount:
   495                           	opt stack 0
   496  0000C7                     	ds	2
   497  0000C9                     _m_bytesAvailable:
   498                           	opt stack 0
   499  0000C9                     	ds	2
   500  0000CB                     _m_bytesRead:
   501                           	opt stack 0
   502  0000CB                     	ds	2
   503  0000CD                     _IPHeaderLen:
   504                           	opt stack 0
   505  0000CD                     	ds	1
   506  0000CE                     _activeUDPSocket:
   507                           	opt stack 0
   508  0000CE                     	ds	1
   509  0000CF                     _doorSwitchState:
   510                           	opt stack 0
   511  0000CF                     	ds	1
   512  0000D0                     _g_wiegandFlag:
   513                           	opt stack 0
   514  0000D0                     	ds	1
   515  0000D1                     _isDoorIndicatorOpenFlagCachedValue:
   516                           	opt stack 0
   517  0000D1                     	ds	1
   518  0000D2                     _m_codeLength:
   519                           	opt stack 0
   520  0000D2                     	ds	1
   521  0000D3                     _m_doorIndicatorOpenTooLongFunctionalityActiveFlag:
   522                           	opt stack 0
   523  0000D3                     	ds	1
   524  0000D4                     _m_doorSwitchInvertPolarityFlag:
   525                           	opt stack 0
   526  0000D4                     	ds	1
   527  0000D5                     _m_flashDiodeState:
   528                           	opt stack 0
   529  0000D5                     	ds	1
   530  0000D6                     _m_keyPressedFlag:
   531                           	opt stack 0
   532  0000D6                     	ds	1
   533  0000D7                     _m_openDoorFlag:
   534                           	opt stack 0
   535  0000D7                     	ds	1
   536  0000D8                     _m_state:
   537                           	opt stack 0
   538  0000D8                     	ds	1
   539  0000D9                     _DHCPClient:
   540                           	opt stack 0
   541  0000D9                     	ds	32
   542  0000F9                     _g_serializedMACAddress:
   543                           	opt stack 0
   544  0000F9                     	ds	6
   545                           tblptru	equ	0xFF8
   546                           tblptrh	equ	0xFF7
   547                           tblptrl	equ	0xFF6
   548                           tablat	equ	0xFF5
   549                           postinc0	equ	0xFEE
   550                           wreg	equ	0xFE8
   551                           postdec1	equ	0xFE5
   552                           fsr1h	equ	0xFE2
   553                           fsr1l	equ	0xFE1
   554                           
   555                           	psect	bssBANK1
   556  000100                     __pbssBANK1:
   557                           	opt stack 0
   558  000100                     ARPProcess@Target:
   559                           	opt stack 0
   560  000100                     	ds	10
   561  00010A                     _Cache:
   562                           	opt stack 0
   563  00010A                     	ds	10
   564  000114                     _m_userCode:
   565                           	opt stack 0
   566  000114                     	ds	8
   567  00011C                     CalcIPBufferChecksum@F7587:
   568                           	opt stack 0
   569  00011C                     	ds	4
   570  000120                     _dwInternalTicks:
   571                           	opt stack 0
   572  000120                     	ds	4
   573  000124                     _m_beepTimer:
   574                           	opt stack 0
   575  000124                     	ds	4
   576  000128                     _m_beepValue:
   577                           	opt stack 0
   578  000128                     	ds	4
   579  00012C                     _m_doorIndicatorOpenTooLongTimer:
   580                           	opt stack 0
   581  00012C                     	ds	4
   582  000130                     _m_doorIndicatorProcessDelayTimer:
   583                           	opt stack 0
   584  000130                     	ds	4
   585  000134                     _m_doorSwitchPressedTooLongTimer:
   586                           	opt stack 0
   587  000134                     	ds	4
   588  000138                     _m_openDoorTime:
   589                           	opt stack 0
   590  000138                     	ds	4
   591  00013C                     _m_tempDoorTime:
   592                           	opt stack 0
   593  00013C                     	ds	4
   594  000140                     _m_timerFlashDiod:
   595                           	opt stack 0
   596  000140                     	ds	4
   597  000144                     _m_timerKeyPressed:
   598                           	opt stack 0
   599  000144                     	ds	4
   600  000148                     _m_timerReceiveHeartbeat:
   601                           	opt stack 0
   602  000148                     	ds	4
   603  00014C                     _m_timerSendHeartbeat:
   604                           	opt stack 0
   605  00014C                     	ds	4
   606  000150                     _m_timerState:
   607                           	opt stack 0
   608  000150                     	ds	4
   609  000154                     _m_timerWaitForPinCode:
   610                           	opt stack 0
   611  000154                     	ds	4
   612  000158                     _m_wiegandCode:
   613                           	opt stack 0
   614  000158                     	ds	4
   615  00015C                     _toRotate:
   616                           	opt stack 0
   617  00015C                     	ds	4
   618  000160                     main@localTimer:
   619                           	opt stack 0
   620  000160                     	ds	4
   621  000164                     UDPOpenEx@NextPort:
   622                           	opt stack 0
   623  000164                     	ds	2
   624  000166                     _CurrentPacketLocation:
   625                           	opt stack 0
   626  000166                     	ds	2
   627  000168                     _NextPacketLocation:
   628                           	opt stack 0
   629  000168                     	ds	2
   630  00016A                     __Identifier:
   631                           	opt stack 0
   632  00016A                     	ds	2
   633  00016C                     _m_sentBytes:
   634                           	opt stack 0
   635  00016C                     	ds	2
   636  00016E                     _m_waitForCodeTime:
   637                           	opt stack 0
   638  00016E                     	ds	2
   639  000170                     _wTXWatchdog:
   640                           	opt stack 0
   641  000170                     	ds	2
   642  000172                     ARPProcess@smARP:
   643                           	opt stack 0
   644  000172                     	ds	1
   645  000173                     StackInit@once:
   646                           	opt stack 0
   647  000173                     	ds	1
   648  000174                     StackTask@bLastLinkState:
   649                           	opt stack 0
   650  000174                     	ds	1
   651  000175                     _DHCPClientInitializedOnce:
   652                           	opt stack 0
   653  000175                     	ds	1
   654  000176                     _m_beepFlag:
   655                           	opt stack 0
   656  000176                     	ds	1
   657  000177                     _m_timer2postscaler:
   658                           	opt stack 0
   659  000177                     	ds	1
   660  000178                     _networkState:
   661                           	opt stack 0
   662  000178                     	ds	1
   663  000179                     _AppConfig:
   664                           	opt stack 0
   665  000179                     	ds	51
   666  0001AC                     _m_NBSNodeInfo:
   667                           	opt stack 0
   668  0001AC                     	ds	10
   669  0001B6                     _remoteNode:
   670                           	opt stack 0
   671  0001B6                     	ds	10
   672  0001C0                     _m_config:
   673                           	opt stack 0
   674  0001C0                     	ds	8
   675                           tblptru	equ	0xFF8
   676                           tblptrh	equ	0xFF7
   677                           tblptrl	equ	0xFF6
   678                           tablat	equ	0xFF5
   679                           postinc0	equ	0xFEE
   680                           wreg	equ	0xFE8
   681                           postdec1	equ	0xFE5
   682                           fsr1h	equ	0xFE2
   683                           fsr1l	equ	0xFE1
   684                           
   685                           	psect	dataBANK1
   686  0001C8                     __pdataBANK1:
   687                           	opt stack 0
   688  0001C8                     InitializeBoard@F7567:
   689                           	opt stack 0
   690  0001C8                     	ds	18
   691  0001DA                     _dwLFSRRandSeed:
   692                           	opt stack 0
   693  0001DA                     	ds	4
   694  0001DE                     _m_doorIndicatorOpenTooLongTimerStartValue:
   695                           	opt stack 0
   696  0001DE                     	ds	4
   697  0001E2                     _m_doorSwitchPressedTooLongTimerStartValue:
   698                           	opt stack 0
   699  0001E2                     	ds	4
   700  0001E6                     _LastPutSocket:
   701                           	opt stack 0
   702  0001E6                     	ds	1
   703  0001E7                     _m_firstConnectionAfterBootFlag:
   704                           	opt stack 0
   705  0001E7                     	ds	1
   706                           tblptru	equ	0xFF8
   707                           tblptrh	equ	0xFF7
   708                           tblptrl	equ	0xFF6
   709                           tablat	equ	0xFF5
   710                           postinc0	equ	0xFEE
   711                           wreg	equ	0xFE8
   712                           postdec1	equ	0xFE5
   713                           fsr1h	equ	0xFE2
   714                           fsr1l	equ	0xFE1
   715                           
   716                           	psect	bssBANK2
   717  000200                     __pbssBANK2:
   718                           	opt stack 0
   719  000200                     _UDPSocketInfo:
   720                           	opt stack 0
   721  000200                     	ds	230
   722                           tblptru	equ	0xFF8
   723                           tblptrh	equ	0xFF7
   724                           tblptrl	equ	0xFF6
   725                           tablat	equ	0xFF5
   726                           postinc0	equ	0xFEE
   727                           wreg	equ	0xFE8
   728                           postdec1	equ	0xFE5
   729                           fsr1h	equ	0xFE2
   730                           fsr1l	equ	0xFE1
   731                           
   732                           	psect	bssBANK3
   733  000300                     __pbssBANK3:
   734                           	opt stack 0
   735  000300                     _LCDText:
   736                           	opt stack 0
   737  000300                     	ds	33
   738  000321                     _EEPROMBuffer:
   739                           	opt stack 0
   740  000321                     	ds	32
   741                           tblptru	equ	0xFF8
   742                           tblptrh	equ	0xFF7
   743                           tblptrl	equ	0xFF6
   744                           tablat	equ	0xFF5
   745                           postinc0	equ	0xFEE
   746                           wreg	equ	0xFE8
   747                           postdec1	equ	0xFE5
   748                           fsr1h	equ	0xFE2
   749                           fsr1l	equ	0xFE1
   750                           
   751                           	psect	bssBIGRAM
   752  000341                     __pbssBIGRAM:
   753                           	opt stack 0
   754  000341                     _m_messageBuffer:
   755                           	opt stack 0
   756  000341                     	ds	500
   757                           tblptru	equ	0xFF8
   758                           tblptrh	equ	0xFF7
   759                           tblptrl	equ	0xFF6
   760                           tablat	equ	0xFF5
   761                           postinc0	equ	0xFEE
   762                           wreg	equ	0xFE8
   763                           postdec1	equ	0xFE5
   764                           fsr1h	equ	0xFE2
   765                           fsr1l	equ	0xFE1
   766                           
   767                           	psect	cstackBANK2
   768  0002E6                     __pcstackBANK2:
   769                           	opt stack 0
   770  0002E6                     CheckKeypad@buff:
   771                           	opt stack 0
   772                           
   773                           ; 8 bytes @ 0x0
   774  0002E6                     	ds	8
   775  0002EE                     CheckKeypad@messageSize:
   776                           	opt stack 0
   777                           
   778                           ; 2 bytes @ 0x8
   779  0002EE                     	ds	2
   780  0002F0                     CheckKeypad@stopIndex:
   781                           	opt stack 0
   782                           
   783                           ; 2 bytes @ 0xA
   784  0002F0                     	ds	2
   785  0002F2                     CheckKeypad@i:
   786                           	opt stack 0
   787                           
   788                           ; 2 bytes @ 0xC
   789  0002F2                     	ds	2
   790  0002F4                     CheckKeypad@wiegandCode:
   791                           	opt stack 0
   792                           
   793                           ; 4 bytes @ 0xE
   794  0002F4                     	ds	4
   795  0002F8                     CheckKeypad@index:
   796                           	opt stack 0
   797                           
   798                           ; 2 bytes @ 0x12
   799  0002F8                     	ds	2
   800                           tblptru	equ	0xFF8
   801                           tblptrh	equ	0xFF7
   802                           tblptrl	equ	0xFF6
   803                           tablat	equ	0xFF5
   804                           postinc0	equ	0xFEE
   805                           wreg	equ	0xFE8
   806                           postdec1	equ	0xFE5
   807                           fsr1h	equ	0xFE2
   808                           fsr1l	equ	0xFE1
   809                           
   810                           	psect	cstackBANK1
   811  0001E8                     __pcstackBANK1:
   812                           	opt stack 0
   813  0001E8                     SendUDPMessage@message:
   814                           	opt stack 0
   815                           
   816                           ; 2 bytes @ 0x0
   817  0001E8                     	ds	2
   818  0001EA                     SendUDPMessage@messageSize:
   819                           	opt stack 0
   820                           
   821                           ; 2 bytes @ 0x2
   822  0001EA                     	ds	2
   823  0001EC                     SendUDPMessage@udpSocket:
   824                           	opt stack 0
   825                           
   826                           ; 1 bytes @ 0x4
   827  0001EC                     	ds	1
   828  0001ED                     ??_CheckKeypad:
   829  0001ED                     ??_SendConnectionRequest:
   830  0001ED                     ??_SendHeartBeat:
   831  0001ED                     SendVersionString@textLength:
   832                           	opt stack 0
   833                           
   834                           ; 1 bytes @ 0x5
   835  0001ED                     	ds	1
   836  0001EE                     SendVersionString@index:
   837                           	opt stack 0
   838                           
   839                           ; 1 bytes @ 0x6
   840  0001EE                     	ds	1
   841  0001EF                     ??_HandleReceivedBytes:
   842                           
   843                           ; 0 bytes @ 0x7
   844  0001EF                     	ds	4
   845  0001F3                     ??_main:
   846                           
   847                           ; 0 bytes @ 0xB
   848  0001F3                     	ds	4
   849                           tblptru	equ	0xFF8
   850                           tblptrh	equ	0xFF7
   851                           tblptrl	equ	0xFF6
   852                           tablat	equ	0xFF5
   853                           postinc0	equ	0xFEE
   854                           wreg	equ	0xFE8
   855                           postdec1	equ	0xFE5
   856                           fsr1h	equ	0xFE2
   857                           fsr1l	equ	0xFE1
   858                           
   859                           	psect	cstackBANK0
   860  000060                     __pcstackBANK0:
   861                           	opt stack 0
   862  000060                     ??_LFSRRand:
   863  000060                     ??__DHCPReceive:
   864  000060                     ??_DoorIndicatorUpdateConfig:
   865  000060                     ??_DoorSwitchUpdateConfig:
   866  000060                     ??_CheckWaitForCodeTimer:
   867  000060                     ??_ARPIsResolved:
   868  000060                     ARPResolve@IPAddr:
   869                           	opt stack 0
   870  000060                     IPPutHeader@remote:
   871                           	opt stack 0
   872  000060                     MACMemCopyAsync@ReadSave:
   873                           	opt stack 0
   874  000060                     ultoa@buf:
   875                           	opt stack 0
   876  000060                     setDoorOpen@time:
   877                           	opt stack 0
   878  000060                     UDPOpenEx@remoteHost:
   879                           	opt stack 0
   880  000060                     InitializeBoard@macArray:
   881                           	opt stack 0
   882  000060                     MACGetHeader@header:
   883                           	opt stack 0
   884  000060                     CalcIPBufferChecksum@DataBuffer:
   885                           	opt stack 0
   886  000060                     ARPProcess@packet:
   887                           	opt stack 0
   888                           
   889                           ; 28 bytes @ 0x0
   890  000060                     	ds	2
   891  000062                     ??_ARPResolve:
   892  000062                     IPPutHeader@protocol:
   893                           	opt stack 0
   894  000062                     MACMemCopyAsync@WriteSave:
   895                           	opt stack 0
   896  000062                     ultoa@val:
   897                           	opt stack 0
   898                           
   899                           ; 4 bytes @ 0x2
   900  000062                     	ds	1
   901  000063                     IPPutHeader@len:
   902                           	opt stack 0
   903                           
   904                           ; 2 bytes @ 0x3
   905  000063                     	ds	1
   906  000064                     ??_HandleConfigData:
   907  000064                     __DHCPReceive@lbDone:
   908                           	opt stack 0
   909  000064                     UDPOpenEx@remoteHostType:
   910                           	opt stack 0
   911  000064                     MACMemCopyAsync@UpdateWritePointer:
   912                           	opt stack 0
   913                           
   914                           ; 1 bytes @ 0x4
   915  000064                     	ds	1
   916  000065                     __DHCPReceive@type:
   917                           	opt stack 0
   918  000065                     MACMemCopyAsync@UpdateReadPointer:
   919                           	opt stack 0
   920  000065                     UDPOpenEx@localPort:
   921                           	opt stack 0
   922  000065                     IPPutHeader@header:
   923                           	opt stack 0
   924                           
   925                           ; 20 bytes @ 0x5
   926  000065                     	ds	1
   927  000066                     __DHCPReceive@j:
   928                           	opt stack 0
   929  000066                     ultoa@base:
   930                           	opt stack 0
   931                           
   932                           ; 2 bytes @ 0x6
   933  000066                     	ds	1
   934  000067                     UDPOpenEx@remotePort:
   935                           	opt stack 0
   936  000067                     __DHCPReceive@tempServerID:
   937                           	opt stack 0
   938                           
   939                           ; 4 bytes @ 0x7
   940  000067                     	ds	1
   941  000068                     HandleConfigData@doorIndicatorPolarity:
   942                           	opt stack 0
   943  000068                     FindMatchingSocket@h:
   944                           	opt stack 0
   945  000068                     ultoa@v:
   946                           	opt stack 0
   947                           
   948                           ; 4 bytes @ 0x8
   949  000068                     	ds	1
   950  000069                     HandleConfigData@doorSwitchPolarity:
   951                           	opt stack 0
   952  000069                     UDPOpenEx@s:
   953                           	opt stack 0
   954  000069                     FindMatchingSocket@partialMatch:
   955                           	opt stack 0
   956                           
   957                           ; 1 bytes @ 0x9
   958  000069                     	ds	1
   959  00006A                     FindMatchingSocket@s:
   960                           	opt stack 0
   961  00006A                     HandleConfigData@doorOpenTooLongTime:
   962                           	opt stack 0
   963  00006A                     UDPOpenEx@p:
   964                           	opt stack 0
   965                           
   966                           ; 2 bytes @ 0xA
   967  00006A                     	ds	1
   968  00006B                     __DHCPReceive@i:
   969                           	opt stack 0
   970  00006B                     FindMatchingSocket@p:
   971                           	opt stack 0
   972                           
   973                           ; 2 bytes @ 0xB
   974  00006B                     	ds	1
   975  00006C                     ??_OpenUDPsocket:
   976  00006C                     __DHCPReceive@v:
   977                           	opt stack 0
   978  00006C                     ultoa@c:
   979                           	opt stack 0
   980  00006C                     HandleConfigData@doorSwitchPressedTooLongTime:
   981                           	opt stack 0
   982                           
   983                           ; 2 bytes @ 0xC
   984  00006C                     	ds	1
   985  00006D                     ltoa@buf:
   986                           	opt stack 0
   987                           
   988                           ; 2 bytes @ 0xD
   989  00006D                     	ds	1
   990  00006E                     HandleConfigData@doorRelayActiveTime:
   991                           	opt stack 0
   992  00006E                     _ARPResolve$5917:
   993                           	opt stack 0
   994                           
   995                           ; 4 bytes @ 0xE
   996  00006E                     	ds	1
   997  00006F                     ltoa@val:
   998                           	opt stack 0
   999                           
  1000                           ; 4 bytes @ 0xF
  1001  00006F                     	ds	1
  1002  000070                     ?_GenerateRandomDWORD:
  1003                           	opt stack 0
  1004                           
  1005                           ; 4 bytes @ 0x10
  1006  000070                     	ds	2
  1007  000072                     InitializeBoard@arrayindex:
  1008                           	opt stack 0
  1009  000072                     ARPResolve@packet:
  1010                           	opt stack 0
  1011                           
  1012                           ; 28 bytes @ 0x12
  1013  000072                     	ds	1
  1014  000073                     ltoa@base:
  1015                           	opt stack 0
  1016                           
  1017                           ; 2 bytes @ 0x13
  1018  000073                     	ds	1
  1019  000074                     ??_GenerateRandomDWORD:
  1020  000074                     InitializeBoard@macStringIndex:
  1021                           	opt stack 0
  1022  000074                     CalcIPBufferChecksum@Start:
  1023                           	opt stack 0
  1024                           
  1025                           ; 2 bytes @ 0x14
  1026  000074                     	ds	2
  1027  000076                     CalcIPBufferChecksum@DataPtr:
  1028                           	opt stack 0
  1029  000076                     GenerateRandomDWORD@w:
  1030                           	opt stack 0
  1031                           
  1032                           ; 2 bytes @ 0x16
  1033  000076                     	ds	1
  1034  000077                     CalcIPBufferChecksum@Checksum:
  1035                           	opt stack 0
  1036                           
  1037                           ; 4 bytes @ 0x17
  1038  000077                     	ds	1
  1039  000078                     GenerateRandomDWORD@dwTotalTime:
  1040                           	opt stack 0
  1041                           
  1042                           ; 4 bytes @ 0x18
  1043  000078                     	ds	3
  1044  00007B                     CalcIPBufferChecksum@ChunkLen:
  1045                           	opt stack 0
  1046                           
  1047                           ; 2 bytes @ 0x1B
  1048  00007B                     	ds	1
  1049  00007C                     GenerateRandomDWORD@vBitCount:
  1050                           	opt stack 0
  1051                           
  1052                           ; 1 bytes @ 0x1C
  1053  00007C                     	ds	1
  1054  00007D                     ?_MACCalcRxChecksum:
  1055                           	opt stack 0
  1056  00007D                     GenerateRandomDWORD@ADCON0Save:
  1057                           	opt stack 0
  1058  00007D                     UDPFlush@wReadPtrSave:
  1059                           	opt stack 0
  1060  00007D                     UDPProcess@remoteNode:
  1061                           	opt stack 0
  1062  00007D                     MACCalcRxChecksum@offset:
  1063                           	opt stack 0
  1064                           
  1065                           ; 2 bytes @ 0x1D
  1066  00007D                     	ds	1
  1067  00007E                     GenerateRandomDWORD@ADCON2Save:
  1068                           	opt stack 0
  1069                           
  1070                           ; 1 bytes @ 0x1E
  1071  00007E                     	ds	1
  1072  00007F                     GenerateRandomDWORD@T0CONSave:
  1073                           	opt stack 0
  1074  00007F                     UDPProcess@localIP:
  1075                           	opt stack 0
  1076  00007F                     UDPFlush@wChecksum:
  1077                           	opt stack 0
  1078  00007F                     MACCalcRxChecksum@len:
  1079                           	opt stack 0
  1080                           
  1081                           ; 2 bytes @ 0x1F
  1082  00007F                     	ds	1
  1083  000080                     GenerateRandomDWORD@TMR0HSave:
  1084                           	opt stack 0
  1085  000080                     UDPProcess@len:
  1086                           	opt stack 0
  1087                           
  1088                           ; 2 bytes @ 0x20
  1089  000080                     	ds	1
  1090  000081                     GenerateRandomDWORD@TMR0LSave:
  1091                           	opt stack 0
  1092  000081                     UDPFlush@p:
  1093                           	opt stack 0
  1094  000081                     MACCalcRxChecksum@RDSave:
  1095                           	opt stack 0
  1096                           
  1097                           ; 2 bytes @ 0x21
  1098  000081                     	ds	1
  1099  000082                     UDPProcess@s:
  1100                           	opt stack 0
  1101  000082                     GenerateRandomDWORD@wLastValue:
  1102                           	opt stack 0
  1103                           
  1104                           ; 2 bytes @ 0x22
  1105  000082                     	ds	1
  1106  000083                     UDPFlush@wUDPLength:
  1107                           	opt stack 0
  1108  000083                     MACCalcRxChecksum@temp:
  1109                           	opt stack 0
  1110  000083                     UDPProcess@checksums:
  1111                           	opt stack 0
  1112                           
  1113                           ; 4 bytes @ 0x23
  1114  000083                     	ds	1
  1115  000084                     GenerateRandomDWORD@randomResult:
  1116                           	opt stack 0
  1117                           
  1118                           ; 4 bytes @ 0x24
  1119  000084                     	ds	1
  1120  000085                     ICMPProcess@remote:
  1121                           	opt stack 0
  1122  000085                     IPGetHeader@remote:
  1123                           	opt stack 0
  1124  000085                     UDPFlush@h:
  1125                           	opt stack 0
  1126                           
  1127                           ; 8 bytes @ 0x25
  1128  000085                     	ds	2
  1129  000087                     IPGetHeader@protocol:
  1130                           	opt stack 0
  1131  000087                     ICMPProcess@len:
  1132                           	opt stack 0
  1133  000087                     UDPProcess@pseudoHeader:
  1134                           	opt stack 0
  1135                           
  1136                           ; 12 bytes @ 0x27
  1137  000087                     	ds	1
  1138  000088                     IPGetHeader@len:
  1139                           	opt stack 0
  1140  000088                     GenerateRandomDWORD@wTime:
  1141                           	opt stack 0
  1142                           
  1143                           ; 2 bytes @ 0x28
  1144  000088                     	ds	1
  1145  000089                     ??_IPGetHeader:
  1146  000089                     ICMPProcess@dwVal:
  1147                           	opt stack 0
  1148                           
  1149                           ; 4 bytes @ 0x29
  1150  000089                     	ds	1
  1151  00008A                     _StackInit$12046:
  1152                           	opt stack 0
  1153                           
  1154                           ; 4 bytes @ 0x2A
  1155  00008A                     	ds	3
  1156  00008D                     IPGetHeader@CalcChecksum:
  1157                           	opt stack 0
  1158  00008D                     UDPFlush@pseudoHeader:
  1159                           	opt stack 0
  1160                           
  1161                           ; 12 bytes @ 0x2D
  1162  00008D                     	ds	1
  1163  00008E                     ??_UDPTask:
  1164                           
  1165                           ; 0 bytes @ 0x2E
  1166  00008E                     	ds	1
  1167  00008F                     IPGetHeader@localIP:
  1168                           	opt stack 0
  1169                           
  1170                           ; 1 bytes @ 0x2F
  1171  00008F                     	ds	1
  1172  000090                     IPGetHeader@header:
  1173                           	opt stack 0
  1174                           
  1175                           ; 20 bytes @ 0x30
  1176  000090                     	ds	2
  1177  000092                     UDPTask@ss:
  1178                           	opt stack 0
  1179                           
  1180                           ; 1 bytes @ 0x32
  1181  000092                     	ds	1
  1182  000093                     UDPProcess@h:
  1183                           	opt stack 0
  1184                           
  1185                           ; 8 bytes @ 0x33
  1186  000093                     	ds	6
  1187  000099                     __DHCPSend@bRenewing:
  1188                           	opt stack 0
  1189                           
  1190                           ; 1 bytes @ 0x39
  1191  000099                     	ds	1
  1192  00009A                     __DHCPSend@MyIP:
  1193                           	opt stack 0
  1194                           
  1195                           ; 4 bytes @ 0x3A
  1196  00009A                     	ds	4
  1197  00009E                     __DHCPSend$6883:
  1198                           	opt stack 0
  1199                           
  1200                           ; 2 bytes @ 0x3E
  1201  00009E                     	ds	2
  1202  0000A0                     __DHCPSend@i:
  1203                           	opt stack 0
  1204                           
  1205                           ; 1 bytes @ 0x40
  1206  0000A0                     	ds	1
  1207  0000A1                     __DHCPSend@messageType:
  1208                           	opt stack 0
  1209                           
  1210                           ; 1 bytes @ 0x41
  1211  0000A1                     	ds	1
  1212  0000A2                     ??_DHCPTask:
  1213                           
  1214                           ; 0 bytes @ 0x42
  1215  0000A2                     	ds	12
  1216  0000AE                     DHCPTask@i:
  1217                           	opt stack 0
  1218                           
  1219                           ; 1 bytes @ 0x4E
  1220  0000AE                     	ds	1
  1221  0000AF                     ??_StackTask:
  1222                           
  1223                           ; 0 bytes @ 0x4F
  1224  0000AF                     	ds	12
  1225  0000BB                     StackTask@cFrameType:
  1226                           	opt stack 0
  1227                           
  1228                           ; 1 bytes @ 0x5B
  1229  0000BB                     	ds	1
  1230  0000BC                     StackTask@bCurrentLinkState:
  1231                           	opt stack 0
  1232                           
  1233                           ; 1 bytes @ 0x5C
  1234  0000BC                     	ds	1
  1235  0000BD                     StackTask@dataCount:
  1236                           	opt stack 0
  1237                           
  1238                           ; 2 bytes @ 0x5D
  1239  0000BD                     	ds	2
  1240  0000BF                     StackTask@cIPFrameType:
  1241                           	opt stack 0
  1242                           
  1243                           ; 1 bytes @ 0x5F
  1244  0000BF                     	ds	1
  1245  0000C0                     StackTask@tempLocalIP:
  1246                           	opt stack 0
  1247                           
  1248                           ; 4 bytes @ 0x60
  1249  0000C0                     	ds	4
  1250  0000C4                     SendUDPMessage@i:
  1251                           	opt stack 0
  1252                           
  1253                           ; 2 bytes @ 0x64
  1254  0000C4                     	ds	2
  1255  0000C6                     ??_SendVersionString:
  1256                           
  1257                           ; 0 bytes @ 0x66
  1258  0000C6                     	ds	1
  1259                           tblptru	equ	0xFF8
  1260                           tblptrh	equ	0xFF7
  1261                           tblptrl	equ	0xFF6
  1262                           tablat	equ	0xFF5
  1263                           postinc0	equ	0xFEE
  1264                           wreg	equ	0xFE8
  1265                           postdec1	equ	0xFE5
  1266                           fsr1h	equ	0xFE2
  1267                           fsr1l	equ	0xFE1
  1268                           
  1269                           	psect	cstackCOMRAM
  1270  000001                     __pcstackCOMRAM:
  1271                           	opt stack 0
  1272  000001                     ?i1_TickGet:
  1273                           	opt stack 0
  1274  000001                     
  1275                           ; 1 bytes @ 0x0
  1276  000001                     	ds	4
  1277  000005                     i1TickGet@dw:
  1278                           	opt stack 0
  1279                           
  1280                           ; 4 bytes @ 0x4
  1281  000005                     	ds	4
  1282  000009                     ??_BeepTimerUpdate:
  1283                           
  1284                           ; 0 bytes @ 0x8
  1285  000009                     	ds	12
  1286  000015                     ??_LowISR:
  1287                           
  1288                           ; 0 bytes @ 0x14
  1289  000015                     	ds	7
  1290  00001C                     ?_NDCGetRelayActiveTime:
  1291                           	opt stack 0
  1292  00001C                     ?_LFSRRand:
  1293                           	opt stack 0
  1294  00001C                     ?_MACGetArray:
  1295                           	opt stack 0
  1296  00001C                     ?_MACSetReadPtr:
  1297                           	opt stack 0
  1298  00001C                     ?_ReadPHYReg:
  1299                           	opt stack 0
  1300  00001C                     ?_swaps:
  1301                           	opt stack 0
  1302  00001C                     ?_CalcIPChecksum:
  1303                           	opt stack 0
  1304  00001C                     ?___awdiv:
  1305                           	opt stack 0
  1306  00001C                     ?_TickGet:
  1307                           	opt stack 0
  1308  00001C                     ?_GetWiegandCode:
  1309                           	opt stack 0
  1310  00001C                     ?_TickGetDiv256:
  1311                           	opt stack 0
  1312  00001C                     ?___lldiv:
  1313                           	opt stack 0
  1314  00001C                     ?___llmod:
  1315                           	opt stack 0
  1316  00001C                     MiscHexStringToByte@result:
  1317                           	opt stack 0
  1318  00001C                     UDPClose@s:
  1319                           	opt stack 0
  1320  00001C                     UDPGet@v:
  1321                           	opt stack 0
  1322  00001C                     MACPut@val:
  1323                           	opt stack 0
  1324  00001C                     DelayMs@ms:
  1325                           	opt stack 0
  1326  00001C                     swaps@v:
  1327                           	opt stack 0
  1328  00001C                     CalcIPChecksum@count:
  1329                           	opt stack 0
  1330  00001C                     strupr@s:
  1331                           	opt stack 0
  1332  00001C                     ARPIsResolved@IPAddr:
  1333                           	opt stack 0
  1334  00001C                     MACDiscardRx@NewRXRDLocation:
  1335                           	opt stack 0
  1336  00001C                     MACSetReadPtrInRx@offset:
  1337                           	opt stack 0
  1338  00001C                     MACSetWritePtr@address:
  1339                           	opt stack 0
  1340  00001C                     MACSetReadPtr@address:
  1341                           	opt stack 0
  1342  00001C                     MACGetArray@val:
  1343                           	opt stack 0
  1344  00001C                     MACPutArray@val:
  1345                           	opt stack 0
  1346  00001C                     WritePHYReg@Data:
  1347                           	opt stack 0
  1348  00001C                     ___awdiv@dividend:
  1349                           	opt stack 0
  1350  00001C                     memcpy@d1:
  1351                           	opt stack 0
  1352  00001C                     memset@p1:
  1353                           	opt stack 0
  1354  00001C                     ___lldiv@dividend:
  1355                           	opt stack 0
  1356  00001C                     ___llmod@dividend:
  1357                           	opt stack 0
  1358                           
  1359                           ; 4 bytes @ 0x1B
  1360  00001C                     	ds	1
  1361  00001D                     MiscHexStringToByte@value:
  1362                           	opt stack 0
  1363  00001D                     DHCPInit@i:
  1364                           	opt stack 0
  1365  00001D                     UDPInit@s:
  1366                           	opt stack 0
  1367  00001D                     UDPPut@v:
  1368                           	opt stack 0
  1369  00001D                     MACMemCopyAsync@destAddr:
  1370                           	opt stack 0
  1371                           
  1372                           ; 2 bytes @ 0x1C
  1373  00001D                     	ds	1
  1374  00001E                     ??_MACSetReadPtrInRx:
  1375  00001E                     ??_CalcIPChecksum:
  1376  00001E                     MiscHexStringToByte@tmpByte:
  1377                           	opt stack 0
  1378  00001E                     LFSRRand@i:
  1379                           	opt stack 0
  1380  00001E                     swaps@b:
  1381                           	opt stack 0
  1382  00001E                     strupr@c:
  1383                           	opt stack 0
  1384  00001E                     ReadPHYReg@Register:
  1385                           	opt stack 0
  1386  00001E                     WritePHYReg@Register:
  1387                           	opt stack 0
  1388  00001E                     ARPIsResolved@MACAddr:
  1389                           	opt stack 0
  1390  00001E                     MACSetReadPtr@oldVal:
  1391                           	opt stack 0
  1392  00001E                     MACGetArray@len:
  1393                           	opt stack 0
  1394  00001E                     MACPutArray@len:
  1395                           	opt stack 0
  1396  00001E                     ___awdiv@divisor:
  1397                           	opt stack 0
  1398  00001E                     memcpy@s1:
  1399                           	opt stack 0
  1400  00001E                     memset@c:
  1401                           	opt stack 0
  1402  00001E                     DelayMs@_dcnt:
  1403                           	opt stack 0
  1404                           
  1405                           ; 4 bytes @ 0x1D
  1406  00001E                     	ds	1
  1407  00001F                     ?___lwmod:
  1408                           	opt stack 0
  1409  00001F                     WritePHYReg@GIESave:
  1410                           	opt stack 0
  1411  00001F                     InitializeBoard@a:
  1412                           	opt stack 0
  1413  00001F                     swaps@t:
  1414                           	opt stack 0
  1415  00001F                     strupr@t:
  1416                           	opt stack 0
  1417  00001F                     MACMemCopyAsync@sourceAddr:
  1418                           	opt stack 0
  1419  00001F                     ReadPHYReg@Result:
  1420                           	opt stack 0
  1421  00001F                     ___lwmod@dividend:
  1422                           	opt stack 0
  1423  00001F                     LFSRSeedRand@dwSeed:
  1424                           	opt stack 0
  1425                           
  1426                           ; 4 bytes @ 0x1E
  1427  00001F                     	ds	1
  1428  000020                     ?_UDPPutArray:
  1429                           	opt stack 0
  1430  000020                     MACGetArray@i:
  1431                           	opt stack 0
  1432  000020                     ___awdiv@counter:
  1433                           	opt stack 0
  1434  000020                     CalcIPChecksum@i:
  1435                           	opt stack 0
  1436  000020                     UDPSetTxBuffer@wOffset:
  1437                           	opt stack 0
  1438  000020                     UDPPutArray@cData:
  1439                           	opt stack 0
  1440  000020                     MACPutHeader@remote:
  1441                           	opt stack 0
  1442  000020                     MACSetReadPtrInRx@ReadPT:
  1443                           	opt stack 0
  1444  000020                     memcpy@n:
  1445                           	opt stack 0
  1446  000020                     memset@n:
  1447                           	opt stack 0
  1448  000020                     GetWiegandCode@tmp:
  1449                           	opt stack 0
  1450  000020                     TickGet@dw:
  1451                           	opt stack 0
  1452  000020                     TickGetDiv256@dw:
  1453                           	opt stack 0
  1454  000020                     ___lldiv@divisor:
  1455                           	opt stack 0
  1456  000020                     ___llmod@divisor:
  1457                           	opt stack 0
  1458                           
  1459                           ; 4 bytes @ 0x1F
  1460  000020                     	ds	1
  1461  000021                     ??_InitializeBoard:
  1462  000021                     SwapARPPacket@p:
  1463                           	opt stack 0
  1464  000021                     SwapIPHeader@h:
  1465                           	opt stack 0
  1466  000021                     ___awdiv@sign:
  1467                           	opt stack 0
  1468  000021                     FormatNetBIOSName@Name:
  1469                           	opt stack 0
  1470  000021                     MACMemCopyAsync@len:
  1471                           	opt stack 0
  1472  000021                     MACGetArray@w:
  1473                           	opt stack 0
  1474  000021                     ___lwmod@divisor:
  1475                           	opt stack 0
  1476                           
  1477                           ; 2 bytes @ 0x20
  1478  000021                     	ds	1
  1479  000022                     DelayMs@i:
  1480                           	opt stack 0
  1481  000022                     CalcIPChecksum@buffer:
  1482                           	opt stack 0
  1483  000022                     MACPutHeader@type:
  1484                           	opt stack 0
  1485  000022                     IPSetRxBuffer@Offset:
  1486                           	opt stack 0
  1487  000022                     UDPPutArray@wDataLen:
  1488                           	opt stack 0
  1489  000022                     ___awdiv@quotient:
  1490                           	opt stack 0
  1491  000022                     memcpy@d:
  1492                           	opt stack 0
  1493  000022                     memset@p:
  1494                           	opt stack 0
  1495                           
  1496                           ; 2 bytes @ 0x21
  1497  000022                     	ds	1
  1498  000023                     ??_MACMemCopyAsync:
  1499  000023                     ?_UDPGetArray:
  1500                           	opt stack 0
  1501  000023                     ?_CalcIPBufferChecksum:
  1502                           	opt stack 0
  1503  000023                     CalcIPChecksum@val:
  1504                           	opt stack 0
  1505  000023                     FormatNetBIOSName@i:
  1506                           	opt stack 0
  1507  000023                     ___lwmod@counter:
  1508                           	opt stack 0
  1509  000023                     UDPGetArray@cData:
  1510                           	opt stack 0
  1511  000023                     MACPutHeader@dataLen:
  1512                           	opt stack 0
  1513  000023                     CalcIPBufferChecksum@len:
  1514                           	opt stack 0
  1515                           
  1516                           ; 2 bytes @ 0x22
  1517  000023                     	ds	1
  1518  000024                     ??_KeyPressedResetIdleTimer:
  1519  000024                     ??_CheckFlashingLEDTimer:
  1520  000024                     ??_CheckHeartBeatTimer:
  1521  000024                     ??_CheckConnectionResponseWaitTimer:
  1522  000024                     ??_CheckConfigDataWaitTimer:
  1523  000024                     MACFlush@i:
  1524                           	opt stack 0
  1525  000024                     ___llmod@counter:
  1526                           	opt stack 0
  1527  000024                     DoorIndicatorUpdateConfig@configData:
  1528                           	opt stack 0
  1529  000024                     DoorSwitchUpdateConfig@configData:
  1530                           	opt stack 0
  1531  000024                     UDPSetRxBuffer@wOffset:
  1532                           	opt stack 0
  1533  000024                     UDPPutArray@wTemp:
  1534                           	opt stack 0
  1535  000024                     memcpy@s:
  1536                           	opt stack 0
  1537  000024                     Beep@value:
  1538                           	opt stack 0
  1539  000024                     CalcIPChecksum@sum:
  1540                           	opt stack 0
  1541  000024                     ___lldiv@quotient:
  1542                           	opt stack 0
  1543                           
  1544                           ; 4 bytes @ 0x23
  1545  000024                     	ds	1
  1546  000025                     ??_CalcIPBufferChecksum:
  1547  000025                     ?_UDPIsPutReady:
  1548                           	opt stack 0
  1549  000025                     UDPGetArray@wDataLen:
  1550                           	opt stack 0
  1551  000025                     _MACPutHeader$10599:
  1552                           	opt stack 0
  1553                           
  1554                           ; 2 bytes @ 0x24
  1555  000025                     	ds	1
  1556  000026                     ?_UDPIsGetReady:
  1557                           	opt stack 0
  1558  000026                     FindMatchingSocket@remoteNode:
  1559                           	opt stack 0
  1560  000026                     MACGetHeader@remote:
  1561                           	opt stack 0
  1562                           
  1563                           ; 2 bytes @ 0x25
  1564  000026                     	ds	1
  1565  000027                     ??_ARPPut:
  1566  000027                     ??_MACCalcRxChecksum:
  1567  000027                     LFSRSeedRand@i:
  1568                           	opt stack 0
  1569  000027                     UDPIsPutReady@s:
  1570                           	opt stack 0
  1571  000027                     UDPGetArray@wBytesAvailable:
  1572                           	opt stack 0
  1573                           
  1574                           ; 2 bytes @ 0x26
  1575  000027                     	ds	1
  1576  000028                     ARPPut@packet:
  1577                           	opt stack 0
  1578  000028                     UDPIsGetReady@s:
  1579                           	opt stack 0
  1580  000028                     FindMatchingSocket@localIP:
  1581                           	opt stack 0
  1582  000028                     MACGetHeader@type:
  1583                           	opt stack 0
  1584  000028                     ___lldiv@counter:
  1585                           	opt stack 0
  1586                           
  1587                           ; 1 bytes @ 0x27
  1588  000028                     	ds	1
  1589  000029                     tblptru	equ	0xFF8
  1590                           tblptrh	equ	0xFF7
  1591                           tblptrl	equ	0xFF6
  1592                           tablat	equ	0xFF5
  1593                           postinc0	equ	0xFEE
  1594                           wreg	equ	0xFE8
  1595                           postdec1	equ	0xFE5
  1596                           fsr1h	equ	0xFE2
  1597                           fsr1l	equ	0xFE1
  1598                           
  1599                           ; 0 bytes @ 0x28
  1600 ;;
  1601 ;;Main: autosize = 0, tempsize = 4, incstack = 0, save=0
  1602 ;;
  1603 ;; *************** function _main *****************
  1604 ;; Defined at:
  1605 ;;		line 111 in file "../src/main.c"
  1606 ;; Parameters:    Size  Location     Type
  1607 ;;		None
  1608 ;; Auto vars:     Size  Location     Type
  1609 ;;		None
  1610 ;; Return value:  Size  Location     Type
  1611 ;;		None               void
  1612 ;; Registers used:
  1613 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1614 ;; Tracked objects:
  1615 ;;		On entry : 0/0
  1616 ;;		On exit  : 0/0
  1617 ;;		Unchanged: 0/0
  1618 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1619 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1620 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1621 ;;      Temps:          0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1622 ;;      Totals:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1623 ;;Total ram usage:        4 bytes
  1624 ;; Hardware stack levels required when called:   19
  1625 ;; This function calls:
  1626 ;;		_DHCPEnable
  1627 ;;		_DHCPIsBound
  1628 ;;		_InitAppConfig
  1629 ;;		_InitializeBoard
  1630 ;;		_MACIsLinked
  1631 ;;		_NDCFSM
  1632 ;;		_NDCInitData
  1633 ;;		_NDCResetState
  1634 ;;		_ProcessDoorIndicator
  1635 ;;		_ProcessDoorSwitch
  1636 ;;		_StackInit
  1637 ;;		_StackTask
  1638 ;;		_TickGet
  1639 ;;		_TickInit
  1640 ;;		_XEEInit
  1641 ;; This function is called by:
  1642 ;;		Startup code after reset
  1643 ;; This function uses a non-reentrant model
  1644 ;;
  1645                           
  1646                           	psect	text0
  1647  00307E                     __ptext0:
  1648                           	opt stack 0
  1649  00307E                     _main:
  1650                           	opt stack 12
  1651                           
  1652                           ;main.c: 112: static TICK localTimer = 0;
  1653                           ;main.c: 115: (LATFbits.LATF2) = 1;
  1654                           
  1655                           ;incstack = 0
  1656  00307E  848E               	bsf	3982,2,c	;volatile
  1657                           
  1658                           ;main.c: 116: (LATFbits.LATF3) = 0;
  1659  003080  968E               	bcf	3982,3,c	;volatile
  1660                           
  1661                           ;main.c: 120: XEEInit();
  1662  003082  ECE0  F029         	call	_XEEInit	;wreg free
  1663                           
  1664                           ;main.c: 123: InitializeBoard(0);
  1665  003086  6A20               	clrf	InitializeBoard@a+1,c
  1666  003088  6A1F               	clrf	InitializeBoard@a,c
  1667  00308A  ECB1  F01B         	call	_InitializeBoard	;wreg free
  1668                           
  1669                           ; BSR set to: 0
  1670                           ;main.c: 126: TickInit();
  1671  00308E  EC2E  F02A         	call	_TickInit	;wreg free
  1672                           
  1673                           ; BSR set to: 0
  1674                           ;main.c: 128: AppConfig.Flags.bIsDHCPEnabled = 1;
  1675  003092  0101               	movlb	1	; () banked
  1676  003094  8DA5               	bsf	(_AppConfig+44)& (0+255),6,b
  1677                           
  1678                           ; BSR set to: 1
  1679                           ;main.c: 129: DHCPEnable(0);
  1680  003096  ECAF  F029         	call	_DHCPEnable
  1681                           
  1682                           ; BSR set to: 0
  1683                           ;main.c: 131: InitAppConfig();
  1684  00309A  ECBC  F01D         	call	_InitAppConfig	;wreg free
  1685                           
  1686                           ;main.c: 135: StackInit();
  1687  00309E  ECE9  F024         	call	_StackInit	;wreg free
  1688                           
  1689                           ;main.c: 142: NDCInitData();
  1690  0030A2  EC24  F029         	call	_NDCInitData	;wreg free
  1691  0030A6                     l2211:
  1692  0030A6  0004               	clrwdt		;# 
  1693                           
  1694                           ;main.c: 148: if (TickGet() - localTimer > (((((40000000ul) / 4)+128ull)/256ull))) {
  1695  0030A8  EC9C  F028         	call	_TickGet	;wreg free
  1696  0030AC  0101               	movlb	1	; () banked
  1697  0030AE  5160               	movf	main@localTimer& (0+255),w,b
  1698  0030B0  5C1C               	subwf	?_TickGet,w,c
  1699  0030B2  6FF3               	movwf	??_main& (0+255),b
  1700  0030B4  5161               	movf	(main@localTimer+1)& (0+255),w,b
  1701  0030B6  581D               	subwfb	?_TickGet+1,w,c
  1702  0030B8  6FF4               	movwf	(??_main+1)& (0+255),b
  1703  0030BA  5162               	movf	(main@localTimer+2)& (0+255),w,b
  1704  0030BC  581E               	subwfb	?_TickGet+2,w,c
  1705  0030BE  6FF5               	movwf	(??_main+2)& (0+255),b
  1706  0030C0  5163               	movf	(main@localTimer+3)& (0+255),w,b
  1707  0030C2  581F               	subwfb	?_TickGet+3,w,c
  1708  0030C4  6FF6               	movwf	(??_main+3)& (0+255),b
  1709  0030C6  51F6               	movf	(??_main+3)& (0+255),w,b
  1710  0030C8  11F5               	iorwf	(??_main+2)& (0+255),w,b
  1711  0030CA  E105               	bnz	u11020
  1712  0030CC  0E98               	movlw	152
  1713  0030CE  5DF3               	subwf	??_main& (0+255),w,b
  1714  0030D0  0E98               	movlw	152
  1715  0030D2  59F4               	subwfb	(??_main+1)& (0+255),w,b
  1716  0030D4  E30B               	bnc	l11764
  1717  0030D6                     u11020:
  1718                           
  1719                           ; BSR set to: 1
  1720                           ;main.c: 149: localTimer = TickGet();
  1721  0030D6  EC9C  F028         	call	_TickGet	;wreg free
  1722  0030DA  C01C  F160         	movff	?_TickGet,main@localTimer
  1723  0030DE  C01D  F161         	movff	?_TickGet+1,main@localTimer+1
  1724  0030E2  C01E  F162         	movff	?_TickGet+2,main@localTimer+2
  1725  0030E6  C01F  F163         	movff	?_TickGet+3,main@localTimer+3
  1726                           
  1727                           ;main.c: 150: (LATCbits.LATC2) ^= 1;
  1728  0030EA  748B               	btg	3979,2,c	;volatile
  1729  0030EC                     l11764:
  1730                           
  1731                           ;main.c: 151: }
  1732                           ;main.c: 153: StackTask();
  1733  0030EC  EC41  F011         	call	_StackTask	;wreg free
  1734                           
  1735                           ;main.c: 154: ProcessDoorIndicator();
  1736  0030F0  EC7B  F029         	call	_ProcessDoorIndicator	;wreg free
  1737                           
  1738                           ;main.c: 155: ProcessDoorSwitch();
  1739  0030F4  EC60  F029         	call	_ProcessDoorSwitch	;wreg free
  1740                           
  1741                           ;main.c: 156: NDCFSM();
  1742  0030F8  EC53  F01B         	call	_NDCFSM	;wreg free
  1743                           
  1744                           ;main.c: 158: switch (networkState) {
  1745  0030FC  D024               	goto	l11796
  1746  0030FE                     l2214:
  1747                           
  1748                           ; BSR set to: 1
  1749                           ;main.c: 160: if (AppConfig.Flags.bIsDHCPEnabled == 1) {
  1750  0030FE  ADA5               	btfss	(_AppConfig+44)& (0+255),6,b
  1751  003100  D00C               	goto	l11778
  1752                           
  1753                           ; BSR set to: 1
  1754                           ;main.c: 161: if (MACIsLinked() && DHCPIsBound(0))
  1755  003102  ECFF  F029         	call	_MACIsLinked	;wreg free
  1756  003106  0900               	iorlw	0
  1757  003108  E0CE               	bz	l2211
  1758  00310A  EC5F  F02A         	call	_DHCPIsBound
  1759  00310E  0900               	iorlw	0
  1760  003110  E0CA               	bz	l2211
  1761  003112                     l11776:
  1762                           
  1763                           ;main.c: 162: networkState = STATE_RUN;
  1764  003112  0E01               	movlw	1
  1765  003114  0101               	movlb	1	; () banked
  1766  003116  6F78               	movwf	_networkState& (0+255),b
  1767  003118  D7C6               	goto	l2211
  1768  00311A                     l11778:
  1769                           
  1770                           ; BSR set to: 1
  1771                           ;main.c: 164: if (MACIsLinked())
  1772  00311A  ECFF  F029         	call	_MACIsLinked	;wreg free
  1773  00311E  0900               	iorlw	0
  1774  003120  E1F8               	bnz	l11776
  1775  003122  D7C1               	goto	l2211
  1776  003124                     l11782:
  1777                           
  1778                           ; BSR set to: 1
  1779                           ;main.c: 170: if (!MACIsLinked()) {
  1780  003124  ECFF  F029         	call	_MACIsLinked	;wreg free
  1781  003128  0900               	iorlw	0
  1782  00312A  E105               	bnz	l2221
  1783  00312C                     l11784:
  1784                           
  1785                           ;main.c: 171: NDCResetState();
  1786  00312C  ECD4  F028         	call	_NDCResetState	;wreg free
  1787                           
  1788                           ; BSR set to: 0
  1789                           ;main.c: 172: networkState = STATE_INIT;
  1790  003130  0101               	movlb	1	; () banked
  1791  003132  6B78               	clrf	_networkState& (0+255),b
  1792                           
  1793                           ;main.c: 173: break;
  1794  003134  D7B8               	goto	l2211
  1795  003136                     l2221:
  1796                           
  1797                           ;main.c: 174: }
  1798                           ;main.c: 176: if (AppConfig.Flags.bIsDHCPEnabled == 1) {
  1799  003136  0101               	movlb	1	; () banked
  1800  003138  ADA5               	btfss	(_AppConfig+44)& (0+255),6,b
  1801  00313A  D7B5               	goto	l2211
  1802                           
  1803                           ; BSR set to: 1
  1804                           ;main.c: 177: if (!DHCPIsBound(0)) {
  1805  00313C  EC5F  F02A         	call	_DHCPIsBound
  1806  003140  0900               	iorlw	0
  1807  003142  E0F4               	bz	l11784
  1808  003144  D7B0               	goto	l2211
  1809  003146                     l11796:
  1810  003146  0101               	movlb	1	; () banked
  1811  003148  5178               	movf	_networkState& (0+255),w,b
  1812                           
  1813                           ; Switch size 1, requested type "speed"
  1814                           ; Number of cases is 2, Range of values is 0 to 1
  1815                           ; switch strategies available:
  1816                           ; Name         Instructions Cycles
  1817                           ; simple_byte            7     4 (average)
  1818                           ;	Chosen strategy is simple_byte
  1819  00314A  E0D9               	bz	l2214
  1820  00314C  0A01               	xorlw	1	; case 1
  1821  00314E  E0EA               	bz	l11782
  1822  003150  D7AA               	goto	l2211
  1823  003152                     __end_of_main:
  1824                           	opt stack 0
  1825                           tblptru	equ	0xFF8
  1826                           tblptrh	equ	0xFF7
  1827                           tblptrl	equ	0xFF6
  1828                           tablat	equ	0xFF5
  1829                           postinc0	equ	0xFEE
  1830                           wreg	equ	0xFE8
  1831                           postdec1	equ	0xFE5
  1832                           fsr1h	equ	0xFE2
  1833                           fsr1l	equ	0xFE1
  1834                           
  1835 ;; *************** function _XEEInit *****************
  1836 ;; Defined at:
  1837 ;;		line 140 in file "../framework/tcpip/src/common/spi_eeprom.c"
  1838 ;; Parameters:    Size  Location     Type
  1839 ;;		None
  1840 ;; Auto vars:     Size  Location     Type
  1841 ;;		None
  1842 ;; Return value:  Size  Location     Type
  1843 ;;		None               void
  1844 ;; Registers used:
  1845 ;;		wreg, status,2
  1846 ;; Tracked objects:
  1847 ;;		On entry : 0/0
  1848 ;;		On exit  : 0/0
  1849 ;;		Unchanged: 0/0
  1850 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1851 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1852 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1853 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1854 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1855 ;;Total ram usage:        0 bytes
  1856 ;; Hardware stack levels used:    1
  1857 ;; Hardware stack levels required when called:    6
  1858 ;; This function calls:
  1859 ;;		Nothing
  1860 ;; This function is called by:
  1861 ;;		_main
  1862 ;; This function uses a non-reentrant model
  1863 ;;
  1864                           
  1865                           	psect	text1
  1866  0053C0                     __ptext1:
  1867                           	opt stack 0
  1868  0053C0                     _XEEInit:
  1869                           	opt stack 24
  1870                           
  1871                           ;spi_eeprom.c: 142: (LATDbits.LATD7) = 1;
  1872                           
  1873                           ;incstack = 0
  1874  0053C0  8E8C               	bsf	3980,7,c	;volatile
  1875                           
  1876                           ;spi_eeprom.c: 143: (TRISDbits.TRISD7) = 0;
  1877  0053C2  9E95               	bcf	3989,7,c	;volatile
  1878                           
  1879                           ;spi_eeprom.c: 145: (TRISCbits.TRISC3) = 0;
  1880  0053C4  9694               	bcf	3988,3,c	;volatile
  1881                           
  1882                           ;spi_eeprom.c: 146: (TRISCbits.TRISC4) = 1;
  1883  0053C6  8894               	bsf	3988,4,c	;volatile
  1884                           
  1885                           ;spi_eeprom.c: 147: (TRISCbits.TRISC5) = 0;
  1886  0053C8  9A94               	bcf	3988,5,c	;volatile
  1887                           
  1888                           ;spi_eeprom.c: 149: {(PIR1bits.SSP1IF) = 0;};
  1889  0053CA  969E               	bcf	3998,3,c	;volatile
  1890                           
  1891                           ;spi_eeprom.c: 159: (SSP1CON1) = (0x21);
  1892  0053CC  0E21               	movlw	33
  1893  0053CE  6EC6               	movwf	4038,c	;volatile
  1894                           
  1895                           ;spi_eeprom.c: 160: (SSP1STATbits).CKE = 1;
  1896  0053D0  8CC7               	bsf	4039,6,c	;volatile
  1897                           
  1898                           ;spi_eeprom.c: 161: (SSP1STATbits).SMP = 0;
  1899  0053D2  9EC7               	bcf	4039,7,c	;volatile
  1900  0053D4  0C21               	retlw	33	;funcret
  1901  0053D6                     __end_of_XEEInit:
  1902                           	opt stack 0
  1903                           tblptru	equ	0xFF8
  1904                           tblptrh	equ	0xFF7
  1905                           tblptrl	equ	0xFF6
  1906                           tablat	equ	0xFF5
  1907                           postinc0	equ	0xFEE
  1908                           wreg	equ	0xFE8
  1909                           postdec1	equ	0xFE5
  1910                           fsr1h	equ	0xFE2
  1911                           fsr1l	equ	0xFE1
  1912                           
  1913 ;; *************** function _TickInit *****************
  1914 ;; Defined at:
  1915 ;;		line 78 in file "../framework/tcpip/src/common/tick.c"
  1916 ;; Parameters:    Size  Location     Type
  1917 ;;		None
  1918 ;; Auto vars:     Size  Location     Type
  1919 ;;		None
  1920 ;; Return value:  Size  Location     Type
  1921 ;;		None               void
  1922 ;; Registers used:
  1923 ;;		wreg, status,2
  1924 ;; Tracked objects:
  1925 ;;		On entry : F/0
  1926 ;;		On exit  : F/0
  1927 ;;		Unchanged: F/0
  1928 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1929 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1930 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1931 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1932 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1933 ;;Total ram usage:        0 bytes
  1934 ;; Hardware stack levels used:    1
  1935 ;; Hardware stack levels required when called:    6
  1936 ;; This function calls:
  1937 ;;		Nothing
  1938 ;; This function is called by:
  1939 ;;		_main
  1940 ;; This function uses a non-reentrant model
  1941 ;;
  1942                           
  1943                           	psect	text2
  1944  00545C                     __ptext2:
  1945                           	opt stack 0
  1946  00545C                     _TickInit:
  1947                           	opt stack 24
  1948                           
  1949                           ; BSR set to: 0
  1950                           ;tick.c: 83: TMR0H = 0;
  1951                           
  1952                           ;incstack = 0
  1953  00545C  6AD7               	clrf	4055,c	;volatile
  1954                           
  1955                           ;tick.c: 84: TMR0L = 0;
  1956  00545E  6AD6               	clrf	4054,c	;volatile
  1957                           
  1958                           ;tick.c: 87: INTCON2bits.TMR0IP = 0;
  1959  005460  94F1               	bcf	intcon2,2,c	;volatile
  1960                           
  1961                           ;tick.c: 88: INTCONbits.TMR0IF = 0;
  1962  005462  94F2               	bcf	intcon,2,c	;volatile
  1963                           
  1964                           ;tick.c: 89: INTCONbits.TMR0IE = 1;
  1965  005464  8AF2               	bsf	intcon,5,c	;volatile
  1966                           
  1967                           ; BSR set to: 0
  1968                           ;tick.c: 92: T0CON = 0x87;
  1969  005466  0E87               	movlw	135
  1970  005468  6ED5               	movwf	4053,c	;volatile
  1971                           
  1972                           ; BSR set to: 0
  1973  00546A  0C87               	retlw	135	;funcret
  1974  00546C                     __end_of_TickInit:
  1975                           	opt stack 0
  1976                           tblptru	equ	0xFF8
  1977                           tblptrh	equ	0xFF7
  1978                           tblptrl	equ	0xFF6
  1979                           tablat	equ	0xFF5
  1980                           intcon	equ	0xFF2
  1981                           intcon2	equ	0xFF1
  1982                           postinc0	equ	0xFEE
  1983                           wreg	equ	0xFE8
  1984                           postdec1	equ	0xFE5
  1985                           fsr1h	equ	0xFE2
  1986                           fsr1l	equ	0xFE1
  1987                           
  1988 ;; *************** function _StackInit *****************
  1989 ;; Defined at:
  1990 ;;		line 98 in file "../framework/tcpip/src/common/stack_task.c"
  1991 ;; Parameters:    Size  Location     Type
  1992 ;;		None
  1993 ;; Auto vars:     Size  Location     Type
  1994 ;;		None
  1995 ;; Return value:  Size  Location     Type
  1996 ;;		None               void
  1997 ;; Registers used:
  1998 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1999 ;; Tracked objects:
  2000 ;;		On entry : 0/0
  2001 ;;		On exit  : E/0
  2002 ;;		Unchanged: 0/0
  2003 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2004 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2005 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2006 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2007 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2008 ;;Total ram usage:        4 bytes
  2009 ;; Hardware stack levels used:    1
  2010 ;; Hardware stack levels required when called:    9
  2011 ;; This function calls:
  2012 ;;		_ARPInit
  2013 ;;		_DHCPDisable
  2014 ;;		_DHCPInit
  2015 ;;		_GenerateRandomDWORD
  2016 ;;		_LFSRSeedRand
  2017 ;;		_MACInit
  2018 ;;		_UDPInit
  2019 ;; This function is called by:
  2020 ;;		_main
  2021 ;; This function uses a non-reentrant model
  2022 ;;
  2023                           
  2024                           	psect	text3
  2025  0049D2                     __ptext3:
  2026                           	opt stack 0
  2027  0049D2                     _StackInit:
  2028                           	opt stack 21
  2029                           
  2030                           ;stack_task.c: 108: AppConfig.Flags.bInConfigMode = 1;
  2031                           
  2032                           ; BSR set to: 0
  2033                           ;incstack = 0
  2034  0049D2  0101               	movlb	1	; () banked
  2035  0049D4  8FA5               	bsf	(_AppConfig+44)& (0+255),7,b
  2036                           
  2037                           ; BSR set to: 1
  2038                           ;stack_task.c: 116: if (!once) {
  2039  0049D6  5173               	movf	StackInit@once& (0+255),w,b
  2040  0049D8  E116               	bnz	l11728
  2041                           
  2042                           ; BSR set to: 1
  2043                           ;stack_task.c: 118: LFSRSeedRand(GenerateRandomDWORD());
  2044  0049DA  ECC2  F014         	call	_GenerateRandomDWORD	;wreg free
  2045  0049DE  C070  F08A         	movff	?_GenerateRandomDWORD,_StackInit$12046
  2046  0049E2  C071  F08B         	movff	?_GenerateRandomDWORD+1,_StackInit$12046+1
  2047  0049E6  C072  F08C         	movff	?_GenerateRandomDWORD+2,_StackInit$12046+2
  2048  0049EA  C073  F08D         	movff	?_GenerateRandomDWORD+3,_StackInit$12046+3
  2049                           
  2050                           ;stack_task.c: 118: LFSRSeedRand(GenerateRandomDWORD());
  2051  0049EE  C08A  F01F         	movff	_StackInit$12046,LFSRSeedRand@dwSeed
  2052  0049F2  C08B  F020         	movff	_StackInit$12046+1,LFSRSeedRand@dwSeed+1
  2053  0049F6  C08C  F021         	movff	_StackInit$12046+2,LFSRSeedRand@dwSeed+2
  2054  0049FA  C08D  F022         	movff	_StackInit$12046+3,LFSRSeedRand@dwSeed+3
  2055  0049FE  EC2C  F027         	call	_LFSRSeedRand	;wreg free
  2056                           
  2057                           ; BSR set to: 1
  2058                           ;stack_task.c: 119: once = 1;
  2059  004A02  0E01               	movlw	1
  2060  004A04  6F73               	movwf	StackInit@once& (0+255),b
  2061  004A06                     l11728:
  2062                           
  2063                           ; BSR set to: 1
  2064                           ;stack_task.c: 120: }
  2065                           ;stack_task.c: 122: MACInit();
  2066  004A06  EC95  F01A         	call	_MACInit	;wreg free
  2067                           
  2068                           ; BSR set to: 14
  2069                           ;stack_task.c: 128: ARPInit();
  2070  004A0A  ECBC  F029         	call	_ARPInit	;wreg free
  2071                           
  2072                           ; BSR set to: 1
  2073                           ;stack_task.c: 139: UDPInit();
  2074  004A0E  ECEB  F029         	call	_UDPInit	;wreg free
  2075                           
  2076                           ;stack_task.c: 167: DHCPInit(0);
  2077  004A12  EC9D  F026         	call	_DHCPInit
  2078                           
  2079                           ; BSR set to: 0
  2080                           ;stack_task.c: 169: if (!AppConfig.Flags.bIsDHCPEnabled) {
  2081  004A16  0101               	movlb	1	; () banked
  2082  004A18  ADA5               	btfss	(_AppConfig+44)& (0+255),6,b
  2083                           
  2084                           ; BSR set to: 1
  2085                           ;stack_task.c: 170: DHCPDisable(0);
  2086  004A1A  ECF5  F029         	call	_DHCPDisable
  2087  004A1E  0012               	return		;funcret
  2088  004A20                     __end_of_StackInit:
  2089                           	opt stack 0
  2090                           tblptru	equ	0xFF8
  2091                           tblptrh	equ	0xFF7
  2092                           tblptrl	equ	0xFF6
  2093                           tablat	equ	0xFF5
  2094                           intcon	equ	0xFF2
  2095                           intcon2	equ	0xFF1
  2096                           postinc0	equ	0xFEE
  2097                           wreg	equ	0xFE8
  2098                           postdec1	equ	0xFE5
  2099                           fsr1h	equ	0xFE2
  2100                           fsr1l	equ	0xFE1
  2101                           
  2102 ;; *************** function _UDPInit *****************
  2103 ;; Defined at:
  2104 ;;		line 107 in file "../framework/tcpip/src/udp.c"
  2105 ;; Parameters:    Size  Location     Type
  2106 ;;		None
  2107 ;; Auto vars:     Size  Location     Type
  2108 ;;  s               1   28[COMRAM] unsigned char 
  2109 ;; Return value:  Size  Location     Type
  2110 ;;		None               void
  2111 ;; Registers used:
  2112 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2113 ;; Tracked objects:
  2114 ;;		On entry : F/1
  2115 ;;		On exit  : 0/0
  2116 ;;		Unchanged: 0/0
  2117 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2118 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2119 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2120 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2121 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2122 ;;Total ram usage:        1 bytes
  2123 ;; Hardware stack levels used:    1
  2124 ;; Hardware stack levels required when called:    7
  2125 ;; This function calls:
  2126 ;;		_UDPClose
  2127 ;; This function is called by:
  2128 ;;		_StackInit
  2129 ;; This function uses a non-reentrant model
  2130 ;;
  2131                           
  2132                           	psect	text4
  2133  0053D6                     __ptext4:
  2134                           	opt stack 0
  2135  0053D6                     _UDPInit:
  2136                           	opt stack 22
  2137                           
  2138                           ; BSR set to: 1
  2139                           ;udp.c: 109: UDP_SOCKET s;
  2140                           ;udp.c: 111: for (s = 0; s < (10u); s++) {
  2141                           
  2142                           ;incstack = 0
  2143  0053D6  6A1D               	clrf	UDPInit@s,c
  2144  0053D8                     l11500:
  2145                           
  2146                           ;udp.c: 112: UDPClose(s);
  2147  0053D8  501D               	movf	UDPInit@s,w,c
  2148  0053DA  ECAB  F025         	call	_UDPClose
  2149  0053DE  2A1D               	incf	UDPInit@s,f,c
  2150  0053E0  0E09               	movlw	9
  2151  0053E2  641D               	cpfsgt	UDPInit@s,c
  2152  0053E4  D7F9               	goto	l11500
  2153                           
  2154                           ;udp.c: 113: }
  2155                           ;udp.c: 114: Flags.bWasDiscarded = 1;
  2156  0053E6  823B               	bsf	_Flags,1,c
  2157  0053E8  0C09               	retlw	9	;funcret
  2158  0053EA                     __end_of_UDPInit:
  2159                           	opt stack 0
  2160                           tblptru	equ	0xFF8
  2161                           tblptrh	equ	0xFF7
  2162                           tblptrl	equ	0xFF6
  2163                           tablat	equ	0xFF5
  2164                           intcon	equ	0xFF2
  2165                           intcon2	equ	0xFF1
  2166                           postinc0	equ	0xFEE
  2167                           wreg	equ	0xFE8
  2168                           postdec1	equ	0xFE5
  2169                           fsr1h	equ	0xFE2
  2170                           fsr1l	equ	0xFE1
  2171                           
  2172 ;; *************** function _MACInit *****************
  2173 ;; Defined at:
  2174 ;;		line 118 in file "../framework/tcpip/src/eth97j60.c"
  2175 ;; Parameters:    Size  Location     Type
  2176 ;;		None
  2177 ;; Auto vars:     Size  Location     Type
  2178 ;;  i               1    0        unsigned char 
  2179 ;; Return value:  Size  Location     Type
  2180 ;;		None               void
  2181 ;; Registers used:
  2182 ;;		wreg, status,2, status,0, cstack
  2183 ;; Tracked objects:
  2184 ;;		On entry : F/1
  2185 ;;		On exit  : F/E
  2186 ;;		Unchanged: 0/0
  2187 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2188 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2189 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2190 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2191 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2192 ;;Total ram usage:        0 bytes
  2193 ;; Hardware stack levels used:    1
  2194 ;; Hardware stack levels required when called:    7
  2195 ;; This function calls:
  2196 ;;		_MACPut
  2197 ;;		_WritePHYReg
  2198 ;; This function is called by:
  2199 ;;		_StackInit
  2200 ;; This function uses a non-reentrant model
  2201 ;;
  2202                           
  2203                           	psect	text5
  2204  00352A                     __ptext5:
  2205                           	opt stack 0
  2206  00352A                     _MACInit:
  2207                           	opt stack 22
  2208                           
  2209                           ; BSR set to: 1
  2210                           ;eth97j60.c: 120: uint8_t i;
  2211                           ;eth97j60.c: 122: TRISA &= 0xFC;
  2212                           
  2213                           ;incstack = 0
  2214  00352A  0EFC               	movlw	252
  2215  00352C  1692               	andwf	3986,f,c	;volatile
  2216                           
  2217                           ; BSR set to: 1
  2218                           ;eth97j60.c: 123: ECON2bits.ETHEN = 1;
  2219  00352E  010E               	movlb	14	; () banked
  2220  003530  8BFE               	bsf	254,5,b	;volatile
  2221  003532                     l1986:
  2222                           
  2223                           ; BSR set to: 14
  2224  003532  A1FD               	btfss	253,0,b	;volatile
  2225  003534  D7FE               	goto	l1986
  2226                           
  2227                           ; BSR set to: 14
  2228                           ;eth97j60.c: 130: WasDiscarded = 1;
  2229  003536  0E01               	movlw	1
  2230  003538  6E3C               	movwf	_WasDiscarded,c
  2231                           
  2232                           ; BSR set to: 14
  2233                           ;eth97j60.c: 131: NextPacketLocation.Val = (0ul);
  2234  00353A  0101               	movlb	1	; () banked
  2235  00353C  6B68               	clrf	_NextPacketLocation& (0+255),b
  2236  00353E  6B69               	clrf	(_NextPacketLocation+1)& (0+255),b
  2237                           
  2238                           ; BSR set to: 1
  2239                           ;eth97j60.c: 132: ERXST = (0ul);
  2240  003540  010E               	movlb	14	; () banked
  2241  003542  6BE8               	clrf	232,b	;volatile
  2242  003544  6BE9               	clrf	233,b	;volatile
  2243                           
  2244                           ;eth97j60.c: 133: ERXRDPTL = (((((8*1024ul) - (1ul+1518ul+7ul) - 0u - 0ul - 0ul)-2ul) | 
      +                          0x0001ul) & 0xFF);
  2245  003546  0E09               	movlw	9
  2246  003548  6FEC               	movwf	236,b	;volatile
  2247                           
  2248                           ;eth97j60.c: 134: ERXRDPTH = ((((((8*1024ul) - (1ul+1518ul+7ul) - 0u - 0ul - 0ul)-2ul) |
      +                           0x0001ul)>>8) & 0xFF);
  2249  00354A  0E1A               	movlw	26
  2250  00354C  6FED               	movwf	237,b	;volatile
  2251                           
  2252                           ;eth97j60.c: 135: ERXND = ((((8*1024ul) - (1ul+1518ul+7ul) - 0u - 0ul - 0ul)-2ul) | 0x00
      +                          01ul);
  2253  00354E  6FEB               	movwf	235,b	;volatile
  2254  003550  0E09               	movlw	9
  2255  003552  6FEA               	movwf	234,b	;volatile
  2256                           
  2257                           ;eth97j60.c: 136: ETXST = ((8*1024ul) - (1ul+1518ul+7ul) - 0u - 0ul - 0ul);
  2258  003554  0E1A               	movlw	26
  2259  003556  6FE5               	movwf	229,b	;volatile
  2260  003558  0E0A               	movlw	10
  2261  00355A  6FE4               	movwf	228,b	;volatile
  2262                           
  2263                           ;eth97j60.c: 139: EWRPT = ((8*1024ul) - (1ul+1518ul+7ul) - 0u - 0ul - 0ul);
  2264  00355C  0E1A               	movlw	26
  2265  00355E  6FE3               	movwf	227,b	;volatile
  2266  003560  0E0A               	movlw	10
  2267  003562  6FE2               	movwf	226,b	;volatile
  2268                           
  2269                           ; BSR set to: 14
  2270                           ;eth97j60.c: 140: MACPut(0x00);
  2271  003564  0E00               	movlw	0
  2272  003566  EC46  F02A         	call	_MACPut
  2273                           
  2274                           ;eth97j60.c: 149: MACON1 = (1<<3) | (1<<2) | (1); __nop();
  2275  00356A  0E0D               	movlw	13
  2276  00356C  010E               	movlb	14	; () banked
  2277  00356E  6FA0               	movwf	160,b	;volatile
  2278                           
  2279                           ; BSR set to: 14
  2280  003570  F000               	nop	
  2281                           
  2282                           ;eth97j60.c: 156: MACON3 = (1<<5) | (1<<4) | (1<<1); __nop();
  2283  003572  0E32               	movlw	50
  2284  003574  6FA2               	movwf	162,b	;volatile
  2285                           
  2286                           ; BSR set to: 14
  2287  003576  F000               	nop	
  2288                           
  2289                           ;eth97j60.c: 157: MABBIPG = 0x12; __nop();
  2290  003578  0E12               	movlw	18
  2291  00357A  6FA4               	movwf	164,b	;volatile
  2292                           
  2293                           ; BSR set to: 14
  2294  00357C  F000               	nop	
  2295                           
  2296                           ;eth97j60.c: 163: MACON4 = (1<<6); __nop();
  2297  00357E  0E40               	movlw	64
  2298  003580  6FA3               	movwf	163,b	;volatile
  2299                           
  2300                           ; BSR set to: 14
  2301  003582  F000               	nop	
  2302                           
  2303                           ;eth97j60.c: 168: MAIPGL = 0x12; __nop();
  2304  003584  0E12               	movlw	18
  2305  003586  6FA6               	movwf	166,b	;volatile
  2306                           
  2307                           ; BSR set to: 14
  2308  003588  F000               	nop	
  2309                           
  2310                           ;eth97j60.c: 169: MAIPGH = 0x0C; __nop();
  2311  00358A  0E0C               	movlw	12
  2312  00358C  6FA7               	movwf	167,b	;volatile
  2313                           
  2314                           ; BSR set to: 14
  2315  00358E  F000               	nop	
  2316                           
  2317                           ;eth97j60.c: 172: MAMXFLL = (6+6+2+1500+4 & 0xFF); __nop();
  2318  003590  0EEE               	movlw	238
  2319  003592  6FAA               	movwf	170,b	;volatile
  2320                           
  2321                           ; BSR set to: 14
  2322  003594  F000               	nop	
  2323                           
  2324                           ;eth97j60.c: 173: MAMXFLH = ((6+6+2+1500+4>>8) & 0xFF); __nop();
  2325  003596  0E05               	movlw	5
  2326  003598  6FAB               	movwf	171,b	;volatile
  2327                           
  2328                           ; BSR set to: 14
  2329  00359A  F000               	nop	
  2330                           
  2331                           ;eth97j60.c: 176: MAADR1 = AppConfig.MyMACAddr.v[0]; __nop();
  2332  00359C  C1A6  FE84         	movff	_AppConfig+45,3716	;volatile
  2333  0035A0  F000               	nop	
  2334                           
  2335                           ;eth97j60.c: 177: MAADR2 = AppConfig.MyMACAddr.v[1]; __nop();
  2336  0035A2  C1A7  FE85         	movff	_AppConfig+46,3717	;volatile
  2337  0035A6  F000               	nop	
  2338                           
  2339                           ;eth97j60.c: 178: MAADR3 = AppConfig.MyMACAddr.v[2]; __nop();
  2340  0035A8  C1A8  FE82         	movff	_AppConfig+47,3714	;volatile
  2341  0035AC  F000               	nop	
  2342                           
  2343                           ;eth97j60.c: 179: MAADR4 = AppConfig.MyMACAddr.v[3]; __nop();
  2344  0035AE  C1A9  FE83         	movff	_AppConfig+48,3715	;volatile
  2345  0035B2  F000               	nop	
  2346                           
  2347                           ;eth97j60.c: 180: MAADR5 = AppConfig.MyMACAddr.v[4]; __nop();
  2348  0035B4  C1AA  FE80         	movff	_AppConfig+49,3712	;volatile
  2349  0035B8  F000               	nop	
  2350                           
  2351                           ;eth97j60.c: 181: MAADR6 = AppConfig.MyMACAddr.v[5]; __nop();
  2352  0035BA  C1AB  FE81         	movff	_AppConfig+50,3713	;volatile
  2353  0035BE  F000               	nop	
  2354                           
  2355                           ;eth97j60.c: 184: WritePHYReg(0x10, (1ul<<8) | (1ul<<4));
  2356  0035C0  0E01               	movlw	1
  2357  0035C2  6E1D               	movwf	WritePHYReg@Data+1,c
  2358  0035C4  0E10               	movlw	16
  2359  0035C6  6E1C               	movwf	WritePHYReg@Data,c
  2360  0035C8  EC5E  F027         	call	_WritePHYReg
  2361                           
  2362                           ; BSR set to: 14
  2363                           ;eth97j60.c: 187: WritePHYReg(0x14, 0x3472);
  2364  0035CC  0E34               	movlw	52
  2365  0035CE  6E1D               	movwf	WritePHYReg@Data+1,c
  2366  0035D0  0E72               	movlw	114
  2367  0035D2  6E1C               	movwf	WritePHYReg@Data,c
  2368  0035D4  0E14               	movlw	20
  2369  0035D6  EC5E  F027         	call	_WritePHYReg
  2370                           
  2371                           ; BSR set to: 14
  2372                           ;eth97j60.c: 193: WritePHYReg(0x00, 0x0000);
  2373  0035DA  0E00               	movlw	0
  2374  0035DC  6A1D               	clrf	WritePHYReg@Data+1,c
  2375  0035DE  6A1C               	clrf	WritePHYReg@Data,c
  2376  0035E0  EC5E  F027         	call	_WritePHYReg
  2377                           
  2378                           ; BSR set to: 14
  2379                           ;eth97j60.c: 197: ECON1bits.RXEN = 1;
  2380  0035E4  84D2               	bsf	4050,2,c	;volatile
  2381                           
  2382                           ; BSR set to: 14
  2383  0035E6  0012               	return		;funcret
  2384  0035E8                     __end_of_MACInit:
  2385                           	opt stack 0
  2386                           tblptru	equ	0xFF8
  2387                           tblptrh	equ	0xFF7
  2388                           tblptrl	equ	0xFF6
  2389                           tablat	equ	0xFF5
  2390                           intcon	equ	0xFF2
  2391                           intcon2	equ	0xFF1
  2392                           postinc0	equ	0xFEE
  2393                           wreg	equ	0xFE8
  2394                           postdec1	equ	0xFE5
  2395                           fsr1h	equ	0xFE2
  2396                           fsr1l	equ	0xFE1
  2397                           
  2398 ;; *************** function _WritePHYReg *****************
  2399 ;; Defined at:
  2400 ;;		line 1188 in file "../framework/tcpip/src/eth97j60.c"
  2401 ;; Parameters:    Size  Location     Type
  2402 ;;  Register        1    wreg     unsigned char 
  2403 ;;  Data            2   27[COMRAM] unsigned int 
  2404 ;; Auto vars:     Size  Location     Type
  2405 ;;  Register        1   29[COMRAM] unsigned char 
  2406 ;;  GIESave         1   30[COMRAM] unsigned char 
  2407 ;; Return value:  Size  Location     Type
  2408 ;;		None               void
  2409 ;; Registers used:
  2410 ;;		wreg, status,2, status,0
  2411 ;; Tracked objects:
  2412 ;;		On entry : 0/E
  2413 ;;		On exit  : F/E
  2414 ;;		Unchanged: 0/0
  2415 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2416 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2417 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2418 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2419 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2420 ;;Total ram usage:        4 bytes
  2421 ;; Hardware stack levels used:    1
  2422 ;; Hardware stack levels required when called:    6
  2423 ;; This function calls:
  2424 ;;		Nothing
  2425 ;; This function is called by:
  2426 ;;		_MACInit
  2427 ;; This function uses a non-reentrant model
  2428 ;;
  2429                           
  2430                           	psect	text6
  2431  004EBC                     __ptext6:
  2432                           	opt stack 0
  2433  004EBC                     _WritePHYReg:
  2434                           	opt stack 22
  2435                           
  2436                           ; BSR set to: 14
  2437                           ;incstack = 0
  2438                           ;WritePHYReg@Register stored from wreg
  2439  004EBC  6E1E               	movwf	WritePHYReg@Register,c
  2440                           
  2441                           ;eth97j60.c: 1190: uint8_t GIESave;
  2442                           ;eth97j60.c: 1193: MIREGADR = Register;
  2443  004EBE  C01E  FEB4         	movff	WritePHYReg@Register,3764	;volatile
  2444                           
  2445                           ;eth97j60.c: 1205: PRODL = ((TCPIP_UINT16_VAL*)&Data)->v[0];
  2446  004EC2  C01C  FFF3         	movff	WritePHYReg@Data,prodl	;volatile
  2447                           
  2448                           ;eth97j60.c: 1206: PRODH = ((TCPIP_UINT16_VAL*)&Data)->v[1];
  2449  004EC6  C01D  FFF4         	movff	WritePHYReg@Data+1,prodh	;volatile
  2450                           
  2451                           ;eth97j60.c: 1207: GIESave = INTCON & 0xC0;
  2452  004ECA  50F2               	movf	intcon,w,c	;volatile
  2453  004ECC  0BC0               	andlw	192
  2454  004ECE  6E1F               	movwf	WritePHYReg@GIESave,c
  2455                           
  2456                           ;eth97j60.c: 1208: INTCON &= 0x3F;
  2457  004ED0  0E3F               	movlw	63
  2458  004ED2  16F2               	andwf	intcon,f,c	;volatile
  2459  004ED4  CFF3 FEB6          	movff	prodl,3766	;# 
  2460  004ED8  F000               	nop		;# 
  2461  004EDA  CFF4 FEB7          	movff	prodh,3767	;# 
  2462                           
  2463                           ;eth97j60.c: 1226: INTCON |= GIESave;
  2464  004EDE  501F               	movf	WritePHYReg@GIESave,w,c
  2465  004EE0  12F2               	iorwf	intcon,f,c	;volatile
  2466  004EE2                     l2130:
  2467  004EE2  010E               	movlb	14	; () banked
  2468  004EE4  A18A               	btfss	138,0,b	;volatile
  2469                           
  2470                           ; BSR set to: 14
  2471  004EE6  0012               	return		;funcret
  2472  004EE8  D7FC               	goto	l2130
  2473  004EEA                     __end_of_WritePHYReg:
  2474                           	opt stack 0
  2475                           tblptru	equ	0xFF8
  2476                           tblptrh	equ	0xFF7
  2477                           tblptrl	equ	0xFF6
  2478                           tablat	equ	0xFF5
  2479                           prodh	equ	0xFF4
  2480                           prodl	equ	0xFF3
  2481                           intcon	equ	0xFF2
  2482                           intcon2	equ	0xFF1
  2483                           postinc0	equ	0xFEE
  2484                           wreg	equ	0xFE8
  2485                           postdec1	equ	0xFE5
  2486                           fsr1h	equ	0xFE2
  2487                           fsr1l	equ	0xFE1
  2488                           
  2489 ;; *************** function _GenerateRandomDWORD *****************
  2490 ;; Defined at:
  2491 ;;		line 197 in file "../framework/tcpip/src/common/helpers.c"
  2492 ;; Parameters:    Size  Location     Type
  2493 ;;		None
  2494 ;; Auto vars:     Size  Location     Type
  2495 ;;  TMR0LSave       1   33[BANK0 ] unsigned char 
  2496 ;;  TMR0HSave       1   32[BANK0 ] unsigned char 
  2497 ;;  T0CONSave       1   31[BANK0 ] unsigned char 
  2498 ;;  ADCON2Save      1   30[BANK0 ] unsigned char 
  2499 ;;  ADCON0Save      1   29[BANK0 ] unsigned char 
  2500 ;;  randomResult    4   36[BANK0 ] struct .
  2501 ;;  dwTotalTime     4   24[BANK0 ] unsigned long 
  2502 ;;  wTime           2   40[BANK0 ] unsigned int 
  2503 ;;  wLastValue      2   34[BANK0 ] unsigned int 
  2504 ;;  w               2   22[BANK0 ] unsigned int 
  2505 ;;  vBitCount       1   28[BANK0 ] unsigned char 
  2506 ;; Return value:  Size  Location     Type
  2507 ;;                  4   16[BANK0 ] unsigned long 
  2508 ;; Registers used:
  2509 ;;		wreg, status,2, status,0, cstack
  2510 ;; Tracked objects:
  2511 ;;		On entry : F/1
  2512 ;;		On exit  : F/0
  2513 ;;		Unchanged: 0/0
  2514 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2515 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2516 ;;      Locals:         0      20       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2517 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2518 ;;      Totals:         0      26       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2519 ;;Total ram usage:       26 bytes
  2520 ;; Hardware stack levels used:    1
  2521 ;; Hardware stack levels required when called:    8
  2522 ;; This function calls:
  2523 ;;		_LFSRRand
  2524 ;;		_LFSRSeedRand
  2525 ;; This function is called by:
  2526 ;;		_StackInit
  2527 ;; This function uses a non-reentrant model
  2528 ;;
  2529                           
  2530                           	psect	text7
  2531  002984                     __ptext7:
  2532                           	opt stack 0
  2533  002984                     _GenerateRandomDWORD:
  2534                           	opt stack 21
  2535                           
  2536                           ; BSR set to: 1
  2537                           ;helpers.c: 199: uint8_t vBitCount;
  2538                           ;helpers.c: 200: uint16_t w, wTime, wLastValue;
  2539                           ;helpers.c: 201: uint32_t dwTotalTime;
  2540                           ;helpers.c: 203: union {
  2541                           ;helpers.c: 204: uint32_t dw;
  2542                           ;helpers.c: 205: uint16_t w[2];
  2543                           ;helpers.c: 206: } randomResult;
  2544                           ;helpers.c: 209: {
  2545                           ;helpers.c: 210: uint8_t ADCON0Save, ADCON2Save;
  2546                           ;helpers.c: 211: uint8_t T0CONSave, TMR0HSave, TMR0LSave;
  2547                           ;helpers.c: 214: ADCON0Save = ADCON0;
  2548                           
  2549                           ; BSR set to: 14
  2550                           ;incstack = 0
  2551  002984  CFC2 F07D          	movff	4034,GenerateRandomDWORD@ADCON0Save	;volatile
  2552                           
  2553                           ;helpers.c: 215: ADCON2Save = ADCON2;
  2554  002988  CFC0 F07E          	movff	4032,GenerateRandomDWORD@ADCON2Save	;volatile
  2555                           
  2556                           ;helpers.c: 216: T0CONSave = T0CON;
  2557  00298C  CFD5 F07F          	movff	4053,GenerateRandomDWORD@T0CONSave	;volatile
  2558                           
  2559                           ;helpers.c: 217: TMR0LSave = TMR0L;
  2560  002990  CFD6 F081          	movff	4054,GenerateRandomDWORD@TMR0LSave	;volatile
  2561                           
  2562                           ;helpers.c: 218: TMR0HSave = TMR0H;
  2563  002994  CFD7 F080          	movff	4055,GenerateRandomDWORD@TMR0HSave	;volatile
  2564                           
  2565                           ; BSR set to: 1
  2566                           ;helpers.c: 221: ADCON0 = 0x01;
  2567  002998  0E01               	movlw	1
  2568  00299A  6EC2               	movwf	4034,c	;volatile
  2569                           
  2570                           ;helpers.c: 222: ADCON2 = 0x3F;
  2571  00299C  0E3F               	movlw	63
  2572  00299E  6EC0               	movwf	4032,c	;volatile
  2573                           
  2574                           ;helpers.c: 223: T0CON = 0x88;
  2575  0029A0  0E88               	movlw	136
  2576  0029A2  6ED5               	movwf	4053,c	;volatile
  2577                           
  2578                           ; BSR set to: 1
  2579                           ;helpers.c: 224: vBitCount = 0;
  2580  0029A4  0100               	movlb	0	; () banked
  2581  0029A6  6B7C               	clrf	GenerateRandomDWORD@vBitCount& (0+255),b
  2582                           
  2583                           ; BSR set to: 0
  2584                           ;helpers.c: 225: dwTotalTime = 0;
  2585  0029A8  6B78               	clrf	GenerateRandomDWORD@dwTotalTime& (0+255),b
  2586  0029AA  6B79               	clrf	(GenerateRandomDWORD@dwTotalTime+1)& (0+255),b
  2587  0029AC  6B7A               	clrf	(GenerateRandomDWORD@dwTotalTime+2)& (0+255),b
  2588  0029AE  6B7B               	clrf	(GenerateRandomDWORD@dwTotalTime+3)& (0+255),b
  2589                           
  2590                           ; BSR set to: 0
  2591                           ;helpers.c: 226: wLastValue = 0;
  2592  0029B0  6B82               	clrf	GenerateRandomDWORD@wLastValue& (0+255),b
  2593  0029B2  6B83               	clrf	(GenerateRandomDWORD@wLastValue+1)& (0+255),b
  2594                           
  2595                           ; BSR set to: 0
  2596                           ;helpers.c: 227: randomResult.dw = LFSRRand();
  2597  0029B4  EC2C  F01F         	call	_LFSRRand	;wreg free
  2598  0029B8  C01C  F084         	movff	?_LFSRRand,GenerateRandomDWORD@randomResult
  2599  0029BC  C01D  F085         	movff	?_LFSRRand+1,GenerateRandomDWORD@randomResult+1
  2600  0029C0  0100               	movlb	0	; () banked
  2601  0029C2  6B86               	clrf	(GenerateRandomDWORD@randomResult+2)& (0+255),b
  2602  0029C4  6B87               	clrf	(GenerateRandomDWORD@randomResult+3)& (0+255),b
  2603  0029C6                     l11384:
  2604                           
  2605                           ; BSR set to: 0
  2606                           ;helpers.c: 230: TMR0H = 0x00;
  2607  0029C6  6AD7               	clrf	4055,c	;volatile
  2608                           
  2609                           ; BSR set to: 0
  2610                           ;helpers.c: 231: TMR0L = 0x00;
  2611  0029C8  6AD6               	clrf	4054,c	;volatile
  2612                           
  2613                           ; BSR set to: 0
  2614                           ;helpers.c: 232: ADCON0bits.GO = 1;
  2615  0029CA  82C2               	bsf	4034,1,c	;volatile
  2616  0029CC  0004               	clrwdt		;# 
  2617  0029CE                     l792:
  2618  0029CE  B2C2               	btfsc	4034,1,c	;volatile
  2619  0029D0  D7FE               	goto	l792
  2620                           
  2621                           ;helpers.c: 235: ((uint8_t *) & wTime)[0] = TMR0L;
  2622  0029D2  CFD6 F088          	movff	4054,GenerateRandomDWORD@wTime	;volatile
  2623                           
  2624                           ;helpers.c: 236: ((uint8_t *) & wTime)[1] = TMR0H;
  2625  0029D6  CFD7 F089          	movff	4055,GenerateRandomDWORD@wTime+1	;volatile
  2626                           
  2627                           ;helpers.c: 237: w = LFSRRand();
  2628  0029DA  EC2C  F01F         	call	_LFSRRand	;wreg free
  2629  0029DE  C01C  F076         	movff	?_LFSRRand,GenerateRandomDWORD@w
  2630  0029E2  C01D  F077         	movff	?_LFSRRand+1,GenerateRandomDWORD@w+1
  2631                           
  2632                           ; BSR set to: 1
  2633                           ;helpers.c: 240: dwTotalTime += wTime;
  2634  0029E6  0100               	movlb	0	; () banked
  2635  0029E8  5188               	movf	GenerateRandomDWORD@wTime& (0+255),w,b
  2636  0029EA  2778               	addwf	GenerateRandomDWORD@dwTotalTime& (0+255),f,b
  2637  0029EC  5189               	movf	(GenerateRandomDWORD@wTime+1)& (0+255),w,b
  2638  0029EE  2379               	addwfc	(GenerateRandomDWORD@dwTotalTime+1)& (0+255),f,b
  2639  0029F0  0E00               	movlw	0
  2640  0029F2  237A               	addwfc	(GenerateRandomDWORD@dwTotalTime+2)& (0+255),f,b
  2641  0029F4  237B               	addwfc	(GenerateRandomDWORD@dwTotalTime+3)& (0+255),f,b
  2642                           
  2643                           ; BSR set to: 0
  2644                           ;helpers.c: 241: if (dwTotalTime >= ((40000000ul) / 4)) {
  2645  0029F6  517B               	movf	(GenerateRandomDWORD@dwTotalTime+3)& (0+255),w,b
  2646  0029F8  E107               	bnz	u10850
  2647  0029FA  0E80               	movlw	128
  2648  0029FC  5D78               	subwf	GenerateRandomDWORD@dwTotalTime& (0+255),w,b
  2649  0029FE  0E96               	movlw	150
  2650  002A00  5979               	subwfb	(GenerateRandomDWORD@dwTotalTime+1)& (0+255),w,b
  2651  002A02  0E98               	movlw	152
  2652  002A04  597A               	subwfb	(GenerateRandomDWORD@dwTotalTime+2)& (0+255),w,b
  2653  002A06  E30F               	bnc	l11398
  2654  002A08                     u10850:
  2655                           
  2656                           ; BSR set to: 0
  2657                           ;helpers.c: 242: randomResult.w[0] ^= LFSRRand();
  2658  002A08  EC2C  F01F         	call	_LFSRRand	;wreg free
  2659  002A0C  501C               	movf	?_LFSRRand,w,c
  2660  002A0E  0100               	movlb	0	; () banked
  2661  002A10  1B84               	xorwf	GenerateRandomDWORD@randomResult& (0+255),f,b
  2662  002A12  501D               	movf	?_LFSRRand+1,w,c
  2663  002A14  1B85               	xorwf	(GenerateRandomDWORD@randomResult+1)& (0+255),f,b
  2664                           
  2665                           ;helpers.c: 243: randomResult.w[1] ^= LFSRRand();
  2666  002A16  EC2C  F01F         	call	_LFSRRand	;wreg free
  2667  002A1A  501C               	movf	?_LFSRRand,w,c
  2668  002A1C  0100               	movlb	0	; () banked
  2669  002A1E  1B86               	xorwf	(GenerateRandomDWORD@randomResult+2)& (0+255),f,b
  2670  002A20  501D               	movf	?_LFSRRand+1,w,c
  2671  002A22  1B87               	xorwf	(GenerateRandomDWORD@randomResult+3)& (0+255),f,b
  2672                           
  2673                           ;helpers.c: 244: break;
  2674  002A24  D02B               	goto	l796
  2675  002A26                     l11398:
  2676                           
  2677                           ; BSR set to: 0
  2678                           ;helpers.c: 245: }
  2679                           ;helpers.c: 248: if (wLastValue == wTime)
  2680  002A26  5188               	movf	GenerateRandomDWORD@wTime& (0+255),w,b
  2681  002A28  1982               	xorwf	GenerateRandomDWORD@wLastValue& (0+255),w,b
  2682  002A2A  E103               	bnz	l11402
  2683  002A2C  5189               	movf	(GenerateRandomDWORD@wTime+1)& (0+255),w,b
  2684  002A2E  1983               	xorwf	(GenerateRandomDWORD@wLastValue+1)& (0+255),w,b
  2685  002A30  E0CA               	bz	l11384
  2686  002A32                     l11402:
  2687                           
  2688                           ; BSR set to: 0
  2689                           ;helpers.c: 252: LFSRSeedRand(w + (wLastValue - wTime));
  2690  002A32  5188               	movf	GenerateRandomDWORD@wTime& (0+255),w,b
  2691  002A34  5D82               	subwf	GenerateRandomDWORD@wLastValue& (0+255),w,b
  2692  002A36  6F74               	movwf	??_GenerateRandomDWORD& (0+255),b
  2693  002A38  5189               	movf	(GenerateRandomDWORD@wTime+1)& (0+255),w,b
  2694  002A3A  5983               	subwfb	(GenerateRandomDWORD@wLastValue+1)& (0+255),w,b
  2695  002A3C  6F75               	movwf	(??_GenerateRandomDWORD+1)& (0+255),b
  2696  002A3E  5176               	movf	GenerateRandomDWORD@w& (0+255),w,b
  2697  002A40  2774               	addwf	??_GenerateRandomDWORD& (0+255),f,b
  2698  002A42  5177               	movf	(GenerateRandomDWORD@w+1)& (0+255),w,b
  2699  002A44  2375               	addwfc	(??_GenerateRandomDWORD+1)& (0+255),f,b
  2700  002A46  C074  F01F         	movff	??_GenerateRandomDWORD,LFSRSeedRand@dwSeed
  2701  002A4A  C075  F020         	movff	??_GenerateRandomDWORD+1,LFSRSeedRand@dwSeed+1
  2702  002A4E  6A21               	clrf	LFSRSeedRand@dwSeed+2,c
  2703  002A50  6A22               	clrf	LFSRSeedRand@dwSeed+3,c
  2704  002A52  EC2C  F027         	call	_LFSRSeedRand	;wreg free
  2705                           
  2706                           ; BSR set to: 1
  2707                           ;helpers.c: 253: wLastValue = wTime;
  2708  002A56  C088  F082         	movff	GenerateRandomDWORD@wTime,GenerateRandomDWORD@wLastValue
  2709  002A5A  C089  F083         	movff	GenerateRandomDWORD@wTime+1,GenerateRandomDWORD@wLastValue+1
  2710                           
  2711                           ; BSR set to: 1
  2712                           ;helpers.c: 256: randomResult.dw <<= 1;
  2713  002A5E  0100               	movlb	0	; () banked
  2714  002A60  90D8               	bcf	status,0,c
  2715  002A62  3784               	rlcf	GenerateRandomDWORD@randomResult& (0+255),f,b
  2716  002A64  3785               	rlcf	(GenerateRandomDWORD@randomResult+1)& (0+255),f,b
  2717  002A66  3786               	rlcf	(GenerateRandomDWORD@randomResult+2)& (0+255),f,b
  2718  002A68  3787               	rlcf	(GenerateRandomDWORD@randomResult+3)& (0+255),f,b
  2719                           
  2720                           ; BSR set to: 0
  2721                           ;helpers.c: 257: if (LFSRRand() & 0x0080)
  2722  002A6A  EC2C  F01F         	call	_LFSRRand	;wreg free
  2723  002A6E  AE1C               	btfss	?_LFSRRand,7,c
  2724  002A70  D002               	goto	l11412
  2725                           
  2726                           ; BSR set to: 1
  2727                           ;helpers.c: 258: randomResult.w[0] |= 0x1;
  2728  002A72  0100               	movlb	0	; () banked
  2729  002A74  8184               	bsf	GenerateRandomDWORD@randomResult& (0+255),0,b
  2730  002A76                     l11412:
  2731                           
  2732                           ;helpers.c: 261: if (++vBitCount == 0u)
  2733  002A76  0100               	movlb	0	; () banked
  2734  002A78  3F7C               	incfsz	GenerateRandomDWORD@vBitCount& (0+255),f,b
  2735  002A7A  D7A5               	goto	l11384
  2736  002A7C                     l796:
  2737                           
  2738                           ; BSR set to: 0
  2739                           ;helpers.c: 263: }
  2740                           ;helpers.c: 266: ADCON0 = ADCON0Save;
  2741  002A7C  C07D  FFC2         	movff	GenerateRandomDWORD@ADCON0Save,4034	;volatile
  2742                           
  2743                           ;helpers.c: 267: ADCON2 = ADCON2Save;
  2744  002A80  C07E  FFC0         	movff	GenerateRandomDWORD@ADCON2Save,4032	;volatile
  2745                           
  2746                           ;helpers.c: 268: TMR0H = TMR0HSave;
  2747  002A84  C080  FFD7         	movff	GenerateRandomDWORD@TMR0HSave,4055	;volatile
  2748                           
  2749                           ;helpers.c: 269: TMR0L = TMR0LSave;
  2750  002A88  C081  FFD6         	movff	GenerateRandomDWORD@TMR0LSave,4054	;volatile
  2751                           
  2752                           ;helpers.c: 270: T0CON = T0CONSave;
  2753  002A8C  C07F  FFD5         	movff	GenerateRandomDWORD@T0CONSave,4053	;volatile
  2754                           
  2755                           ;helpers.c: 271: }
  2756                           ;helpers.c: 348: return randomResult.dw;
  2757  002A90  C084  F070         	movff	GenerateRandomDWORD@randomResult,?_GenerateRandomDWORD
  2758  002A94  C085  F071         	movff	GenerateRandomDWORD@randomResult+1,?_GenerateRandomDWORD+1
  2759  002A98  C086  F072         	movff	GenerateRandomDWORD@randomResult+2,?_GenerateRandomDWORD+2
  2760  002A9C  C087  F073         	movff	GenerateRandomDWORD@randomResult+3,?_GenerateRandomDWORD+3
  2761                           
  2762                           ; BSR set to: 0
  2763  002AA0  0012               	return		;funcret
  2764  002AA2                     __end_of_GenerateRandomDWORD:
  2765                           	opt stack 0
  2766                           tblptru	equ	0xFF8
  2767                           tblptrh	equ	0xFF7
  2768                           tblptrl	equ	0xFF6
  2769                           tablat	equ	0xFF5
  2770                           prodh	equ	0xFF4
  2771                           prodl	equ	0xFF3
  2772                           intcon	equ	0xFF2
  2773                           intcon2	equ	0xFF1
  2774                           postinc0	equ	0xFEE
  2775                           wreg	equ	0xFE8
  2776                           postdec1	equ	0xFE5
  2777                           fsr1h	equ	0xFE2
  2778                           fsr1l	equ	0xFE1
  2779                           status	equ	0xFD8
  2780                           
  2781 ;; *************** function _LFSRSeedRand *****************
  2782 ;; Defined at:
  2783 ;;		line 86 in file "../framework/tcpip/src/common/helpers.c"
  2784 ;; Parameters:    Size  Location     Type
  2785 ;;  dwSeed          4   30[COMRAM] unsigned long 
  2786 ;; Auto vars:     Size  Location     Type
  2787 ;;  dwOldSeed       4    0        unsigned long 
  2788 ;;  i               1   38[COMRAM] unsigned char 
  2789 ;; Return value:  Size  Location     Type
  2790 ;;                  4   30[COMRAM] unsigned long 
  2791 ;; Registers used:
  2792 ;;		wreg, status,2, status,0, cstack
  2793 ;; Tracked objects:
  2794 ;;		On entry : F/0
  2795 ;;		On exit  : F/1
  2796 ;;		Unchanged: 0/0
  2797 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2798 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2799 ;;      Locals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2800 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2801 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2802 ;;Total ram usage:        9 bytes
  2803 ;; Hardware stack levels used:    1
  2804 ;; Hardware stack levels required when called:    7
  2805 ;; This function calls:
  2806 ;;		_LFSRRand
  2807 ;; This function is called by:
  2808 ;;		_GenerateRandomDWORD
  2809 ;;		_StackInit
  2810 ;; This function uses a non-reentrant model
  2811 ;;
  2812                           
  2813                           	psect	text8
  2814  004E58                     __ptext8:
  2815                           	opt stack 0
  2816  004E58                     _LFSRSeedRand:
  2817                           	opt stack 22
  2818                           
  2819                           ; BSR set to: 0
  2820                           ;helpers.c: 96: if (dwSeed == 0u)
  2821                           
  2822                           ; BSR set to: 0
  2823                           
  2824                           ; BSR set to: 0
  2825                           ;incstack = 0
  2826  004E58  501F               	movf	LFSRSeedRand@dwSeed,w,c
  2827  004E5A  1020               	iorwf	LFSRSeedRand@dwSeed+1,w,c
  2828  004E5C  1021               	iorwf	LFSRSeedRand@dwSeed+2,w,c
  2829  004E5E  1022               	iorwf	LFSRSeedRand@dwSeed+3,w,c
  2830  004E60  E105               	bnz	l10844
  2831                           
  2832                           ; BSR set to: 0
  2833                           ;helpers.c: 97: dwSeed = 1;
  2834  004E62  0E01               	movlw	1
  2835  004E64  6E1F               	movwf	LFSRSeedRand@dwSeed,c
  2836  004E66  6A20               	clrf	LFSRSeedRand@dwSeed+1,c
  2837  004E68  6A21               	clrf	LFSRSeedRand@dwSeed+2,c
  2838  004E6A  6A22               	clrf	LFSRSeedRand@dwSeed+3,c
  2839  004E6C                     l10844:
  2840                           
  2841                           ; BSR set to: 0
  2842                           ;helpers.c: 100: dwLFSRRandSeed = dwSeed;
  2843  004E6C  C01F  F1DA         	movff	LFSRSeedRand@dwSeed,_dwLFSRRandSeed
  2844  004E70  C020  F1DB         	movff	LFSRSeedRand@dwSeed+1,_dwLFSRRandSeed+1
  2845  004E74  C021  F1DC         	movff	LFSRSeedRand@dwSeed+2,_dwLFSRRandSeed+2
  2846  004E78  C022  F1DD         	movff	LFSRSeedRand@dwSeed+3,_dwLFSRRandSeed+3
  2847                           
  2848                           ; BSR set to: 0
  2849                           ;helpers.c: 104: for (i = 0; i < 16; i++)
  2850  004E7C  6A27               	clrf	LFSRSeedRand@i,c
  2851  004E7E                     l10852:
  2852                           
  2853                           ;helpers.c: 105: LFSRRand();
  2854  004E7E  EC2C  F01F         	call	_LFSRRand	;wreg free
  2855                           
  2856                           ; BSR set to: 1
  2857  004E82  2A27               	incf	LFSRSeedRand@i,f,c
  2858                           
  2859                           ; BSR set to: 1
  2860  004E84  0E0F               	movlw	15
  2861  004E86  6427               	cpfsgt	LFSRSeedRand@i,c
  2862  004E88  D7FA               	goto	l10852
  2863  004E8A  0C0F               	retlw	15
  2864  004E8C                     __end_of_LFSRSeedRand:
  2865                           	opt stack 0
  2866                           tblptru	equ	0xFF8
  2867                           tblptrh	equ	0xFF7
  2868                           tblptrl	equ	0xFF6
  2869                           tablat	equ	0xFF5
  2870                           prodh	equ	0xFF4
  2871                           prodl	equ	0xFF3
  2872                           intcon	equ	0xFF2
  2873                           intcon2	equ	0xFF1
  2874                           postinc0	equ	0xFEE
  2875                           wreg	equ	0xFE8
  2876                           postdec1	equ	0xFE5
  2877                           fsr1h	equ	0xFE2
  2878                           fsr1l	equ	0xFE1
  2879                           status	equ	0xFD8
  2880                           
  2881 ;; *************** function _DHCPDisable *****************
  2882 ;; Defined at:
  2883 ;;		line 214 in file "../framework/tcpip/src/dhcp_client.c"
  2884 ;; Parameters:    Size  Location     Type
  2885 ;;  vInterface      1    wreg     unsigned char 
  2886 ;; Auto vars:     Size  Location     Type
  2887 ;;  vInterface      1    0[COMRAM] unsigned char 
  2888 ;; Return value:  Size  Location     Type
  2889 ;;		None               void
  2890 ;; Registers used:
  2891 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2892 ;; Tracked objects:
  2893 ;;		On entry : F/1
  2894 ;;		On exit  : F/0
  2895 ;;		Unchanged: 0/0
  2896 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2897 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2898 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2899 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2900 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2901 ;;Total ram usage:        0 bytes
  2902 ;; Hardware stack levels used:    1
  2903 ;; Hardware stack levels required when called:    7
  2904 ;; This function calls:
  2905 ;;		_UDPClose
  2906 ;; This function is called by:
  2907 ;;		_StackInit
  2908 ;; This function uses a non-reentrant model
  2909 ;;
  2910                           
  2911                           	psect	text9
  2912  0053EA                     __ptext9:
  2913                           	opt stack 0
  2914  0053EA                     _DHCPDisable:
  2915                           	opt stack 22
  2916                           
  2917                           ; BSR set to: 1
  2918                           ;dhcp_client.c: 216: ;
  2919                           ;dhcp_client.c: 218: if (DHCPClient.hDHCPSocket != (0xffu)) {
  2920                           
  2921                           ; BSR set to: 1
  2922                           ;incstack = 0
  2923  0053EA  0100               	movlb	0	; () banked
  2924  0053EC  29D9               	incf	_DHCPClient& (0+255),w,b
  2925  0053EE  E005               	bz	l11512
  2926                           
  2927                           ; BSR set to: 0
  2928                           ;dhcp_client.c: 219: UDPClose(DHCPClient.hDHCPSocket);
  2929  0053F0  51D9               	movf	_DHCPClient& (0+255),w,b
  2930  0053F2  ECAB  F025         	call	_UDPClose
  2931                           
  2932                           ;dhcp_client.c: 220: DHCPClient.hDHCPSocket = (0xffu);
  2933  0053F6  0100               	movlb	0	; () banked
  2934  0053F8  69D9               	setf	_DHCPClient& (0+255),b
  2935  0053FA                     l11512:
  2936                           
  2937                           ; BSR set to: 0
  2938                           ;dhcp_client.c: 221: }
  2939                           ;dhcp_client.c: 223: DHCPClient.smState = SM_DHCP_DISABLED;
  2940  0053FA  6BDA               	clrf	(_DHCPClient+1)& (0+255),b
  2941                           
  2942                           ; BSR set to: 0
  2943  0053FC  0012               	return		;funcret
  2944  0053FE                     __end_of_DHCPDisable:
  2945                           	opt stack 0
  2946                           tblptru	equ	0xFF8
  2947                           tblptrh	equ	0xFF7
  2948                           tblptrl	equ	0xFF6
  2949                           tablat	equ	0xFF5
  2950                           prodh	equ	0xFF4
  2951                           prodl	equ	0xFF3
  2952                           intcon	equ	0xFF2
  2953                           intcon2	equ	0xFF1
  2954                           postinc0	equ	0xFEE
  2955                           wreg	equ	0xFE8
  2956                           postdec1	equ	0xFE5
  2957                           fsr1h	equ	0xFE2
  2958                           fsr1l	equ	0xFE1
  2959                           status	equ	0xFD8
  2960                           
  2961 ;; *************** function _ARPInit *****************
  2962 ;; Defined at:
  2963 ;;		line 347 in file "../framework/tcpip/src/arp.c"
  2964 ;; Parameters:    Size  Location     Type
  2965 ;;		None
  2966 ;; Auto vars:     Size  Location     Type
  2967 ;;		None
  2968 ;; Return value:  Size  Location     Type
  2969 ;;		None               void
  2970 ;; Registers used:
  2971 ;;		None
  2972 ;; Tracked objects:
  2973 ;;		On entry : F/E
  2974 ;;		On exit  : F/1
  2975 ;;		Unchanged: 0/0
  2976 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2977 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2978 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2979 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2980 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2981 ;;Total ram usage:        0 bytes
  2982 ;; Hardware stack levels used:    1
  2983 ;; Hardware stack levels required when called:    6
  2984 ;; This function calls:
  2985 ;;		Nothing
  2986 ;; This function is called by:
  2987 ;;		_StackInit
  2988 ;; This function uses a non-reentrant model
  2989 ;;
  2990                           
  2991                           	psect	text10
  2992  005378                     __ptext10:
  2993                           	opt stack 0
  2994  005378                     _ARPInit:
  2995                           	opt stack 23
  2996                           
  2997                           ; BSR set to: 14
  2998                           ;arp.c: 349: Cache.MACAddr.v[0] = 0xff;
  2999                           
  3000                           ; BSR set to: 0
  3001                           ;incstack = 0
  3002  005378  0101               	movlb	1	; () banked
  3003  00537A  690E               	setf	(_Cache+4)& (0+255),b
  3004                           
  3005                           ;arp.c: 350: Cache.MACAddr.v[1] = 0xff;
  3006  00537C  690F               	setf	(_Cache+5)& (0+255),b
  3007                           
  3008                           ;arp.c: 351: Cache.MACAddr.v[2] = 0xff;
  3009  00537E  6910               	setf	(_Cache+6)& (0+255),b
  3010                           
  3011                           ;arp.c: 352: Cache.MACAddr.v[3] = 0xff;
  3012  005380  6911               	setf	(_Cache+7)& (0+255),b
  3013                           
  3014                           ;arp.c: 353: Cache.MACAddr.v[4] = 0xff;
  3015  005382  6912               	setf	(_Cache+8)& (0+255),b
  3016                           
  3017                           ;arp.c: 354: Cache.MACAddr.v[5] = 0xff;
  3018  005384  6913               	setf	(_Cache+9)& (0+255),b
  3019                           
  3020                           ;arp.c: 356: Cache.IPAddr.Val = 0xfffffffful;
  3021  005386  690A               	setf	_Cache& (0+255),b
  3022  005388  690B               	setf	(_Cache+1)& (0+255),b
  3023  00538A  690C               	setf	(_Cache+2)& (0+255),b
  3024  00538C  690D               	setf	(_Cache+3)& (0+255),b
  3025                           
  3026                           ; BSR set to: 1
  3027  00538E  0012               	return		;funcret
  3028  005390                     __end_of_ARPInit:
  3029                           	opt stack 0
  3030                           tblptru	equ	0xFF8
  3031                           tblptrh	equ	0xFF7
  3032                           tblptrl	equ	0xFF6
  3033                           tablat	equ	0xFF5
  3034                           prodh	equ	0xFF4
  3035                           prodl	equ	0xFF3
  3036                           intcon	equ	0xFF2
  3037                           intcon2	equ	0xFF1
  3038                           postinc0	equ	0xFEE
  3039                           wreg	equ	0xFE8
  3040                           postdec1	equ	0xFE5
  3041                           fsr1h	equ	0xFE2
  3042                           fsr1l	equ	0xFE1
  3043                           status	equ	0xFD8
  3044                           
  3045 ;; *************** function _ProcessDoorSwitch *****************
  3046 ;; Defined at:
  3047 ;;		line 59 in file "../src/DoorSwitch.c"
  3048 ;; Parameters:    Size  Location     Type
  3049 ;;		None
  3050 ;; Auto vars:     Size  Location     Type
  3051 ;;		None
  3052 ;; Return value:  Size  Location     Type
  3053 ;;		None               void
  3054 ;; Registers used:
  3055 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3056 ;; Tracked objects:
  3057 ;;		On entry : 0/1
  3058 ;;		On exit  : 0/0
  3059 ;;		Unchanged: 0/0
  3060 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3061 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3062 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3063 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3064 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3065 ;;Total ram usage:        0 bytes
  3066 ;; Hardware stack levels used:    1
  3067 ;; Hardware stack levels required when called:   18
  3068 ;; This function calls:
  3069 ;;		_ProcessStateDoorSwitchIdle
  3070 ;;		_ProcessStateDoorSwitchPressed
  3071 ;;		_ProcessStateDoorSwitchPressedTooLong
  3072 ;; This function is called by:
  3073 ;;		_main
  3074 ;; This function uses a non-reentrant model
  3075 ;;
  3076                           
  3077                           	psect	text11
  3078  0052C0                     __ptext11:
  3079                           	opt stack 0
  3080  0052C0                     _ProcessDoorSwitch:
  3081                           	opt stack 12
  3082                           
  3083                           ;DoorSwitch.c: 71: break;
  3084                           
  3085                           ; BSR set to: 0
  3086                           ;DoorSwitch.c: 70: ProcessStateDoorSwitchPressedTooLong();
  3087                           
  3088                           ;DoorSwitch.c: 67: break;
  3089                           
  3090                           ; BSR set to: 0
  3091                           ;DoorSwitch.c: 66: ProcessStateDoorSwitchPressed();
  3092                           
  3093                           ;DoorSwitch.c: 63: break;
  3094                           
  3095                           ; BSR set to: 0
  3096                           ;DoorSwitch.c: 62: ProcessStateDoorSwitchIdle();
  3097                           
  3098                           ;DoorSwitch.c: 60: switch (doorSwitchState) {
  3099                           
  3100                           ; BSR set to: 1
  3101                           ;incstack = 0
  3102  0052C0  0100               	movlb	0	; () banked
  3103  0052C2  51CF               	movf	_doorSwitchState& (0+255),w,b
  3104                           
  3105                           ; Switch size 1, requested type "speed"
  3106                           ; Number of cases is 3, Range of values is 0 to 2
  3107                           ; switch strategies available:
  3108                           ; Name         Instructions Cycles
  3109                           ; simple_byte           10     6 (average)
  3110                           ;	Chosen strategy is simple_byte
  3111  0052C4  E102 EF36  F02A    	bz	_ProcessStateDoorSwitchIdle
  3112  0052CA  0A01               	xorlw	1	; case 1
  3113  0052CC  E102 EF4F  F028    	bz	_ProcessStateDoorSwitchPressed
  3114  0052D2  0A03               	xorlw	3	; case 2
  3115  0052D4  E102 EF6E  F029    	bz	_ProcessStateDoorSwitchPressedTooLong
  3116  0052DA  0012               	return		;funcret
  3117  0052DC                     __end_of_ProcessDoorSwitch:
  3118                           	opt stack 0
  3119                           tblptru	equ	0xFF8
  3120                           tblptrh	equ	0xFF7
  3121                           tblptrl	equ	0xFF6
  3122                           tablat	equ	0xFF5
  3123                           prodh	equ	0xFF4
  3124                           prodl	equ	0xFF3
  3125                           intcon	equ	0xFF2
  3126                           intcon2	equ	0xFF1
  3127                           postinc0	equ	0xFEE
  3128                           wreg	equ	0xFE8
  3129                           postdec1	equ	0xFE5
  3130                           fsr1h	equ	0xFE2
  3131                           fsr1l	equ	0xFE1
  3132                           status	equ	0xFD8
  3133                           
  3134 ;; *************** function _ProcessStateDoorSwitchPressedTooLong *****************
  3135 ;; Defined at:
  3136 ;;		line 142 in file "../src/DoorSwitch.c"
  3137 ;; Parameters:    Size  Location     Type
  3138 ;;		None
  3139 ;; Auto vars:     Size  Location     Type
  3140 ;;		None
  3141 ;; Return value:  Size  Location     Type
  3142 ;;		None               void
  3143 ;; Registers used:
  3144 ;;		wreg, fsr2l, fsr2h, status,2, cstack
  3145 ;; Tracked objects:
  3146 ;;		On entry : 0/0
  3147 ;;		On exit  : F/0
  3148 ;;		Unchanged: 0/0
  3149 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3150 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3151 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3152 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3153 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3154 ;;Total ram usage:        0 bytes
  3155 ;; Hardware stack levels used:    1
  3156 ;; Hardware stack levels required when called:    9
  3157 ;; This function calls:
  3158 ;;		_Beep
  3159 ;;		_IsDoorSwitchPressed
  3160 ;; This function is called by:
  3161 ;;		_ProcessDoorSwitch
  3162 ;; This function uses a non-reentrant model
  3163 ;;
  3164                           
  3165                           	psect	text12
  3166  0052DC                     __ptext12:
  3167                           	opt stack 0
  3168  0052DC                     _ProcessStateDoorSwitchPressedTooLong:
  3169                           	opt stack 20
  3170                           
  3171                           ;DoorSwitch.c: 143: Beep(100);
  3172                           
  3173                           ;incstack = 0
  3174  0052DC  0E64               	movlw	100
  3175  0052DE  6E24               	movwf	Beep@value,c
  3176  0052E0  6A25               	clrf	Beep@value+1,c
  3177  0052E2  6A26               	clrf	Beep@value+2,c
  3178  0052E4  6A27               	clrf	Beep@value+3,c
  3179  0052E6  EC75  F027         	call	_Beep	;wreg free
  3180                           
  3181                           ;DoorSwitch.c: 145: if (IsDoorSwitchPressed() == 0) {
  3182  0052EA  EC13  F02A         	call	_IsDoorSwitchPressed	;wreg free
  3183  0052EE  0900               	iorlw	0
  3184  0052F0  B4D8               	btfsc	status,2,c
  3185                           
  3186                           ; BSR set to: 0
  3187                           ;DoorSwitch.c: 146: doorSwitchState = STATE_DOOR_SWITCH_IDLE;
  3188  0052F2  6BCF               	clrf	_doorSwitchState& (0+255),b
  3189                           
  3190                           ; BSR set to: 0
  3191  0052F4  0012               	return		;funcret
  3192  0052F6                     __end_of_ProcessStateDoorSwitchPressedTooLong:
  3193                           	opt stack 0
  3194                           tblptru	equ	0xFF8
  3195                           tblptrh	equ	0xFF7
  3196                           tblptrl	equ	0xFF6
  3197                           tablat	equ	0xFF5
  3198                           prodh	equ	0xFF4
  3199                           prodl	equ	0xFF3
  3200                           intcon	equ	0xFF2
  3201                           intcon2	equ	0xFF1
  3202                           postinc0	equ	0xFEE
  3203                           wreg	equ	0xFE8
  3204                           postdec1	equ	0xFE5
  3205                           fsr1h	equ	0xFE2
  3206                           fsr1l	equ	0xFE1
  3207                           status	equ	0xFD8
  3208                           
  3209 ;; *************** function _ProcessStateDoorSwitchPressed *****************
  3210 ;; Defined at:
  3211 ;;		line 126 in file "../src/DoorSwitch.c"
  3212 ;; Parameters:    Size  Location     Type
  3213 ;;		None
  3214 ;; Auto vars:     Size  Location     Type
  3215 ;;		None
  3216 ;; Return value:  Size  Location     Type
  3217 ;;		None               void
  3218 ;; Registers used:
  3219 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3220 ;; Tracked objects:
  3221 ;;		On entry : 0/0
  3222 ;;		On exit  : F/0
  3223 ;;		Unchanged: 0/0
  3224 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3225 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3226 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3227 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3228 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3229 ;;Total ram usage:        0 bytes
  3230 ;; Hardware stack levels used:    1
  3231 ;; Hardware stack levels required when called:   16
  3232 ;; This function calls:
  3233 ;;		_IsDoorSwitchPressed
  3234 ;;		_SendDoorSwitchPressedTooLongEvent
  3235 ;; This function is called by:
  3236 ;;		_ProcessDoorSwitch
  3237 ;; This function uses a non-reentrant model
  3238 ;;
  3239                           
  3240                           	psect	text13
  3241  00509E                     __ptext13:
  3242                           	opt stack 0
  3243  00509E                     _ProcessStateDoorSwitchPressed:
  3244                           	opt stack 13
  3245                           
  3246                           ;DoorSwitch.c: 128: (LATCbits.LATC0) = 1;
  3247                           
  3248                           ; BSR set to: 0
  3249                           ;incstack = 0
  3250  00509E  808B               	bsf	3979,0,c	;volatile
  3251                           
  3252                           ;DoorSwitch.c: 131: if (m_doorSwitchPressedTooLongTimer == 0 && m_doorSwitchPressedTooLo
      +                          ngFunctionalityIsActiveFlag == 1) {
  3253  0050A0  0101               	movlb	1	; () banked
  3254  0050A2  5134               	movf	_m_doorSwitchPressedTooLongTimer& (0+255),w,b
  3255  0050A4  1135               	iorwf	(_m_doorSwitchPressedTooLongTimer+1)& (0+255),w,b
  3256  0050A6  1136               	iorwf	(_m_doorSwitchPressedTooLongTimer+2)& (0+255),w,b
  3257  0050A8  1137               	iorwf	(_m_doorSwitchPressedTooLongTimer+3)& (0+255),w,b
  3258  0050AA  E107               	bnz	l10928
  3259                           
  3260                           ; BSR set to: 1
  3261  0050AC  043F               	decf	_m_doorSwitchPressedTooLongFunctionalityIsActiveFlag,w,c
  3262  0050AE  E105               	bnz	l10928
  3263                           
  3264                           ; BSR set to: 1
  3265                           ;DoorSwitch.c: 132: doorSwitchState = STATE_DOOR_SWITCH_PRESSED_TOO_LONG;
  3266  0050B0  0E02               	movlw	2
  3267  0050B2  0100               	movlb	0	; () banked
  3268  0050B4  6FCF               	movwf	_doorSwitchState& (0+255),b
  3269                           
  3270                           ; BSR set to: 0
  3271                           ;DoorSwitch.c: 134: SendDoorSwitchPressedTooLongEvent();
  3272  0050B6  ECAD  F022         	call	_SendDoorSwitchPressedTooLongEvent	;wreg free
  3273  0050BA                     l10928:
  3274                           
  3275                           ;DoorSwitch.c: 135: }
  3276                           ;DoorSwitch.c: 137: if (IsDoorSwitchPressed() == 0) {
  3277  0050BA  EC13  F02A         	call	_IsDoorSwitchPressed	;wreg free
  3278  0050BE  0900               	iorlw	0
  3279  0050C0  B4D8               	btfsc	status,2,c
  3280                           
  3281                           ; BSR set to: 0
  3282                           ;DoorSwitch.c: 138: doorSwitchState = STATE_DOOR_SWITCH_IDLE;
  3283  0050C2  6BCF               	clrf	_doorSwitchState& (0+255),b
  3284                           
  3285                           ; BSR set to: 0
  3286  0050C4  0012               	return		;funcret
  3287  0050C6                     __end_of_ProcessStateDoorSwitchPressed:
  3288                           	opt stack 0
  3289                           tblptru	equ	0xFF8
  3290                           tblptrh	equ	0xFF7
  3291                           tblptrl	equ	0xFF6
  3292                           tablat	equ	0xFF5
  3293                           prodh	equ	0xFF4
  3294                           prodl	equ	0xFF3
  3295                           intcon	equ	0xFF2
  3296                           intcon2	equ	0xFF1
  3297                           postinc0	equ	0xFEE
  3298                           wreg	equ	0xFE8
  3299                           postdec1	equ	0xFE5
  3300                           fsr1h	equ	0xFE2
  3301                           fsr1l	equ	0xFE1
  3302                           status	equ	0xFD8
  3303                           
  3304 ;; *************** function _SendDoorSwitchPressedTooLongEvent *****************
  3305 ;; Defined at:
  3306 ;;		line 531 in file "../src/NDC.c"
  3307 ;; Parameters:    Size  Location     Type
  3308 ;;		None
  3309 ;; Auto vars:     Size  Location     Type
  3310 ;;		None
  3311 ;; Return value:  Size  Location     Type
  3312 ;;		None               void
  3313 ;; Registers used:
  3314 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3315 ;; Tracked objects:
  3316 ;;		On entry : F/0
  3317 ;;		On exit  : 0/0
  3318 ;;		Unchanged: 0/0
  3319 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3320 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3321 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3322 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3323 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3324 ;;Total ram usage:        0 bytes
  3325 ;; Hardware stack levels used:    1
  3326 ;; Hardware stack levels required when called:   15
  3327 ;; This function calls:
  3328 ;;		_SendUDPMessage
  3329 ;; This function is called by:
  3330 ;;		_ProcessStateDoorSwitchPressed
  3331 ;; This function uses a non-reentrant model
  3332 ;;
  3333                           
  3334                           	psect	text14
  3335  00455A                     __ptext14:
  3336                           	opt stack 0
  3337  00455A                     _SendDoorSwitchPressedTooLongEvent:
  3338                           	opt stack 13
  3339                           
  3340                           ; BSR set to: 0
  3341                           ;NDC.c: 533: m_messageBuffer[0] = 0;
  3342                           
  3343                           ; BSR set to: 0
  3344                           ;incstack = 0
  3345  00455A  0E00               	movlw	0
  3346  00455C  CFE8 F341          	movff	wreg,_m_messageBuffer
  3347                           
  3348                           ;NDC.c: 534: m_messageBuffer[1] = 0x14;
  3349  004560  0E14               	movlw	20
  3350  004562  CFE8 F342          	movff	wreg,_m_messageBuffer+1
  3351                           
  3352                           ; BSR set to: 0
  3353                           ;NDC.c: 535: m_messageBuffer[2] = g_serializedMACAddress[0];
  3354  004566  EE23  F043         	lfsr	2,_m_messageBuffer+2
  3355  00456A  C0F9  FFDF         	movff	_g_serializedMACAddress,indf2
  3356                           
  3357                           ;NDC.c: 536: m_messageBuffer[3] = g_serializedMACAddress[1];
  3358  00456E  EE23  F044         	lfsr	2,_m_messageBuffer+3
  3359  004572  C0FA  FFDF         	movff	_g_serializedMACAddress+1,indf2
  3360                           
  3361                           ;NDC.c: 537: m_messageBuffer[4] = g_serializedMACAddress[2];
  3362  004576  EE23  F045         	lfsr	2,_m_messageBuffer+4
  3363  00457A  C0FB  FFDF         	movff	_g_serializedMACAddress+2,indf2
  3364                           
  3365                           ;NDC.c: 538: m_messageBuffer[5] = g_serializedMACAddress[3];
  3366  00457E  EE23  F046         	lfsr	2,_m_messageBuffer+5
  3367  004582  C0FC  FFDF         	movff	_g_serializedMACAddress+3,indf2
  3368                           
  3369                           ;NDC.c: 539: m_messageBuffer[6] = g_serializedMACAddress[4];
  3370  004586  EE23  F047         	lfsr	2,_m_messageBuffer+6
  3371  00458A  C0FD  FFDF         	movff	_g_serializedMACAddress+4,indf2
  3372                           
  3373                           ;NDC.c: 540: m_messageBuffer[7] = g_serializedMACAddress[5];
  3374  00458E  EE23  F048         	lfsr	2,_m_messageBuffer+7
  3375  004592  C0FE  FFDF         	movff	_g_serializedMACAddress+5,indf2
  3376                           
  3377                           ; BSR set to: 0
  3378                           ;NDC.c: 542: if (m_state == STATE_CONNECTED)
  3379  004596  0E04               	movlw	4
  3380  004598  19D8               	xorwf	_m_state& (0+255),w,b
  3381  00459A  A4D8               	btfss	status,2,c
  3382  00459C  0012               	return	
  3383                           
  3384                           ; BSR set to: 0
  3385                           ;NDC.c: 543: SendUDPMessage(m_messageBuffer, 8, m_udpSocket);
  3386  00459E  0E41               	movlw	low _m_messageBuffer
  3387  0045A0  0101               	movlb	1	; () banked
  3388  0045A2  6FE8               	movwf	SendUDPMessage@message& (0+255),b
  3389  0045A4  0E03               	movlw	high _m_messageBuffer
  3390  0045A6  6FE9               	movwf	(SendUDPMessage@message+1)& (0+255),b
  3391  0045A8  6BEB               	clrf	(SendUDPMessage@messageSize+1)& (0+255),b
  3392  0045AA  0E08               	movlw	8
  3393  0045AC  6FEA               	movwf	SendUDPMessage@messageSize& (0+255),b
  3394  0045AE  C041  F1EC         	movff	_m_udpSocket,SendUDPMessage@udpSocket
  3395  0045B2  EF65  F023         	goto	_SendUDPMessage	;wreg free
  3396  0045B6                     __end_of_SendDoorSwitchPressedTooLongEvent:
  3397                           	opt stack 0
  3398                           tblptru	equ	0xFF8
  3399                           tblptrh	equ	0xFF7
  3400                           tblptrl	equ	0xFF6
  3401                           tablat	equ	0xFF5
  3402                           prodh	equ	0xFF4
  3403                           prodl	equ	0xFF3
  3404                           intcon	equ	0xFF2
  3405                           intcon2	equ	0xFF1
  3406                           postinc0	equ	0xFEE
  3407                           wreg	equ	0xFE8
  3408                           postdec1	equ	0xFE5
  3409                           fsr1h	equ	0xFE2
  3410                           fsr1l	equ	0xFE1
  3411                           indf2	equ	0xFDF
  3412                           status	equ	0xFD8
  3413                           
  3414 ;; *************** function _ProcessStateDoorSwitchIdle *****************
  3415 ;; Defined at:
  3416 ;;		line 75 in file "../src/DoorSwitch.c"
  3417 ;; Parameters:    Size  Location     Type
  3418 ;;		None
  3419 ;; Auto vars:     Size  Location     Type
  3420 ;;		None
  3421 ;; Return value:  Size  Location     Type
  3422 ;;		None               void
  3423 ;; Registers used:
  3424 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3425 ;; Tracked objects:
  3426 ;;		On entry : 0/0
  3427 ;;		On exit  : 0/0
  3428 ;;		Unchanged: 0/0
  3429 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3430 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3431 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3432 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3433 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3434 ;;Total ram usage:        0 bytes
  3435 ;; Hardware stack levels used:    1
  3436 ;; Hardware stack levels required when called:   17
  3437 ;; This function calls:
  3438 ;;		_IsDoorSwitchPressed
  3439 ;;		_ProcessDoorSwitchIsPressed
  3440 ;;		_ProcessDoorSwitchIsReleased
  3441 ;; This function is called by:
  3442 ;;		_ProcessDoorSwitch
  3443 ;; This function uses a non-reentrant model
  3444 ;;
  3445                           
  3446                           	psect	text15
  3447  00546C                     __ptext15:
  3448                           	opt stack 0
  3449  00546C                     _ProcessStateDoorSwitchIdle:
  3450                           	opt stack 12
  3451                           
  3452                           ;DoorSwitch.c: 76: if (IsDoorSwitchPressed() == 1) {
  3453                           
  3454                           ;incstack = 0
  3455  00546C  EC13  F02A         	call	_IsDoorSwitchPressed	;wreg free
  3456  005470  06E8               	decf	wreg,f,c
  3457  005472  E002 EF66  F02A    	bnz	_ProcessDoorSwitchIsReleased
  3458                           
  3459                           ; BSR set to: 0
  3460                           ;DoorSwitch.c: 77: ProcessDoorSwitchIsPressed();
  3461  005478  EF5E  F026         	goto	_ProcessDoorSwitchIsPressed	;wreg free
  3462  00547C                     __end_of_ProcessStateDoorSwitchIdle:
  3463                           	opt stack 0
  3464                           tblptru	equ	0xFF8
  3465                           tblptrh	equ	0xFF7
  3466                           tblptrl	equ	0xFF6
  3467                           tablat	equ	0xFF5
  3468                           prodh	equ	0xFF4
  3469                           prodl	equ	0xFF3
  3470                           intcon	equ	0xFF2
  3471                           intcon2	equ	0xFF1
  3472                           postinc0	equ	0xFEE
  3473                           wreg	equ	0xFE8
  3474                           postdec1	equ	0xFE5
  3475                           fsr1h	equ	0xFE2
  3476                           fsr1l	equ	0xFE1
  3477                           indf2	equ	0xFDF
  3478                           status	equ	0xFD8
  3479                           
  3480 ;; *************** function _ProcessDoorSwitchIsReleased *****************
  3481 ;; Defined at:
  3482 ;;		line 121 in file "../src/DoorSwitch.c"
  3483 ;; Parameters:    Size  Location     Type
  3484 ;;		None
  3485 ;; Auto vars:     Size  Location     Type
  3486 ;;		None
  3487 ;; Return value:  Size  Location     Type
  3488 ;;		None               void
  3489 ;; Registers used:
  3490 ;;		None
  3491 ;; Tracked objects:
  3492 ;;		On entry : F/0
  3493 ;;		On exit  : F/0
  3494 ;;		Unchanged: F/0
  3495 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3496 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3497 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3498 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3499 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3500 ;;Total ram usage:        0 bytes
  3501 ;; Hardware stack levels used:    1
  3502 ;; Hardware stack levels required when called:    6
  3503 ;; This function calls:
  3504 ;;		Nothing
  3505 ;; This function is called by:
  3506 ;;		_ProcessStateDoorSwitchIdle
  3507 ;; This function uses a non-reentrant model
  3508 ;;
  3509                           
  3510                           	psect	text16
  3511  0054CC                     __ptext16:
  3512                           	opt stack 0
  3513  0054CC                     _ProcessDoorSwitchIsReleased:
  3514                           	opt stack 22
  3515                           
  3516                           ; BSR set to: 0
  3517                           ;DoorSwitch.c: 123: (LATCbits.LATC0) = 0;
  3518                           
  3519                           ;incstack = 0
  3520  0054CC  908B               	bcf	3979,0,c	;volatile
  3521                           
  3522                           ; BSR set to: 0
  3523  0054CE  0012               	return		;funcret
  3524  0054D0                     __end_of_ProcessDoorSwitchIsReleased:
  3525                           	opt stack 0
  3526                           tblptru	equ	0xFF8
  3527                           tblptrh	equ	0xFF7
  3528                           tblptrl	equ	0xFF6
  3529                           tablat	equ	0xFF5
  3530                           prodh	equ	0xFF4
  3531                           prodl	equ	0xFF3
  3532                           intcon	equ	0xFF2
  3533                           intcon2	equ	0xFF1
  3534                           postinc0	equ	0xFEE
  3535                           wreg	equ	0xFE8
  3536                           postdec1	equ	0xFE5
  3537                           fsr1h	equ	0xFE2
  3538                           fsr1l	equ	0xFE1
  3539                           indf2	equ	0xFDF
  3540                           status	equ	0xFD8
  3541                           
  3542 ;; *************** function _ProcessDoorSwitchIsPressed *****************
  3543 ;; Defined at:
  3544 ;;		line 84 in file "../src/DoorSwitch.c"
  3545 ;; Parameters:    Size  Location     Type
  3546 ;;		None
  3547 ;; Auto vars:     Size  Location     Type
  3548 ;;		None
  3549 ;; Return value:  Size  Location     Type
  3550 ;;		None               void
  3551 ;; Registers used:
  3552 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3553 ;; Tracked objects:
  3554 ;;		On entry : F/0
  3555 ;;		On exit  : 0/0
  3556 ;;		Unchanged: 0/0
  3557 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3558 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3559 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3560 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3561 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3562 ;;Total ram usage:        0 bytes
  3563 ;; Hardware stack levels used:    1
  3564 ;; Hardware stack levels required when called:   16
  3565 ;; This function calls:
  3566 ;;		_NDCGetRelayActiveTime
  3567 ;;		_SendDoorSwitchPressedEvent
  3568 ;;		_isOpenDoorFlag
  3569 ;;		_setDoorOpen
  3570 ;; This function is called by:
  3571 ;;		_ProcessStateDoorSwitchIdle
  3572 ;; This function uses a non-reentrant model
  3573 ;;
  3574                           
  3575                           	psect	text17
  3576  004CBC                     __ptext17:
  3577                           	opt stack 0
  3578  004CBC                     _ProcessDoorSwitchIsPressed:
  3579                           	opt stack 12
  3580                           
  3581                           ; BSR set to: 0
  3582                           ;DoorSwitch.c: 85: doorSwitchState = STATE_DOOR_SWITCH_PRESSED;
  3583                           
  3584                           ; BSR set to: 0
  3585                           ;incstack = 0
  3586  004CBC  0E01               	movlw	1
  3587  004CBE  6FCF               	movwf	_doorSwitchState& (0+255),b
  3588                           
  3589                           ; BSR set to: 0
  3590                           ;DoorSwitch.c: 88: if(m_doorSwitchPressedTooLongFunctionalityIsActiveFlag == 1) {
  3591  004CC0  043F               	decf	_m_doorSwitchPressedTooLongFunctionalityIsActiveFlag,w,c
  3592  004CC2  E108               	bnz	l10666
  3593                           
  3594                           ; BSR set to: 0
  3595                           ;DoorSwitch.c: 90: m_doorSwitchPressedTooLongTimer = m_doorSwitchPressedTooLongTimerStar
      +                          tValue;
  3596  004CC4  C1E2  F134         	movff	_m_doorSwitchPressedTooLongTimerStartValue,_m_doorSwitchPressedTooLongTimer
  3597  004CC8  C1E3  F135         	movff	_m_doorSwitchPressedTooLongTimerStartValue+1,_m_doorSwitchPressedTooLongTimer+1
  3598  004CCC  C1E4  F136         	movff	_m_doorSwitchPressedTooLongTimerStartValue+2,_m_doorSwitchPressedTooLongTimer+2
  3599  004CD0  C1E5  F137         	movff	_m_doorSwitchPressedTooLongTimerStartValue+3,_m_doorSwitchPressedTooLongTimer+3
  3600  004CD4                     l10666:
  3601                           
  3602                           ; BSR set to: 0
  3603                           ;DoorSwitch.c: 91: }
  3604                           ;DoorSwitch.c: 93: if (isOpenDoorFlag() == 0) {
  3605  004CD4  EC68  F02A         	call	_isOpenDoorFlag	;wreg free
  3606  004CD8  0900               	iorlw	0
  3607  004CDA  A4D8               	btfss	status,2,c
  3608  004CDC  0012               	return	
  3609                           
  3610                           ; BSR set to: 0
  3611                           ;DoorSwitch.c: 94: setDoorOpen(NDCGetRelayActiveTime());
  3612  004CDE  EC4C  F02A         	call	_NDCGetRelayActiveTime	;wreg free
  3613  004CE2  C01C  F060         	movff	?_NDCGetRelayActiveTime,setDoorOpen@time
  3614  004CE6  C01D  F061         	movff	?_NDCGetRelayActiveTime+1,setDoorOpen@time+1
  3615  004CEA  0E00               	movlw	0
  3616  004CEC  BF61               	btfsc	(setDoorOpen@time+1)& (0+255),7,b
  3617  004CEE  0EFF               	movlw	-1
  3618  004CF0  6F62               	movwf	(setDoorOpen@time+2)& (0+255),b
  3619  004CF2  6F63               	movwf	(setDoorOpen@time+3)& (0+255),b
  3620  004CF4  ECE6  F027         	call	_setDoorOpen	;wreg free
  3621                           
  3622                           ;DoorSwitch.c: 97: SendDoorSwitchPressedEvent();
  3623  004CF8  EF20  F022         	goto	_SendDoorSwitchPressedEvent	;wreg free
  3624  004CFC                     __end_of_ProcessDoorSwitchIsPressed:
  3625                           	opt stack 0
  3626                           tblptru	equ	0xFF8
  3627                           tblptrh	equ	0xFF7
  3628                           tblptrl	equ	0xFF6
  3629                           tablat	equ	0xFF5
  3630                           prodh	equ	0xFF4
  3631                           prodl	equ	0xFF3
  3632                           intcon	equ	0xFF2
  3633                           intcon2	equ	0xFF1
  3634                           postinc0	equ	0xFEE
  3635                           wreg	equ	0xFE8
  3636                           postdec1	equ	0xFE5
  3637                           fsr1h	equ	0xFE2
  3638                           fsr1l	equ	0xFE1
  3639                           indf2	equ	0xFDF
  3640                           status	equ	0xFD8
  3641                           
  3642 ;; *************** function _setDoorOpen *****************
  3643 ;; Defined at:
  3644 ;;		line 417 in file "../src/NDC.c"
  3645 ;; Parameters:    Size  Location     Type
  3646 ;;  time            4    0[BANK0 ] long 
  3647 ;; Auto vars:     Size  Location     Type
  3648 ;;		None
  3649 ;; Return value:  Size  Location     Type
  3650 ;;		None               void
  3651 ;; Registers used:
  3652 ;;		wreg, fsr2l, fsr2h, status,2, cstack
  3653 ;; Tracked objects:
  3654 ;;		On entry : F/0
  3655 ;;		On exit  : 0/0
  3656 ;;		Unchanged: 0/0
  3657 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3658 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3659 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3660 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3661 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3662 ;;Total ram usage:        4 bytes
  3663 ;; Hardware stack levels used:    1
  3664 ;; Hardware stack levels required when called:    9
  3665 ;; This function calls:
  3666 ;;		_Beep
  3667 ;; This function is called by:
  3668 ;;		_ProcessDoorSwitchIsPressed
  3669 ;; This function uses a non-reentrant model
  3670 ;;
  3671                           
  3672                           	psect	text18
  3673  004FCC                     __ptext18:
  3674                           	opt stack 0
  3675  004FCC                     _setDoorOpen:
  3676                           	opt stack 18
  3677                           
  3678                           ; BSR set to: 0
  3679                           ;NDC.c: 418: m_openDoorTime = time;
  3680                           
  3681                           ;incstack = 0
  3682  004FCC  C060  F138         	movff	setDoorOpen@time,_m_openDoorTime
  3683  004FD0  C061  F139         	movff	setDoorOpen@time+1,_m_openDoorTime+1
  3684  004FD4  C062  F13A         	movff	setDoorOpen@time+2,_m_openDoorTime+2
  3685  004FD8  C063  F13B         	movff	setDoorOpen@time+3,_m_openDoorTime+3
  3686                           
  3687                           ;NDC.c: 421: (LATFbits.LATF2) = 0;
  3688  004FDC  948E               	bcf	3982,2,c	;volatile
  3689                           
  3690                           ;NDC.c: 422: (LATFbits.LATF3) = 1;
  3691  004FDE  868E               	bsf	3982,3,c	;volatile
  3692                           
  3693                           ;NDC.c: 423: (LATDbits.LATD2) = 1;
  3694  004FE0  848C               	bsf	3980,2,c	;volatile
  3695                           
  3696                           ; BSR set to: 0
  3697                           ;NDC.c: 425: m_openDoorFlag = 1;
  3698  004FE2  0E01               	movlw	1
  3699  004FE4  6FD7               	movwf	_m_openDoorFlag& (0+255),b
  3700                           
  3701                           ; BSR set to: 0
  3702                           ;NDC.c: 427: Beep(1000);
  3703  004FE6  0EE8               	movlw	232
  3704  004FE8  6E24               	movwf	Beep@value,c
  3705  004FEA  0E03               	movlw	3
  3706  004FEC  6E25               	movwf	Beep@value+1,c
  3707  004FEE  6A26               	clrf	Beep@value+2,c
  3708  004FF0  6A27               	clrf	Beep@value+3,c
  3709  004FF2  EF75  F027         	goto	_Beep	;wreg free
  3710  004FF6                     __end_of_setDoorOpen:
  3711                           	opt stack 0
  3712                           tblptru	equ	0xFF8
  3713                           tblptrh	equ	0xFF7
  3714                           tblptrl	equ	0xFF6
  3715                           tablat	equ	0xFF5
  3716                           prodh	equ	0xFF4
  3717                           prodl	equ	0xFF3
  3718                           intcon	equ	0xFF2
  3719                           intcon2	equ	0xFF1
  3720                           postinc0	equ	0xFEE
  3721                           wreg	equ	0xFE8
  3722                           postdec1	equ	0xFE5
  3723                           fsr1h	equ	0xFE2
  3724                           fsr1l	equ	0xFE1
  3725                           indf2	equ	0xFDF
  3726                           status	equ	0xFD8
  3727                           
  3728 ;; *************** function _isOpenDoorFlag *****************
  3729 ;; Defined at:
  3730 ;;		line 389 in file "../src/NDC.c"
  3731 ;; Parameters:    Size  Location     Type
  3732 ;;		None
  3733 ;; Auto vars:     Size  Location     Type
  3734 ;;		None
  3735 ;; Return value:  Size  Location     Type
  3736 ;;                  1    wreg      unsigned char 
  3737 ;; Registers used:
  3738 ;;		wreg, status,2
  3739 ;; Tracked objects:
  3740 ;;		On entry : F/0
  3741 ;;		On exit  : F/0
  3742 ;;		Unchanged: 0/0
  3743 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3744 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3745 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3746 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3747 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3748 ;;Total ram usage:        0 bytes
  3749 ;; Hardware stack levels used:    1
  3750 ;; Hardware stack levels required when called:    6
  3751 ;; This function calls:
  3752 ;;		Nothing
  3753 ;; This function is called by:
  3754 ;;		_ProcessDoorSwitchIsPressed
  3755 ;; This function uses a non-reentrant model
  3756 ;;
  3757                           
  3758                           	psect	text19
  3759  0054D0                     __ptext19:
  3760                           	opt stack 0
  3761  0054D0                     _isOpenDoorFlag:
  3762                           	opt stack 21
  3763                           
  3764                           ; BSR set to: 0
  3765                           ;NDC.c: 390: return m_openDoorFlag;
  3766                           
  3767                           ;incstack = 0
  3768  0054D0  51D7               	movf	_m_openDoorFlag& (0+255),w,b
  3769                           
  3770                           ; BSR set to: 0
  3771  0054D2  0012               	return		;funcret
  3772  0054D4                     __end_of_isOpenDoorFlag:
  3773                           	opt stack 0
  3774                           tblptru	equ	0xFF8
  3775                           tblptrh	equ	0xFF7
  3776                           tblptrl	equ	0xFF6
  3777                           tablat	equ	0xFF5
  3778                           prodh	equ	0xFF4
  3779                           prodl	equ	0xFF3
  3780                           intcon	equ	0xFF2
  3781                           intcon2	equ	0xFF1
  3782                           postinc0	equ	0xFEE
  3783                           wreg	equ	0xFE8
  3784                           postdec1	equ	0xFE5
  3785                           fsr1h	equ	0xFE2
  3786                           fsr1l	equ	0xFE1
  3787                           indf2	equ	0xFDF
  3788                           status	equ	0xFD8
  3789                           
  3790 ;; *************** function _SendDoorSwitchPressedEvent *****************
  3791 ;; Defined at:
  3792 ;;		line 457 in file "../src/NDC.c"
  3793 ;; Parameters:    Size  Location     Type
  3794 ;;		None
  3795 ;; Auto vars:     Size  Location     Type
  3796 ;;		None
  3797 ;; Return value:  Size  Location     Type
  3798 ;;		None               void
  3799 ;; Registers used:
  3800 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3801 ;; Tracked objects:
  3802 ;;		On entry : 0/0
  3803 ;;		On exit  : 0/0
  3804 ;;		Unchanged: 0/0
  3805 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3806 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3807 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3808 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3809 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3810 ;;Total ram usage:        0 bytes
  3811 ;; Hardware stack levels used:    1
  3812 ;; Hardware stack levels required when called:   15
  3813 ;; This function calls:
  3814 ;;		_SendUDPMessage
  3815 ;; This function is called by:
  3816 ;;		_ProcessDoorSwitchIsPressed
  3817 ;; This function uses a non-reentrant model
  3818 ;;
  3819                           
  3820                           	psect	text20
  3821  004440                     __ptext20:
  3822                           	opt stack 0
  3823  004440                     _SendDoorSwitchPressedEvent:
  3824                           	opt stack 12
  3825                           
  3826                           ;NDC.c: 459: m_messageBuffer[0] = 0;
  3827                           
  3828                           ; BSR set to: 0
  3829                           ;incstack = 0
  3830  004440  0E00               	movlw	0
  3831  004442  CFE8 F341          	movff	wreg,_m_messageBuffer
  3832                           
  3833                           ;NDC.c: 460: m_messageBuffer[1] = 0x10;
  3834  004446  0E10               	movlw	16
  3835  004448  CFE8 F342          	movff	wreg,_m_messageBuffer+1
  3836                           
  3837                           ;NDC.c: 461: m_messageBuffer[2] = g_serializedMACAddress[0];
  3838  00444C  EE23  F043         	lfsr	2,_m_messageBuffer+2
  3839  004450  C0F9  FFDF         	movff	_g_serializedMACAddress,indf2
  3840                           
  3841                           ;NDC.c: 462: m_messageBuffer[3] = g_serializedMACAddress[1];
  3842  004454  EE23  F044         	lfsr	2,_m_messageBuffer+3
  3843  004458  C0FA  FFDF         	movff	_g_serializedMACAddress+1,indf2
  3844                           
  3845                           ;NDC.c: 463: m_messageBuffer[4] = g_serializedMACAddress[2];
  3846  00445C  EE23  F045         	lfsr	2,_m_messageBuffer+4
  3847  004460  C0FB  FFDF         	movff	_g_serializedMACAddress+2,indf2
  3848                           
  3849                           ;NDC.c: 464: m_messageBuffer[5] = g_serializedMACAddress[3];
  3850  004464  EE23  F046         	lfsr	2,_m_messageBuffer+5
  3851  004468  C0FC  FFDF         	movff	_g_serializedMACAddress+3,indf2
  3852                           
  3853                           ;NDC.c: 465: m_messageBuffer[6] = g_serializedMACAddress[4];
  3854  00446C  EE23  F047         	lfsr	2,_m_messageBuffer+6
  3855  004470  C0FD  FFDF         	movff	_g_serializedMACAddress+4,indf2
  3856                           
  3857                           ;NDC.c: 466: m_messageBuffer[7] = g_serializedMACAddress[5];
  3858  004474  EE23  F048         	lfsr	2,_m_messageBuffer+7
  3859  004478  C0FE  FFDF         	movff	_g_serializedMACAddress+5,indf2
  3860                           
  3861                           ;NDC.c: 468: if (m_state == STATE_CONNECTED)
  3862  00447C  0E04               	movlw	4
  3863  00447E  0100               	movlb	0	; () banked
  3864  004480  19D8               	xorwf	_m_state& (0+255),w,b
  3865  004482  A4D8               	btfss	status,2,c
  3866  004484  0012               	return	
  3867                           
  3868                           ; BSR set to: 0
  3869                           ;NDC.c: 469: SendUDPMessage(m_messageBuffer, 8, m_udpSocket);
  3870  004486  0E41               	movlw	low _m_messageBuffer
  3871  004488  0101               	movlb	1	; () banked
  3872  00448A  6FE8               	movwf	SendUDPMessage@message& (0+255),b
  3873  00448C  0E03               	movlw	high _m_messageBuffer
  3874  00448E  6FE9               	movwf	(SendUDPMessage@message+1)& (0+255),b
  3875  004490  6BEB               	clrf	(SendUDPMessage@messageSize+1)& (0+255),b
  3876  004492  0E08               	movlw	8
  3877  004494  6FEA               	movwf	SendUDPMessage@messageSize& (0+255),b
  3878  004496  C041  F1EC         	movff	_m_udpSocket,SendUDPMessage@udpSocket
  3879  00449A  EF65  F023         	goto	_SendUDPMessage	;wreg free
  3880  00449E                     __end_of_SendDoorSwitchPressedEvent:
  3881                           	opt stack 0
  3882                           tblptru	equ	0xFF8
  3883                           tblptrh	equ	0xFF7
  3884                           tblptrl	equ	0xFF6
  3885                           tablat	equ	0xFF5
  3886                           prodh	equ	0xFF4
  3887                           prodl	equ	0xFF3
  3888                           intcon	equ	0xFF2
  3889                           intcon2	equ	0xFF1
  3890                           postinc0	equ	0xFEE
  3891                           wreg	equ	0xFE8
  3892                           postdec1	equ	0xFE5
  3893                           fsr1h	equ	0xFE2
  3894                           fsr1l	equ	0xFE1
  3895                           indf2	equ	0xFDF
  3896                           status	equ	0xFD8
  3897                           
  3898 ;; *************** function _NDCGetRelayActiveTime *****************
  3899 ;; Defined at:
  3900 ;;		line 118 in file "../src/NDC.c"
  3901 ;; Parameters:    Size  Location     Type
  3902 ;;		None
  3903 ;; Auto vars:     Size  Location     Type
  3904 ;;		None
  3905 ;; Return value:  Size  Location     Type
  3906 ;;                  2   27[COMRAM] int 
  3907 ;; Registers used:
  3908 ;;		None
  3909 ;; Tracked objects:
  3910 ;;		On entry : F/0
  3911 ;;		On exit  : F/0
  3912 ;;		Unchanged: F/0
  3913 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3914 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3915 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3916 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3917 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3918 ;;Total ram usage:        2 bytes
  3919 ;; Hardware stack levels used:    1
  3920 ;; Hardware stack levels required when called:    6
  3921 ;; This function calls:
  3922 ;;		Nothing
  3923 ;; This function is called by:
  3924 ;;		_ProcessDoorSwitchIsPressed
  3925 ;; This function uses a non-reentrant model
  3926 ;;
  3927                           
  3928                           	psect	text21
  3929  005498                     __ptext21:
  3930                           	opt stack 0
  3931  005498                     _NDCGetRelayActiveTime:
  3932                           	opt stack 21
  3933                           
  3934                           ; BSR set to: 0
  3935                           ;NDC.c: 119: return m_config.doorRelayActiveTime;
  3936                           
  3937                           ;incstack = 0
  3938  005498  C1C0  F01C         	movff	_m_config,?_NDCGetRelayActiveTime
  3939  00549C  C1C1  F01D         	movff	_m_config+1,?_NDCGetRelayActiveTime+1
  3940                           
  3941                           ; BSR set to: 0
  3942  0054A0  0012               	return		;funcret
  3943  0054A2                     __end_of_NDCGetRelayActiveTime:
  3944                           	opt stack 0
  3945                           tblptru	equ	0xFF8
  3946                           tblptrh	equ	0xFF7
  3947                           tblptrl	equ	0xFF6
  3948                           tablat	equ	0xFF5
  3949                           prodh	equ	0xFF4
  3950                           prodl	equ	0xFF3
  3951                           intcon	equ	0xFF2
  3952                           intcon2	equ	0xFF1
  3953                           postinc0	equ	0xFEE
  3954                           wreg	equ	0xFE8
  3955                           postdec1	equ	0xFE5
  3956                           fsr1h	equ	0xFE2
  3957                           fsr1l	equ	0xFE1
  3958                           indf2	equ	0xFDF
  3959                           status	equ	0xFD8
  3960                           
  3961 ;; *************** function _IsDoorSwitchPressed *****************
  3962 ;; Defined at:
  3963 ;;		line 101 in file "../src/DoorSwitch.c"
  3964 ;; Parameters:    Size  Location     Type
  3965 ;;		None
  3966 ;; Auto vars:     Size  Location     Type
  3967 ;;		None
  3968 ;; Return value:  Size  Location     Type
  3969 ;;                  1    wreg      unsigned char 
  3970 ;; Registers used:
  3971 ;;		wreg, status,2
  3972 ;; Tracked objects:
  3973 ;;		On entry : 0/0
  3974 ;;		On exit  : F/0
  3975 ;;		Unchanged: 0/0
  3976 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3977 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3978 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3979 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3980 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3981 ;;Total ram usage:        0 bytes
  3982 ;; Hardware stack levels used:    1
  3983 ;; Hardware stack levels required when called:    6
  3984 ;; This function calls:
  3985 ;;		Nothing
  3986 ;; This function is called by:
  3987 ;;		_ProcessStateDoorSwitchIdle
  3988 ;;		_ProcessStateDoorSwitchPressed
  3989 ;;		_ProcessStateDoorSwitchPressedTooLong
  3990 ;; This function uses a non-reentrant model
  3991 ;;
  3992                           
  3993                           	psect	text22
  3994  005426                     __ptext22:
  3995                           	opt stack 0
  3996  005426                     _IsDoorSwitchPressed:
  3997                           	opt stack 22
  3998                           
  3999                           ;DoorSwitch.c: 104: if (m_doorSwitchInvertPolarityFlag == 0) {
  4000                           
  4001                           ; BSR set to: 0
  4002                           ;incstack = 0
  4003  005426  0100               	movlb	0	; () banked
  4004  005428  51D4               	movf	_m_doorSwitchInvertPolarityFlag& (0+255),w,b
  4005  00542A  E103               	bnz	l156
  4006                           
  4007                           ; BSR set to: 0
  4008                           ;DoorSwitch.c: 105: if ((PORTHbits.RH1) == 0) {
  4009  00542C  A287               	btfss	3975,1,c	;volatile
  4010                           
  4011                           ; BSR set to: 0
  4012                           ;DoorSwitch.c: 106: return 1;
  4013  00542E  0C01               	retlw	1
  4014                           
  4015                           ; BSR set to: 0
  4016                           ;DoorSwitch.c: 108: return 0;
  4017  005430  0C00               	retlw	0
  4018  005432                     l156:
  4019                           
  4020                           ; BSR set to: 0
  4021                           ;DoorSwitch.c: 112: else {
  4022                           ;DoorSwitch.c: 113: if ((PORTHbits.RH1) == 1) {
  4023  005432  A287               	btfss	3975,1,c	;volatile
  4024  005434  0C00               	retlw	0
  4025  005436  0C01               	retlw	1
  4026  005438                     __end_of_IsDoorSwitchPressed:
  4027                           	opt stack 0
  4028                           tblptru	equ	0xFF8
  4029                           tblptrh	equ	0xFF7
  4030                           tblptrl	equ	0xFF6
  4031                           tablat	equ	0xFF5
  4032                           prodh	equ	0xFF4
  4033                           prodl	equ	0xFF3
  4034                           intcon	equ	0xFF2
  4035                           intcon2	equ	0xFF1
  4036                           postinc0	equ	0xFEE
  4037                           wreg	equ	0xFE8
  4038                           postdec1	equ	0xFE5
  4039                           fsr1h	equ	0xFE2
  4040                           fsr1l	equ	0xFE1
  4041                           indf2	equ	0xFDF
  4042                           status	equ	0xFD8
  4043                           
  4044 ;; *************** function _ProcessDoorIndicator *****************
  4045 ;; Defined at:
  4046 ;;		line 57 in file "../src/DoorIndicator.c"
  4047 ;; Parameters:    Size  Location     Type
  4048 ;;		None
  4049 ;; Auto vars:     Size  Location     Type
  4050 ;;		None
  4051 ;; Return value:  Size  Location     Type
  4052 ;;		None               void
  4053 ;; Registers used:
  4054 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4055 ;; Tracked objects:
  4056 ;;		On entry : 0/1
  4057 ;;		On exit  : 0/0
  4058 ;;		Unchanged: 0/0
  4059 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4060 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4061 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4062 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4063 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4064 ;;Total ram usage:        0 bytes
  4065 ;; Hardware stack levels used:    1
  4066 ;; Hardware stack levels required when called:   18
  4067 ;; This function calls:
  4068 ;;		_ProcessStateDoorIndicatorClosed
  4069 ;;		_ProcessStateDoorIndicatorOpen
  4070 ;;		_ProcessStateDoorIndicatorOpenTooLong
  4071 ;; This function is called by:
  4072 ;;		_main
  4073 ;; This function uses a non-reentrant model
  4074 ;;
  4075                           
  4076                           	psect	text23
  4077  0052F6                     __ptext23:
  4078                           	opt stack 0
  4079  0052F6                     _ProcessDoorIndicator:
  4080                           	opt stack 12
  4081                           
  4082                           ;DoorIndicator.c: 69: break;
  4083                           
  4084                           ;DoorIndicator.c: 68: ProcessStateDoorIndicatorOpenTooLong();
  4085                           
  4086                           ;DoorIndicator.c: 65: break;
  4087                           
  4088                           ;DoorIndicator.c: 64: ProcessStateDoorIndicatorOpen();
  4089                           
  4090                           ;DoorIndicator.c: 61: break;
  4091                           
  4092                           ;DoorIndicator.c: 60: ProcessStateDoorIndicatorClosed();
  4093                           
  4094                           ;DoorIndicator.c: 58: switch (doorIndicatorState) {
  4095                           
  4096                           ; BSR set to: 0
  4097                           ;incstack = 0
  4098  0052F6  503D               	movf	_doorIndicatorState,w,c
  4099                           
  4100                           ; Switch size 1, requested type "speed"
  4101                           ; Number of cases is 3, Range of values is 0 to 2
  4102                           ; switch strategies available:
  4103                           ; Name         Instructions Cycles
  4104                           ; simple_byte           10     6 (average)
  4105                           ;	Chosen strategy is simple_byte
  4106  0052F8  E102 EF3E  F02A    	bz	_ProcessStateDoorIndicatorClosed
  4107  0052FE  0A01               	xorlw	1	; case 1
  4108  005300  E102 EFBA  F027    	bz	_ProcessStateDoorIndicatorOpen
  4109  005306  0A03               	xorlw	3	; case 2
  4110  005308  E102 EF15  F029    	bz	_ProcessStateDoorIndicatorOpenTooLong
  4111  00530E  0012               	return		;funcret
  4112  005310                     __end_of_ProcessDoorIndicator:
  4113                           	opt stack 0
  4114                           tblptru	equ	0xFF8
  4115                           tblptrh	equ	0xFF7
  4116                           tblptrl	equ	0xFF6
  4117                           tablat	equ	0xFF5
  4118                           prodh	equ	0xFF4
  4119                           prodl	equ	0xFF3
  4120                           intcon	equ	0xFF2
  4121                           intcon2	equ	0xFF1
  4122                           postinc0	equ	0xFEE
  4123                           wreg	equ	0xFE8
  4124                           postdec1	equ	0xFE5
  4125                           fsr1h	equ	0xFE2
  4126                           fsr1l	equ	0xFE1
  4127                           indf2	equ	0xFDF
  4128                           status	equ	0xFD8
  4129                           
  4130 ;; *************** function _ProcessStateDoorIndicatorOpenTooLong *****************
  4131 ;; Defined at:
  4132 ;;		line 149 in file "../src/DoorIndicator.c"
  4133 ;; Parameters:    Size  Location     Type
  4134 ;;		None
  4135 ;; Auto vars:     Size  Location     Type
  4136 ;;		None
  4137 ;; Return value:  Size  Location     Type
  4138 ;;		None               void
  4139 ;; Registers used:
  4140 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4141 ;; Tracked objects:
  4142 ;;		On entry : 0/1
  4143 ;;		On exit  : 0/0
  4144 ;;		Unchanged: 0/0
  4145 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4146 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4147 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4148 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4149 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4150 ;;Total ram usage:        0 bytes
  4151 ;; Hardware stack levels used:    1
  4152 ;; Hardware stack levels required when called:   16
  4153 ;; This function calls:
  4154 ;;		_Beep
  4155 ;;		_SendDoorClosedEvent
  4156 ;;		_isDoorIndicatorOpen
  4157 ;; This function is called by:
  4158 ;;		_ProcessDoorIndicator
  4159 ;; This function uses a non-reentrant model
  4160 ;;
  4161                           
  4162                           	psect	text24
  4163  00522A                     __ptext24:
  4164                           	opt stack 0
  4165  00522A                     _ProcessStateDoorIndicatorOpenTooLong:
  4166                           	opt stack 13
  4167                           
  4168                           ;DoorIndicator.c: 150: Beep(100);
  4169                           
  4170                           ;incstack = 0
  4171  00522A  0E64               	movlw	100
  4172  00522C  6E24               	movwf	Beep@value,c
  4173  00522E  6A25               	clrf	Beep@value+1,c
  4174  005230  6A26               	clrf	Beep@value+2,c
  4175  005232  6A27               	clrf	Beep@value+3,c
  4176  005234  EC75  F027         	call	_Beep	;wreg free
  4177                           
  4178                           ;DoorIndicator.c: 152: if (isDoorIndicatorOpen() == 0) {
  4179  005238  ECBB  F026         	call	_isDoorIndicatorOpen	;wreg free
  4180  00523C  0900               	iorlw	0
  4181  00523E  A4D8               	btfss	status,2,c
  4182  005240  0012               	return	
  4183                           
  4184                           ; BSR set to: 0
  4185                           ;DoorIndicator.c: 153: doorIndicatorState = STATE_DOOR_INDICATOR_CLOSED;
  4186  005242  6A3D               	clrf	_doorIndicatorState,c
  4187                           
  4188                           ; BSR set to: 0
  4189                           ;DoorIndicator.c: 155: SendDoorClosedEvent();
  4190  005244  EF09  F023         	goto	_SendDoorClosedEvent	;wreg free
  4191  005248                     __end_of_ProcessStateDoorIndicatorOpenTooLong:
  4192                           	opt stack 0
  4193                           tblptru	equ	0xFF8
  4194                           tblptrh	equ	0xFF7
  4195                           tblptrl	equ	0xFF6
  4196                           tablat	equ	0xFF5
  4197                           prodh	equ	0xFF4
  4198                           prodl	equ	0xFF3
  4199                           intcon	equ	0xFF2
  4200                           intcon2	equ	0xFF1
  4201                           postinc0	equ	0xFEE
  4202                           wreg	equ	0xFE8
  4203                           postdec1	equ	0xFE5
  4204                           fsr1h	equ	0xFE2
  4205                           fsr1l	equ	0xFE1
  4206                           indf2	equ	0xFDF
  4207                           status	equ	0xFD8
  4208                           
  4209 ;; *************** function _ProcessStateDoorIndicatorOpen *****************
  4210 ;; Defined at:
  4211 ;;		line 131 in file "../src/DoorIndicator.c"
  4212 ;; Parameters:    Size  Location     Type
  4213 ;;		None
  4214 ;; Auto vars:     Size  Location     Type
  4215 ;;		None
  4216 ;; Return value:  Size  Location     Type
  4217 ;;		None               void
  4218 ;; Registers used:
  4219 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4220 ;; Tracked objects:
  4221 ;;		On entry : 0/1
  4222 ;;		On exit  : 0/0
  4223 ;;		Unchanged: 0/0
  4224 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4225 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4226 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4227 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4228 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4229 ;;Total ram usage:        0 bytes
  4230 ;; Hardware stack levels used:    1
  4231 ;; Hardware stack levels required when called:   16
  4232 ;; This function calls:
  4233 ;;		_SendDoorClosedEvent
  4234 ;;		_SendDoorOpenTooLongEvent
  4235 ;;		_isDoorIndicatorOpen
  4236 ;; This function is called by:
  4237 ;;		_ProcessDoorIndicator
  4238 ;; This function uses a non-reentrant model
  4239 ;;
  4240                           
  4241                           	psect	text25
  4242  004F74                     __ptext25:
  4243                           	opt stack 0
  4244  004F74                     _ProcessStateDoorIndicatorOpen:
  4245                           	opt stack 13
  4246                           
  4247                           ;DoorIndicator.c: 133: (LATCbits.LATC1) = 1;
  4248                           
  4249                           ;incstack = 0
  4250  004F74  828B               	bsf	3979,1,c	;volatile
  4251                           
  4252                           ;DoorIndicator.c: 136: if (m_doorIndicatorOpenTooLongTimer == 0 && m_doorIndicatorOpenTo
      +                          oLongFunctionalityActiveFlag == 1) {
  4253  004F76  0101               	movlb	1	; () banked
  4254  004F78  512C               	movf	_m_doorIndicatorOpenTooLongTimer& (0+255),w,b
  4255  004F7A  112D               	iorwf	(_m_doorIndicatorOpenTooLongTimer+1)& (0+255),w,b
  4256  004F7C  112E               	iorwf	(_m_doorIndicatorOpenTooLongTimer+2)& (0+255),w,b
  4257  004F7E  112F               	iorwf	(_m_doorIndicatorOpenTooLongTimer+3)& (0+255),w,b
  4258  004F80  E107               	bnz	l10898
  4259                           
  4260                           ; BSR set to: 1
  4261  004F82  0100               	movlb	0	; () banked
  4262  004F84  05D3               	decf	_m_doorIndicatorOpenTooLongFunctionalityActiveFlag& (0+255),w,b
  4263  004F86  E104               	bnz	l10898
  4264                           
  4265                           ; BSR set to: 0
  4266                           ;DoorIndicator.c: 137: doorIndicatorState = STATE_DOOR_INDICATOR_OPEN_TOO_LONG;
  4267  004F88  0E02               	movlw	2
  4268  004F8A  6E3D               	movwf	_doorIndicatorState,c
  4269                           
  4270                           ; BSR set to: 0
  4271                           ;DoorIndicator.c: 139: SendDoorOpenTooLongEvent();
  4272  004F8C  ECDB  F022         	call	_SendDoorOpenTooLongEvent	;wreg free
  4273  004F90                     l10898:
  4274                           
  4275                           ;DoorIndicator.c: 140: }
  4276                           ;DoorIndicator.c: 142: if (isDoorIndicatorOpen() == 0) {
  4277  004F90  ECBB  F026         	call	_isDoorIndicatorOpen	;wreg free
  4278  004F94  0900               	iorlw	0
  4279  004F96  A4D8               	btfss	status,2,c
  4280  004F98  0012               	return	
  4281                           
  4282                           ; BSR set to: 0
  4283                           ;DoorIndicator.c: 143: doorIndicatorState = STATE_DOOR_INDICATOR_CLOSED;
  4284  004F9A  6A3D               	clrf	_doorIndicatorState,c
  4285                           
  4286                           ; BSR set to: 0
  4287                           ;DoorIndicator.c: 145: SendDoorClosedEvent();
  4288  004F9C  EF09  F023         	goto	_SendDoorClosedEvent	;wreg free
  4289  004FA0                     __end_of_ProcessStateDoorIndicatorOpen:
  4290                           	opt stack 0
  4291                           tblptru	equ	0xFF8
  4292                           tblptrh	equ	0xFF7
  4293                           tblptrl	equ	0xFF6
  4294                           tablat	equ	0xFF5
  4295                           prodh	equ	0xFF4
  4296                           prodl	equ	0xFF3
  4297                           intcon	equ	0xFF2
  4298                           intcon2	equ	0xFF1
  4299                           postinc0	equ	0xFEE
  4300                           wreg	equ	0xFE8
  4301                           postdec1	equ	0xFE5
  4302                           fsr1h	equ	0xFE2
  4303                           fsr1l	equ	0xFE1
  4304                           indf2	equ	0xFDF
  4305                           status	equ	0xFD8
  4306                           
  4307 ;; *************** function _SendDoorOpenTooLongEvent *****************
  4308 ;; Defined at:
  4309 ;;		line 516 in file "../src/NDC.c"
  4310 ;; Parameters:    Size  Location     Type
  4311 ;;		None
  4312 ;; Auto vars:     Size  Location     Type
  4313 ;;		None
  4314 ;; Return value:  Size  Location     Type
  4315 ;;		None               void
  4316 ;; Registers used:
  4317 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4318 ;; Tracked objects:
  4319 ;;		On entry : F/0
  4320 ;;		On exit  : 0/0
  4321 ;;		Unchanged: 0/0
  4322 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4323 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4324 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4325 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4326 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4327 ;;Total ram usage:        0 bytes
  4328 ;; Hardware stack levels used:    1
  4329 ;; Hardware stack levels required when called:   15
  4330 ;; This function calls:
  4331 ;;		_SendUDPMessage
  4332 ;; This function is called by:
  4333 ;;		_ProcessStateDoorIndicatorOpen
  4334 ;; This function uses a non-reentrant model
  4335 ;;
  4336                           
  4337                           	psect	text26
  4338  0045B6                     __ptext26:
  4339                           	opt stack 0
  4340  0045B6                     _SendDoorOpenTooLongEvent:
  4341                           	opt stack 13
  4342                           
  4343                           ; BSR set to: 0
  4344                           ;NDC.c: 518: m_messageBuffer[0] = 0;
  4345                           
  4346                           ;incstack = 0
  4347  0045B6  0E00               	movlw	0
  4348  0045B8  CFE8 F341          	movff	wreg,_m_messageBuffer
  4349                           
  4350                           ;NDC.c: 519: m_messageBuffer[1] = 0x13;
  4351  0045BC  0E13               	movlw	19
  4352  0045BE  CFE8 F342          	movff	wreg,_m_messageBuffer+1
  4353                           
  4354                           ; BSR set to: 0
  4355                           ;NDC.c: 520: m_messageBuffer[2] = g_serializedMACAddress[0];
  4356  0045C2  EE23  F043         	lfsr	2,_m_messageBuffer+2
  4357  0045C6  C0F9  FFDF         	movff	_g_serializedMACAddress,indf2
  4358                           
  4359                           ;NDC.c: 521: m_messageBuffer[3] = g_serializedMACAddress[1];
  4360  0045CA  EE23  F044         	lfsr	2,_m_messageBuffer+3
  4361  0045CE  C0FA  FFDF         	movff	_g_serializedMACAddress+1,indf2
  4362                           
  4363                           ;NDC.c: 522: m_messageBuffer[4] = g_serializedMACAddress[2];
  4364  0045D2  EE23  F045         	lfsr	2,_m_messageBuffer+4
  4365  0045D6  C0FB  FFDF         	movff	_g_serializedMACAddress+2,indf2
  4366                           
  4367                           ;NDC.c: 523: m_messageBuffer[5] = g_serializedMACAddress[3];
  4368  0045DA  EE23  F046         	lfsr	2,_m_messageBuffer+5
  4369  0045DE  C0FC  FFDF         	movff	_g_serializedMACAddress+3,indf2
  4370                           
  4371                           ;NDC.c: 524: m_messageBuffer[6] = g_serializedMACAddress[4];
  4372  0045E2  EE23  F047         	lfsr	2,_m_messageBuffer+6
  4373  0045E6  C0FD  FFDF         	movff	_g_serializedMACAddress+4,indf2
  4374                           
  4375                           ;NDC.c: 525: m_messageBuffer[7] = g_serializedMACAddress[5];
  4376  0045EA  EE23  F048         	lfsr	2,_m_messageBuffer+7
  4377  0045EE  C0FE  FFDF         	movff	_g_serializedMACAddress+5,indf2
  4378                           
  4379                           ; BSR set to: 0
  4380                           ;NDC.c: 527: if (m_state == STATE_CONNECTED)
  4381  0045F2  0E04               	movlw	4
  4382  0045F4  19D8               	xorwf	_m_state& (0+255),w,b
  4383  0045F6  A4D8               	btfss	status,2,c
  4384  0045F8  0012               	return	
  4385                           
  4386                           ; BSR set to: 0
  4387                           ;NDC.c: 528: SendUDPMessage(m_messageBuffer, 8, m_udpSocket);
  4388  0045FA  0E41               	movlw	low _m_messageBuffer
  4389  0045FC  0101               	movlb	1	; () banked
  4390  0045FE  6FE8               	movwf	SendUDPMessage@message& (0+255),b
  4391  004600  0E03               	movlw	high _m_messageBuffer
  4392  004602  6FE9               	movwf	(SendUDPMessage@message+1)& (0+255),b
  4393  004604  6BEB               	clrf	(SendUDPMessage@messageSize+1)& (0+255),b
  4394  004606  0E08               	movlw	8
  4395  004608  6FEA               	movwf	SendUDPMessage@messageSize& (0+255),b
  4396  00460A  C041  F1EC         	movff	_m_udpSocket,SendUDPMessage@udpSocket
  4397  00460E  EF65  F023         	goto	_SendUDPMessage	;wreg free
  4398  004612                     __end_of_SendDoorOpenTooLongEvent:
  4399                           	opt stack 0
  4400                           tblptru	equ	0xFF8
  4401                           tblptrh	equ	0xFF7
  4402                           tblptrl	equ	0xFF6
  4403                           tablat	equ	0xFF5
  4404                           prodh	equ	0xFF4
  4405                           prodl	equ	0xFF3
  4406                           intcon	equ	0xFF2
  4407                           intcon2	equ	0xFF1
  4408                           postinc0	equ	0xFEE
  4409                           wreg	equ	0xFE8
  4410                           postdec1	equ	0xFE5
  4411                           fsr1h	equ	0xFE2
  4412                           fsr1l	equ	0xFE1
  4413                           indf2	equ	0xFDF
  4414                           status	equ	0xFD8
  4415                           
  4416 ;; *************** function _SendDoorClosedEvent *****************
  4417 ;; Defined at:
  4418 ;;		line 501 in file "../src/NDC.c"
  4419 ;; Parameters:    Size  Location     Type
  4420 ;;		None
  4421 ;; Auto vars:     Size  Location     Type
  4422 ;;		None
  4423 ;; Return value:  Size  Location     Type
  4424 ;;		None               void
  4425 ;; Registers used:
  4426 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4427 ;; Tracked objects:
  4428 ;;		On entry : F/0
  4429 ;;		On exit  : 0/0
  4430 ;;		Unchanged: 0/0
  4431 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4432 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4433 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4434 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4435 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4436 ;;Total ram usage:        0 bytes
  4437 ;; Hardware stack levels used:    1
  4438 ;; Hardware stack levels required when called:   15
  4439 ;; This function calls:
  4440 ;;		_SendUDPMessage
  4441 ;; This function is called by:
  4442 ;;		_ProcessStateDoorIndicatorOpen
  4443 ;;		_ProcessStateDoorIndicatorOpenTooLong
  4444 ;; This function uses a non-reentrant model
  4445 ;;
  4446                           
  4447                           	psect	text27
  4448  004612                     __ptext27:
  4449                           	opt stack 0
  4450  004612                     _SendDoorClosedEvent:
  4451                           	opt stack 13
  4452                           
  4453                           ; BSR set to: 0
  4454                           ;NDC.c: 503: m_messageBuffer[0] = 0;
  4455                           
  4456                           ;incstack = 0
  4457  004612  0E00               	movlw	0
  4458  004614  CFE8 F341          	movff	wreg,_m_messageBuffer
  4459                           
  4460                           ;NDC.c: 504: m_messageBuffer[1] = 0x12;
  4461  004618  0E12               	movlw	18
  4462  00461A  CFE8 F342          	movff	wreg,_m_messageBuffer+1
  4463                           
  4464                           ; BSR set to: 0
  4465                           ;NDC.c: 505: m_messageBuffer[2] = g_serializedMACAddress[0];
  4466  00461E  EE23  F043         	lfsr	2,_m_messageBuffer+2
  4467  004622  C0F9  FFDF         	movff	_g_serializedMACAddress,indf2
  4468                           
  4469                           ;NDC.c: 506: m_messageBuffer[3] = g_serializedMACAddress[1];
  4470  004626  EE23  F044         	lfsr	2,_m_messageBuffer+3
  4471  00462A  C0FA  FFDF         	movff	_g_serializedMACAddress+1,indf2
  4472                           
  4473                           ;NDC.c: 507: m_messageBuffer[4] = g_serializedMACAddress[2];
  4474  00462E  EE23  F045         	lfsr	2,_m_messageBuffer+4
  4475  004632  C0FB  FFDF         	movff	_g_serializedMACAddress+2,indf2
  4476                           
  4477                           ;NDC.c: 508: m_messageBuffer[5] = g_serializedMACAddress[3];
  4478  004636  EE23  F046         	lfsr	2,_m_messageBuffer+5
  4479  00463A  C0FC  FFDF         	movff	_g_serializedMACAddress+3,indf2
  4480                           
  4481                           ;NDC.c: 509: m_messageBuffer[6] = g_serializedMACAddress[4];
  4482  00463E  EE23  F047         	lfsr	2,_m_messageBuffer+6
  4483  004642  C0FD  FFDF         	movff	_g_serializedMACAddress+4,indf2
  4484                           
  4485                           ;NDC.c: 510: m_messageBuffer[7] = g_serializedMACAddress[5];
  4486  004646  EE23  F048         	lfsr	2,_m_messageBuffer+7
  4487  00464A  C0FE  FFDF         	movff	_g_serializedMACAddress+5,indf2
  4488                           
  4489                           ; BSR set to: 0
  4490                           ;NDC.c: 512: if (m_state == STATE_CONNECTED)
  4491  00464E  0E04               	movlw	4
  4492  004650  19D8               	xorwf	_m_state& (0+255),w,b
  4493  004652  A4D8               	btfss	status,2,c
  4494  004654  0012               	return	
  4495                           
  4496                           ; BSR set to: 0
  4497                           ;NDC.c: 513: SendUDPMessage(m_messageBuffer, 8, m_udpSocket);
  4498  004656  0E41               	movlw	low _m_messageBuffer
  4499  004658  0101               	movlb	1	; () banked
  4500  00465A  6FE8               	movwf	SendUDPMessage@message& (0+255),b
  4501  00465C  0E03               	movlw	high _m_messageBuffer
  4502  00465E  6FE9               	movwf	(SendUDPMessage@message+1)& (0+255),b
  4503  004660  6BEB               	clrf	(SendUDPMessage@messageSize+1)& (0+255),b
  4504  004662  0E08               	movlw	8
  4505  004664  6FEA               	movwf	SendUDPMessage@messageSize& (0+255),b
  4506  004666  C041  F1EC         	movff	_m_udpSocket,SendUDPMessage@udpSocket
  4507  00466A  EF65  F023         	goto	_SendUDPMessage	;wreg free
  4508  00466E                     __end_of_SendDoorClosedEvent:
  4509                           	opt stack 0
  4510                           tblptru	equ	0xFF8
  4511                           tblptrh	equ	0xFF7
  4512                           tblptrl	equ	0xFF6
  4513                           tablat	equ	0xFF5
  4514                           prodh	equ	0xFF4
  4515                           prodl	equ	0xFF3
  4516                           intcon	equ	0xFF2
  4517                           intcon2	equ	0xFF1
  4518                           postinc0	equ	0xFEE
  4519                           wreg	equ	0xFE8
  4520                           postdec1	equ	0xFE5
  4521                           fsr1h	equ	0xFE2
  4522                           fsr1l	equ	0xFE1
  4523                           indf2	equ	0xFDF
  4524                           status	equ	0xFD8
  4525                           
  4526 ;; *************** function _ProcessStateDoorIndicatorClosed *****************
  4527 ;; Defined at:
  4528 ;;		line 73 in file "../src/DoorIndicator.c"
  4529 ;; Parameters:    Size  Location     Type
  4530 ;;		None
  4531 ;; Auto vars:     Size  Location     Type
  4532 ;;		None
  4533 ;; Return value:  Size  Location     Type
  4534 ;;		None               void
  4535 ;; Registers used:
  4536 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4537 ;; Tracked objects:
  4538 ;;		On entry : 0/1
  4539 ;;		On exit  : 0/0
  4540 ;;		Unchanged: 0/0
  4541 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4542 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4543 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4544 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4545 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4546 ;;Total ram usage:        0 bytes
  4547 ;; Hardware stack levels used:    1
  4548 ;; Hardware stack levels required when called:   17
  4549 ;; This function calls:
  4550 ;;		_ProcessDoorIndicatorIsClosed
  4551 ;;		_ProcessDoorIndicatorIsOpen
  4552 ;;		_isDoorIndicatorOpen
  4553 ;; This function is called by:
  4554 ;;		_ProcessDoorIndicator
  4555 ;; This function uses a non-reentrant model
  4556 ;;
  4557                           
  4558                           	psect	text28
  4559  00547C                     __ptext28:
  4560                           	opt stack 0
  4561  00547C                     _ProcessStateDoorIndicatorClosed:
  4562                           	opt stack 12
  4563                           
  4564                           ;DoorIndicator.c: 74: if (isDoorIndicatorOpen() == 1) {
  4565                           
  4566                           ;incstack = 0
  4567  00547C  ECBB  F026         	call	_isDoorIndicatorOpen	;wreg free
  4568  005480  06E8               	decf	wreg,f,c
  4569  005482  E002 EF6A  F02A    	bnz	_ProcessDoorIndicatorIsClosed
  4570                           
  4571                           ; BSR set to: 0
  4572                           ;DoorIndicator.c: 75: ProcessDoorIndicatorIsOpen();
  4573  005488  EFF5  F028         	goto	_ProcessDoorIndicatorIsOpen	;wreg free
  4574  00548C                     __end_of_ProcessStateDoorIndicatorClosed:
  4575                           	opt stack 0
  4576                           tblptru	equ	0xFF8
  4577                           tblptrh	equ	0xFF7
  4578                           tblptrl	equ	0xFF6
  4579                           tablat	equ	0xFF5
  4580                           prodh	equ	0xFF4
  4581                           prodl	equ	0xFF3
  4582                           intcon	equ	0xFF2
  4583                           intcon2	equ	0xFF1
  4584                           postinc0	equ	0xFEE
  4585                           wreg	equ	0xFE8
  4586                           postdec1	equ	0xFE5
  4587                           fsr1h	equ	0xFE2
  4588                           fsr1l	equ	0xFE1
  4589                           indf2	equ	0xFDF
  4590                           status	equ	0xFD8
  4591                           
  4592 ;; *************** function _isDoorIndicatorOpen *****************
  4593 ;; Defined at:
  4594 ;;		line 82 in file "../src/DoorIndicator.c"
  4595 ;; Parameters:    Size  Location     Type
  4596 ;;		None
  4597 ;; Auto vars:     Size  Location     Type
  4598 ;;		None
  4599 ;; Return value:  Size  Location     Type
  4600 ;;                  1    wreg      unsigned char 
  4601 ;; Registers used:
  4602 ;;		wreg, status,2, status,0
  4603 ;; Tracked objects:
  4604 ;;		On entry : 0/1
  4605 ;;		On exit  : F/0
  4606 ;;		Unchanged: 0/0
  4607 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4608 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4609 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4610 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4611 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4612 ;;Total ram usage:        0 bytes
  4613 ;; Hardware stack levels used:    1
  4614 ;; Hardware stack levels required when called:    6
  4615 ;; This function calls:
  4616 ;;		Nothing
  4617 ;; This function is called by:
  4618 ;;		_ProcessStateDoorIndicatorClosed
  4619 ;;		_ProcessStateDoorIndicatorOpen
  4620 ;;		_ProcessStateDoorIndicatorOpenTooLong
  4621 ;; This function uses a non-reentrant model
  4622 ;;
  4623                           
  4624                           	psect	text29
  4625  004D76                     __ptext29:
  4626                           	opt stack 0
  4627  004D76                     _isDoorIndicatorOpen:
  4628                           	opt stack 22
  4629                           
  4630                           ;DoorIndicator.c: 85: if (m_doorIndicatorProcessDelayTimer == 0) {
  4631                           
  4632                           ;incstack = 0
  4633  004D76  0101               	movlb	1	; () banked
  4634  004D78  5130               	movf	_m_doorIndicatorProcessDelayTimer& (0+255),w,b
  4635  004D7A  1131               	iorwf	(_m_doorIndicatorProcessDelayTimer+1)& (0+255),w,b
  4636  004D7C  1132               	iorwf	(_m_doorIndicatorProcessDelayTimer+2)& (0+255),w,b
  4637  004D7E  1133               	iorwf	(_m_doorIndicatorProcessDelayTimer+3)& (0+255),w,b
  4638  004D80  E114               	bnz	l7620
  4639                           
  4640                           ; BSR set to: 1
  4641                           ;DoorIndicator.c: 87: m_doorIndicatorProcessDelayTimer = 500 / 50;
  4642  004D82  0E0A               	movlw	10
  4643  004D84  6F30               	movwf	_m_doorIndicatorProcessDelayTimer& (0+255),b
  4644  004D86  0E00               	movlw	0
  4645  004D88  6F31               	movwf	(_m_doorIndicatorProcessDelayTimer+1)& (0+255),b
  4646  004D8A  6F32               	movwf	(_m_doorIndicatorProcessDelayTimer+2)& (0+255),b
  4647  004D8C  6F33               	movwf	(_m_doorIndicatorProcessDelayTimer+3)& (0+255),b
  4648                           
  4649                           ;DoorIndicator.c: 91: if (m_doorIndicatorInvertPolarityFlag == 0) {
  4650  004D8E  503E               	movf	_m_doorIndicatorInvertPolarityFlag,w,c
  4651  004D90  E109               	bnz	l57
  4652                           
  4653                           ; BSR set to: 1
  4654                           ;DoorIndicator.c: 92: if ((PORTHbits.RH0) == 1) {
  4655  004D92  A087               	btfss	3975,0,c	;volatile
  4656  004D94  D004               	goto	l58
  4657  004D96                     l7616:
  4658                           
  4659                           ; BSR set to: 1
  4660                           ;DoorIndicator.c: 93: isDoorIndicatorOpenFlagCachedValue = 1;
  4661  004D96  0E01               	movlw	1
  4662  004D98  0100               	movlb	0	; () banked
  4663  004D9A  6FD1               	movwf	_isDoorIndicatorOpenFlagCachedValue& (0+255),b
  4664                           
  4665                           ;DoorIndicator.c: 94: }
  4666  004D9C  D006               	goto	l7620
  4667  004D9E                     l58:
  4668                           
  4669                           ; BSR set to: 1
  4670                           ;DoorIndicator.c: 95: else {
  4671                           ;DoorIndicator.c: 96: isDoorIndicatorOpenFlagCachedValue = 0;
  4672  004D9E  0100               	movlb	0	; () banked
  4673  004DA0  6BD1               	clrf	_isDoorIndicatorOpenFlagCachedValue& (0+255),b
  4674  004DA2  D003               	goto	l7620
  4675  004DA4                     l57:
  4676                           
  4677                           ; BSR set to: 1
  4678                           ;DoorIndicator.c: 101: if ((PORTHbits.RH0) == 0) {
  4679  004DA4  B087               	btfsc	3975,0,c	;volatile
  4680  004DA6  D7FB               	goto	l58
  4681  004DA8  D7F6               	goto	l7616
  4682  004DAA                     l7620:
  4683                           
  4684                           ;DoorIndicator.c: 106: }
  4685                           ;DoorIndicator.c: 107: }
  4686                           ;DoorIndicator.c: 109: }
  4687                           ;DoorIndicator.c: 111: return isDoorIndicatorOpenFlagCachedValue;
  4688  004DAA  0100               	movlb	0	; () banked
  4689  004DAC  51D1               	movf	_isDoorIndicatorOpenFlagCachedValue& (0+255),w,b
  4690                           
  4691                           ; BSR set to: 0
  4692  004DAE  0012               	return		;funcret
  4693  004DB0                     __end_of_isDoorIndicatorOpen:
  4694                           	opt stack 0
  4695                           tblptru	equ	0xFF8
  4696                           tblptrh	equ	0xFF7
  4697                           tblptrl	equ	0xFF6
  4698                           tablat	equ	0xFF5
  4699                           prodh	equ	0xFF4
  4700                           prodl	equ	0xFF3
  4701                           intcon	equ	0xFF2
  4702                           intcon2	equ	0xFF1
  4703                           postinc0	equ	0xFEE
  4704                           wreg	equ	0xFE8
  4705                           postdec1	equ	0xFE5
  4706                           fsr1h	equ	0xFE2
  4707                           fsr1l	equ	0xFE1
  4708                           indf2	equ	0xFDF
  4709                           status	equ	0xFD8
  4710                           
  4711 ;; *************** function _ProcessDoorIndicatorIsOpen *****************
  4712 ;; Defined at:
  4713 ;;		line 114 in file "../src/DoorIndicator.c"
  4714 ;; Parameters:    Size  Location     Type
  4715 ;;		None
  4716 ;; Auto vars:     Size  Location     Type
  4717 ;;		None
  4718 ;; Return value:  Size  Location     Type
  4719 ;;		None               void
  4720 ;; Registers used:
  4721 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4722 ;; Tracked objects:
  4723 ;;		On entry : F/0
  4724 ;;		On exit  : 0/0
  4725 ;;		Unchanged: 0/0
  4726 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4727 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4728 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4729 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4730 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4731 ;;Total ram usage:        0 bytes
  4732 ;; Hardware stack levels used:    1
  4733 ;; Hardware stack levels required when called:   16
  4734 ;; This function calls:
  4735 ;;		_SendDoorOpenEvent
  4736 ;; This function is called by:
  4737 ;;		_ProcessStateDoorIndicatorClosed
  4738 ;; This function uses a non-reentrant model
  4739 ;;
  4740                           
  4741                           	psect	text30
  4742  0051EA                     __ptext30:
  4743                           	opt stack 0
  4744  0051EA                     _ProcessDoorIndicatorIsOpen:
  4745                           	opt stack 12
  4746                           
  4747                           ; BSR set to: 0
  4748                           ;DoorIndicator.c: 115: doorIndicatorState = STATE_DOOR_INDICATOR_OPEN;
  4749                           
  4750                           ; BSR set to: 0
  4751                           ;incstack = 0
  4752  0051EA  0E01               	movlw	1
  4753  0051EC  6E3D               	movwf	_doorIndicatorState,c
  4754                           
  4755                           ; BSR set to: 0
  4756                           ;DoorIndicator.c: 118: if (m_doorIndicatorOpenTooLongFunctionalityActiveFlag == 1) {
  4757  0051EE  05D3               	decf	_m_doorIndicatorOpenTooLongFunctionalityActiveFlag& (0+255),w,b
  4758  0051F0  E002 EF37  F023    	bnz	_SendDoorOpenEvent
  4759                           
  4760                           ; BSR set to: 0
  4761                           ;DoorIndicator.c: 120: m_doorIndicatorOpenTooLongTimer = m_doorIndicatorOpenTooLongTimer
      +                          StartValue;
  4762  0051F6  C1DE  F12C         	movff	_m_doorIndicatorOpenTooLongTimerStartValue,_m_doorIndicatorOpenTooLongTimer
  4763  0051FA  C1DF  F12D         	movff	_m_doorIndicatorOpenTooLongTimerStartValue+1,_m_doorIndicatorOpenTooLongTimer+1
  4764  0051FE  C1E0  F12E         	movff	_m_doorIndicatorOpenTooLongTimerStartValue+2,_m_doorIndicatorOpenTooLongTimer+2
  4765  005202  C1E1  F12F         	movff	_m_doorIndicatorOpenTooLongTimerStartValue+3,_m_doorIndicatorOpenTooLongTimer+3
  4766                           
  4767                           ; BSR set to: 0
  4768                           ;DoorIndicator.c: 121: }
  4769                           ;DoorIndicator.c: 123: SendDoorOpenEvent();
  4770  005206  EF37  F023         	goto	_SendDoorOpenEvent	;wreg free
  4771  00520A                     __end_of_ProcessDoorIndicatorIsOpen:
  4772                           	opt stack 0
  4773                           tblptru	equ	0xFF8
  4774                           tblptrh	equ	0xFF7
  4775                           tblptrl	equ	0xFF6
  4776                           tablat	equ	0xFF5
  4777                           prodh	equ	0xFF4
  4778                           prodl	equ	0xFF3
  4779                           intcon	equ	0xFF2
  4780                           intcon2	equ	0xFF1
  4781                           postinc0	equ	0xFEE
  4782                           wreg	equ	0xFE8
  4783                           postdec1	equ	0xFE5
  4784                           fsr1h	equ	0xFE2
  4785                           fsr1l	equ	0xFE1
  4786                           indf2	equ	0xFDF
  4787                           status	equ	0xFD8
  4788                           
  4789 ;; *************** function _SendDoorOpenEvent *****************
  4790 ;; Defined at:
  4791 ;;		line 486 in file "../src/NDC.c"
  4792 ;; Parameters:    Size  Location     Type
  4793 ;;		None
  4794 ;; Auto vars:     Size  Location     Type
  4795 ;;		None
  4796 ;; Return value:  Size  Location     Type
  4797 ;;		None               void
  4798 ;; Registers used:
  4799 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4800 ;; Tracked objects:
  4801 ;;		On entry : F/0
  4802 ;;		On exit  : 0/0
  4803 ;;		Unchanged: 0/0
  4804 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4805 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4806 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4807 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4808 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4809 ;;Total ram usage:        0 bytes
  4810 ;; Hardware stack levels used:    1
  4811 ;; Hardware stack levels required when called:   15
  4812 ;; This function calls:
  4813 ;;		_SendUDPMessage
  4814 ;; This function is called by:
  4815 ;;		_ProcessDoorIndicatorIsOpen
  4816 ;; This function uses a non-reentrant model
  4817 ;;
  4818                           
  4819                           	psect	text31
  4820  00466E                     __ptext31:
  4821                           	opt stack 0
  4822  00466E                     _SendDoorOpenEvent:
  4823                           	opt stack 12
  4824                           
  4825                           ; BSR set to: 0
  4826                           ;NDC.c: 488: m_messageBuffer[0] = 0;
  4827                           
  4828                           ;incstack = 0
  4829  00466E  0E00               	movlw	0
  4830  004670  CFE8 F341          	movff	wreg,_m_messageBuffer
  4831                           
  4832                           ;NDC.c: 489: m_messageBuffer[1] = 0x11;
  4833  004674  0E11               	movlw	17
  4834  004676  CFE8 F342          	movff	wreg,_m_messageBuffer+1
  4835                           
  4836                           ; BSR set to: 0
  4837                           ;NDC.c: 490: m_messageBuffer[2] = g_serializedMACAddress[0];
  4838  00467A  EE23  F043         	lfsr	2,_m_messageBuffer+2
  4839  00467E  C0F9  FFDF         	movff	_g_serializedMACAddress,indf2
  4840                           
  4841                           ;NDC.c: 491: m_messageBuffer[3] = g_serializedMACAddress[1];
  4842  004682  EE23  F044         	lfsr	2,_m_messageBuffer+3
  4843  004686  C0FA  FFDF         	movff	_g_serializedMACAddress+1,indf2
  4844                           
  4845                           ;NDC.c: 492: m_messageBuffer[4] = g_serializedMACAddress[2];
  4846  00468A  EE23  F045         	lfsr	2,_m_messageBuffer+4
  4847  00468E  C0FB  FFDF         	movff	_g_serializedMACAddress+2,indf2
  4848                           
  4849                           ;NDC.c: 493: m_messageBuffer[5] = g_serializedMACAddress[3];
  4850  004692  EE23  F046         	lfsr	2,_m_messageBuffer+5
  4851  004696  C0FC  FFDF         	movff	_g_serializedMACAddress+3,indf2
  4852                           
  4853                           ;NDC.c: 494: m_messageBuffer[6] = g_serializedMACAddress[4];
  4854  00469A  EE23  F047         	lfsr	2,_m_messageBuffer+6
  4855  00469E  C0FD  FFDF         	movff	_g_serializedMACAddress+4,indf2
  4856                           
  4857                           ;NDC.c: 495: m_messageBuffer[7] = g_serializedMACAddress[5];
  4858  0046A2  EE23  F048         	lfsr	2,_m_messageBuffer+7
  4859  0046A6  C0FE  FFDF         	movff	_g_serializedMACAddress+5,indf2
  4860                           
  4861                           ; BSR set to: 0
  4862                           ;NDC.c: 497: if (m_state == STATE_CONNECTED)
  4863  0046AA  0E04               	movlw	4
  4864  0046AC  19D8               	xorwf	_m_state& (0+255),w,b
  4865  0046AE  A4D8               	btfss	status,2,c
  4866  0046B0  0012               	return	
  4867                           
  4868                           ; BSR set to: 0
  4869                           ;NDC.c: 498: SendUDPMessage(m_messageBuffer, 8, m_udpSocket);
  4870  0046B2  0E41               	movlw	low _m_messageBuffer
  4871  0046B4  0101               	movlb	1	; () banked
  4872  0046B6  6FE8               	movwf	SendUDPMessage@message& (0+255),b
  4873  0046B8  0E03               	movlw	high _m_messageBuffer
  4874  0046BA  6FE9               	movwf	(SendUDPMessage@message+1)& (0+255),b
  4875  0046BC  6BEB               	clrf	(SendUDPMessage@messageSize+1)& (0+255),b
  4876  0046BE  0E08               	movlw	8
  4877  0046C0  6FEA               	movwf	SendUDPMessage@messageSize& (0+255),b
  4878  0046C2  C041  F1EC         	movff	_m_udpSocket,SendUDPMessage@udpSocket
  4879  0046C6  EF65  F023         	goto	_SendUDPMessage	;wreg free
  4880  0046CA                     __end_of_SendDoorOpenEvent:
  4881                           	opt stack 0
  4882                           tblptru	equ	0xFF8
  4883                           tblptrh	equ	0xFF7
  4884                           tblptrl	equ	0xFF6
  4885                           tablat	equ	0xFF5
  4886                           prodh	equ	0xFF4
  4887                           prodl	equ	0xFF3
  4888                           intcon	equ	0xFF2
  4889                           intcon2	equ	0xFF1
  4890                           postinc0	equ	0xFEE
  4891                           wreg	equ	0xFE8
  4892                           postdec1	equ	0xFE5
  4893                           fsr1h	equ	0xFE2
  4894                           fsr1l	equ	0xFE1
  4895                           indf2	equ	0xFDF
  4896                           status	equ	0xFD8
  4897                           
  4898 ;; *************** function _ProcessDoorIndicatorIsClosed *****************
  4899 ;; Defined at:
  4900 ;;		line 126 in file "../src/DoorIndicator.c"
  4901 ;; Parameters:    Size  Location     Type
  4902 ;;		None
  4903 ;; Auto vars:     Size  Location     Type
  4904 ;;		None
  4905 ;; Return value:  Size  Location     Type
  4906 ;;		None               void
  4907 ;; Registers used:
  4908 ;;		None
  4909 ;; Tracked objects:
  4910 ;;		On entry : F/0
  4911 ;;		On exit  : F/0
  4912 ;;		Unchanged: F/0
  4913 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4914 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4915 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4916 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4917 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4918 ;;Total ram usage:        0 bytes
  4919 ;; Hardware stack levels used:    1
  4920 ;; Hardware stack levels required when called:    6
  4921 ;; This function calls:
  4922 ;;		Nothing
  4923 ;; This function is called by:
  4924 ;;		_ProcessStateDoorIndicatorClosed
  4925 ;; This function uses a non-reentrant model
  4926 ;;
  4927                           
  4928                           	psect	text32
  4929  0054D4                     __ptext32:
  4930                           	opt stack 0
  4931  0054D4                     _ProcessDoorIndicatorIsClosed:
  4932                           	opt stack 22
  4933                           
  4934                           ; BSR set to: 0
  4935                           ;DoorIndicator.c: 128: (LATCbits.LATC1) = 0;
  4936                           
  4937                           ;incstack = 0
  4938  0054D4  928B               	bcf	3979,1,c	;volatile
  4939                           
  4940                           ; BSR set to: 0
  4941  0054D6  0012               	return		;funcret
  4942  0054D8                     __end_of_ProcessDoorIndicatorIsClosed:
  4943                           	opt stack 0
  4944                           tblptru	equ	0xFF8
  4945                           tblptrh	equ	0xFF7
  4946                           tblptrl	equ	0xFF6
  4947                           tablat	equ	0xFF5
  4948                           prodh	equ	0xFF4
  4949                           prodl	equ	0xFF3
  4950                           intcon	equ	0xFF2
  4951                           intcon2	equ	0xFF1
  4952                           postinc0	equ	0xFEE
  4953                           wreg	equ	0xFE8
  4954                           postdec1	equ	0xFE5
  4955                           fsr1h	equ	0xFE2
  4956                           fsr1l	equ	0xFE1
  4957                           indf2	equ	0xFDF
  4958                           status	equ	0xFD8
  4959                           
  4960 ;; *************** function _NDCResetState *****************
  4961 ;; Defined at:
  4962 ;;		line 173 in file "../src/NDC.c"
  4963 ;; Parameters:    Size  Location     Type
  4964 ;;		None
  4965 ;; Auto vars:     Size  Location     Type
  4966 ;;		None
  4967 ;; Return value:  Size  Location     Type
  4968 ;;		None               void
  4969 ;; Registers used:
  4970 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4971 ;; Tracked objects:
  4972 ;;		On entry : 0/1
  4973 ;;		On exit  : F/0
  4974 ;;		Unchanged: 0/0
  4975 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4976 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4977 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4978 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4979 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4980 ;;Total ram usage:        0 bytes
  4981 ;; Hardware stack levels used:    1
  4982 ;; Hardware stack levels required when called:    8
  4983 ;; This function calls:
  4984 ;;		_InitStartState
  4985 ;;		_TickGet
  4986 ;;		_UDPClose
  4987 ;; This function is called by:
  4988 ;;		_main
  4989 ;; This function uses a non-reentrant model
  4990 ;;
  4991                           
  4992                           	psect	text33
  4993  0051A8                     __ptext33:
  4994                           	opt stack 0
  4995  0051A8                     _NDCResetState:
  4996                           	opt stack 22
  4997                           
  4998                           ;NDC.c: 174: UDPClose(m_udpSocket);
  4999                           
  5000                           ; BSR set to: 0
  5001                           ;incstack = 0
  5002  0051A8  5041               	movf	_m_udpSocket,w,c
  5003  0051AA  ECAB  F025         	call	_UDPClose
  5004                           
  5005                           ;NDC.c: 175: m_state = STATE_START;
  5006  0051AE  0100               	movlb	0	; () banked
  5007  0051B0  6BD8               	clrf	_m_state& (0+255),b
  5008                           
  5009                           ; BSR set to: 0
  5010                           ;NDC.c: 176: m_timerState = TickGet();
  5011  0051B2  EC9C  F028         	call	_TickGet	;wreg free
  5012  0051B6  C01C  F150         	movff	?_TickGet,_m_timerState
  5013  0051BA  C01D  F151         	movff	?_TickGet+1,_m_timerState+1
  5014  0051BE  C01E  F152         	movff	?_TickGet+2,_m_timerState+2
  5015  0051C2  C01F  F153         	movff	?_TickGet+3,_m_timerState+3
  5016                           
  5017                           ;NDC.c: 178: InitStartState();
  5018  0051C6  EF33  F029         	goto	_InitStartState	;wreg free
  5019  0051CA                     __end_of_NDCResetState:
  5020                           	opt stack 0
  5021                           tblptru	equ	0xFF8
  5022                           tblptrh	equ	0xFF7
  5023                           tblptrl	equ	0xFF6
  5024                           tablat	equ	0xFF5
  5025                           prodh	equ	0xFF4
  5026                           prodl	equ	0xFF3
  5027                           intcon	equ	0xFF2
  5028                           intcon2	equ	0xFF1
  5029                           postinc0	equ	0xFEE
  5030                           wreg	equ	0xFE8
  5031                           postdec1	equ	0xFE5
  5032                           fsr1h	equ	0xFE2
  5033                           fsr1l	equ	0xFE1
  5034                           indf2	equ	0xFDF
  5035                           status	equ	0xFD8
  5036                           
  5037 ;; *************** function _NDCInitData *****************
  5038 ;; Defined at:
  5039 ;;		line 102 in file "../src/NDC.c"
  5040 ;; Parameters:    Size  Location     Type
  5041 ;;		None
  5042 ;; Auto vars:     Size  Location     Type
  5043 ;;		None
  5044 ;; Return value:  Size  Location     Type
  5045 ;;		None               void
  5046 ;; Registers used:
  5047 ;;		wreg, status,2
  5048 ;; Tracked objects:
  5049 ;;		On entry : E/0
  5050 ;;		On exit  : F/1
  5051 ;;		Unchanged: 0/0
  5052 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5053 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5054 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5055 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5056 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5057 ;;Total ram usage:        0 bytes
  5058 ;; Hardware stack levels used:    1
  5059 ;; Hardware stack levels required when called:    6
  5060 ;; This function calls:
  5061 ;;		Nothing
  5062 ;; This function is called by:
  5063 ;;		_main
  5064 ;; This function uses a non-reentrant model
  5065 ;;
  5066                           
  5067                           	psect	text34
  5068  005248                     __ptext34:
  5069                           	opt stack 0
  5070  005248                     _NDCInitData:
  5071                           	opt stack 24
  5072                           
  5073                           ;NDC.c: 104: m_config.doorRelayActiveTime = 5;
  5074                           
  5075                           ; BSR set to: 0
  5076                           ;incstack = 0
  5077  005248  0101               	movlb	1	; () banked
  5078  00524A  6BC1               	clrf	(_m_config+1)& (0+255),b
  5079  00524C  0E05               	movlw	5
  5080  00524E  6FC0               	movwf	_m_config& (0+255),b
  5081                           
  5082                           ; BSR set to: 1
  5083                           ;NDC.c: 105: m_config.doorOpenTooLongTime = 0;
  5084  005250  6BC2               	clrf	(_m_config+2)& (0+255),b
  5085  005252  6BC3               	clrf	(_m_config+3)& (0+255),b
  5086                           
  5087                           ;NDC.c: 106: m_config.doorSwitchPressedTooLongTime = 30;
  5088  005254  6BC5               	clrf	(_m_config+5)& (0+255),b
  5089  005256  0E1E               	movlw	30
  5090  005258  6FC4               	movwf	(_m_config+4)& (0+255),b
  5091                           
  5092                           ; BSR set to: 1
  5093                           ;NDC.c: 107: m_config.doorIndicatorPolarity = 0;
  5094  00525A  6BC6               	clrf	(_m_config+6)& (0+255),b
  5095                           
  5096                           ; BSR set to: 1
  5097                           ;NDC.c: 108: m_config.doorSwitchPolarity = 0;
  5098  00525C  6BC7               	clrf	(_m_config+7)& (0+255),b
  5099                           
  5100                           ; BSR set to: 1
  5101                           ;NDC.c: 111: (LATFbits.LATF2) = 1;
  5102  00525E  848E               	bsf	3982,2,c	;volatile
  5103                           
  5104                           ; BSR set to: 1
  5105                           ;NDC.c: 112: (LATFbits.LATF3) = 0;
  5106  005260  968E               	bcf	3982,3,c	;volatile
  5107                           
  5108                           ; BSR set to: 1
  5109                           ;NDC.c: 115: (LATDbits.LATD2) = 0;
  5110  005262  948C               	bcf	3980,2,c	;volatile
  5111                           
  5112                           ; BSR set to: 1
  5113  005264  0012               	return		;funcret
  5114  005266                     __end_of_NDCInitData:
  5115                           	opt stack 0
  5116                           tblptru	equ	0xFF8
  5117                           tblptrh	equ	0xFF7
  5118                           tblptrl	equ	0xFF6
  5119                           tablat	equ	0xFF5
  5120                           prodh	equ	0xFF4
  5121                           prodl	equ	0xFF3
  5122                           intcon	equ	0xFF2
  5123                           intcon2	equ	0xFF1
  5124                           postinc0	equ	0xFEE
  5125                           wreg	equ	0xFE8
  5126                           postdec1	equ	0xFE5
  5127                           fsr1h	equ	0xFE2
  5128                           fsr1l	equ	0xFE1
  5129                           indf2	equ	0xFDF
  5130                           status	equ	0xFD8
  5131                           
  5132 ;; *************** function _NDCFSM *****************
  5133 ;; Defined at:
  5134 ;;		line 888 in file "../src/NDC.c"
  5135 ;; Parameters:    Size  Location     Type
  5136 ;;		None
  5137 ;; Auto vars:     Size  Location     Type
  5138 ;;		None
  5139 ;; Return value:  Size  Location     Type
  5140 ;;		None               void
  5141 ;; Registers used:
  5142 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5143 ;; Tracked objects:
  5144 ;;		On entry : 0/1
  5145 ;;		On exit  : 0/0
  5146 ;;		Unchanged: 0/0
  5147 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5148 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5149 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5150 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5151 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5152 ;;Total ram usage:        0 bytes
  5153 ;; Hardware stack levels used:    1
  5154 ;; Hardware stack levels required when called:   17
  5155 ;; This function calls:
  5156 ;;		_CheckConfigDataWaitTimer
  5157 ;;		_CheckConnectionResponseWaitTimer
  5158 ;;		_CheckDoorTimer
  5159 ;;		_CheckFlashingLEDTimer
  5160 ;;		_CheckHeartBeatTimer
  5161 ;;		_CheckKeypad
  5162 ;;		_CheckWaitForCodeTimer
  5163 ;;		_HandleConfigData
  5164 ;;		_HandleConnectionResponse
  5165 ;;		_HandleReceivedBytes
  5166 ;;		_InitStartState
  5167 ;;		_KeyPressedResetIdleTimer
  5168 ;;		_OpenUDPsocket
  5169 ;;		_SendConnectionRequest
  5170 ;;		_SendDeviceReadySignal
  5171 ;;		_SendDoorTimerExpiredEvent
  5172 ;;		_SendHeartBeat
  5173 ;;		_UDPIsGetReady
  5174 ;;		_UDPIsPutReady
  5175 ;; This function is called by:
  5176 ;;		_main
  5177 ;; This function uses a non-reentrant model
  5178 ;;
  5179                           
  5180                           	psect	text35
  5181  0036A6                     __ptext35:
  5182                           	opt stack 0
  5183  0036A6                     _NDCFSM:
  5184                           	opt stack 13
  5185                           
  5186                           ;NDC.c: 891: CheckFlashingLEDTimer();
  5187                           
  5188                           ; BSR set to: 1
  5189                           ;incstack = 0
  5190  0036A6  EC23  F021         	call	_CheckFlashingLEDTimer	;wreg free
  5191                           
  5192                           ;NDC.c: 894: CheckWaitForCodeTimer();
  5193  0036AA  EC5B  F017         	call	_CheckWaitForCodeTimer	;wreg free
  5194                           
  5195                           ;NDC.c: 898: if (CheckDoorTimer()) {
  5196  0036AE  EC89  F028         	call	_CheckDoorTimer	;wreg free
  5197  0036B2  0900               	iorlw	0
  5198  0036B4  E04A               	bz	l11594
  5199                           
  5200                           ;NDC.c: 899: SendDoorTimerExpiredEvent();
  5201  0036B6  EC7E  F022         	call	_SendDoorTimerExpiredEvent	;wreg free
  5202  0036BA  D047               	goto	l11594
  5203  0036BC                     l11554:
  5204                           
  5205                           ; BSR set to: 0
  5206                           ;NDC.c: 907: InitStartState();
  5207  0036BC  EC33  F029         	call	_InitStartState	;wreg free
  5208                           
  5209                           ; BSR set to: 0
  5210                           ;NDC.c: 910: OpenUDPsocket();
  5211  0036C0  EF0D  F01E         	goto	_OpenUDPsocket	;wreg free
  5212  0036C4                     l11558:
  5213                           
  5214                           ; BSR set to: 0
  5215                           ;NDC.c: 917: if (!UDPIsPutReady(m_udpSocket))
  5216  0036C4  5041               	movf	_m_udpSocket,w,c
  5217  0036C6  EC3D  F026         	call	_UDPIsPutReady
  5218  0036CA  5025               	movf	?_UDPIsPutReady,w,c
  5219  0036CC  1026               	iorwf	?_UDPIsPutReady+1,w,c
  5220  0036CE  E002 EF68  F01C    	bnz	_SendConnectionRequest
  5221  0036D4  0012               	return	
  5222  0036D6                     l11564:
  5223                           
  5224                           ; BSR set to: 0
  5225                           ;NDC.c: 928: CheckConnectionResponseWaitTimer();
  5226  0036D6  EC5E  F025         	call	_CheckConnectionResponseWaitTimer	;wreg free
  5227                           
  5228                           ;NDC.c: 931: m_bytesAvailable = UDPIsGetReady(m_udpSocket);
  5229  0036DA  5041               	movf	_m_udpSocket,w,c
  5230  0036DC  EC8C  F027         	call	_UDPIsGetReady
  5231  0036E0  C026  F0C9         	movff	?_UDPIsGetReady,_m_bytesAvailable
  5232  0036E4  C027  F0CA         	movff	?_UDPIsGetReady+1,_m_bytesAvailable+1
  5233                           
  5234                           ;NDC.c: 933: if (m_bytesAvailable != 0) {
  5235  0036E8  0100               	movlb	0	; () banked
  5236  0036EA  51C9               	movf	_m_bytesAvailable& (0+255),w,b
  5237  0036EC  11CA               	iorwf	(_m_bytesAvailable+1)& (0+255),w,b
  5238  0036EE  B4D8               	btfsc	status,2,c
  5239  0036F0  0012               	return	
  5240                           
  5241                           ; BSR set to: 0
  5242                           ;NDC.c: 935: HandleConnectionResponse();
  5243  0036F2  EFF0  F021         	goto	_HandleConnectionResponse	;wreg free
  5244  0036F6                     l11572:
  5245                           
  5246                           ; BSR set to: 0
  5247                           ;NDC.c: 942: CheckConfigDataWaitTimer();
  5248  0036F6  ECD1  F025         	call	_CheckConfigDataWaitTimer	;wreg free
  5249                           
  5250                           ;NDC.c: 945: m_bytesAvailable = UDPIsGetReady(m_udpSocket);
  5251  0036FA  5041               	movf	_m_udpSocket,w,c
  5252  0036FC  EC8C  F027         	call	_UDPIsGetReady
  5253  003700  C026  F0C9         	movff	?_UDPIsGetReady,_m_bytesAvailable
  5254  003704  C027  F0CA         	movff	?_UDPIsGetReady+1,_m_bytesAvailable+1
  5255                           
  5256                           ;NDC.c: 947: if (m_bytesAvailable != 0) {
  5257  003708  0100               	movlb	0	; () banked
  5258  00370A  51C9               	movf	_m_bytesAvailable& (0+255),w,b
  5259  00370C  11CA               	iorwf	(_m_bytesAvailable+1)& (0+255),w,b
  5260  00370E  B4D8               	btfsc	status,2,c
  5261  003710  0012               	return	
  5262                           
  5263                           ; BSR set to: 0
  5264                           ;NDC.c: 950: if (HandleConfigData() == 1)
  5265  003712  EC57  F010         	call	_HandleConfigData	;wreg free
  5266  003716  06E8               	decf	wreg,f,c
  5267  003718  A4D8               	btfss	status,2,c
  5268  00371A  0012               	return	
  5269                           
  5270                           ;NDC.c: 951: SendDeviceReadySignal();
  5271  00371C  EF44  F024         	goto	_SendDeviceReadySignal	;wreg free
  5272  003720                     l11582:
  5273                           
  5274                           ; BSR set to: 0
  5275                           ;NDC.c: 957: {
  5276                           ;NDC.c: 959: m_bytesAvailable = UDPIsGetReady(m_udpSocket);
  5277  003720  5041               	movf	_m_udpSocket,w,c
  5278  003722  EC8C  F027         	call	_UDPIsGetReady
  5279  003726  C026  F0C9         	movff	?_UDPIsGetReady,_m_bytesAvailable
  5280  00372A  C027  F0CA         	movff	?_UDPIsGetReady+1,_m_bytesAvailable+1
  5281                           
  5282                           ;NDC.c: 962: KeyPressedResetIdleTimer();
  5283  00372E  EC10  F025         	call	_KeyPressedResetIdleTimer	;wreg free
  5284                           
  5285                           ;NDC.c: 964: if (m_bytesAvailable != 0) {
  5286  003732  0100               	movlb	0	; () banked
  5287  003734  51C9               	movf	_m_bytesAvailable& (0+255),w,b
  5288  003736  11CA               	iorwf	(_m_bytesAvailable+1)& (0+255),w,b
  5289  003738  E002               	bz	l593
  5290                           
  5291                           ; BSR set to: 0
  5292                           ;NDC.c: 966: HandleReceivedBytes();
  5293  00373A  ECC2  F00C         	call	_HandleReceivedBytes	;wreg free
  5294  00373E                     l593:
  5295                           
  5296                           ;NDC.c: 967: }
  5297                           ;NDC.c: 970: SendHeartBeat();
  5298  00373E  EC69  F01D         	call	_SendHeartBeat	;wreg free
  5299                           
  5300                           ;NDC.c: 973: CheckHeartBeatTimer();
  5301  003742  EC98  F024         	call	_CheckHeartBeatTimer	;wreg free
  5302                           
  5303                           ;NDC.c: 976: CheckKeypad();
  5304  003746  EF38  F00B         	goto	_CheckKeypad	;wreg free
  5305  00374A                     l11594:
  5306  00374A  0100               	movlb	0	; () banked
  5307  00374C  51D8               	movf	_m_state& (0+255),w,b
  5308                           
  5309                           ; Switch size 1, requested type "speed"
  5310                           ; Number of cases is 5, Range of values is 0 to 4
  5311                           ; switch strategies available:
  5312                           ; Name         Instructions Cycles
  5313                           ; simple_byte           16     9 (average)
  5314                           ;	Chosen strategy is simple_byte
  5315  00374E  E0B6               	bz	l11554
  5316  003750  0A01               	xorlw	1	; case 1
  5317  003752  E0B8               	bz	l11558
  5318  003754  0A03               	xorlw	3	; case 2
  5319  003756  E0BF               	bz	l11564
  5320  003758  0A01               	xorlw	1	; case 3
  5321  00375A  E0CD               	bz	l11572
  5322  00375C  0A07               	xorlw	7	; case 4
  5323  00375E  E0E0               	bz	l11582
  5324  003760  0012               	return		;funcret
  5325  003762                     __end_of_NDCFSM:
  5326                           	opt stack 0
  5327                           tblptru	equ	0xFF8
  5328                           tblptrh	equ	0xFF7
  5329                           tblptrl	equ	0xFF6
  5330                           tablat	equ	0xFF5
  5331                           prodh	equ	0xFF4
  5332                           prodl	equ	0xFF3
  5333                           intcon	equ	0xFF2
  5334                           intcon2	equ	0xFF1
  5335                           postinc0	equ	0xFEE
  5336                           wreg	equ	0xFE8
  5337                           postdec1	equ	0xFE5
  5338                           fsr1h	equ	0xFE2
  5339                           fsr1l	equ	0xFE1
  5340                           indf2	equ	0xFDF
  5341                           status	equ	0xFD8
  5342                           
  5343 ;; *************** function _SendHeartBeat *****************
  5344 ;; Defined at:
  5345 ;;		line 637 in file "../src/NDC.c"
  5346 ;; Parameters:    Size  Location     Type
  5347 ;;		None
  5348 ;; Auto vars:     Size  Location     Type
  5349 ;;		None
  5350 ;; Return value:  Size  Location     Type
  5351 ;;		None               void
  5352 ;; Registers used:
  5353 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5354 ;; Tracked objects:
  5355 ;;		On entry : 0/0
  5356 ;;		On exit  : 0/0
  5357 ;;		Unchanged: 0/0
  5358 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5359 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5360 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5361 ;;      Temps:          0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5362 ;;      Totals:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5363 ;;Total ram usage:        4 bytes
  5364 ;; Hardware stack levels used:    1
  5365 ;; Hardware stack levels required when called:   16
  5366 ;; This function calls:
  5367 ;;		_CheckIfFirstTimeConnection
  5368 ;;		_SendFirstConnectionMadeEvent
  5369 ;;		_SendUDPMessage
  5370 ;;		_TickGet
  5371 ;; This function is called by:
  5372 ;;		_NDCFSM
  5373 ;; This function uses a non-reentrant model
  5374 ;;
  5375                           
  5376                           	psect	text36
  5377  003AD2                     __ptext36:
  5378                           	opt stack 0
  5379  003AD2                     _SendHeartBeat:
  5380                           	opt stack 13
  5381                           
  5382                           ;NDC.c: 638: if (TickGet() - m_timerSendHeartbeat > (((((40000000ul) / 4)+128ull)/256ull
      +                          )) * 2) {
  5383                           
  5384                           ;incstack = 0
  5385  003AD2  EC9C  F028         	call	_TickGet	;wreg free
  5386  003AD6  0101               	movlb	1	; () banked
  5387  003AD8  514C               	movf	_m_timerSendHeartbeat& (0+255),w,b
  5388  003ADA  5C1C               	subwf	?_TickGet,w,c
  5389  003ADC  6FED               	movwf	??_SendHeartBeat& (0+255),b
  5390  003ADE  514D               	movf	(_m_timerSendHeartbeat+1)& (0+255),w,b
  5391  003AE0  581D               	subwfb	?_TickGet+1,w,c
  5392  003AE2  6FEE               	movwf	(??_SendHeartBeat+1)& (0+255),b
  5393  003AE4  514E               	movf	(_m_timerSendHeartbeat+2)& (0+255),w,b
  5394  003AE6  581E               	subwfb	?_TickGet+2,w,c
  5395  003AE8  6FEF               	movwf	(??_SendHeartBeat+2)& (0+255),b
  5396  003AEA  514F               	movf	(_m_timerSendHeartbeat+3)& (0+255),w,b
  5397  003AEC  581F               	subwfb	?_TickGet+3,w,c
  5398  003AEE  6FF0               	movwf	(??_SendHeartBeat+3)& (0+255),b
  5399  003AF0  51F0               	movf	(??_SendHeartBeat+3)& (0+255),w,b
  5400  003AF2  E108               	bnz	u10520
  5401  003AF4  0E2F               	movlw	47
  5402  003AF6  5DED               	subwf	??_SendHeartBeat& (0+255),w,b
  5403  003AF8  0E31               	movlw	49
  5404  003AFA  59EE               	subwfb	(??_SendHeartBeat+1)& (0+255),w,b
  5405  003AFC  0E01               	movlw	1
  5406  003AFE  59EF               	subwfb	(??_SendHeartBeat+2)& (0+255),w,b
  5407  003B00  A0D8               	btfss	status,0,c
  5408  003B02  0012               	return	
  5409  003B04                     u10520:
  5410                           
  5411                           ; BSR set to: 1
  5412                           ;NDC.c: 641: if (CheckIfFirstTimeConnection())
  5413  003B04  EC51  F02A         	call	_CheckIfFirstTimeConnection	;wreg free
  5414  003B08  0900               	iorlw	0
  5415  003B0A  E002               	bz	l11186
  5416                           
  5417                           ; BSR set to: 1
  5418                           ;NDC.c: 642: SendFirstConnectionMadeEvent();
  5419  003B0C  EC4F  F022         	call	_SendFirstConnectionMadeEvent	;wreg free
  5420  003B10                     l11186:
  5421                           
  5422                           ;NDC.c: 645: m_messageBuffer[0] = 0;
  5423  003B10  0E00               	movlw	0
  5424  003B12  CFE8 F341          	movff	wreg,_m_messageBuffer
  5425                           
  5426                           ;NDC.c: 646: m_messageBuffer[1] = 0;
  5427  003B16  CFE8 F342          	movff	wreg,_m_messageBuffer+1
  5428                           
  5429                           ;NDC.c: 647: m_messageBuffer[2] = g_serializedMACAddress[0];
  5430  003B1A  EE23  F043         	lfsr	2,_m_messageBuffer+2
  5431  003B1E  C0F9  FFDF         	movff	_g_serializedMACAddress,indf2
  5432                           
  5433                           ;NDC.c: 648: m_messageBuffer[3] = g_serializedMACAddress[1];
  5434  003B22  EE23  F044         	lfsr	2,_m_messageBuffer+3
  5435  003B26  C0FA  FFDF         	movff	_g_serializedMACAddress+1,indf2
  5436                           
  5437                           ;NDC.c: 649: m_messageBuffer[4] = g_serializedMACAddress[2];
  5438  003B2A  EE23  F045         	lfsr	2,_m_messageBuffer+4
  5439  003B2E  C0FB  FFDF         	movff	_g_serializedMACAddress+2,indf2
  5440                           
  5441                           ;NDC.c: 650: m_messageBuffer[5] = g_serializedMACAddress[3];
  5442  003B32  EE23  F046         	lfsr	2,_m_messageBuffer+5
  5443  003B36  C0FC  FFDF         	movff	_g_serializedMACAddress+3,indf2
  5444                           
  5445                           ;NDC.c: 651: m_messageBuffer[6] = g_serializedMACAddress[4];
  5446  003B3A  EE23  F047         	lfsr	2,_m_messageBuffer+6
  5447  003B3E  C0FD  FFDF         	movff	_g_serializedMACAddress+4,indf2
  5448                           
  5449                           ;NDC.c: 652: m_messageBuffer[7] = g_serializedMACAddress[5];
  5450  003B42  EE23  F048         	lfsr	2,_m_messageBuffer+7
  5451  003B46  C0FE  FFDF         	movff	_g_serializedMACAddress+5,indf2
  5452                           
  5453                           ;NDC.c: 654: SendUDPMessage(m_messageBuffer, 8, m_udpSocket);
  5454  003B4A  0E41               	movlw	low _m_messageBuffer
  5455  003B4C  0101               	movlb	1	; () banked
  5456  003B4E  6FE8               	movwf	SendUDPMessage@message& (0+255),b
  5457  003B50  0E03               	movlw	high _m_messageBuffer
  5458  003B52  6FE9               	movwf	(SendUDPMessage@message+1)& (0+255),b
  5459  003B54  6BEB               	clrf	(SendUDPMessage@messageSize+1)& (0+255),b
  5460  003B56  0E08               	movlw	8
  5461  003B58  6FEA               	movwf	SendUDPMessage@messageSize& (0+255),b
  5462  003B5A  C041  F1EC         	movff	_m_udpSocket,SendUDPMessage@udpSocket
  5463  003B5E  EC65  F023         	call	_SendUDPMessage	;wreg free
  5464                           
  5465                           ;NDC.c: 656: m_timerSendHeartbeat = TickGet();
  5466  003B62  EC9C  F028         	call	_TickGet	;wreg free
  5467  003B66  C01C  F14C         	movff	?_TickGet,_m_timerSendHeartbeat
  5468  003B6A  C01D  F14D         	movff	?_TickGet+1,_m_timerSendHeartbeat+1
  5469  003B6E  C01E  F14E         	movff	?_TickGet+2,_m_timerSendHeartbeat+2
  5470  003B72  C01F  F14F         	movff	?_TickGet+3,_m_timerSendHeartbeat+3
  5471  003B76  0012               	return		;funcret
  5472  003B78                     __end_of_SendHeartBeat:
  5473                           	opt stack 0
  5474                           tblptru	equ	0xFF8
  5475                           tblptrh	equ	0xFF7
  5476                           tblptrl	equ	0xFF6
  5477                           tablat	equ	0xFF5
  5478                           prodh	equ	0xFF4
  5479                           prodl	equ	0xFF3
  5480                           intcon	equ	0xFF2
  5481                           intcon2	equ	0xFF1
  5482                           postinc0	equ	0xFEE
  5483                           wreg	equ	0xFE8
  5484                           postdec1	equ	0xFE5
  5485                           fsr1h	equ	0xFE2
  5486                           fsr1l	equ	0xFE1
  5487                           indf2	equ	0xFDF
  5488                           status	equ	0xFD8
  5489                           
  5490 ;; *************** function _SendFirstConnectionMadeEvent *****************
  5491 ;; Defined at:
  5492 ;;		line 472 in file "../src/NDC.c"
  5493 ;; Parameters:    Size  Location     Type
  5494 ;;		None
  5495 ;; Auto vars:     Size  Location     Type
  5496 ;;		None
  5497 ;; Return value:  Size  Location     Type
  5498 ;;		None               void
  5499 ;; Registers used:
  5500 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5501 ;; Tracked objects:
  5502 ;;		On entry : F/1
  5503 ;;		On exit  : 0/0
  5504 ;;		Unchanged: 0/0
  5505 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5506 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5507 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5508 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5509 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5510 ;;Total ram usage:        0 bytes
  5511 ;; Hardware stack levels used:    1
  5512 ;; Hardware stack levels required when called:   15
  5513 ;; This function calls:
  5514 ;;		_SendUDPMessage
  5515 ;; This function is called by:
  5516 ;;		_SendHeartBeat
  5517 ;; This function uses a non-reentrant model
  5518 ;;
  5519                           
  5520                           	psect	text37
  5521  00449E                     __ptext37:
  5522                           	opt stack 0
  5523  00449E                     _SendFirstConnectionMadeEvent:
  5524                           	opt stack 13
  5525                           
  5526                           ; BSR set to: 1
  5527                           ;NDC.c: 473: m_messageBuffer[0] = 0;
  5528                           
  5529                           ;incstack = 0
  5530  00449E  0E00               	movlw	0
  5531  0044A0  CFE8 F341          	movff	wreg,_m_messageBuffer
  5532                           
  5533                           ;NDC.c: 474: m_messageBuffer[1] = 0x31;
  5534  0044A4  0E31               	movlw	49
  5535  0044A6  CFE8 F342          	movff	wreg,_m_messageBuffer+1
  5536                           
  5537                           ; BSR set to: 1
  5538                           ;NDC.c: 475: m_messageBuffer[2] = g_serializedMACAddress[0];
  5539  0044AA  EE23  F043         	lfsr	2,_m_messageBuffer+2
  5540  0044AE  C0F9  FFDF         	movff	_g_serializedMACAddress,indf2
  5541                           
  5542                           ;NDC.c: 476: m_messageBuffer[3] = g_serializedMACAddress[1];
  5543  0044B2  EE23  F044         	lfsr	2,_m_messageBuffer+3
  5544  0044B6  C0FA  FFDF         	movff	_g_serializedMACAddress+1,indf2
  5545                           
  5546                           ;NDC.c: 477: m_messageBuffer[4] = g_serializedMACAddress[2];
  5547  0044BA  EE23  F045         	lfsr	2,_m_messageBuffer+4
  5548  0044BE  C0FB  FFDF         	movff	_g_serializedMACAddress+2,indf2
  5549                           
  5550                           ;NDC.c: 478: m_messageBuffer[5] = g_serializedMACAddress[3];
  5551  0044C2  EE23  F046         	lfsr	2,_m_messageBuffer+5
  5552  0044C6  C0FC  FFDF         	movff	_g_serializedMACAddress+3,indf2
  5553                           
  5554                           ;NDC.c: 479: m_messageBuffer[6] = g_serializedMACAddress[4];
  5555  0044CA  EE23  F047         	lfsr	2,_m_messageBuffer+6
  5556  0044CE  C0FD  FFDF         	movff	_g_serializedMACAddress+4,indf2
  5557                           
  5558                           ;NDC.c: 480: m_messageBuffer[7] = g_serializedMACAddress[5];
  5559  0044D2  EE23  F048         	lfsr	2,_m_messageBuffer+7
  5560  0044D6  C0FE  FFDF         	movff	_g_serializedMACAddress+5,indf2
  5561                           
  5562                           ; BSR set to: 1
  5563                           ;NDC.c: 482: if (m_state == STATE_CONNECTED)
  5564  0044DA  0E04               	movlw	4
  5565  0044DC  0100               	movlb	0	; () banked
  5566  0044DE  19D8               	xorwf	_m_state& (0+255),w,b
  5567  0044E0  A4D8               	btfss	status,2,c
  5568  0044E2  0012               	return	
  5569                           
  5570                           ; BSR set to: 0
  5571                           ;NDC.c: 483: SendUDPMessage(m_messageBuffer, 8, m_udpSocket);
  5572  0044E4  0E41               	movlw	low _m_messageBuffer
  5573  0044E6  0101               	movlb	1	; () banked
  5574  0044E8  6FE8               	movwf	SendUDPMessage@message& (0+255),b
  5575  0044EA  0E03               	movlw	high _m_messageBuffer
  5576  0044EC  6FE9               	movwf	(SendUDPMessage@message+1)& (0+255),b
  5577  0044EE  6BEB               	clrf	(SendUDPMessage@messageSize+1)& (0+255),b
  5578  0044F0  0E08               	movlw	8
  5579  0044F2  6FEA               	movwf	SendUDPMessage@messageSize& (0+255),b
  5580  0044F4  C041  F1EC         	movff	_m_udpSocket,SendUDPMessage@udpSocket
  5581  0044F8  EF65  F023         	goto	_SendUDPMessage	;wreg free
  5582  0044FC                     __end_of_SendFirstConnectionMadeEvent:
  5583                           	opt stack 0
  5584                           tblptru	equ	0xFF8
  5585                           tblptrh	equ	0xFF7
  5586                           tblptrl	equ	0xFF6
  5587                           tablat	equ	0xFF5
  5588                           prodh	equ	0xFF4
  5589                           prodl	equ	0xFF3
  5590                           intcon	equ	0xFF2
  5591                           intcon2	equ	0xFF1
  5592                           postinc0	equ	0xFEE
  5593                           wreg	equ	0xFE8
  5594                           postdec1	equ	0xFE5
  5595                           fsr1h	equ	0xFE2
  5596                           fsr1l	equ	0xFE1
  5597                           indf2	equ	0xFDF
  5598                           status	equ	0xFD8
  5599                           
  5600 ;; *************** function _CheckIfFirstTimeConnection *****************
  5601 ;; Defined at:
  5602 ;;		line 241 in file "../src/NDC.c"
  5603 ;; Parameters:    Size  Location     Type
  5604 ;;		None
  5605 ;; Auto vars:     Size  Location     Type
  5606 ;;		None
  5607 ;; Return value:  Size  Location     Type
  5608 ;;                  1    wreg      unsigned char 
  5609 ;; Registers used:
  5610 ;;		wreg, status,2, status,0
  5611 ;; Tracked objects:
  5612 ;;		On entry : F/1
  5613 ;;		On exit  : F/1
  5614 ;;		Unchanged: 0/0
  5615 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5616 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5617 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5618 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5619 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5620 ;;Total ram usage:        0 bytes
  5621 ;; Hardware stack levels used:    1
  5622 ;; Hardware stack levels required when called:    6
  5623 ;; This function calls:
  5624 ;;		Nothing
  5625 ;; This function is called by:
  5626 ;;		_SendHeartBeat
  5627 ;; This function uses a non-reentrant model
  5628 ;;
  5629                           
  5630                           	psect	text38
  5631  0054A2                     __ptext38:
  5632                           	opt stack 0
  5633  0054A2                     _CheckIfFirstTimeConnection:
  5634                           	opt stack 22
  5635                           
  5636                           ; BSR set to: 1
  5637                           ;NDC.c: 242: if (m_firstConnectionAfterBootFlag == 1) {
  5638                           
  5639                           ;incstack = 0
  5640  0054A2  05E7               	decf	_m_firstConnectionAfterBootFlag& (0+255),w,b
  5641  0054A4  E102               	bnz	l7704
  5642                           
  5643                           ; BSR set to: 1
  5644                           ;NDC.c: 243: m_firstConnectionAfterBootFlag = 0;
  5645  0054A6  6BE7               	clrf	_m_firstConnectionAfterBootFlag& (0+255),b
  5646                           
  5647                           ; BSR set to: 1
  5648                           ;NDC.c: 244: return 1;
  5649  0054A8  0C01               	retlw	1
  5650  0054AA                     l7704:
  5651                           
  5652                           ; BSR set to: 1
  5653                           
  5654                           ; BSR set to: 1
  5655                           ;NDC.c: 245: }
  5656                           ;NDC.c: 246: return 0;
  5657  0054AA  0C00               	retlw	0	;funcret
  5658  0054AC                     __end_of_CheckIfFirstTimeConnection:
  5659                           	opt stack 0
  5660                           tblptru	equ	0xFF8
  5661                           tblptrh	equ	0xFF7
  5662                           tblptrl	equ	0xFF6
  5663                           tablat	equ	0xFF5
  5664                           prodh	equ	0xFF4
  5665                           prodl	equ	0xFF3
  5666                           intcon	equ	0xFF2
  5667                           intcon2	equ	0xFF1
  5668                           postinc0	equ	0xFEE
  5669                           wreg	equ	0xFE8
  5670                           postdec1	equ	0xFE5
  5671                           fsr1h	equ	0xFE2
  5672                           fsr1l	equ	0xFE1
  5673                           indf2	equ	0xFDF
  5674                           status	equ	0xFD8
  5675                           
  5676 ;; *************** function _SendDeviceReadySignal *****************
  5677 ;; Defined at:
  5678 ;;		line 574 in file "../src/NDC.c"
  5679 ;; Parameters:    Size  Location     Type
  5680 ;;		None
  5681 ;; Auto vars:     Size  Location     Type
  5682 ;;		None
  5683 ;; Return value:  Size  Location     Type
  5684 ;;		None               void
  5685 ;; Registers used:
  5686 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5687 ;; Tracked objects:
  5688 ;;		On entry : 0/0
  5689 ;;		On exit  : 0/0
  5690 ;;		Unchanged: 0/0
  5691 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5692 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5693 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5694 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5695 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5696 ;;Total ram usage:        0 bytes
  5697 ;; Hardware stack levels used:    1
  5698 ;; Hardware stack levels required when called:   15
  5699 ;; This function calls:
  5700 ;;		_SendUDPMessage
  5701 ;; This function is called by:
  5702 ;;		_NDCFSM
  5703 ;; This function uses a non-reentrant model
  5704 ;;
  5705                           
  5706                           	psect	text39
  5707  004888                     __ptext39:
  5708                           	opt stack 0
  5709  004888                     _SendDeviceReadySignal:
  5710                           	opt stack 14
  5711                           
  5712                           ;NDC.c: 575: m_messageBuffer[0] = 0;
  5713                           
  5714                           ; BSR set to: 1
  5715                           ;incstack = 0
  5716  004888  0E00               	movlw	0
  5717  00488A  CFE8 F341          	movff	wreg,_m_messageBuffer
  5718                           
  5719                           ;NDC.c: 576: m_messageBuffer[1] = 0xAA;
  5720  00488E  0EAA               	movlw	170
  5721  004890  CFE8 F342          	movff	wreg,_m_messageBuffer+1
  5722                           
  5723                           ;NDC.c: 577: m_messageBuffer[2] = g_serializedMACAddress[0];
  5724  004894  EE23  F043         	lfsr	2,_m_messageBuffer+2
  5725  004898  C0F9  FFDF         	movff	_g_serializedMACAddress,indf2
  5726                           
  5727                           ;NDC.c: 578: m_messageBuffer[3] = g_serializedMACAddress[1];
  5728  00489C  EE23  F044         	lfsr	2,_m_messageBuffer+3
  5729  0048A0  C0FA  FFDF         	movff	_g_serializedMACAddress+1,indf2
  5730                           
  5731                           ;NDC.c: 579: m_messageBuffer[4] = g_serializedMACAddress[2];
  5732  0048A4  EE23  F045         	lfsr	2,_m_messageBuffer+4
  5733  0048A8  C0FB  FFDF         	movff	_g_serializedMACAddress+2,indf2
  5734                           
  5735                           ;NDC.c: 580: m_messageBuffer[5] = g_serializedMACAddress[3];
  5736  0048AC  EE23  F046         	lfsr	2,_m_messageBuffer+5
  5737  0048B0  C0FC  FFDF         	movff	_g_serializedMACAddress+3,indf2
  5738                           
  5739                           ;NDC.c: 581: m_messageBuffer[6] = g_serializedMACAddress[4];
  5740  0048B4  EE23  F047         	lfsr	2,_m_messageBuffer+6
  5741  0048B8  C0FD  FFDF         	movff	_g_serializedMACAddress+4,indf2
  5742                           
  5743                           ;NDC.c: 582: m_messageBuffer[7] = g_serializedMACAddress[5];
  5744  0048BC  EE23  F048         	lfsr	2,_m_messageBuffer+7
  5745  0048C0  C0FE  FFDF         	movff	_g_serializedMACAddress+5,indf2
  5746                           
  5747                           ;NDC.c: 584: SendUDPMessage(m_messageBuffer, 8, m_udpSocket);
  5748  0048C4  0E41               	movlw	low _m_messageBuffer
  5749  0048C6  0101               	movlb	1	; () banked
  5750  0048C8  6FE8               	movwf	SendUDPMessage@message& (0+255),b
  5751  0048CA  0E03               	movlw	high _m_messageBuffer
  5752  0048CC  6FE9               	movwf	(SendUDPMessage@message+1)& (0+255),b
  5753  0048CE  6BEB               	clrf	(SendUDPMessage@messageSize+1)& (0+255),b
  5754  0048D0  0E08               	movlw	8
  5755  0048D2  6FEA               	movwf	SendUDPMessage@messageSize& (0+255),b
  5756  0048D4  C041  F1EC         	movff	_m_udpSocket,SendUDPMessage@udpSocket
  5757  0048D8  EF65  F023         	goto	_SendUDPMessage	;wreg free
  5758  0048DC                     __end_of_SendDeviceReadySignal:
  5759                           	opt stack 0
  5760                           tblptru	equ	0xFF8
  5761                           tblptrh	equ	0xFF7
  5762                           tblptrl	equ	0xFF6
  5763                           tablat	equ	0xFF5
  5764                           prodh	equ	0xFF4
  5765                           prodl	equ	0xFF3
  5766                           intcon	equ	0xFF2
  5767                           intcon2	equ	0xFF1
  5768                           postinc0	equ	0xFEE
  5769                           wreg	equ	0xFE8
  5770                           postdec1	equ	0xFE5
  5771                           fsr1h	equ	0xFE2
  5772                           fsr1l	equ	0xFE1
  5773                           indf2	equ	0xFDF
  5774                           status	equ	0xFD8
  5775                           
  5776 ;; *************** function _SendConnectionRequest *****************
  5777 ;; Defined at:
  5778 ;;		line 587 in file "../src/NDC.c"
  5779 ;; Parameters:    Size  Location     Type
  5780 ;;		None
  5781 ;; Auto vars:     Size  Location     Type
  5782 ;;		None
  5783 ;; Return value:  Size  Location     Type
  5784 ;;		None               void
  5785 ;; Registers used:
  5786 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5787 ;; Tracked objects:
  5788 ;;		On entry : 0/0
  5789 ;;		On exit  : E/0
  5790 ;;		Unchanged: 0/0
  5791 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5792 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5793 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5794 ;;      Temps:          0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5795 ;;      Totals:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5796 ;;Total ram usage:        4 bytes
  5797 ;; Hardware stack levels used:    1
  5798 ;; Hardware stack levels required when called:   15
  5799 ;; This function calls:
  5800 ;;		_SendUDPMessage
  5801 ;;		_TickGet
  5802 ;; This function is called by:
  5803 ;;		_NDCFSM
  5804 ;; This function uses a non-reentrant model
  5805 ;;
  5806                           
  5807                           	psect	text40
  5808  0038D0                     __ptext40:
  5809                           	opt stack 0
  5810  0038D0                     _SendConnectionRequest:
  5811                           	opt stack 14
  5812                           
  5813                           ;NDC.c: 588: if (TickGet() - m_timerState > (((((40000000ul) / 4)+128ull)/256ull))) {
  5814                           
  5815                           ;incstack = 0
  5816  0038D0  EC9C  F028         	call	_TickGet	;wreg free
  5817  0038D4  0101               	movlb	1	; () banked
  5818  0038D6  5150               	movf	_m_timerState& (0+255),w,b
  5819  0038D8  5C1C               	subwf	?_TickGet,w,c
  5820  0038DA  6FED               	movwf	??_SendConnectionRequest& (0+255),b
  5821  0038DC  5151               	movf	(_m_timerState+1)& (0+255),w,b
  5822  0038DE  581D               	subwfb	?_TickGet+1,w,c
  5823  0038E0  6FEE               	movwf	(??_SendConnectionRequest+1)& (0+255),b
  5824  0038E2  5152               	movf	(_m_timerState+2)& (0+255),w,b
  5825  0038E4  581E               	subwfb	?_TickGet+2,w,c
  5826  0038E6  6FEF               	movwf	(??_SendConnectionRequest+2)& (0+255),b
  5827  0038E8  5153               	movf	(_m_timerState+3)& (0+255),w,b
  5828  0038EA  581F               	subwfb	?_TickGet+3,w,c
  5829  0038EC  6FF0               	movwf	(??_SendConnectionRequest+3)& (0+255),b
  5830  0038EE  51F0               	movf	(??_SendConnectionRequest+3)& (0+255),w,b
  5831  0038F0  11EF               	iorwf	(??_SendConnectionRequest+2)& (0+255),w,b
  5832  0038F2  E106               	bnz	u10500
  5833  0038F4  0E98               	movlw	152
  5834  0038F6  5DED               	subwf	??_SendConnectionRequest& (0+255),w,b
  5835  0038F8  0E98               	movlw	152
  5836  0038FA  59EE               	subwfb	(??_SendConnectionRequest+1)& (0+255),w,b
  5837  0038FC  A0D8               	btfss	status,0,c
  5838  0038FE  0012               	return	
  5839  003900                     u10500:
  5840                           
  5841                           ; BSR set to: 1
  5842                           ;NDC.c: 589: m_messageBuffer[0] = 0;
  5843  003900  0E00               	movlw	0
  5844  003902  CFE8 F341          	movff	wreg,_m_messageBuffer
  5845                           
  5846                           ;NDC.c: 590: m_messageBuffer[1] = 1;
  5847  003906  0E01               	movlw	1
  5848  003908  CFE8 F342          	movff	wreg,_m_messageBuffer+1
  5849                           
  5850                           ; BSR set to: 1
  5851                           ;NDC.c: 591: m_messageBuffer[2] = g_serializedMACAddress[0];
  5852  00390C  EE23  F043         	lfsr	2,_m_messageBuffer+2
  5853  003910  C0F9  FFDF         	movff	_g_serializedMACAddress,indf2
  5854                           
  5855                           ;NDC.c: 592: m_messageBuffer[3] = g_serializedMACAddress[1];
  5856  003914  EE23  F044         	lfsr	2,_m_messageBuffer+3
  5857  003918  C0FA  FFDF         	movff	_g_serializedMACAddress+1,indf2
  5858                           
  5859                           ;NDC.c: 593: m_messageBuffer[4] = g_serializedMACAddress[2];
  5860  00391C  EE23  F045         	lfsr	2,_m_messageBuffer+4
  5861  003920  C0FB  FFDF         	movff	_g_serializedMACAddress+2,indf2
  5862                           
  5863                           ;NDC.c: 594: m_messageBuffer[5] = g_serializedMACAddress[3];
  5864  003924  EE23  F046         	lfsr	2,_m_messageBuffer+5
  5865  003928  C0FC  FFDF         	movff	_g_serializedMACAddress+3,indf2
  5866                           
  5867                           ;NDC.c: 595: m_messageBuffer[6] = g_serializedMACAddress[4];
  5868  00392C  EE23  F047         	lfsr	2,_m_messageBuffer+6
  5869  003930  C0FD  FFDF         	movff	_g_serializedMACAddress+4,indf2
  5870                           
  5871                           ;NDC.c: 596: m_messageBuffer[7] = g_serializedMACAddress[5];
  5872  003934  EE23  F048         	lfsr	2,_m_messageBuffer+7
  5873  003938  C0FE  FFDF         	movff	_g_serializedMACAddress+5,indf2
  5874                           
  5875                           ; BSR set to: 1
  5876                           ;NDC.c: 598: SendUDPMessage(m_messageBuffer, 8, m_udpSocket);
  5877  00393C  0E41               	movlw	low _m_messageBuffer
  5878  00393E  6FE8               	movwf	SendUDPMessage@message& (0+255),b
  5879  003940  0E03               	movlw	high _m_messageBuffer
  5880  003942  6FE9               	movwf	(SendUDPMessage@message+1)& (0+255),b
  5881  003944  6BEB               	clrf	(SendUDPMessage@messageSize+1)& (0+255),b
  5882  003946  0E08               	movlw	8
  5883  003948  6FEA               	movwf	SendUDPMessage@messageSize& (0+255),b
  5884  00394A  C041  F1EC         	movff	_m_udpSocket,SendUDPMessage@udpSocket
  5885  00394E  EC65  F023         	call	_SendUDPMessage	;wreg free
  5886                           
  5887                           ;NDC.c: 600: m_timerState = TickGet();
  5888  003952  EC9C  F028         	call	_TickGet	;wreg free
  5889  003956  C01C  F150         	movff	?_TickGet,_m_timerState
  5890  00395A  C01D  F151         	movff	?_TickGet+1,_m_timerState+1
  5891  00395E  C01E  F152         	movff	?_TickGet+2,_m_timerState+2
  5892  003962  C01F  F153         	movff	?_TickGet+3,_m_timerState+3
  5893                           
  5894                           ;NDC.c: 602: if (m_sentBytes > 0) {
  5895  003966  0101               	movlb	1	; () banked
  5896  003968  BF6D               	btfsc	(_m_sentBytes+1)& (0+255),7,b
  5897  00396A  0012               	return	
  5898  00396C  516D               	movf	(_m_sentBytes+1)& (0+255),w,b
  5899  00396E  E103               	bnz	u10510
  5900  003970  056C               	decf	_m_sentBytes& (0+255),w,b
  5901  003972  A0D8               	btfss	status,0,c
  5902  003974  0012               	return	
  5903  003976                     u10510:
  5904                           
  5905                           ; BSR set to: 1
  5906                           ;NDC.c: 604: m_state = STATE_WAIT_FOR_CONNECTION_RESPONSE;
  5907  003976  0E02               	movlw	2
  5908  003978  0100               	movlb	0	; () banked
  5909  00397A  6FD8               	movwf	_m_state& (0+255),b
  5910  00397C  0C02               	retlw	2	;funcret
  5911  00397E                     __end_of_SendConnectionRequest:
  5912                           	opt stack 0
  5913                           tblptru	equ	0xFF8
  5914                           tblptrh	equ	0xFF7
  5915                           tblptrl	equ	0xFF6
  5916                           tablat	equ	0xFF5
  5917                           prodh	equ	0xFF4
  5918                           prodl	equ	0xFF3
  5919                           intcon	equ	0xFF2
  5920                           intcon2	equ	0xFF1
  5921                           postinc0	equ	0xFEE
  5922                           wreg	equ	0xFE8
  5923                           postdec1	equ	0xFE5
  5924                           fsr1h	equ	0xFE2
  5925                           fsr1l	equ	0xFE1
  5926                           indf2	equ	0xFDF
  5927                           status	equ	0xFD8
  5928                           
  5929 ;; *************** function _OpenUDPsocket *****************
  5930 ;; Defined at:
  5931 ;;		line 146 in file "../src/NDC.c"
  5932 ;; Parameters:    Size  Location     Type
  5933 ;;		None
  5934 ;; Auto vars:     Size  Location     Type
  5935 ;;		None
  5936 ;; Return value:  Size  Location     Type
  5937 ;;		None               void
  5938 ;; Registers used:
  5939 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  5940 ;; Tracked objects:
  5941 ;;		On entry : F/0
  5942 ;;		On exit  : F/0
  5943 ;;		Unchanged: 0/0
  5944 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5945 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5946 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5947 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5948 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5949 ;;Total ram usage:        4 bytes
  5950 ;; Hardware stack levels used:    1
  5951 ;; Hardware stack levels required when called:    8
  5952 ;; This function calls:
  5953 ;;		_TickGet
  5954 ;;		_UDPOpenEx
  5955 ;;		_memset
  5956 ;; This function is called by:
  5957 ;;		_NDCFSM
  5958 ;; This function uses a non-reentrant model
  5959 ;;
  5960                           
  5961                           	psect	text41
  5962  003C1A                     __ptext41:
  5963                           	opt stack 0
  5964  003C1A                     _OpenUDPsocket:
  5965                           	opt stack 21
  5966                           
  5967                           ; BSR set to: 0
  5968                           ;NDC.c: 147: if (TickGet() - m_timerState > (((((40000000ul) / 4)+128ull)/256ull))) {
  5969                           
  5970                           ;incstack = 0
  5971  003C1A  EC9C  F028         	call	_TickGet	;wreg free
  5972  003C1E  0101               	movlb	1	; () banked
  5973  003C20  5150               	movf	_m_timerState& (0+255),w,b
  5974  003C22  5C1C               	subwf	?_TickGet,w,c
  5975  003C24  0100               	movlb	0	; () banked
  5976  003C26  6F6C               	movwf	??_OpenUDPsocket& (0+255),b
  5977  003C28  0101               	movlb	1	; () banked
  5978  003C2A  5151               	movf	(_m_timerState+1)& (0+255),w,b
  5979  003C2C  581D               	subwfb	?_TickGet+1,w,c
  5980  003C2E  0100               	movlb	0	; () banked
  5981  003C30  6F6D               	movwf	(??_OpenUDPsocket+1)& (0+255),b
  5982  003C32  0101               	movlb	1	; () banked
  5983  003C34  5152               	movf	(_m_timerState+2)& (0+255),w,b
  5984  003C36  581E               	subwfb	?_TickGet+2,w,c
  5985  003C38  0100               	movlb	0	; () banked
  5986  003C3A  6F6E               	movwf	(??_OpenUDPsocket+2)& (0+255),b
  5987  003C3C  0101               	movlb	1	; () banked
  5988  003C3E  5153               	movf	(_m_timerState+3)& (0+255),w,b
  5989  003C40  581F               	subwfb	?_TickGet+3,w,c
  5990  003C42  0100               	movlb	0	; () banked
  5991  003C44  6F6F               	movwf	(??_OpenUDPsocket+3)& (0+255),b
  5992  003C46  516F               	movf	(??_OpenUDPsocket+3)& (0+255),w,b
  5993  003C48  116E               	iorwf	(??_OpenUDPsocket+2)& (0+255),w,b
  5994  003C4A  E106               	bnz	u10230
  5995  003C4C  0E98               	movlw	152
  5996  003C4E  5D6C               	subwf	??_OpenUDPsocket& (0+255),w,b
  5997  003C50  0E98               	movlw	152
  5998  003C52  596D               	subwfb	(??_OpenUDPsocket+1)& (0+255),w,b
  5999  003C54  A0D8               	btfss	status,0,c
  6000  003C56  0012               	return	
  6001  003C58                     u10230:
  6002                           
  6003                           ; BSR set to: 0
  6004                           ;NDC.c: 149: memset(&m_NBSNodeInfo, 0xFF, sizeof (m_NBSNodeInfo));
  6005  003C58  0EAC               	movlw	low _m_NBSNodeInfo
  6006  003C5A  6E1C               	movwf	memset@p1,c
  6007  003C5C  0E01               	movlw	high _m_NBSNodeInfo
  6008  003C5E  6E1D               	movwf	memset@p1+1,c
  6009  003C60  6A1F               	clrf	memset@c+1,c
  6010  003C62  681E               	setf	memset@c,c
  6011  003C64  6A21               	clrf	memset@n+1,c
  6012  003C66  0E0A               	movlw	10
  6013  003C68  6E20               	movwf	memset@n,c
  6014  003C6A  EC10  F028         	call	_memset	;wreg free
  6015                           
  6016                           ; BSR set to: 0
  6017                           ;NDC.c: 152: m_udpSocket = UDPOpenEx((uint32_t)&m_NBSNodeInfo,4u,0,18000);
  6018  003C6E  0EAC               	movlw	low _m_NBSNodeInfo
  6019  003C70  6F60               	movwf	UDPOpenEx@remoteHost& (0+255),b
  6020  003C72  0E01               	movlw	high _m_NBSNodeInfo
  6021  003C74  6F61               	movwf	(UDPOpenEx@remoteHost+1)& (0+255),b
  6022  003C76  0E00               	movlw	low (_m_NBSNodeInfo shr (0+16))
  6023  003C78  6F62               	movwf	(UDPOpenEx@remoteHost+2)& (0+255),b
  6024  003C7A  0E00               	movlw	high (_m_NBSNodeInfo shr (0+16))
  6025  003C7C  6F63               	movwf	(UDPOpenEx@remoteHost+3)& (0+255),b
  6026  003C7E  0E04               	movlw	4
  6027  003C80  6F64               	movwf	UDPOpenEx@remoteHostType& (0+255),b
  6028  003C82  6B66               	clrf	(UDPOpenEx@localPort+1)& (0+255),b
  6029  003C84  6B65               	clrf	UDPOpenEx@localPort& (0+255),b
  6030  003C86  0E46               	movlw	70
  6031  003C88  6F68               	movwf	(UDPOpenEx@remotePort+1)& (0+255),b
  6032  003C8A  0E50               	movlw	80
  6033  003C8C  6F67               	movwf	UDPOpenEx@remotePort& (0+255),b
  6034  003C8E  EC88  F013         	call	_UDPOpenEx	;wreg free
  6035  003C92  6E41               	movwf	_m_udpSocket,c
  6036                           
  6037                           ; BSR set to: 0
  6038                           ;NDC.c: 154: if (m_udpSocket == (0xffu)) {
  6039  003C94  2841               	incf	_m_udpSocket,w,c
  6040  003C96  E10A               	bnz	l10972
  6041                           
  6042                           ; BSR set to: 0
  6043                           ;NDC.c: 155: m_timerState = TickGet();
  6044  003C98  EC9C  F028         	call	_TickGet	;wreg free
  6045  003C9C  C01C  F150         	movff	?_TickGet,_m_timerState
  6046  003CA0  C01D  F151         	movff	?_TickGet+1,_m_timerState+1
  6047  003CA4  C01E  F152         	movff	?_TickGet+2,_m_timerState+2
  6048  003CA8  C01F  F153         	movff	?_TickGet+3,_m_timerState+3
  6049  003CAC                     l10972:
  6050                           
  6051                           ;NDC.c: 156: }
  6052                           ;NDC.c: 158: m_state = STATE_SEND_CONNECTION_REQUEST;
  6053  003CAC  0E01               	movlw	1
  6054  003CAE  0100               	movlb	0	; () banked
  6055  003CB0  6FD8               	movwf	_m_state& (0+255),b
  6056                           
  6057                           ; BSR set to: 0
  6058  003CB2  0C01               	retlw	1	;funcret
  6059  003CB4                     __end_of_OpenUDPsocket:
  6060                           	opt stack 0
  6061                           tblptru	equ	0xFF8
  6062                           tblptrh	equ	0xFF7
  6063                           tblptrl	equ	0xFF6
  6064                           tablat	equ	0xFF5
  6065                           prodh	equ	0xFF4
  6066                           prodl	equ	0xFF3
  6067                           intcon	equ	0xFF2
  6068                           intcon2	equ	0xFF1
  6069                           postinc0	equ	0xFEE
  6070                           wreg	equ	0xFE8
  6071                           postdec1	equ	0xFE5
  6072                           fsr1h	equ	0xFE2
  6073                           fsr1l	equ	0xFE1
  6074                           indf2	equ	0xFDF
  6075                           status	equ	0xFD8
  6076                           
  6077 ;; *************** function _KeyPressedResetIdleTimer *****************
  6078 ;; Defined at:
  6079 ;;		line 162 in file "../src/NDC.c"
  6080 ;; Parameters:    Size  Location     Type
  6081 ;;		None
  6082 ;; Auto vars:     Size  Location     Type
  6083 ;;		None
  6084 ;; Return value:  Size  Location     Type
  6085 ;;		None               void
  6086 ;; Registers used:
  6087 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  6088 ;; Tracked objects:
  6089 ;;		On entry : 0/0
  6090 ;;		On exit  : E/0
  6091 ;;		Unchanged: 0/0
  6092 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6093 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6094 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6095 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6096 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6097 ;;Total ram usage:        4 bytes
  6098 ;; Hardware stack levels used:    1
  6099 ;; Hardware stack levels required when called:    8
  6100 ;; This function calls:
  6101 ;;		_TickGet
  6102 ;; This function is called by:
  6103 ;;		_NDCFSM
  6104 ;; This function uses a non-reentrant model
  6105 ;;
  6106                           
  6107                           	psect	text42
  6108  004A20                     __ptext42:
  6109                           	opt stack 0
  6110  004A20                     _KeyPressedResetIdleTimer:
  6111                           	opt stack 21
  6112                           
  6113                           ;NDC.c: 163: if (m_keyPressedFlag == 1) {
  6114                           
  6115                           ; BSR set to: 0
  6116                           ;incstack = 0
  6117  004A20  0100               	movlb	0	; () banked
  6118  004A22  05D6               	decf	_m_keyPressedFlag& (0+255),w,b
  6119  004A24  A4D8               	btfss	status,2,c
  6120  004A26  0012               	return	
  6121                           
  6122                           ; BSR set to: 0
  6123                           ;NDC.c: 164: if (TickGet() - m_timerKeyPressed > (((((40000000ul) / 4)+128ull)/256ull)) 
      +                          * 30) {
  6124  004A28  EC9C  F028         	call	_TickGet	;wreg free
  6125  004A2C  0101               	movlb	1	; () banked
  6126  004A2E  5144               	movf	_m_timerKeyPressed& (0+255),w,b
  6127  004A30  5C1C               	subwf	?_TickGet,w,c
  6128  004A32  6E24               	movwf	??_KeyPressedResetIdleTimer& (0+255),c
  6129  004A34  5145               	movf	(_m_timerKeyPressed+1)& (0+255),w,b
  6130  004A36  581D               	subwfb	?_TickGet+1,w,c
  6131  004A38  6E25               	movwf	(??_KeyPressedResetIdleTimer+1)& (0+255),c
  6132  004A3A  5146               	movf	(_m_timerKeyPressed+2)& (0+255),w,b
  6133  004A3C  581E               	subwfb	?_TickGet+2,w,c
  6134  004A3E  6E26               	movwf	(??_KeyPressedResetIdleTimer+2)& (0+255),c
  6135  004A40  5147               	movf	(_m_timerKeyPressed+3)& (0+255),w,b
  6136  004A42  581F               	subwfb	?_TickGet+3,w,c
  6137  004A44  6E27               	movwf	(??_KeyPressedResetIdleTimer+3)& (0+255),c
  6138  004A46  5027               	movf	??_KeyPressedResetIdleTimer+3,w,c
  6139  004A48  E108               	bnz	u10260
  6140  004A4A  0EB3               	movlw	179
  6141  004A4C  5C24               	subwf	??_KeyPressedResetIdleTimer,w,c
  6142  004A4E  0EE1               	movlw	225
  6143  004A50  5825               	subwfb	??_KeyPressedResetIdleTimer+1,w,c
  6144  004A52  0E11               	movlw	17
  6145  004A54  5826               	subwfb	??_KeyPressedResetIdleTimer+2,w,c
  6146  004A56  A0D8               	btfss	status,0,c
  6147  004A58  0012               	return	
  6148  004A5A                     u10260:
  6149                           
  6150                           ; BSR set to: 1
  6151                           ;NDC.c: 165: m_codeLength = 0;
  6152  004A5A  0100               	movlb	0	; () banked
  6153  004A5C  6BD2               	clrf	_m_codeLength& (0+255),b
  6154                           
  6155                           ;NDC.c: 166: m_keyPressedFlag = 0;
  6156  004A5E  6BD6               	clrf	_m_keyPressedFlag& (0+255),b
  6157                           
  6158                           ;NDC.c: 167: m_timerWaitForPinCode = 0;
  6159  004A60  0101               	movlb	1	; () banked
  6160  004A62  6B54               	clrf	_m_timerWaitForPinCode& (0+255),b
  6161  004A64  6B55               	clrf	(_m_timerWaitForPinCode+1)& (0+255),b
  6162  004A66  6B56               	clrf	(_m_timerWaitForPinCode+2)& (0+255),b
  6163  004A68  6B57               	clrf	(_m_timerWaitForPinCode+3)& (0+255),b
  6164                           
  6165                           ;NDC.c: 168: (LATDbits.LATD2) = 0;
  6166  004A6A  948C               	bcf	3980,2,c	;volatile
  6167  004A6C  0012               	return		;funcret
  6168  004A6E                     __end_of_KeyPressedResetIdleTimer:
  6169                           	opt stack 0
  6170                           tblptru	equ	0xFF8
  6171                           tblptrh	equ	0xFF7
  6172                           tblptrl	equ	0xFF6
  6173                           tablat	equ	0xFF5
  6174                           prodh	equ	0xFF4
  6175                           prodl	equ	0xFF3
  6176                           intcon	equ	0xFF2
  6177                           intcon2	equ	0xFF1
  6178                           postinc0	equ	0xFEE
  6179                           wreg	equ	0xFE8
  6180                           postdec1	equ	0xFE5
  6181                           fsr1h	equ	0xFE2
  6182                           fsr1l	equ	0xFE1
  6183                           indf2	equ	0xFDF
  6184                           status	equ	0xFD8
  6185                           
  6186 ;; *************** function _InitStartState *****************
  6187 ;; Defined at:
  6188 ;;		line 129 in file "../src/NDC.c"
  6189 ;; Parameters:    Size  Location     Type
  6190 ;;		None
  6191 ;; Auto vars:     Size  Location     Type
  6192 ;;		None
  6193 ;; Return value:  Size  Location     Type
  6194 ;;		None               void
  6195 ;; Registers used:
  6196 ;;		None
  6197 ;; Tracked objects:
  6198 ;;		On entry : 0/0
  6199 ;;		On exit  : F/0
  6200 ;;		Unchanged: 0/0
  6201 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6202 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6203 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6204 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6205 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6206 ;;Total ram usage:        0 bytes
  6207 ;; Hardware stack levels used:    1
  6208 ;; Hardware stack levels required when called:    6
  6209 ;; This function calls:
  6210 ;;		Nothing
  6211 ;; This function is called by:
  6212 ;;		_NDCResetState
  6213 ;;		_NDCFSM
  6214 ;; This function uses a non-reentrant model
  6215 ;;
  6216                           
  6217                           	psect	text43
  6218  005266                     __ptext43:
  6219                           	opt stack 0
  6220  005266                     _InitStartState:
  6221                           	opt stack 23
  6222                           
  6223                           ;NDC.c: 130: (LATCbits.LATC7) = 0;
  6224                           
  6225                           ;incstack = 0
  6226  005266  9E8B               	bcf	3979,7,c	;volatile
  6227                           
  6228                           ;NDC.c: 132: m_keyPressedFlag = 0;
  6229  005268  0100               	movlb	0	; () banked
  6230  00526A  6BD6               	clrf	_m_keyPressedFlag& (0+255),b
  6231                           
  6232                           ;NDC.c: 133: m_codeLength = 0;
  6233  00526C  6BD2               	clrf	_m_codeLength& (0+255),b
  6234                           
  6235                           ;NDC.c: 134: m_timerWaitForPinCode = 0;
  6236  00526E  0101               	movlb	1	; () banked
  6237  005270  6B54               	clrf	_m_timerWaitForPinCode& (0+255),b
  6238  005272  6B55               	clrf	(_m_timerWaitForPinCode+1)& (0+255),b
  6239  005274  6B56               	clrf	(_m_timerWaitForPinCode+2)& (0+255),b
  6240  005276  6B57               	clrf	(_m_timerWaitForPinCode+3)& (0+255),b
  6241                           
  6242                           ;NDC.c: 137: (LATFbits.LATF2) = 1;
  6243  005278  848E               	bsf	3982,2,c	;volatile
  6244                           
  6245                           ;NDC.c: 138: (LATFbits.LATF3) = 0;
  6246  00527A  968E               	bcf	3982,3,c	;volatile
  6247                           
  6248                           ;NDC.c: 141: (LATDbits.LATD2) = 0;
  6249  00527C  948C               	bcf	3980,2,c	;volatile
  6250                           
  6251                           ;NDC.c: 143: m_openDoorFlag = 0;
  6252  00527E  0100               	movlb	0	; () banked
  6253  005280  6BD7               	clrf	_m_openDoorFlag& (0+255),b
  6254                           
  6255                           ; BSR set to: 0
  6256  005282  0012               	return		;funcret
  6257  005284                     __end_of_InitStartState:
  6258                           	opt stack 0
  6259                           tblptru	equ	0xFF8
  6260                           tblptrh	equ	0xFF7
  6261                           tblptrl	equ	0xFF6
  6262                           tablat	equ	0xFF5
  6263                           prodh	equ	0xFF4
  6264                           prodl	equ	0xFF3
  6265                           intcon	equ	0xFF2
  6266                           intcon2	equ	0xFF1
  6267                           postinc0	equ	0xFEE
  6268                           wreg	equ	0xFE8
  6269                           postdec1	equ	0xFE5
  6270                           fsr1h	equ	0xFE2
  6271                           fsr1l	equ	0xFE1
  6272                           indf2	equ	0xFDF
  6273                           status	equ	0xFD8
  6274                           
  6275 ;; *************** function _HandleReceivedBytes *****************
  6276 ;; Defined at:
  6277 ;;		line 753 in file "../src/NDC.c"
  6278 ;; Parameters:    Size  Location     Type
  6279 ;;		None
  6280 ;; Auto vars:     Size  Location     Type
  6281 ;;		None
  6282 ;; Return value:  Size  Location     Type
  6283 ;;		None               void
  6284 ;; Registers used:
  6285 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6286 ;; Tracked objects:
  6287 ;;		On entry : F/0
  6288 ;;		On exit  : 0/0
  6289 ;;		Unchanged: 0/0
  6290 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6291 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6292 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6293 ;;      Temps:          0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6294 ;;      Totals:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6295 ;;Total ram usage:        4 bytes
  6296 ;; Hardware stack levels used:    1
  6297 ;; Hardware stack levels required when called:   16
  6298 ;; This function calls:
  6299 ;;		_Beep
  6300 ;;		_HandleConfigData
  6301 ;;		_SendDoorStatus
  6302 ;;		_SendDoorTimerExpiredEvent
  6303 ;;		_SendVersionString
  6304 ;;		_TickGet
  6305 ;;		_UDPClose
  6306 ;;		_UDPGetArray
  6307 ;; This function is called by:
  6308 ;;		_NDCFSM
  6309 ;; This function uses a non-reentrant model
  6310 ;;
  6311                           
  6312                           	psect	text44
  6313  001984                     __ptext44:
  6314                           	opt stack 0
  6315  001984                     _HandleReceivedBytes:
  6316                           	opt stack 13
  6317                           
  6318                           ; BSR set to: 0
  6319                           ;NDC.c: 756: m_bytesRead = UDPGetArray(m_messageBuffer, m_bytesAvailable);
  6320                           
  6321                           ; BSR set to: 0
  6322                           ;incstack = 0
  6323  001984  0E41               	movlw	low _m_messageBuffer
  6324  001986  6E23               	movwf	UDPGetArray@cData,c
  6325  001988  0E03               	movlw	high _m_messageBuffer
  6326  00198A  6E24               	movwf	UDPGetArray@cData+1,c
  6327  00198C  C0C9  F025         	movff	_m_bytesAvailable,UDPGetArray@wDataLen
  6328  001990  C0CA  F026         	movff	_m_bytesAvailable+1,UDPGetArray@wDataLen+1
  6329  001994  EC8D  F021         	call	_UDPGetArray	;wreg free
  6330  001998  C023  F0CB         	movff	?_UDPGetArray,_m_bytesRead
  6331  00199C  C024  F0CC         	movff	?_UDPGetArray+1,_m_bytesRead+1
  6332                           
  6333                           ;NDC.c: 759: if (m_messageBuffer[0] == 0 && m_messageBuffer[1] == 0) {
  6334  0019A0  EE23  F041         	lfsr	2,_m_messageBuffer
  6335  0019A4  50DF               	movf	indf2,w,c
  6336  0019A6  E10F               	bnz	l11228
  6337  0019A8  EE23  F042         	lfsr	2,_m_messageBuffer+1
  6338  0019AC  50DF               	movf	indf2,w,c
  6339  0019AE  E10B               	bnz	l11228
  6340                           
  6341                           ;NDC.c: 760: m_timerReceiveHeartbeat = TickGet();
  6342  0019B0  EC9C  F028         	call	_TickGet	;wreg free
  6343  0019B4  C01C  F148         	movff	?_TickGet,_m_timerReceiveHeartbeat
  6344  0019B8  C01D  F149         	movff	?_TickGet+1,_m_timerReceiveHeartbeat+1
  6345  0019BC  C01E  F14A         	movff	?_TickGet+2,_m_timerReceiveHeartbeat+2
  6346  0019C0  C01F  F14B         	movff	?_TickGet+3,_m_timerReceiveHeartbeat+3
  6347  0019C4  0012               	return	
  6348  0019C6                     l11228:
  6349                           
  6350                           ;NDC.c: 763: }
  6351                           ;NDC.c: 766: if (m_messageBuffer[0] == 0 && m_messageBuffer[1] == 4 && m_bytesRead >= 7)
      +                           {
  6352  0019C6  EE23  F041         	lfsr	2,_m_messageBuffer
  6353  0019CA  50DF               	movf	indf2,w,c
  6354  0019CC  E001 D09F          	bnz	l11268
  6355  0019D0  C342  FFE8         	movff	_m_messageBuffer+1,wreg
  6356  0019D4  0A04               	xorlw	4
  6357  0019D6  E001 D09A          	bnz	l11268
  6358  0019DA  0100               	movlb	0	; () banked
  6359  0019DC  BFCC               	btfsc	(_m_bytesRead+1)& (0+255),7,b
  6360  0019DE  D097               	goto	l11268
  6361  0019E0  51CC               	movf	(_m_bytesRead+1)& (0+255),w,b
  6362  0019E2  E104               	bnz	u10610
  6363  0019E4  0E07               	movlw	7
  6364  0019E6  5DCB               	subwf	_m_bytesRead& (0+255),w,b
  6365  0019E8  E201 D091          	bnc	l11268
  6366  0019EC                     u10610:
  6367                           
  6368                           ; BSR set to: 0
  6369                           ;NDC.c: 768: if (m_openDoorFlag == 1)
  6370  0019EC  05D7               	decf	_m_openDoorFlag& (0+255),w,b
  6371  0019EE  E101               	bnz	l11238
  6372  0019F0  0012               	return	
  6373  0019F2                     l11238:
  6374                           
  6375                           ; BSR set to: 0
  6376                           ;NDC.c: 772: m_tmpLong = m_messageBuffer[2];
  6377  0019F2  EE23  F043         	lfsr	2,_m_messageBuffer+2
  6378  0019F6  50DF               	movf	indf2,w,c
  6379  0019F8  6E2F               	movwf	_m_tmpLong,c
  6380  0019FA  6A30               	clrf	_m_tmpLong+1,c
  6381  0019FC  6A31               	clrf	_m_tmpLong+2,c
  6382  0019FE  6A32               	clrf	_m_tmpLong+3,c
  6383                           
  6384                           ; BSR set to: 0
  6385                           ;NDC.c: 773: m_tempDoorTime = m_tmpLong << 24;
  6386  001A00  C02F  F1EF         	movff	_m_tmpLong,??_HandleReceivedBytes
  6387  001A04  C030  F1F0         	movff	_m_tmpLong+1,??_HandleReceivedBytes+1
  6388  001A08  C031  F1F1         	movff	_m_tmpLong+2,??_HandleReceivedBytes+2
  6389  001A0C  C032  F1F2         	movff	_m_tmpLong+3,??_HandleReceivedBytes+3
  6390  001A10  C1EF  F1F2         	movff	??_HandleReceivedBytes,??_HandleReceivedBytes+3
  6391  001A14  0101               	movlb	1	; () banked
  6392  001A16  6BF1               	clrf	(??_HandleReceivedBytes+2)& (0+255),b
  6393  001A18  6BF0               	clrf	(??_HandleReceivedBytes+1)& (0+255),b
  6394  001A1A  6BEF               	clrf	??_HandleReceivedBytes& (0+255),b
  6395  001A1C  C1EF  F13C         	movff	??_HandleReceivedBytes,_m_tempDoorTime
  6396  001A20  C1F0  F13D         	movff	??_HandleReceivedBytes+1,_m_tempDoorTime+1
  6397  001A24  C1F1  F13E         	movff	??_HandleReceivedBytes+2,_m_tempDoorTime+2
  6398  001A28  C1F2  F13F         	movff	??_HandleReceivedBytes+3,_m_tempDoorTime+3
  6399                           
  6400                           ; BSR set to: 1
  6401                           ;NDC.c: 774: m_tmpLong = m_messageBuffer[3];
  6402  001A2C  EE23  F044         	lfsr	2,_m_messageBuffer+3
  6403  001A30  50DF               	movf	indf2,w,c
  6404  001A32  6E2F               	movwf	_m_tmpLong,c
  6405  001A34  6A30               	clrf	_m_tmpLong+1,c
  6406  001A36  6A31               	clrf	_m_tmpLong+2,c
  6407  001A38  6A32               	clrf	_m_tmpLong+3,c
  6408                           
  6409                           ; BSR set to: 1
  6410                           ;NDC.c: 775: m_tempDoorTime += m_tmpLong << 16;
  6411  001A3A  C02F  F1EF         	movff	_m_tmpLong,??_HandleReceivedBytes
  6412  001A3E  C030  F1F0         	movff	_m_tmpLong+1,??_HandleReceivedBytes+1
  6413  001A42  C031  F1F1         	movff	_m_tmpLong+2,??_HandleReceivedBytes+2
  6414  001A46  C032  F1F2         	movff	_m_tmpLong+3,??_HandleReceivedBytes+3
  6415  001A4A  C1F0  F1F2         	movff	??_HandleReceivedBytes+1,??_HandleReceivedBytes+3
  6416  001A4E  C1EF  F1F1         	movff	??_HandleReceivedBytes,??_HandleReceivedBytes+2
  6417  001A52  6BF0               	clrf	(??_HandleReceivedBytes+1)& (0+255),b
  6418  001A54  6BEF               	clrf	??_HandleReceivedBytes& (0+255),b
  6419  001A56  51EF               	movf	??_HandleReceivedBytes& (0+255),w,b
  6420  001A58  273C               	addwf	_m_tempDoorTime& (0+255),f,b
  6421  001A5A  51F0               	movf	(??_HandleReceivedBytes+1)& (0+255),w,b
  6422  001A5C  233D               	addwfc	(_m_tempDoorTime+1)& (0+255),f,b
  6423  001A5E  51F1               	movf	(??_HandleReceivedBytes+2)& (0+255),w,b
  6424  001A60  233E               	addwfc	(_m_tempDoorTime+2)& (0+255),f,b
  6425  001A62  51F2               	movf	(??_HandleReceivedBytes+3)& (0+255),w,b
  6426  001A64  233F               	addwfc	(_m_tempDoorTime+3)& (0+255),f,b
  6427                           
  6428                           ; BSR set to: 1
  6429                           ;NDC.c: 776: m_tmpLong = m_messageBuffer[4];
  6430  001A66  EE23  F045         	lfsr	2,_m_messageBuffer+4
  6431  001A6A  50DF               	movf	indf2,w,c
  6432  001A6C  6E2F               	movwf	_m_tmpLong,c
  6433  001A6E  6A30               	clrf	_m_tmpLong+1,c
  6434  001A70  6A31               	clrf	_m_tmpLong+2,c
  6435  001A72  6A32               	clrf	_m_tmpLong+3,c
  6436                           
  6437                           ; BSR set to: 1
  6438                           ;NDC.c: 777: m_tempDoorTime += m_tmpLong << 8;
  6439  001A74  C02F  F1F0         	movff	_m_tmpLong,??_HandleReceivedBytes+1
  6440  001A78  C030  F1F1         	movff	_m_tmpLong+1,??_HandleReceivedBytes+2
  6441  001A7C  C031  F1F2         	movff	_m_tmpLong+2,??_HandleReceivedBytes+3
  6442  001A80  6BEF               	clrf	??_HandleReceivedBytes& (0+255),b
  6443  001A82  51EF               	movf	??_HandleReceivedBytes& (0+255),w,b
  6444  001A84  273C               	addwf	_m_tempDoorTime& (0+255),f,b
  6445  001A86  51F0               	movf	(??_HandleReceivedBytes+1)& (0+255),w,b
  6446  001A88  233D               	addwfc	(_m_tempDoorTime+1)& (0+255),f,b
  6447  001A8A  51F1               	movf	(??_HandleReceivedBytes+2)& (0+255),w,b
  6448  001A8C  233E               	addwfc	(_m_tempDoorTime+2)& (0+255),f,b
  6449  001A8E  51F2               	movf	(??_HandleReceivedBytes+3)& (0+255),w,b
  6450  001A90  233F               	addwfc	(_m_tempDoorTime+3)& (0+255),f,b
  6451                           
  6452                           ; BSR set to: 1
  6453                           ;NDC.c: 778: m_tmpLong = m_messageBuffer[5];
  6454  001A92  EE23  F046         	lfsr	2,_m_messageBuffer+5
  6455  001A96  50DF               	movf	indf2,w,c
  6456  001A98  6E2F               	movwf	_m_tmpLong,c
  6457  001A9A  6A30               	clrf	_m_tmpLong+1,c
  6458  001A9C  6A31               	clrf	_m_tmpLong+2,c
  6459  001A9E  6A32               	clrf	_m_tmpLong+3,c
  6460                           
  6461                           ; BSR set to: 1
  6462                           ;NDC.c: 779: m_tempDoorTime += m_tmpLong;
  6463  001AA0  502F               	movf	_m_tmpLong,w,c
  6464  001AA2  273C               	addwf	_m_tempDoorTime& (0+255),f,b
  6465  001AA4  5030               	movf	_m_tmpLong+1,w,c
  6466  001AA6  233D               	addwfc	(_m_tempDoorTime+1)& (0+255),f,b
  6467  001AA8  5031               	movf	_m_tmpLong+2,w,c
  6468  001AAA  233E               	addwfc	(_m_tempDoorTime+2)& (0+255),f,b
  6469  001AAC  5032               	movf	_m_tmpLong+3,w,c
  6470  001AAE  233F               	addwfc	(_m_tempDoorTime+3)& (0+255),f,b
  6471                           
  6472                           ; BSR set to: 1
  6473                           ;NDC.c: 781: if (m_tempDoorTime > 0) {
  6474  001AB0  513C               	movf	_m_tempDoorTime& (0+255),w,b
  6475  001AB2  113D               	iorwf	(_m_tempDoorTime+1)& (0+255),w,b
  6476  001AB4  113E               	iorwf	(_m_tempDoorTime+2)& (0+255),w,b
  6477  001AB6  113F               	iorwf	(_m_tempDoorTime+3)& (0+255),w,b
  6478  001AB8  E01A               	bz	l11262
  6479                           
  6480                           ; BSR set to: 1
  6481                           ;NDC.c: 782: m_openDoorTime = m_tempDoorTime;
  6482  001ABA  C13C  F138         	movff	_m_tempDoorTime,_m_openDoorTime
  6483  001ABE  C13D  F139         	movff	_m_tempDoorTime+1,_m_openDoorTime+1
  6484  001AC2  C13E  F13A         	movff	_m_tempDoorTime+2,_m_openDoorTime+2
  6485  001AC6  C13F  F13B         	movff	_m_tempDoorTime+3,_m_openDoorTime+3
  6486                           
  6487                           ;NDC.c: 784: (LATFbits.LATF2) = 0;
  6488  001ACA  948E               	bcf	3982,2,c	;volatile
  6489                           
  6490                           ;NDC.c: 785: (LATFbits.LATF3) = 1;
  6491  001ACC  868E               	bsf	3982,3,c	;volatile
  6492                           
  6493                           ;NDC.c: 787: (LATDbits.LATD2) = 1;
  6494  001ACE  848C               	bsf	3980,2,c	;volatile
  6495                           
  6496                           ; BSR set to: 1
  6497                           ;NDC.c: 789: m_openDoorFlag = 1;
  6498  001AD0  0E01               	movlw	1
  6499  001AD2  0100               	movlb	0	; () banked
  6500  001AD4  6FD7               	movwf	_m_openDoorFlag& (0+255),b
  6501                           
  6502                           ;NDC.c: 792: if (m_messageBuffer[6] == 1)
  6503  001AD6  C347  FFE8         	movff	_m_messageBuffer+6,wreg
  6504  001ADA  0A01               	xorlw	1
  6505  001ADC  E108               	bnz	l11262
  6506                           
  6507                           ; BSR set to: 0
  6508                           ;NDC.c: 793: Beep(1000);
  6509  001ADE  0EE8               	movlw	232
  6510  001AE0  6E24               	movwf	Beep@value,c
  6511  001AE2  0E03               	movlw	3
  6512  001AE4  6E25               	movwf	Beep@value+1,c
  6513  001AE6  6A26               	clrf	Beep@value+2,c
  6514  001AE8  6A27               	clrf	Beep@value+3,c
  6515  001AEA  EC75  F027         	call	_Beep	;wreg free
  6516  001AEE                     l11262:
  6517                           
  6518                           ;NDC.c: 794: }
  6519                           ;NDC.c: 797: m_timerReceiveHeartbeat = TickGet();
  6520  001AEE  EC9C  F028         	call	_TickGet	;wreg free
  6521  001AF2  C01C  F148         	movff	?_TickGet,_m_timerReceiveHeartbeat
  6522  001AF6  C01D  F149         	movff	?_TickGet+1,_m_timerReceiveHeartbeat+1
  6523  001AFA  C01E  F14A         	movff	?_TickGet+2,_m_timerReceiveHeartbeat+2
  6524  001AFE  C01F  F14B         	movff	?_TickGet+3,_m_timerReceiveHeartbeat+3
  6525                           
  6526                           ;NDC.c: 799: m_timerWaitForPinCode = 0;
  6527  001B02  0101               	movlb	1	; () banked
  6528  001B04  6B54               	clrf	_m_timerWaitForPinCode& (0+255),b
  6529  001B06  6B55               	clrf	(_m_timerWaitForPinCode+1)& (0+255),b
  6530  001B08  6B56               	clrf	(_m_timerWaitForPinCode+2)& (0+255),b
  6531  001B0A  6B57               	clrf	(_m_timerWaitForPinCode+3)& (0+255),b
  6532  001B0C  0012               	return	
  6533  001B0E                     l11268:
  6534                           
  6535                           ;NDC.c: 802: }
  6536                           ;NDC.c: 805: if (m_messageBuffer[0] == 0 && m_messageBuffer[1] == 9 && m_bytesRead == 2)
      +                           {
  6537  001B0E  EE23  F041         	lfsr	2,_m_messageBuffer
  6538  001B12  50DF               	movf	indf2,w,c
  6539  001B14  E115               	bnz	l11280
  6540  001B16  C342  FFE8         	movff	_m_messageBuffer+1,wreg
  6541  001B1A  0A09               	xorlw	9
  6542  001B1C  E111               	bnz	l11280
  6543  001B1E  0E02               	movlw	2
  6544  001B20  0100               	movlb	0	; () banked
  6545  001B22  19CB               	xorwf	_m_bytesRead& (0+255),w,b
  6546  001B24  11CC               	iorwf	(_m_bytesRead+1)& (0+255),w,b
  6547  001B26  E10C               	bnz	l11280
  6548                           
  6549                           ; BSR set to: 0
  6550                           ;NDC.c: 806: (LATFbits.LATF2) = 1;
  6551  001B28  848E               	bsf	3982,2,c	;volatile
  6552                           
  6553                           ;NDC.c: 807: (LATFbits.LATF3) = 0;
  6554  001B2A  968E               	bcf	3982,3,c	;volatile
  6555                           
  6556                           ;NDC.c: 808: (LATDbits.LATD2) = 0;
  6557  001B2C  948C               	bcf	3980,2,c	;volatile
  6558                           
  6559                           ;NDC.c: 810: m_openDoorTime = 0;
  6560  001B2E  0101               	movlb	1	; () banked
  6561  001B30  6B38               	clrf	_m_openDoorTime& (0+255),b
  6562  001B32  6B39               	clrf	(_m_openDoorTime+1)& (0+255),b
  6563  001B34  6B3A               	clrf	(_m_openDoorTime+2)& (0+255),b
  6564  001B36  6B3B               	clrf	(_m_openDoorTime+3)& (0+255),b
  6565                           
  6566                           ;NDC.c: 811: m_openDoorFlag = 0;
  6567  001B38  0100               	movlb	0	; () banked
  6568  001B3A  6BD7               	clrf	_m_openDoorFlag& (0+255),b
  6569                           
  6570                           ; BSR set to: 0
  6571                           ;NDC.c: 813: SendDoorTimerExpiredEvent();
  6572  001B3C  EF7E  F022         	goto	_SendDoorTimerExpiredEvent	;wreg free
  6573  001B40                     l11280:
  6574                           
  6575                           ;NDC.c: 816: }
  6576                           ;NDC.c: 819: if (m_messageBuffer[0] == 0 && m_messageBuffer[1] == 0xA && m_bytesRead == 
      +                          2) {
  6577  001B40  EE23  F041         	lfsr	2,_m_messageBuffer
  6578  001B44  50DF               	movf	indf2,w,c
  6579  001B46  E123               	bnz	l11296
  6580  001B48  C342  FFE8         	movff	_m_messageBuffer+1,wreg
  6581  001B4C  0A0A               	xorlw	10
  6582  001B4E  E11F               	bnz	l11296
  6583  001B50  0E02               	movlw	2
  6584  001B52  0100               	movlb	0	; () banked
  6585  001B54  19CB               	xorwf	_m_bytesRead& (0+255),w,b
  6586  001B56  11CC               	iorwf	(_m_bytesRead+1)& (0+255),w,b
  6587  001B58  E11A               	bnz	l11296
  6588                           
  6589                           ; BSR set to: 0
  6590                           ;NDC.c: 822: (LATFbits.LATF2) = 1;
  6591  001B5A  848E               	bsf	3982,2,c	;volatile
  6592                           
  6593                           ;NDC.c: 823: (LATFbits.LATF3) = 0;
  6594  001B5C  968E               	bcf	3982,3,c	;volatile
  6595                           
  6596                           ;NDC.c: 826: (LATDbits.LATD2) = 0;
  6597  001B5E  948C               	bcf	3980,2,c	;volatile
  6598                           
  6599                           ;NDC.c: 828: m_openDoorTime = 0;
  6600  001B60  0101               	movlb	1	; () banked
  6601  001B62  6B38               	clrf	_m_openDoorTime& (0+255),b
  6602  001B64  6B39               	clrf	(_m_openDoorTime+1)& (0+255),b
  6603  001B66  6B3A               	clrf	(_m_openDoorTime+2)& (0+255),b
  6604  001B68  6B3B               	clrf	(_m_openDoorTime+3)& (0+255),b
  6605                           
  6606                           ;NDC.c: 829: m_openDoorFlag = 0;
  6607  001B6A  0100               	movlb	0	; () banked
  6608  001B6C  6BD7               	clrf	_m_openDoorFlag& (0+255),b
  6609                           
  6610                           ; BSR set to: 0
  6611                           ;NDC.c: 832: UDPClose(m_udpSocket);
  6612  001B6E  5041               	movf	_m_udpSocket,w,c
  6613  001B70  ECAB  F025         	call	_UDPClose
  6614                           
  6615                           ;NDC.c: 833: m_state = STATE_START;
  6616  001B74  0100               	movlb	0	; () banked
  6617  001B76  6BD8               	clrf	_m_state& (0+255),b
  6618                           
  6619                           ; BSR set to: 0
  6620                           ;NDC.c: 834: m_timerState = TickGet();
  6621  001B78  EC9C  F028         	call	_TickGet	;wreg free
  6622  001B7C  C01C  F150         	movff	?_TickGet,_m_timerState
  6623  001B80  C01D  F151         	movff	?_TickGet+1,_m_timerState+1
  6624  001B84  C01E  F152         	movff	?_TickGet+2,_m_timerState+2
  6625  001B88  C01F  F153         	movff	?_TickGet+3,_m_timerState+3
  6626  001B8C  0012               	return	
  6627  001B8E                     l11296:
  6628                           
  6629                           ;NDC.c: 837: }
  6630                           ;NDC.c: 840: if (m_messageBuffer[0] == 0 && m_messageBuffer[1] == 6 && m_bytesRead == 5)
      +                           {
  6631  001B8E  EE23  F041         	lfsr	2,_m_messageBuffer
  6632  001B92  50DF               	movf	indf2,w,c
  6633  001B94  E13B               	bnz	l11324
  6634  001B96  C342  FFE8         	movff	_m_messageBuffer+1,wreg
  6635  001B9A  0A06               	xorlw	6
  6636  001B9C  E137               	bnz	l11324
  6637  001B9E  0E05               	movlw	5
  6638  001BA0  0100               	movlb	0	; () banked
  6639  001BA2  19CB               	xorwf	_m_bytesRead& (0+255),w,b
  6640  001BA4  11CC               	iorwf	(_m_bytesRead+1)& (0+255),w,b
  6641  001BA6  E132               	bnz	l11324
  6642                           
  6643                           ; BSR set to: 0
  6644                           ;NDC.c: 841: m_tmpInt = m_messageBuffer[2];
  6645  001BA8  EE23  F043         	lfsr	2,_m_messageBuffer+2
  6646  001BAC  50DF               	movf	indf2,w,c
  6647  001BAE  6E35               	movwf	_m_tmpInt,c
  6648  001BB0  6A36               	clrf	_m_tmpInt+1,c
  6649                           
  6650                           ; BSR set to: 0
  6651                           ;NDC.c: 842: m_waitForCodeTime = m_tmpInt << 8;
  6652  001BB2  5035               	movf	_m_tmpInt,w,c
  6653  001BB4  0101               	movlb	1	; () banked
  6654  001BB6  6F6F               	movwf	(_m_waitForCodeTime+1)& (0+255),b
  6655  001BB8  6B6E               	clrf	_m_waitForCodeTime& (0+255),b
  6656                           
  6657                           ; BSR set to: 1
  6658                           ;NDC.c: 843: m_tmpInt = m_messageBuffer[3];
  6659  001BBA  EE23  F044         	lfsr	2,_m_messageBuffer+3
  6660  001BBE  50DF               	movf	indf2,w,c
  6661  001BC0  6E35               	movwf	_m_tmpInt,c
  6662  001BC2  6A36               	clrf	_m_tmpInt+1,c
  6663                           
  6664                           ; BSR set to: 1
  6665                           ;NDC.c: 844: m_waitForCodeTime += m_tmpInt;
  6666  001BC4  5035               	movf	_m_tmpInt,w,c
  6667  001BC6  276E               	addwf	_m_waitForCodeTime& (0+255),f,b
  6668  001BC8  5036               	movf	_m_tmpInt+1,w,c
  6669  001BCA  236F               	addwfc	(_m_waitForCodeTime+1)& (0+255),f,b
  6670                           
  6671                           ; BSR set to: 1
  6672                           ;NDC.c: 846: m_timerWaitForPinCode = TickGet();
  6673  001BCC  EC9C  F028         	call	_TickGet	;wreg free
  6674  001BD0  C01C  F154         	movff	?_TickGet,_m_timerWaitForPinCode
  6675  001BD4  C01D  F155         	movff	?_TickGet+1,_m_timerWaitForPinCode+1
  6676  001BD8  C01E  F156         	movff	?_TickGet+2,_m_timerWaitForPinCode+2
  6677  001BDC  C01F  F157         	movff	?_TickGet+3,_m_timerWaitForPinCode+3
  6678                           
  6679                           ;NDC.c: 847: m_timerFlashDiod = 0;
  6680  001BE0  0101               	movlb	1	; () banked
  6681  001BE2  6B40               	clrf	_m_timerFlashDiod& (0+255),b
  6682  001BE4  6B41               	clrf	(_m_timerFlashDiod+1)& (0+255),b
  6683  001BE6  6B42               	clrf	(_m_timerFlashDiod+2)& (0+255),b
  6684  001BE8  6B43               	clrf	(_m_timerFlashDiod+3)& (0+255),b
  6685                           
  6686                           ; BSR set to: 1
  6687                           ;NDC.c: 848: m_flashDiodeEnable = 0;
  6688  001BEA  6A40               	clrf	_m_flashDiodeEnable,c
  6689                           
  6690                           ; BSR set to: 1
  6691                           ;NDC.c: 851: if (m_messageBuffer[4] == 1) {
  6692  001BEC  C345  FFE8         	movff	_m_messageBuffer+4,wreg
  6693  001BF0  0A01               	xorlw	1
  6694  001BF2  A4D8               	btfss	status,2,c
  6695  001BF4  0012               	return	
  6696                           
  6697                           ; BSR set to: 1
  6698                           ;NDC.c: 852: m_timerFlashDiod = m_timerWaitForPinCode;
  6699  001BF6  C154  F140         	movff	_m_timerWaitForPinCode,_m_timerFlashDiod
  6700  001BFA  C155  F141         	movff	_m_timerWaitForPinCode+1,_m_timerFlashDiod+1
  6701  001BFE  C156  F142         	movff	_m_timerWaitForPinCode+2,_m_timerFlashDiod+2
  6702  001C02  C157  F143         	movff	_m_timerWaitForPinCode+3,_m_timerFlashDiod+3
  6703                           
  6704                           ; BSR set to: 1
  6705                           ;NDC.c: 853: m_flashDiodeEnable = 1;
  6706  001C06  0E01               	movlw	1
  6707  001C08  6E40               	movwf	_m_flashDiodeEnable,c
  6708  001C0A  0C01               	retlw	1
  6709  001C0C                     l11324:
  6710                           
  6711                           ;NDC.c: 857: }
  6712                           ;NDC.c: 860: if (m_messageBuffer[0] == 0 && m_messageBuffer[1] == 0x21) {
  6713  001C0C  EE23  F041         	lfsr	2,_m_messageBuffer
  6714  001C10  50DF               	movf	indf2,w,c
  6715  001C12  E10D               	bnz	l11336
  6716  001C14  C342  FFE8         	movff	_m_messageBuffer+1,wreg
  6717  001C18  0A21               	xorlw	33
  6718  001C1A  E109               	bnz	l11336
  6719                           
  6720                           ;NDC.c: 861: HandleConfigData();
  6721  001C1C  EC57  F010         	call	_HandleConfigData	;wreg free
  6722                           
  6723                           ;NDC.c: 862: m_timerWaitForPinCode = 0;
  6724  001C20  0101               	movlb	1	; () banked
  6725  001C22  6B54               	clrf	_m_timerWaitForPinCode& (0+255),b
  6726  001C24  6B55               	clrf	(_m_timerWaitForPinCode+1)& (0+255),b
  6727  001C26  6B56               	clrf	(_m_timerWaitForPinCode+2)& (0+255),b
  6728  001C28  6B57               	clrf	(_m_timerWaitForPinCode+3)& (0+255),b
  6729                           
  6730                           ; BSR set to: 1
  6731                           ;NDC.c: 863: (LATDbits.LATD2) = 0;
  6732  001C2A  948C               	bcf	3980,2,c	;volatile
  6733  001C2C  0012               	return	
  6734  001C2E                     l11336:
  6735                           
  6736                           ;NDC.c: 866: }
  6737                           ;NDC.c: 870: if (m_messageBuffer[0] == 0 && m_messageBuffer[1] == 0x7) {
  6738  001C2E  EE23  F041         	lfsr	2,_m_messageBuffer
  6739  001C32  50DF               	movf	indf2,w,c
  6740  001C34  E106               	bnz	l11344
  6741  001C36  C342  FFE8         	movff	_m_messageBuffer+1,wreg
  6742  001C3A  0A07               	xorlw	7
  6743  001C3C  E102               	bnz	l11344
  6744                           
  6745                           ;NDC.c: 871: SendDoorStatus();
  6746  001C3E  EFB6  F01F         	goto	_SendDoorStatus	;wreg free
  6747  001C42                     l11344:
  6748                           
  6749                           ;NDC.c: 874: }
  6750                           ;NDC.c: 877: if (m_messageBuffer[0] == 0 && m_messageBuffer[1] == 0xb) {
  6751  001C42  EE23  F041         	lfsr	2,_m_messageBuffer
  6752  001C46  50DF               	movf	indf2,w,c
  6753  001C48  A4D8               	btfss	status,2,c
  6754  001C4A  0012               	return	
  6755  001C4C  C342  FFE8         	movff	_m_messageBuffer+1,wreg
  6756  001C50  0A0B               	xorlw	11
  6757  001C52  B4D8               	btfsc	status,2,c
  6758                           
  6759                           ;NDC.c: 878: SendVersionString();
  6760  001C54  ECF4  F01A         	call	_SendVersionString	;wreg free
  6761  001C58  0012               	return		;funcret
  6762  001C5A                     __end_of_HandleReceivedBytes:
  6763                           	opt stack 0
  6764                           tblptru	equ	0xFF8
  6765                           tblptrh	equ	0xFF7
  6766                           tblptrl	equ	0xFF6
  6767                           tablat	equ	0xFF5
  6768                           prodh	equ	0xFF4
  6769                           prodl	equ	0xFF3
  6770                           intcon	equ	0xFF2
  6771                           intcon2	equ	0xFF1
  6772                           postinc0	equ	0xFEE
  6773                           wreg	equ	0xFE8
  6774                           postdec1	equ	0xFE5
  6775                           fsr1h	equ	0xFE2
  6776                           fsr1l	equ	0xFE1
  6777                           indf2	equ	0xFDF
  6778                           status	equ	0xFD8
  6779                           
  6780 ;; *************** function _SendVersionString *****************
  6781 ;; Defined at:
  6782 ;;		line 609 in file "../src/NDC.c"
  6783 ;; Parameters:    Size  Location     Type
  6784 ;;		None
  6785 ;; Auto vars:     Size  Location     Type
  6786 ;;  index           1    6[BANK1 ] unsigned char 
  6787 ;;  textLength      1    5[BANK1 ] unsigned char 
  6788 ;; Return value:  Size  Location     Type
  6789 ;;		None               void
  6790 ;; Registers used:
  6791 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6792 ;; Tracked objects:
  6793 ;;		On entry : 0/0
  6794 ;;		On exit  : 0/0
  6795 ;;		Unchanged: 0/0
  6796 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6797 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6798 ;;      Locals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6799 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6800 ;;      Totals:         0       1       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6801 ;;Total ram usage:        3 bytes
  6802 ;; Hardware stack levels used:    1
  6803 ;; Hardware stack levels required when called:   15
  6804 ;; This function calls:
  6805 ;;		_SendUDPMessage
  6806 ;; This function is called by:
  6807 ;;		_HandleReceivedBytes
  6808 ;; This function uses a non-reentrant model
  6809 ;;
  6810                           
  6811                           	psect	text45
  6812  0035E8                     __ptext45:
  6813                           	opt stack 0
  6814  0035E8                     _SendVersionString:
  6815                           	opt stack 13
  6816                           
  6817                           ;NDC.c: 610: uint8_t index, textLength;
  6818                           ;NDC.c: 612: m_messageBuffer[0] = 0;
  6819                           
  6820                           ;incstack = 0
  6821  0035E8  0E00               	movlw	0
  6822  0035EA  CFE8 F341          	movff	wreg,_m_messageBuffer
  6823                           
  6824                           ;NDC.c: 613: m_messageBuffer[1] = 0xc;
  6825  0035EE  0E0C               	movlw	12
  6826  0035F0  CFE8 F342          	movff	wreg,_m_messageBuffer+1
  6827                           
  6828                           ;NDC.c: 614: m_messageBuffer[2] = g_serializedMACAddress[0];
  6829  0035F4  EE23  F043         	lfsr	2,_m_messageBuffer+2
  6830  0035F8  C0F9  FFDF         	movff	_g_serializedMACAddress,indf2
  6831                           
  6832                           ;NDC.c: 615: m_messageBuffer[3] = g_serializedMACAddress[1];
  6833  0035FC  EE23  F044         	lfsr	2,_m_messageBuffer+3
  6834  003600  C0FA  FFDF         	movff	_g_serializedMACAddress+1,indf2
  6835                           
  6836                           ;NDC.c: 616: m_messageBuffer[4] = g_serializedMACAddress[2];
  6837  003604  EE23  F045         	lfsr	2,_m_messageBuffer+4
  6838  003608  C0FB  FFDF         	movff	_g_serializedMACAddress+2,indf2
  6839                           
  6840                           ;NDC.c: 617: m_messageBuffer[5] = g_serializedMACAddress[3];
  6841  00360C  EE23  F046         	lfsr	2,_m_messageBuffer+5
  6842  003610  C0FC  FFDF         	movff	_g_serializedMACAddress+3,indf2
  6843                           
  6844                           ;NDC.c: 618: m_messageBuffer[6] = g_serializedMACAddress[4];
  6845  003614  EE23  F047         	lfsr	2,_m_messageBuffer+6
  6846  003618  C0FD  FFDF         	movff	_g_serializedMACAddress+4,indf2
  6847                           
  6848                           ;NDC.c: 619: m_messageBuffer[7] = g_serializedMACAddress[5];
  6849  00361C  EE23  F048         	lfsr	2,_m_messageBuffer+7
  6850  003620  C0FE  FFDF         	movff	_g_serializedMACAddress+5,indf2
  6851                           
  6852                           ;NDC.c: 621: for (index = 0; index < 255; index++) {
  6853  003624  0101               	movlb	1	; () banked
  6854  003626  6BEE               	clrf	SendVersionString@index& (0+255),b
  6855  003628                     l10742:
  6856                           
  6857                           ; BSR set to: 1
  6858                           ;NDC.c: 623: m_messageBuffer[9 + index] = "1.04"[index];
  6859  003628  51EE               	movf	SendVersionString@index& (0+255),w,b
  6860  00362A  0F01               	addlw	low STR_1
  6861  00362C  0100               	movlb	0	; () banked
  6862  00362E  6FC6               	movwf	??_SendVersionString& (0+255),b
  6863  003630  C0C6  FFF6         	movff	??_SendVersionString,tblptrl
  6864  003634                     	if	1	;There is more than 1 active tblptr byte
  6865  003634  0E10               	movlw	high __smallconst
  6866  003636  6EF7               	movwf	tblptrh,c
  6867  003638                     	endif
  6868  003638                     	if	0	;tblptru may be non-zero
  6869  003638                     	endif
  6870  003638                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  6871  003638  0E00               	movlw	low (__smallconst shr (0+16))
  6872  00363A  6EF8               	movwf	tblptru,c
  6873  00363C                     	endif
  6874  00363C  0E4A               	movlw	low (_m_messageBuffer+9)
  6875  00363E  0101               	movlb	1	; () banked
  6876  003640  25EE               	addwf	SendVersionString@index& (0+255),w,b
  6877  003642  6ED9               	movwf	fsr2l,c
  6878  003644  6ADA               	clrf	fsr2h,c
  6879  003646  0E03               	movlw	high (_m_messageBuffer+9)
  6880  003648  22DA               	addwfc	fsr2h,f,c
  6881  00364A  0008               	tblrd		*
  6882  00364C  CFF5 FFDF          	movff	tablat,indf2
  6883                           
  6884                           ; BSR set to: 1
  6885                           ;NDC.c: 625: if ("1.04"[index] == '\0')
  6886  003650  51EE               	movf	SendVersionString@index& (0+255),w,b
  6887  003652  0F01               	addlw	low STR_1
  6888  003654  0100               	movlb	0	; () banked
  6889  003656  6FC6               	movwf	??_SendVersionString& (0+255),b
  6890  003658  C0C6  FFF6         	movff	??_SendVersionString,tblptrl
  6891  00365C                     	if	1	;There is more than 1 active tblptr byte
  6892  00365C  0E10               	movlw	high __smallconst
  6893  00365E  6EF7               	movwf	tblptrh,c
  6894  003660                     	endif
  6895  003660                     	if	0	;tblptru may be non-zero
  6896  003660                     	endif
  6897  003660                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  6898  003660  0E00               	movlw	low (__smallconst shr (0+16))
  6899  003662  6EF8               	movwf	tblptru,c
  6900  003664                     	endif
  6901  003664  0008               	tblrd		*
  6902  003666  50F5               	movf	tablat,w,c
  6903  003668  E004               	bz	l546
  6904                           
  6905                           ; BSR set to: 0
  6906  00366A  0101               	movlb	1	; () banked
  6907  00366C  2BEE               	incf	SendVersionString@index& (0+255),f,b
  6908                           
  6909                           ; BSR set to: 1
  6910  00366E  29EE               	incf	SendVersionString@index& (0+255),w,b
  6911  003670  E1DB               	bnz	l10742
  6912  003672                     l546:
  6913                           
  6914                           ;NDC.c: 627: }
  6915                           ;NDC.c: 629: textLength = index;
  6916  003672  C1EE  F1ED         	movff	SendVersionString@index,SendVersionString@textLength
  6917                           
  6918                           ;NDC.c: 631: m_messageBuffer[8] = textLength;
  6919  003676  EE23  F049         	lfsr	2,_m_messageBuffer+8
  6920  00367A  C1ED  FFDF         	movff	SendVersionString@textLength,indf2
  6921                           
  6922                           ;NDC.c: 633: if (m_state == STATE_CONNECTED)
  6923  00367E  0E04               	movlw	4
  6924  003680  0100               	movlb	0	; () banked
  6925  003682  19D8               	xorwf	_m_state& (0+255),w,b
  6926  003684  A4D8               	btfss	status,2,c
  6927  003686  0012               	return	
  6928                           
  6929                           ; BSR set to: 0
  6930                           ;NDC.c: 634: SendUDPMessage(m_messageBuffer, 9 + textLength, m_udpSocket);
  6931  003688  0E41               	movlw	low _m_messageBuffer
  6932  00368A  0101               	movlb	1	; () banked
  6933  00368C  6FE8               	movwf	SendUDPMessage@message& (0+255),b
  6934  00368E  0E03               	movlw	high _m_messageBuffer
  6935  003690  6FE9               	movwf	(SendUDPMessage@message+1)& (0+255),b
  6936  003692  0E09               	movlw	9
  6937  003694  25ED               	addwf	SendVersionString@textLength& (0+255),w,b
  6938  003696  6FEA               	movwf	SendUDPMessage@messageSize& (0+255),b
  6939  003698  6BEB               	clrf	(SendUDPMessage@messageSize+1)& (0+255),b
  6940  00369A  0E00               	movlw	0
  6941  00369C  23EB               	addwfc	(SendUDPMessage@messageSize+1)& (0+255),f,b
  6942  00369E  C041  F1EC         	movff	_m_udpSocket,SendUDPMessage@udpSocket
  6943  0036A2  EF65  F023         	goto	_SendUDPMessage	;wreg free
  6944  0036A6                     __end_of_SendVersionString:
  6945                           	opt stack 0
  6946                           tblptru	equ	0xFF8
  6947                           tblptrh	equ	0xFF7
  6948                           tblptrl	equ	0xFF6
  6949                           tablat	equ	0xFF5
  6950                           prodh	equ	0xFF4
  6951                           prodl	equ	0xFF3
  6952                           intcon	equ	0xFF2
  6953                           intcon2	equ	0xFF1
  6954                           postinc0	equ	0xFEE
  6955                           wreg	equ	0xFE8
  6956                           postdec1	equ	0xFE5
  6957                           fsr1h	equ	0xFE2
  6958                           fsr1l	equ	0xFE1
  6959                           indf2	equ	0xFDF
  6960                           fsr2h	equ	0xFDA
  6961                           fsr2l	equ	0xFD9
  6962                           status	equ	0xFD8
  6963                           
  6964 ;; *************** function _SendDoorTimerExpiredEvent *****************
  6965 ;; Defined at:
  6966 ;;		line 546 in file "../src/NDC.c"
  6967 ;; Parameters:    Size  Location     Type
  6968 ;;		None
  6969 ;; Auto vars:     Size  Location     Type
  6970 ;;		None
  6971 ;; Return value:  Size  Location     Type
  6972 ;;		None               void
  6973 ;; Registers used:
  6974 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6975 ;; Tracked objects:
  6976 ;;		On entry : E/1
  6977 ;;		On exit  : 0/0
  6978 ;;		Unchanged: 0/0
  6979 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6980 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6981 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6982 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6983 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6984 ;;Total ram usage:        0 bytes
  6985 ;; Hardware stack levels used:    1
  6986 ;; Hardware stack levels required when called:   15
  6987 ;; This function calls:
  6988 ;;		_SendUDPMessage
  6989 ;; This function is called by:
  6990 ;;		_HandleReceivedBytes
  6991 ;;		_NDCFSM
  6992 ;; This function uses a non-reentrant model
  6993 ;;
  6994                           
  6995                           	psect	text46
  6996  0044FC                     __ptext46:
  6997                           	opt stack 0
  6998  0044FC                     _SendDoorTimerExpiredEvent:
  6999                           	opt stack 14
  7000                           
  7001                           ;NDC.c: 548: m_messageBuffer[0] = 0;
  7002                           
  7003                           ;incstack = 0
  7004  0044FC  0E00               	movlw	0
  7005  0044FE  CFE8 F341          	movff	wreg,_m_messageBuffer
  7006                           
  7007                           ;NDC.c: 549: m_messageBuffer[1] = 0x30;
  7008  004502  0E30               	movlw	48
  7009  004504  CFE8 F342          	movff	wreg,_m_messageBuffer+1
  7010                           
  7011                           ;NDC.c: 550: m_messageBuffer[2] = g_serializedMACAddress[0];
  7012  004508  EE23  F043         	lfsr	2,_m_messageBuffer+2
  7013  00450C  C0F9  FFDF         	movff	_g_serializedMACAddress,indf2
  7014                           
  7015                           ;NDC.c: 551: m_messageBuffer[3] = g_serializedMACAddress[1];
  7016  004510  EE23  F044         	lfsr	2,_m_messageBuffer+3
  7017  004514  C0FA  FFDF         	movff	_g_serializedMACAddress+1,indf2
  7018                           
  7019                           ;NDC.c: 552: m_messageBuffer[4] = g_serializedMACAddress[2];
  7020  004518  EE23  F045         	lfsr	2,_m_messageBuffer+4
  7021  00451C  C0FB  FFDF         	movff	_g_serializedMACAddress+2,indf2
  7022                           
  7023                           ;NDC.c: 553: m_messageBuffer[5] = g_serializedMACAddress[3];
  7024  004520  EE23  F046         	lfsr	2,_m_messageBuffer+5
  7025  004524  C0FC  FFDF         	movff	_g_serializedMACAddress+3,indf2
  7026                           
  7027                           ;NDC.c: 554: m_messageBuffer[6] = g_serializedMACAddress[4];
  7028  004528  EE23  F047         	lfsr	2,_m_messageBuffer+6
  7029  00452C  C0FD  FFDF         	movff	_g_serializedMACAddress+4,indf2
  7030                           
  7031                           ;NDC.c: 555: m_messageBuffer[7] = g_serializedMACAddress[5];
  7032  004530  EE23  F048         	lfsr	2,_m_messageBuffer+7
  7033  004534  C0FE  FFDF         	movff	_g_serializedMACAddress+5,indf2
  7034                           
  7035                           ;NDC.c: 557: if (m_state == STATE_CONNECTED)
  7036  004538  0E04               	movlw	4
  7037  00453A  0100               	movlb	0	; () banked
  7038  00453C  19D8               	xorwf	_m_state& (0+255),w,b
  7039  00453E  A4D8               	btfss	status,2,c
  7040  004540  0012               	return	
  7041                           
  7042                           ; BSR set to: 0
  7043                           ;NDC.c: 558: SendUDPMessage(m_messageBuffer, 8, m_udpSocket);
  7044  004542  0E41               	movlw	low _m_messageBuffer
  7045  004544  0101               	movlb	1	; () banked
  7046  004546  6FE8               	movwf	SendUDPMessage@message& (0+255),b
  7047  004548  0E03               	movlw	high _m_messageBuffer
  7048  00454A  6FE9               	movwf	(SendUDPMessage@message+1)& (0+255),b
  7049  00454C  6BEB               	clrf	(SendUDPMessage@messageSize+1)& (0+255),b
  7050  00454E  0E08               	movlw	8
  7051  004550  6FEA               	movwf	SendUDPMessage@messageSize& (0+255),b
  7052  004552  C041  F1EC         	movff	_m_udpSocket,SendUDPMessage@udpSocket
  7053  004556  EF65  F023         	goto	_SendUDPMessage	;wreg free
  7054  00455A                     __end_of_SendDoorTimerExpiredEvent:
  7055                           	opt stack 0
  7056                           tblptru	equ	0xFF8
  7057                           tblptrh	equ	0xFF7
  7058                           tblptrl	equ	0xFF6
  7059                           tablat	equ	0xFF5
  7060                           prodh	equ	0xFF4
  7061                           prodl	equ	0xFF3
  7062                           intcon	equ	0xFF2
  7063                           intcon2	equ	0xFF1
  7064                           postinc0	equ	0xFEE
  7065                           wreg	equ	0xFE8
  7066                           postdec1	equ	0xFE5
  7067                           fsr1h	equ	0xFE2
  7068                           fsr1l	equ	0xFE1
  7069                           indf2	equ	0xFDF
  7070                           fsr2h	equ	0xFDA
  7071                           fsr2l	equ	0xFD9
  7072                           status	equ	0xFD8
  7073                           
  7074 ;; *************** function _SendDoorStatus *****************
  7075 ;; Defined at:
  7076 ;;		line 430 in file "../src/NDC.c"
  7077 ;; Parameters:    Size  Location     Type
  7078 ;;		None
  7079 ;; Auto vars:     Size  Location     Type
  7080 ;;		None
  7081 ;; Return value:  Size  Location     Type
  7082 ;;		None               void
  7083 ;; Registers used:
  7084 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  7085 ;; Tracked objects:
  7086 ;;		On entry : 0/0
  7087 ;;		On exit  : 0/0
  7088 ;;		Unchanged: 0/0
  7089 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7090 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7091 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7092 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7093 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7094 ;;Total ram usage:        0 bytes
  7095 ;; Hardware stack levels used:    1
  7096 ;; Hardware stack levels required when called:   15
  7097 ;; This function calls:
  7098 ;;		_DoorIndicatorGetStatus
  7099 ;;		_SendUDPMessage
  7100 ;; This function is called by:
  7101 ;;		_HandleReceivedBytes
  7102 ;; This function uses a non-reentrant model
  7103 ;;
  7104                           
  7105                           	psect	text47
  7106  003F6C                     __ptext47:
  7107                           	opt stack 0
  7108  003F6C                     _SendDoorStatus:
  7109                           	opt stack 13
  7110                           
  7111                           ;NDC.c: 432: m_messageBuffer[0] = 0;
  7112                           
  7113                           ;incstack = 0
  7114  003F6C  0E00               	movlw	0
  7115  003F6E  CFE8 F341          	movff	wreg,_m_messageBuffer
  7116                           
  7117                           ;NDC.c: 433: m_messageBuffer[1] = 0x8;
  7118  003F72  0E08               	movlw	8
  7119  003F74  CFE8 F342          	movff	wreg,_m_messageBuffer+1
  7120                           
  7121                           ;NDC.c: 434: m_messageBuffer[2] = g_serializedMACAddress[0];
  7122  003F78  EE23  F043         	lfsr	2,_m_messageBuffer+2
  7123  003F7C  C0F9  FFDF         	movff	_g_serializedMACAddress,indf2
  7124                           
  7125                           ;NDC.c: 435: m_messageBuffer[3] = g_serializedMACAddress[1];
  7126  003F80  EE23  F044         	lfsr	2,_m_messageBuffer+3
  7127  003F84  C0FA  FFDF         	movff	_g_serializedMACAddress+1,indf2
  7128                           
  7129                           ;NDC.c: 436: m_messageBuffer[4] = g_serializedMACAddress[2];
  7130  003F88  EE23  F045         	lfsr	2,_m_messageBuffer+4
  7131  003F8C  C0FB  FFDF         	movff	_g_serializedMACAddress+2,indf2
  7132                           
  7133                           ;NDC.c: 437: m_messageBuffer[5] = g_serializedMACAddress[3];
  7134  003F90  EE23  F046         	lfsr	2,_m_messageBuffer+5
  7135  003F94  C0FC  FFDF         	movff	_g_serializedMACAddress+3,indf2
  7136                           
  7137                           ;NDC.c: 438: m_messageBuffer[6] = g_serializedMACAddress[4];
  7138  003F98  EE23  F047         	lfsr	2,_m_messageBuffer+6
  7139  003F9C  C0FD  FFDF         	movff	_g_serializedMACAddress+4,indf2
  7140                           
  7141                           ;NDC.c: 439: m_messageBuffer[7] = g_serializedMACAddress[5];
  7142  003FA0  EE23  F048         	lfsr	2,_m_messageBuffer+7
  7143  003FA4  C0FE  FFDF         	movff	_g_serializedMACAddress+5,indf2
  7144                           
  7145                           ;NDC.c: 442: if ((LATFbits.LATF2) == 0 && (LATFbits.LATF3) == 1)
  7146  003FA8  A48E               	btfss	3982,2,c	;volatile
  7147  003FAA  A68E               	btfss	3982,3,c	;volatile
  7148  003FAC  D002               	goto	l498
  7149                           
  7150                           ;NDC.c: 443: m_messageBuffer[8] = 1;
  7151  003FAE  0E01               	movlw	1
  7152  003FB0  D001               	goto	L1
  7153  003FB2                     l498:
  7154                           
  7155                           ;NDC.c: 444: else
  7156                           ;NDC.c: 445: m_messageBuffer[8] = 0;
  7157  003FB2  0E00               	movlw	0
  7158  003FB4                     L1:
  7159  003FB4  CFE8 F349          	movff	wreg,_m_messageBuffer+8
  7160                           
  7161                           ;NDC.c: 448: if (DoorIndicatorGetStatus() == 1)
  7162  003FB8  EC5B  F02A         	call	_DoorIndicatorGetStatus	;wreg free
  7163  003FBC  06E8               	decf	wreg,f,c
  7164                           
  7165                           ;NDC.c: 449: m_messageBuffer[9] = 1;
  7166  003FBE  0E01               	movlw	1
  7167  003FC0  A4D8               	btfss	status,2,c
  7168                           
  7169                           ;NDC.c: 450: else
  7170                           ;NDC.c: 451: m_messageBuffer[9] = 0;
  7171  003FC2  0E00               	movlw	0
  7172  003FC4  CFE8 F34A          	movff	wreg,_m_messageBuffer+9
  7173                           
  7174                           ;NDC.c: 453: if (m_state == STATE_CONNECTED)
  7175  003FC8  0E04               	movlw	4
  7176  003FCA  0100               	movlb	0	; () banked
  7177  003FCC  19D8               	xorwf	_m_state& (0+255),w,b
  7178  003FCE  A4D8               	btfss	status,2,c
  7179  003FD0  0012               	return	
  7180                           
  7181                           ; BSR set to: 0
  7182                           ;NDC.c: 454: SendUDPMessage(m_messageBuffer, 10, m_udpSocket);
  7183  003FD2  0E41               	movlw	low _m_messageBuffer
  7184  003FD4  0101               	movlb	1	; () banked
  7185  003FD6  6FE8               	movwf	SendUDPMessage@message& (0+255),b
  7186  003FD8  0E03               	movlw	high _m_messageBuffer
  7187  003FDA  6FE9               	movwf	(SendUDPMessage@message+1)& (0+255),b
  7188  003FDC  6BEB               	clrf	(SendUDPMessage@messageSize+1)& (0+255),b
  7189  003FDE  0E0A               	movlw	10
  7190  003FE0  6FEA               	movwf	SendUDPMessage@messageSize& (0+255),b
  7191  003FE2  C041  F1EC         	movff	_m_udpSocket,SendUDPMessage@udpSocket
  7192  003FE6  EF65  F023         	goto	_SendUDPMessage	;wreg free
  7193  003FEA                     __end_of_SendDoorStatus:
  7194                           	opt stack 0
  7195                           tblptru	equ	0xFF8
  7196                           tblptrh	equ	0xFF7
  7197                           tblptrl	equ	0xFF6
  7198                           tablat	equ	0xFF5
  7199                           prodh	equ	0xFF4
  7200                           prodl	equ	0xFF3
  7201                           intcon	equ	0xFF2
  7202                           intcon2	equ	0xFF1
  7203                           postinc0	equ	0xFEE
  7204                           wreg	equ	0xFE8
  7205                           postdec1	equ	0xFE5
  7206                           fsr1h	equ	0xFE2
  7207                           fsr1l	equ	0xFE1
  7208                           indf2	equ	0xFDF
  7209                           fsr2h	equ	0xFDA
  7210                           fsr2l	equ	0xFD9
  7211                           status	equ	0xFD8
  7212                           
  7213 ;; *************** function _DoorIndicatorGetStatus *****************
  7214 ;; Defined at:
  7215 ;;		line 192 in file "../src/DoorIndicator.c"
  7216 ;; Parameters:    Size  Location     Type
  7217 ;;		None
  7218 ;; Auto vars:     Size  Location     Type
  7219 ;;		None
  7220 ;; Return value:  Size  Location     Type
  7221 ;;                  1    wreg      unsigned char 
  7222 ;; Registers used:
  7223 ;;		wreg, status,2
  7224 ;; Tracked objects:
  7225 ;;		On entry : 0/0
  7226 ;;		On exit  : 0/0
  7227 ;;		Unchanged: 0/0
  7228 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7229 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7230 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7231 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7232 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7233 ;;Total ram usage:        0 bytes
  7234 ;; Hardware stack levels used:    1
  7235 ;; Hardware stack levels required when called:    6
  7236 ;; This function calls:
  7237 ;;		Nothing
  7238 ;; This function is called by:
  7239 ;;		_SendDoorStatus
  7240 ;; This function uses a non-reentrant model
  7241 ;;
  7242                           
  7243                           	psect	text48
  7244  0054B6                     __ptext48:
  7245                           	opt stack 0
  7246  0054B6                     _DoorIndicatorGetStatus:
  7247                           	opt stack 21
  7248                           
  7249                           ;DoorIndicator.c: 193: if(doorIndicatorState == STATE_DOOR_INDICATOR_CLOSED)
  7250                           
  7251                           ;incstack = 0
  7252  0054B6  503D               	movf	_doorIndicatorState,w,c
  7253  0054B8  E101               	bnz	l7530
  7254                           
  7255                           ;DoorIndicator.c: 194: return 0;
  7256  0054BA  0C00               	retlw	0
  7257  0054BC                     l7530:
  7258                           
  7259                           ;DoorIndicator.c: 196: return 1;
  7260  0054BC  0C01               	retlw	1	;funcret
  7261  0054BE                     __end_of_DoorIndicatorGetStatus:
  7262                           	opt stack 0
  7263                           tblptru	equ	0xFF8
  7264                           tblptrh	equ	0xFF7
  7265                           tblptrl	equ	0xFF6
  7266                           tablat	equ	0xFF5
  7267                           prodh	equ	0xFF4
  7268                           prodl	equ	0xFF3
  7269                           intcon	equ	0xFF2
  7270                           intcon2	equ	0xFF1
  7271                           postinc0	equ	0xFEE
  7272                           wreg	equ	0xFE8
  7273                           postdec1	equ	0xFE5
  7274                           fsr1h	equ	0xFE2
  7275                           fsr1l	equ	0xFE1
  7276                           indf2	equ	0xFDF
  7277                           fsr2h	equ	0xFDA
  7278                           fsr2l	equ	0xFD9
  7279                           status	equ	0xFD8
  7280                           
  7281 ;; *************** function _HandleConfigData *****************
  7282 ;; Defined at:
  7283 ;;		line 680 in file "../src/NDC.c"
  7284 ;; Parameters:    Size  Location     Type
  7285 ;;		None
  7286 ;; Auto vars:     Size  Location     Type
  7287 ;;  doorRelayAct    4   14[BANK0 ] unsigned long 
  7288 ;;  doorSwitchPr    2   12[BANK0 ] int 
  7289 ;;  doorOpenTooL    2   10[BANK0 ] int 
  7290 ;;  doorSwitchPo    1    9[BANK0 ] unsigned char 
  7291 ;;  doorIndicato    1    8[BANK0 ] unsigned char 
  7292 ;; Return value:  Size  Location     Type
  7293 ;;                  1    wreg      unsigned char 
  7294 ;; Registers used:
  7295 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  7296 ;; Tracked objects:
  7297 ;;		On entry : 0/0
  7298 ;;		On exit  : 0/0
  7299 ;;		Unchanged: 0/0
  7300 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7301 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7302 ;;      Locals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7303 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7304 ;;      Totals:         0      14       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7305 ;;Total ram usage:       14 bytes
  7306 ;; Hardware stack levels used:    1
  7307 ;; Hardware stack levels required when called:    8
  7308 ;; This function calls:
  7309 ;;		_DoorIndicatorUpdateConfig
  7310 ;;		_DoorSwitchUpdateConfig
  7311 ;;		_GetWiegandCode
  7312 ;;		_TickGet
  7313 ;;		_UDPGetArray
  7314 ;; This function is called by:
  7315 ;;		_HandleReceivedBytes
  7316 ;;		_NDCFSM
  7317 ;; This function uses a non-reentrant model
  7318 ;;
  7319                           
  7320                           	psect	text49
  7321  0020AE                     __ptext49:
  7322                           	opt stack 0
  7323  0020AE                     _HandleConfigData:
  7324                           	opt stack 20
  7325                           
  7326                           ;NDC.c: 682: int doorOpenTooLongTime = 0;
  7327                           
  7328                           ;incstack = 0
  7329  0020AE  0100               	movlb	0	; () banked
  7330  0020B0  6B6A               	clrf	HandleConfigData@doorOpenTooLongTime& (0+255),b
  7331  0020B2  6B6B               	clrf	(HandleConfigData@doorOpenTooLongTime+1)& (0+255),b
  7332                           
  7333                           ;NDC.c: 683: int doorSwitchPressedTooLongTime = 0;
  7334  0020B4  6B6C               	clrf	HandleConfigData@doorSwitchPressedTooLongTime& (0+255),b
  7335  0020B6  6B6D               	clrf	(HandleConfigData@doorSwitchPressedTooLongTime+1)& (0+255),b
  7336                           
  7337                           ;NDC.c: 684: uint8_t doorIndicatorPolarity = 0;
  7338  0020B8  6B68               	clrf	HandleConfigData@doorIndicatorPolarity& (0+255),b
  7339                           
  7340                           ;NDC.c: 685: uint8_t doorSwitchPolarity = 0;
  7341  0020BA  6B69               	clrf	HandleConfigData@doorSwitchPolarity& (0+255),b
  7342                           
  7343                           ; BSR set to: 0
  7344                           ;NDC.c: 688: m_bytesRead = UDPGetArray(m_messageBuffer, m_bytesAvailable);
  7345  0020BC  0E41               	movlw	low _m_messageBuffer
  7346  0020BE  6E23               	movwf	UDPGetArray@cData,c
  7347  0020C0  0E03               	movlw	high _m_messageBuffer
  7348  0020C2  6E24               	movwf	UDPGetArray@cData+1,c
  7349  0020C4  C0C9  F025         	movff	_m_bytesAvailable,UDPGetArray@wDataLen
  7350  0020C8  C0CA  F026         	movff	_m_bytesAvailable+1,UDPGetArray@wDataLen+1
  7351  0020CC  EC8D  F021         	call	_UDPGetArray	;wreg free
  7352  0020D0  C023  F0CB         	movff	?_UDPGetArray,_m_bytesRead
  7353  0020D4  C024  F0CC         	movff	?_UDPGetArray+1,_m_bytesRead+1
  7354                           
  7355                           ;NDC.c: 691: if (m_messageBuffer[0] == 0 && m_messageBuffer[1] == 0x21) {
  7356  0020D8  EE23  F041         	lfsr	2,_m_messageBuffer
  7357  0020DC  50DF               	movf	indf2,w,c
  7358  0020DE  E001 D0CF          	bnz	l10830
  7359  0020E2  C342  FFE8         	movff	_m_messageBuffer+1,wreg
  7360  0020E6  0A21               	xorlw	33
  7361  0020E8  E001 D0CA          	bnz	l10830
  7362                           
  7363                           ;NDC.c: 694: m_tmpLong = m_messageBuffer[2];
  7364  0020EC  EE23  F043         	lfsr	2,_m_messageBuffer+2
  7365  0020F0  50DF               	movf	indf2,w,c
  7366  0020F2  6E2F               	movwf	_m_tmpLong,c
  7367  0020F4  6A30               	clrf	_m_tmpLong+1,c
  7368  0020F6  6A31               	clrf	_m_tmpLong+2,c
  7369  0020F8  6A32               	clrf	_m_tmpLong+3,c
  7370                           
  7371                           ;NDC.c: 695: doorRelayActiveTime = m_tmpLong << 24;
  7372  0020FA  C02F  F064         	movff	_m_tmpLong,??_HandleConfigData
  7373  0020FE  C030  F065         	movff	_m_tmpLong+1,??_HandleConfigData+1
  7374  002102  C031  F066         	movff	_m_tmpLong+2,??_HandleConfigData+2
  7375  002106  C032  F067         	movff	_m_tmpLong+3,??_HandleConfigData+3
  7376  00210A  C064  F067         	movff	??_HandleConfigData,??_HandleConfigData+3
  7377  00210E  0100               	movlb	0	; () banked
  7378  002110  6B66               	clrf	(??_HandleConfigData+2)& (0+255),b
  7379  002112  6B65               	clrf	(??_HandleConfigData+1)& (0+255),b
  7380  002114  6B64               	clrf	??_HandleConfigData& (0+255),b
  7381  002116  C064  F06E         	movff	??_HandleConfigData,HandleConfigData@doorRelayActiveTime
  7382  00211A  C065  F06F         	movff	??_HandleConfigData+1,HandleConfigData@doorRelayActiveTime+1
  7383  00211E  C066  F070         	movff	??_HandleConfigData+2,HandleConfigData@doorRelayActiveTime+2
  7384  002122  C067  F071         	movff	??_HandleConfigData+3,HandleConfigData@doorRelayActiveTime+3
  7385                           
  7386                           ; BSR set to: 0
  7387                           ;NDC.c: 696: m_tmpLong = m_messageBuffer[3];
  7388  002126  EE23  F044         	lfsr	2,_m_messageBuffer+3
  7389  00212A  50DF               	movf	indf2,w,c
  7390  00212C  6E2F               	movwf	_m_tmpLong,c
  7391  00212E  6A30               	clrf	_m_tmpLong+1,c
  7392  002130  6A31               	clrf	_m_tmpLong+2,c
  7393  002132  6A32               	clrf	_m_tmpLong+3,c
  7394                           
  7395                           ; BSR set to: 0
  7396                           ;NDC.c: 697: doorRelayActiveTime += m_tmpLong << 16;
  7397  002134  C02F  F064         	movff	_m_tmpLong,??_HandleConfigData
  7398  002138  C030  F065         	movff	_m_tmpLong+1,??_HandleConfigData+1
  7399  00213C  C031  F066         	movff	_m_tmpLong+2,??_HandleConfigData+2
  7400  002140  C032  F067         	movff	_m_tmpLong+3,??_HandleConfigData+3
  7401  002144  C065  F067         	movff	??_HandleConfigData+1,??_HandleConfigData+3
  7402  002148  C064  F066         	movff	??_HandleConfigData,??_HandleConfigData+2
  7403  00214C  6B65               	clrf	(??_HandleConfigData+1)& (0+255),b
  7404  00214E  6B64               	clrf	??_HandleConfigData& (0+255),b
  7405  002150  5164               	movf	??_HandleConfigData& (0+255),w,b
  7406  002152  276E               	addwf	HandleConfigData@doorRelayActiveTime& (0+255),f,b
  7407  002154  5165               	movf	(??_HandleConfigData+1)& (0+255),w,b
  7408  002156  236F               	addwfc	(HandleConfigData@doorRelayActiveTime+1)& (0+255),f,b
  7409  002158  5166               	movf	(??_HandleConfigData+2)& (0+255),w,b
  7410  00215A  2370               	addwfc	(HandleConfigData@doorRelayActiveTime+2)& (0+255),f,b
  7411  00215C  5167               	movf	(??_HandleConfigData+3)& (0+255),w,b
  7412  00215E  2371               	addwfc	(HandleConfigData@doorRelayActiveTime+3)& (0+255),f,b
  7413                           
  7414                           ; BSR set to: 0
  7415                           ;NDC.c: 698: m_tmpLong = m_messageBuffer[4];
  7416  002160  EE23  F045         	lfsr	2,_m_messageBuffer+4
  7417  002164  50DF               	movf	indf2,w,c
  7418  002166  6E2F               	movwf	_m_tmpLong,c
  7419  002168  6A30               	clrf	_m_tmpLong+1,c
  7420  00216A  6A31               	clrf	_m_tmpLong+2,c
  7421  00216C  6A32               	clrf	_m_tmpLong+3,c
  7422                           
  7423                           ; BSR set to: 0
  7424                           ;NDC.c: 699: doorRelayActiveTime += m_tmpLong << 8;
  7425  00216E  C02F  F065         	movff	_m_tmpLong,??_HandleConfigData+1
  7426  002172  C030  F066         	movff	_m_tmpLong+1,??_HandleConfigData+2
  7427  002176  C031  F067         	movff	_m_tmpLong+2,??_HandleConfigData+3
  7428  00217A  6B64               	clrf	??_HandleConfigData& (0+255),b
  7429  00217C  5164               	movf	??_HandleConfigData& (0+255),w,b
  7430  00217E  276E               	addwf	HandleConfigData@doorRelayActiveTime& (0+255),f,b
  7431  002180  5165               	movf	(??_HandleConfigData+1)& (0+255),w,b
  7432  002182  236F               	addwfc	(HandleConfigData@doorRelayActiveTime+1)& (0+255),f,b
  7433  002184  5166               	movf	(??_HandleConfigData+2)& (0+255),w,b
  7434  002186  2370               	addwfc	(HandleConfigData@doorRelayActiveTime+2)& (0+255),f,b
  7435  002188  5167               	movf	(??_HandleConfigData+3)& (0+255),w,b
  7436  00218A  2371               	addwfc	(HandleConfigData@doorRelayActiveTime+3)& (0+255),f,b
  7437                           
  7438                           ; BSR set to: 0
  7439                           ;NDC.c: 700: m_tmpLong = m_messageBuffer[5];
  7440  00218C  EE23  F046         	lfsr	2,_m_messageBuffer+5
  7441  002190  50DF               	movf	indf2,w,c
  7442  002192  6E2F               	movwf	_m_tmpLong,c
  7443  002194  6A30               	clrf	_m_tmpLong+1,c
  7444  002196  6A31               	clrf	_m_tmpLong+2,c
  7445  002198  6A32               	clrf	_m_tmpLong+3,c
  7446                           
  7447                           ; BSR set to: 0
  7448                           ;NDC.c: 701: doorRelayActiveTime += m_tmpLong;
  7449  00219A  502F               	movf	_m_tmpLong,w,c
  7450  00219C  276E               	addwf	HandleConfigData@doorRelayActiveTime& (0+255),f,b
  7451  00219E  5030               	movf	_m_tmpLong+1,w,c
  7452  0021A0  236F               	addwfc	(HandleConfigData@doorRelayActiveTime+1)& (0+255),f,b
  7453  0021A2  5031               	movf	_m_tmpLong+2,w,c
  7454  0021A4  2370               	addwfc	(HandleConfigData@doorRelayActiveTime+2)& (0+255),f,b
  7455  0021A6  5032               	movf	_m_tmpLong+3,w,c
  7456  0021A8  2371               	addwfc	(HandleConfigData@doorRelayActiveTime+3)& (0+255),f,b
  7457                           
  7458                           ; BSR set to: 0
  7459                           ;NDC.c: 705: m_tmpInt = m_messageBuffer[6];
  7460  0021AA  EE23  F047         	lfsr	2,_m_messageBuffer+6
  7461  0021AE  50DF               	movf	indf2,w,c
  7462  0021B0  6E35               	movwf	_m_tmpInt,c
  7463  0021B2  6A36               	clrf	_m_tmpInt+1,c
  7464                           
  7465                           ; BSR set to: 0
  7466                           ;NDC.c: 706: doorOpenTooLongTime = m_tmpInt << 8;
  7467  0021B4  5035               	movf	_m_tmpInt,w,c
  7468  0021B6  6F6B               	movwf	(HandleConfigData@doorOpenTooLongTime+1)& (0+255),b
  7469  0021B8  6B6A               	clrf	HandleConfigData@doorOpenTooLongTime& (0+255),b
  7470                           
  7471                           ; BSR set to: 0
  7472                           ;NDC.c: 707: m_tmpInt = m_messageBuffer[7];
  7473  0021BA  EE23  F048         	lfsr	2,_m_messageBuffer+7
  7474  0021BE  50DF               	movf	indf2,w,c
  7475  0021C0  6E35               	movwf	_m_tmpInt,c
  7476  0021C2  6A36               	clrf	_m_tmpInt+1,c
  7477                           
  7478                           ; BSR set to: 0
  7479                           ;NDC.c: 708: doorOpenTooLongTime += m_tmpInt;
  7480  0021C4  5035               	movf	_m_tmpInt,w,c
  7481  0021C6  276A               	addwf	HandleConfigData@doorOpenTooLongTime& (0+255),f,b
  7482  0021C8  5036               	movf	_m_tmpInt+1,w,c
  7483  0021CA  236B               	addwfc	(HandleConfigData@doorOpenTooLongTime+1)& (0+255),f,b
  7484                           
  7485                           ; BSR set to: 0
  7486                           ;NDC.c: 711: m_tmpInt = m_messageBuffer[8];
  7487  0021CC  EE23  F049         	lfsr	2,_m_messageBuffer+8
  7488  0021D0  50DF               	movf	indf2,w,c
  7489  0021D2  6E35               	movwf	_m_tmpInt,c
  7490  0021D4  6A36               	clrf	_m_tmpInt+1,c
  7491                           
  7492                           ; BSR set to: 0
  7493                           ;NDC.c: 712: doorSwitchPressedTooLongTime = m_tmpInt << 8;
  7494  0021D6  5035               	movf	_m_tmpInt,w,c
  7495  0021D8  6F6D               	movwf	(HandleConfigData@doorSwitchPressedTooLongTime+1)& (0+255),b
  7496  0021DA  6B6C               	clrf	HandleConfigData@doorSwitchPressedTooLongTime& (0+255),b
  7497                           
  7498                           ; BSR set to: 0
  7499                           ;NDC.c: 713: m_tmpInt = m_messageBuffer[9];
  7500  0021DC  EE23  F04A         	lfsr	2,_m_messageBuffer+9
  7501  0021E0  50DF               	movf	indf2,w,c
  7502  0021E2  6E35               	movwf	_m_tmpInt,c
  7503  0021E4  6A36               	clrf	_m_tmpInt+1,c
  7504                           
  7505                           ; BSR set to: 0
  7506                           ;NDC.c: 714: doorSwitchPressedTooLongTime += m_tmpInt;
  7507  0021E6  5035               	movf	_m_tmpInt,w,c
  7508  0021E8  276C               	addwf	HandleConfigData@doorSwitchPressedTooLongTime& (0+255),f,b
  7509  0021EA  5036               	movf	_m_tmpInt+1,w,c
  7510  0021EC  236D               	addwfc	(HandleConfigData@doorSwitchPressedTooLongTime+1)& (0+255),f,b
  7511                           
  7512                           ; BSR set to: 0
  7513                           ;NDC.c: 717: doorIndicatorPolarity = m_messageBuffer[10];
  7514  0021EE  C34B  F068         	movff	_m_messageBuffer+10,HandleConfigData@doorIndicatorPolarity
  7515                           
  7516                           ; BSR set to: 0
  7517                           ;NDC.c: 720: doorSwitchPolarity = m_messageBuffer[11];
  7518  0021F2  C34C  F069         	movff	_m_messageBuffer+11,HandleConfigData@doorSwitchPolarity
  7519                           
  7520                           ; BSR set to: 0
  7521                           ;NDC.c: 723: m_config.doorRelayActiveTime = doorRelayActiveTime;
  7522  0021F6  C06E  F1C0         	movff	HandleConfigData@doorRelayActiveTime,_m_config
  7523  0021FA  C06F  F1C1         	movff	HandleConfigData@doorRelayActiveTime+1,_m_config+1
  7524                           
  7525                           ; BSR set to: 0
  7526                           ;NDC.c: 724: m_config.doorOpenTooLongTime = doorOpenTooLongTime;
  7527  0021FE  C06A  F1C2         	movff	HandleConfigData@doorOpenTooLongTime,_m_config+2
  7528  002202  C06B  F1C3         	movff	HandleConfigData@doorOpenTooLongTime+1,_m_config+3
  7529                           
  7530                           ; BSR set to: 0
  7531                           ;NDC.c: 725: m_config.doorSwitchPressedTooLongTime = doorSwitchPressedTooLongTime;
  7532  002206  C06C  F1C4         	movff	HandleConfigData@doorSwitchPressedTooLongTime,_m_config+4
  7533  00220A  C06D  F1C5         	movff	HandleConfigData@doorSwitchPressedTooLongTime+1,_m_config+5
  7534                           
  7535                           ; BSR set to: 0
  7536                           ;NDC.c: 726: m_config.doorIndicatorPolarity = doorIndicatorPolarity;
  7537  00220E  C068  F1C6         	movff	HandleConfigData@doorIndicatorPolarity,_m_config+6
  7538                           
  7539                           ; BSR set to: 0
  7540                           ;NDC.c: 727: m_config.doorSwitchPolarity = doorSwitchPolarity;
  7541  002212  C069  F1C7         	movff	HandleConfigData@doorSwitchPolarity,_m_config+7
  7542                           
  7543                           ; BSR set to: 0
  7544                           ;NDC.c: 733: DoorSwitchUpdateConfig(&m_config);
  7545  002216  0EC0               	movlw	low _m_config
  7546  002218  6E24               	movwf	DoorSwitchUpdateConfig@configData,c
  7547  00221A  0E01               	movlw	high _m_config
  7548  00221C  6E25               	movwf	DoorSwitchUpdateConfig@configData+1,c
  7549  00221E  EC72  F01F         	call	_DoorSwitchUpdateConfig	;wreg free
  7550                           
  7551                           ;NDC.c: 734: DoorIndicatorUpdateConfig(&m_config);
  7552  002222  0EC0               	movlw	low _m_config
  7553  002224  6E24               	movwf	DoorIndicatorUpdateConfig@configData,c
  7554  002226  0E01               	movlw	high _m_config
  7555  002228  6E25               	movwf	DoorIndicatorUpdateConfig@configData+1,c
  7556  00222A  ECA0  F01E         	call	_DoorIndicatorUpdateConfig	;wreg free
  7557                           
  7558                           ;NDC.c: 736: m_timerState = TickGet();
  7559  00222E  EC9C  F028         	call	_TickGet	;wreg free
  7560  002232  C01C  F150         	movff	?_TickGet,_m_timerState
  7561  002236  C01D  F151         	movff	?_TickGet+1,_m_timerState+1
  7562  00223A  C01E  F152         	movff	?_TickGet+2,_m_timerState+2
  7563  00223E  C01F  F153         	movff	?_TickGet+3,_m_timerState+3
  7564                           
  7565                           ;NDC.c: 737: m_state = STATE_CONNECTED;
  7566  002242  0E04               	movlw	4
  7567  002244  0100               	movlb	0	; () banked
  7568  002246  6FD8               	movwf	_m_state& (0+255),b
  7569                           
  7570                           ; BSR set to: 0
  7571                           ;NDC.c: 740: GetWiegandCode();
  7572  002248  EC37  F025         	call	_GetWiegandCode	;wreg free
  7573                           
  7574                           ; BSR set to: 0
  7575                           ;NDC.c: 741: m_codeLength = 0;
  7576  00224C  6BD2               	clrf	_m_codeLength& (0+255),b
  7577                           
  7578                           ; BSR set to: 0
  7579                           ;NDC.c: 742: m_timerWaitForPinCode = 0;
  7580  00224E  0101               	movlb	1	; () banked
  7581  002250  6B54               	clrf	_m_timerWaitForPinCode& (0+255),b
  7582  002252  6B55               	clrf	(_m_timerWaitForPinCode+1)& (0+255),b
  7583  002254  6B56               	clrf	(_m_timerWaitForPinCode+2)& (0+255),b
  7584  002256  6B57               	clrf	(_m_timerWaitForPinCode+3)& (0+255),b
  7585                           
  7586                           ; BSR set to: 1
  7587                           ;NDC.c: 744: m_timerReceiveHeartbeat = TickGet();
  7588  002258  EC9C  F028         	call	_TickGet	;wreg free
  7589  00225C  C01C  F148         	movff	?_TickGet,_m_timerReceiveHeartbeat
  7590  002260  C01D  F149         	movff	?_TickGet+1,_m_timerReceiveHeartbeat+1
  7591  002264  C01E  F14A         	movff	?_TickGet+2,_m_timerReceiveHeartbeat+2
  7592  002268  C01F  F14B         	movff	?_TickGet+3,_m_timerReceiveHeartbeat+3
  7593                           
  7594                           ;NDC.c: 745: m_timerSendHeartbeat = TickGet();
  7595  00226C  EC9C  F028         	call	_TickGet	;wreg free
  7596  002270  C01C  F14C         	movff	?_TickGet,_m_timerSendHeartbeat
  7597  002274  C01D  F14D         	movff	?_TickGet+1,_m_timerSendHeartbeat+1
  7598  002278  C01E  F14E         	movff	?_TickGet+2,_m_timerSendHeartbeat+2
  7599  00227C  C01F  F14F         	movff	?_TickGet+3,_m_timerSendHeartbeat+3
  7600  002280                     l10830:
  7601                           
  7602                           ;NDC.c: 747: return 1;
  7603  002280  0C01               	retlw	1	;funcret
  7604  002282                     __end_of_HandleConfigData:
  7605                           	opt stack 0
  7606                           tblptru	equ	0xFF8
  7607                           tblptrh	equ	0xFF7
  7608                           tblptrl	equ	0xFF6
  7609                           tablat	equ	0xFF5
  7610                           prodh	equ	0xFF4
  7611                           prodl	equ	0xFF3
  7612                           intcon	equ	0xFF2
  7613                           intcon2	equ	0xFF1
  7614                           postinc0	equ	0xFEE
  7615                           wreg	equ	0xFE8
  7616                           postdec1	equ	0xFE5
  7617                           fsr1h	equ	0xFE2
  7618                           fsr1l	equ	0xFE1
  7619                           indf2	equ	0xFDF
  7620                           fsr2h	equ	0xFDA
  7621                           fsr2l	equ	0xFD9
  7622                           status	equ	0xFD8
  7623                           
  7624 ;; *************** function _DoorSwitchUpdateConfig *****************
  7625 ;; Defined at:
  7626 ;;		line 156 in file "../src/DoorSwitch.c"
  7627 ;; Parameters:    Size  Location     Type
  7628 ;;  configData      2   35[COMRAM] PTR struct _CONFIG
  7629 ;;		 -> m_config(8), 
  7630 ;; Auto vars:     Size  Location     Type
  7631 ;;		None
  7632 ;; Return value:  Size  Location     Type
  7633 ;;		None               void
  7634 ;; Registers used:
  7635 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  7636 ;; Tracked objects:
  7637 ;;		On entry : F/0
  7638 ;;		On exit  : E/0
  7639 ;;		Unchanged: 0/0
  7640 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7641 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7642 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7643 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7644 ;;      Totals:         2       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7645 ;;Total ram usage:        6 bytes
  7646 ;; Hardware stack levels used:    1
  7647 ;; Hardware stack levels required when called:    7
  7648 ;; This function calls:
  7649 ;;		___awdiv
  7650 ;; This function is called by:
  7651 ;;		_HandleConfigData
  7652 ;; This function uses a non-reentrant model
  7653 ;;
  7654                           
  7655                           	psect	text50
  7656  003EE4                     __ptext50:
  7657                           	opt stack 0
  7658  003EE4                     _DoorSwitchUpdateConfig:
  7659                           	opt stack 20
  7660                           
  7661                           ; BSR set to: 0
  7662                           ;DoorSwitch.c: 159: if (configData->doorSwitchPolarity == 1) {
  7663                           
  7664                           ;incstack = 0
  7665  003EE4  EE20 F007          	lfsr	2,7
  7666  003EE8  5024               	movf	DoorSwitchUpdateConfig@configData,w,c
  7667  003EEA  26D9               	addwf	fsr2l,f,c
  7668  003EEC  5025               	movf	DoorSwitchUpdateConfig@configData+1,w,c
  7669  003EEE  22DA               	addwfc	fsr2h,f,c
  7670  003EF0  04DE               	decf	postinc2,w,c
  7671  003EF2  E103               	bnz	l181
  7672                           
  7673                           ; BSR set to: 0
  7674                           ;DoorSwitch.c: 160: m_doorSwitchInvertPolarityFlag = 1;
  7675  003EF4  0E01               	movlw	1
  7676  003EF6  6FD4               	movwf	_m_doorSwitchInvertPolarityFlag& (0+255),b
  7677                           
  7678                           ;DoorSwitch.c: 161: } else {
  7679  003EF8  D001               	goto	l10588
  7680  003EFA                     l181:
  7681                           
  7682                           ; BSR set to: 0
  7683                           ;DoorSwitch.c: 162: m_doorSwitchInvertPolarityFlag = 0;
  7684  003EFA  6BD4               	clrf	_m_doorSwitchInvertPolarityFlag& (0+255),b
  7685  003EFC                     l10588:
  7686                           
  7687                           ; BSR set to: 0
  7688                           ;DoorSwitch.c: 163: }
  7689                           ;DoorSwitch.c: 166: if (configData->doorSwitchPressedTooLongTime == 0) {
  7690  003EFC  EE20 F004          	lfsr	2,4
  7691  003F00  5024               	movf	DoorSwitchUpdateConfig@configData,w,c
  7692  003F02  26D9               	addwf	fsr2l,f,c
  7693  003F04  5025               	movf	DoorSwitchUpdateConfig@configData+1,w,c
  7694  003F06  22DA               	addwfc	fsr2h,f,c
  7695  003F08  50DE               	movf	postinc2,w,c
  7696  003F0A  10DE               	iorwf	postinc2,w,c
  7697  003F0C  E102               	bnz	l10592
  7698                           
  7699                           ; BSR set to: 0
  7700                           ;DoorSwitch.c: 168: m_doorSwitchPressedTooLongFunctionalityIsActiveFlag = 0;
  7701  003F0E  6A3F               	clrf	_m_doorSwitchPressedTooLongFunctionalityIsActiveFlag,c
  7702                           
  7703                           ;DoorSwitch.c: 169: } else {
  7704  003F10  0012               	return	
  7705  003F12                     l10592:
  7706                           
  7707                           ; BSR set to: 0
  7708                           ;DoorSwitch.c: 171: m_doorSwitchPressedTooLongFunctionalityIsActiveFlag = 1;
  7709  003F12  0E01               	movlw	1
  7710  003F14  6E3F               	movwf	_m_doorSwitchPressedTooLongFunctionalityIsActiveFlag,c
  7711                           
  7712                           ; BSR set to: 0
  7713                           ;DoorSwitch.c: 174: m_doorSwitchPressedTooLongTimerStartValue = (configData->doorSwitchP
      +                          ressedTooLongTime * 1000) / 50;
  7714  003F16  EE20 F004          	lfsr	2,4
  7715  003F1A  5024               	movf	DoorSwitchUpdateConfig@configData,w,c
  7716  003F1C  26D9               	addwf	fsr2l,f,c
  7717  003F1E  5025               	movf	DoorSwitchUpdateConfig@configData+1,w,c
  7718  003F20  22DA               	addwfc	fsr2h,f,c
  7719  003F22  CFDE F060          	movff	postinc2,??_DoorSwitchUpdateConfig
  7720  003F26  CFDD F061          	movff	postdec2,??_DoorSwitchUpdateConfig+1
  7721  003F2A  0EE8               	movlw	232
  7722  003F2C  0360               	mulwf	??_DoorSwitchUpdateConfig& (0+255),b
  7723  003F2E  CFF3 F062          	movff	prodl,??_DoorSwitchUpdateConfig+2
  7724  003F32  CFF4 F063          	movff	prodh,??_DoorSwitchUpdateConfig+3
  7725  003F36  0361               	mulwf	(??_DoorSwitchUpdateConfig+1)& (0+255),b
  7726  003F38  50F3               	movf	prodl,w,c
  7727  003F3A  2763               	addwf	(??_DoorSwitchUpdateConfig+3)& (0+255),f,b
  7728  003F3C  0E03               	movlw	3
  7729  003F3E  0360               	mulwf	??_DoorSwitchUpdateConfig& (0+255),b
  7730  003F40  50F3               	movf	prodl,w,c
  7731  003F42  2763               	addwf	(??_DoorSwitchUpdateConfig+3)& (0+255),f,b
  7732  003F44  C062  F01C         	movff	??_DoorSwitchUpdateConfig+2,___awdiv@dividend
  7733  003F48  C063  F01D         	movff	??_DoorSwitchUpdateConfig+3,___awdiv@dividend+1
  7734  003F4C  6A1F               	clrf	___awdiv@divisor+1,c
  7735  003F4E  0E32               	movlw	50
  7736  003F50  6E1E               	movwf	___awdiv@divisor,c
  7737  003F52  EC72  F020         	call	___awdiv	;wreg free
  7738  003F56  C01C  F1E2         	movff	?___awdiv,_m_doorSwitchPressedTooLongTimerStartValue
  7739  003F5A  C01D  F1E3         	movff	?___awdiv+1,_m_doorSwitchPressedTooLongTimerStartValue+1
  7740  003F5E  0101               	movlb	1	; () banked
  7741  003F60  0E00               	movlw	0
  7742  003F62  BFE3               	btfsc	(_m_doorSwitchPressedTooLongTimerStartValue+1)& (0+255),7,b
  7743  003F64  0EFF               	movlw	-1
  7744  003F66  6FE4               	movwf	(_m_doorSwitchPressedTooLongTimerStartValue+2)& (0+255),b
  7745  003F68  6FE5               	movwf	(_m_doorSwitchPressedTooLongTimerStartValue+3)& (0+255),b
  7746  003F6A  0012               	return		;funcret
  7747  003F6C                     __end_of_DoorSwitchUpdateConfig:
  7748                           	opt stack 0
  7749                           tblptru	equ	0xFF8
  7750                           tblptrh	equ	0xFF7
  7751                           tblptrl	equ	0xFF6
  7752                           tablat	equ	0xFF5
  7753                           prodh	equ	0xFF4
  7754                           prodl	equ	0xFF3
  7755                           intcon	equ	0xFF2
  7756                           intcon2	equ	0xFF1
  7757                           postinc0	equ	0xFEE
  7758                           wreg	equ	0xFE8
  7759                           postdec1	equ	0xFE5
  7760                           fsr1h	equ	0xFE2
  7761                           fsr1l	equ	0xFE1
  7762                           indf2	equ	0xFDF
  7763                           postinc2	equ	0xFDE
  7764                           postdec2	equ	0xFDD
  7765                           fsr2h	equ	0xFDA
  7766                           fsr2l	equ	0xFD9
  7767                           status	equ	0xFD8
  7768                           
  7769 ;; *************** function _DoorIndicatorUpdateConfig *****************
  7770 ;; Defined at:
  7771 ;;		line 159 in file "../src/DoorIndicator.c"
  7772 ;; Parameters:    Size  Location     Type
  7773 ;;  configData      2   35[COMRAM] PTR struct _CONFIG
  7774 ;;		 -> m_config(8), 
  7775 ;; Auto vars:     Size  Location     Type
  7776 ;;		None
  7777 ;; Return value:  Size  Location     Type
  7778 ;;		None               void
  7779 ;; Registers used:
  7780 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  7781 ;; Tracked objects:
  7782 ;;		On entry : E/0
  7783 ;;		On exit  : E/0
  7784 ;;		Unchanged: 0/0
  7785 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7786 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7787 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7788 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7789 ;;      Totals:         2       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7790 ;;Total ram usage:        6 bytes
  7791 ;; Hardware stack levels used:    1
  7792 ;; Hardware stack levels required when called:    7
  7793 ;; This function calls:
  7794 ;;		___awdiv
  7795 ;; This function is called by:
  7796 ;;		_HandleConfigData
  7797 ;; This function uses a non-reentrant model
  7798 ;;
  7799                           
  7800                           	psect	text51
  7801  003D40                     __ptext51:
  7802                           	opt stack 0
  7803  003D40                     _DoorIndicatorUpdateConfig:
  7804                           	opt stack 20
  7805                           
  7806                           ;DoorIndicator.c: 163: if (configData->doorOpenTooLongTime == 0) {
  7807                           
  7808                           ;incstack = 0
  7809  003D40  EE20 F002          	lfsr	2,2
  7810  003D44  5024               	movf	DoorIndicatorUpdateConfig@configData,w,c
  7811  003D46  26D9               	addwf	fsr2l,f,c
  7812  003D48  5025               	movf	DoorIndicatorUpdateConfig@configData+1,w,c
  7813  003D4A  22DA               	addwfc	fsr2h,f,c
  7814  003D4C  50DE               	movf	postinc2,w,c
  7815  003D4E  10DE               	iorwf	postinc2,w,c
  7816  003D50  E103               	bnz	l10562
  7817                           
  7818                           ;DoorIndicator.c: 165: m_doorIndicatorOpenTooLongFunctionalityActiveFlag = 0;
  7819  003D52  0100               	movlb	0	; () banked
  7820  003D54  6BD3               	clrf	_m_doorIndicatorOpenTooLongFunctionalityActiveFlag& (0+255),b
  7821                           
  7822                           ;DoorIndicator.c: 166: } else {
  7823  003D56  D02D               	goto	l10566
  7824  003D58                     l10562:
  7825                           
  7826                           ;DoorIndicator.c: 168: m_doorIndicatorOpenTooLongFunctionalityActiveFlag = 1;
  7827  003D58  0E01               	movlw	1
  7828  003D5A  0100               	movlb	0	; () banked
  7829  003D5C  6FD3               	movwf	_m_doorIndicatorOpenTooLongFunctionalityActiveFlag& (0+255),b
  7830                           
  7831                           ; BSR set to: 0
  7832                           ;DoorIndicator.c: 171: m_doorIndicatorOpenTooLongTimerStartValue = (configData->doorOpen
      +                          TooLongTime * 1000) / 50;
  7833  003D5E  EE20 F002          	lfsr	2,2
  7834  003D62  5024               	movf	DoorIndicatorUpdateConfig@configData,w,c
  7835  003D64  26D9               	addwf	fsr2l,f,c
  7836  003D66  5025               	movf	DoorIndicatorUpdateConfig@configData+1,w,c
  7837  003D68  22DA               	addwfc	fsr2h,f,c
  7838  003D6A  CFDE F060          	movff	postinc2,??_DoorIndicatorUpdateConfig
  7839  003D6E  CFDD F061          	movff	postdec2,??_DoorIndicatorUpdateConfig+1
  7840  003D72  0EE8               	movlw	232
  7841  003D74  0360               	mulwf	??_DoorIndicatorUpdateConfig& (0+255),b
  7842  003D76  CFF3 F062          	movff	prodl,??_DoorIndicatorUpdateConfig+2
  7843  003D7A  CFF4 F063          	movff	prodh,??_DoorIndicatorUpdateConfig+3
  7844  003D7E  0361               	mulwf	(??_DoorIndicatorUpdateConfig+1)& (0+255),b
  7845  003D80  50F3               	movf	prodl,w,c
  7846  003D82  2763               	addwf	(??_DoorIndicatorUpdateConfig+3)& (0+255),f,b
  7847  003D84  0E03               	movlw	3
  7848  003D86  0360               	mulwf	??_DoorIndicatorUpdateConfig& (0+255),b
  7849  003D88  50F3               	movf	prodl,w,c
  7850  003D8A  2763               	addwf	(??_DoorIndicatorUpdateConfig+3)& (0+255),f,b
  7851  003D8C  C062  F01C         	movff	??_DoorIndicatorUpdateConfig+2,___awdiv@dividend
  7852  003D90  C063  F01D         	movff	??_DoorIndicatorUpdateConfig+3,___awdiv@dividend+1
  7853  003D94  6A1F               	clrf	___awdiv@divisor+1,c
  7854  003D96  0E32               	movlw	50
  7855  003D98  6E1E               	movwf	___awdiv@divisor,c
  7856  003D9A  EC72  F020         	call	___awdiv	;wreg free
  7857  003D9E  C01C  F1DE         	movff	?___awdiv,_m_doorIndicatorOpenTooLongTimerStartValue
  7858  003DA2  C01D  F1DF         	movff	?___awdiv+1,_m_doorIndicatorOpenTooLongTimerStartValue+1
  7859  003DA6  0101               	movlb	1	; () banked
  7860  003DA8  0E00               	movlw	0
  7861  003DAA  BFDF               	btfsc	(_m_doorIndicatorOpenTooLongTimerStartValue+1)& (0+255),7,b
  7862  003DAC  0EFF               	movlw	-1
  7863  003DAE  6FE0               	movwf	(_m_doorIndicatorOpenTooLongTimerStartValue+2)& (0+255),b
  7864  003DB0  6FE1               	movwf	(_m_doorIndicatorOpenTooLongTimerStartValue+3)& (0+255),b
  7865  003DB2                     l10566:
  7866                           
  7867                           ;DoorIndicator.c: 172: }
  7868                           ;DoorIndicator.c: 175: if (configData->doorIndicatorPolarity == 1) {
  7869  003DB2  EE20 F006          	lfsr	2,6
  7870  003DB6  5024               	movf	DoorIndicatorUpdateConfig@configData,w,c
  7871  003DB8  26D9               	addwf	fsr2l,f,c
  7872  003DBA  5025               	movf	DoorIndicatorUpdateConfig@configData+1,w,c
  7873  003DBC  22DA               	addwfc	fsr2h,f,c
  7874  003DBE  04DE               	decf	postinc2,w,c
  7875  003DC0  E103               	bnz	l84
  7876                           
  7877                           ;DoorIndicator.c: 176: m_doorIndicatorInvertPolarityFlag = 1;
  7878  003DC2  0E01               	movlw	1
  7879  003DC4  6E3E               	movwf	_m_doorIndicatorInvertPolarityFlag,c
  7880                           
  7881                           ;DoorIndicator.c: 177: } else {
  7882  003DC6  0C01               	retlw	1
  7883  003DC8                     l84:
  7884                           
  7885                           ;DoorIndicator.c: 178: m_doorIndicatorInvertPolarityFlag = 0;
  7886  003DC8  6A3E               	clrf	_m_doorIndicatorInvertPolarityFlag,c
  7887  003DCA  0012               	return		;funcret
  7888  003DCC                     __end_of_DoorIndicatorUpdateConfig:
  7889                           	opt stack 0
  7890                           tblptru	equ	0xFF8
  7891                           tblptrh	equ	0xFF7
  7892                           tblptrl	equ	0xFF6
  7893                           tablat	equ	0xFF5
  7894                           prodh	equ	0xFF4
  7895                           prodl	equ	0xFF3
  7896                           intcon	equ	0xFF2
  7897                           intcon2	equ	0xFF1
  7898                           postinc0	equ	0xFEE
  7899                           wreg	equ	0xFE8
  7900                           postdec1	equ	0xFE5
  7901                           fsr1h	equ	0xFE2
  7902                           fsr1l	equ	0xFE1
  7903                           indf2	equ	0xFDF
  7904                           postinc2	equ	0xFDE
  7905                           postdec2	equ	0xFDD
  7906                           fsr2h	equ	0xFDA
  7907                           fsr2l	equ	0xFD9
  7908                           status	equ	0xFD8
  7909                           
  7910 ;; *************** function ___awdiv *****************
  7911 ;; Defined at:
  7912 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\awdiv.c"
  7913 ;; Parameters:    Size  Location     Type
  7914 ;;  dividend        2   27[COMRAM] int 
  7915 ;;  divisor         2   29[COMRAM] int 
  7916 ;; Auto vars:     Size  Location     Type
  7917 ;;  quotient        2   33[COMRAM] int 
  7918 ;;  sign            1   32[COMRAM] unsigned char 
  7919 ;;  counter         1   31[COMRAM] unsigned char 
  7920 ;; Return value:  Size  Location     Type
  7921 ;;                  2   27[COMRAM] int 
  7922 ;; Registers used:
  7923 ;;		wreg, status,2, status,0
  7924 ;; Tracked objects:
  7925 ;;		On entry : F/0
  7926 ;;		On exit  : F/0
  7927 ;;		Unchanged: F/0
  7928 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7929 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7930 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7931 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7932 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7933 ;;Total ram usage:        8 bytes
  7934 ;; Hardware stack levels used:    1
  7935 ;; Hardware stack levels required when called:    6
  7936 ;; This function calls:
  7937 ;;		Nothing
  7938 ;; This function is called by:
  7939 ;;		_DoorIndicatorUpdateConfig
  7940 ;;		_DoorSwitchUpdateConfig
  7941 ;; This function uses a non-reentrant model
  7942 ;;
  7943                           
  7944                           	psect	text52
  7945  0040E4                     __ptext52:
  7946                           	opt stack 0
  7947  0040E4                     ___awdiv:
  7948                           	opt stack 20
  7949                           
  7950                           ; BSR set to: 0
  7951                           
  7952                           ;incstack = 0
  7953  0040E4  6A21               	clrf	___awdiv@sign,c
  7954                           
  7955                           ; BSR set to: 0
  7956  0040E6  AE1F               	btfss	___awdiv@divisor+1,7,c
  7957  0040E8  D006               	goto	l10476
  7958                           
  7959                           ; BSR set to: 0
  7960  0040EA  6C1E               	negf	___awdiv@divisor,c
  7961  0040EC  1E1F               	comf	___awdiv@divisor+1,f,c
  7962  0040EE  B0D8               	btfsc	status,0,c
  7963  0040F0  2A1F               	incf	___awdiv@divisor+1,f,c
  7964                           
  7965                           ; BSR set to: 0
  7966  0040F2  0E01               	movlw	1
  7967  0040F4  6E21               	movwf	___awdiv@sign,c
  7968  0040F6                     l10476:
  7969                           
  7970                           ; BSR set to: 0
  7971  0040F6  AE1D               	btfss	___awdiv@dividend+1,7,c
  7972  0040F8  D006               	goto	l10482
  7973                           
  7974                           ; BSR set to: 0
  7975  0040FA  6C1C               	negf	___awdiv@dividend,c
  7976  0040FC  1E1D               	comf	___awdiv@dividend+1,f,c
  7977  0040FE  B0D8               	btfsc	status,0,c
  7978  004100  2A1D               	incf	___awdiv@dividend+1,f,c
  7979                           
  7980                           ; BSR set to: 0
  7981  004102  0E01               	movlw	1
  7982  004104  1A21               	xorwf	___awdiv@sign,f,c
  7983  004106                     l10482:
  7984                           
  7985                           ; BSR set to: 0
  7986  004106  6A22               	clrf	___awdiv@quotient,c
  7987  004108  6A23               	clrf	___awdiv@quotient+1,c
  7988                           
  7989                           ; BSR set to: 0
  7990  00410A  501E               	movf	___awdiv@divisor,w,c
  7991  00410C  101F               	iorwf	___awdiv@divisor+1,w,c
  7992  00410E  E01B               	bz	l10504
  7993                           
  7994                           ; BSR set to: 0
  7995  004110  0E01               	movlw	1
  7996  004112  6E20               	movwf	___awdiv@counter,c
  7997  004114  D004               	goto	l10490
  7998  004116                     l10488:
  7999                           
  8000                           ; BSR set to: 0
  8001  004116  90D8               	bcf	status,0,c
  8002  004118  361E               	rlcf	___awdiv@divisor,f,c
  8003  00411A  361F               	rlcf	___awdiv@divisor+1,f,c
  8004  00411C  2A20               	incf	___awdiv@counter,f,c
  8005  00411E                     l10490:
  8006                           
  8007                           ; BSR set to: 0
  8008  00411E  AE1F               	btfss	___awdiv@divisor+1,7,c
  8009  004120  D7FA               	goto	l10488
  8010  004122                     l10492:
  8011                           
  8012                           ; BSR set to: 0
  8013  004122  90D8               	bcf	status,0,c
  8014  004124  3622               	rlcf	___awdiv@quotient,f,c
  8015  004126  3623               	rlcf	___awdiv@quotient+1,f,c
  8016                           
  8017                           ; BSR set to: 0
  8018  004128  501E               	movf	___awdiv@divisor,w,c
  8019  00412A  5C1C               	subwf	___awdiv@dividend,w,c
  8020  00412C  501F               	movf	___awdiv@divisor+1,w,c
  8021  00412E  581D               	subwfb	___awdiv@dividend+1,w,c
  8022  004130  E305               	bnc	l10500
  8023                           
  8024                           ; BSR set to: 0
  8025  004132  501E               	movf	___awdiv@divisor,w,c
  8026  004134  5E1C               	subwf	___awdiv@dividend,f,c
  8027  004136  501F               	movf	___awdiv@divisor+1,w,c
  8028  004138  5A1D               	subwfb	___awdiv@dividend+1,f,c
  8029                           
  8030                           ; BSR set to: 0
  8031  00413A  8022               	bsf	___awdiv@quotient,0,c
  8032  00413C                     l10500:
  8033                           
  8034                           ; BSR set to: 0
  8035  00413C  90D8               	bcf	status,0,c
  8036  00413E  321F               	rrcf	___awdiv@divisor+1,f,c
  8037  004140  321E               	rrcf	___awdiv@divisor,f,c
  8038                           
  8039                           ; BSR set to: 0
  8040  004142  2E20               	decfsz	___awdiv@counter,f,c
  8041  004144  D7EE               	goto	l10492
  8042  004146                     l10504:
  8043                           
  8044                           ; BSR set to: 0
  8045  004146  5021               	movf	___awdiv@sign,w,c
  8046  004148  E004               	bz	l10508
  8047                           
  8048                           ; BSR set to: 0
  8049  00414A  6C22               	negf	___awdiv@quotient,c
  8050  00414C  1E23               	comf	___awdiv@quotient+1,f,c
  8051  00414E  B0D8               	btfsc	status,0,c
  8052  004150  2A23               	incf	___awdiv@quotient+1,f,c
  8053  004152                     l10508:
  8054                           
  8055                           ; BSR set to: 0
  8056  004152  C022  F01C         	movff	___awdiv@quotient,?___awdiv
  8057  004156  C023  F01D         	movff	___awdiv@quotient+1,?___awdiv+1
  8058                           
  8059                           ; BSR set to: 0
  8060  00415A  0012               	return		;funcret
  8061  00415C                     __end_of___awdiv:
  8062                           	opt stack 0
  8063                           tblptru	equ	0xFF8
  8064                           tblptrh	equ	0xFF7
  8065                           tblptrl	equ	0xFF6
  8066                           tablat	equ	0xFF5
  8067                           prodh	equ	0xFF4
  8068                           prodl	equ	0xFF3
  8069                           intcon	equ	0xFF2
  8070                           intcon2	equ	0xFF1
  8071                           postinc0	equ	0xFEE
  8072                           wreg	equ	0xFE8
  8073                           postdec1	equ	0xFE5
  8074                           fsr1h	equ	0xFE2
  8075                           fsr1l	equ	0xFE1
  8076                           indf2	equ	0xFDF
  8077                           postinc2	equ	0xFDE
  8078                           postdec2	equ	0xFDD
  8079                           fsr2h	equ	0xFDA
  8080                           fsr2l	equ	0xFD9
  8081                           status	equ	0xFD8
  8082                           
  8083 ;; *************** function _Beep *****************
  8084 ;; Defined at:
  8085 ;;		line 31 in file "../src/Beep.c"
  8086 ;; Parameters:    Size  Location     Type
  8087 ;;  value           4   35[COMRAM] unsigned long 
  8088 ;; Auto vars:     Size  Location     Type
  8089 ;;		None
  8090 ;; Return value:  Size  Location     Type
  8091 ;;		None               void
  8092 ;; Registers used:
  8093 ;;		wreg, fsr2l, fsr2h, status,2, cstack
  8094 ;; Tracked objects:
  8095 ;;		On entry : 0/0
  8096 ;;		On exit  : 0/0
  8097 ;;		Unchanged: 0/0
  8098 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8099 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8100 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8101 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8102 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8103 ;;Total ram usage:        4 bytes
  8104 ;; Hardware stack levels used:    1
  8105 ;; Hardware stack levels required when called:    8
  8106 ;; This function calls:
  8107 ;;		_TickGet
  8108 ;; This function is called by:
  8109 ;;		_ProcessStateDoorIndicatorOpenTooLong
  8110 ;;		_ProcessStateDoorSwitchPressedTooLong
  8111 ;;		_setDoorOpen
  8112 ;;		_HandleReceivedBytes
  8113 ;; This function uses a non-reentrant model
  8114 ;;
  8115                           
  8116                           	psect	text53
  8117  004EEA                     __ptext53:
  8118                           	opt stack 0
  8119  004EEA                     _Beep:
  8120                           	opt stack 20
  8121                           
  8122                           ;Beep.c: 33: m_beepValue = value;
  8123                           
  8124                           ; BSR set to: 0
  8125                           ;incstack = 0
  8126  004EEA  C024  F128         	movff	Beep@value,_m_beepValue
  8127  004EEE  C025  F129         	movff	Beep@value+1,_m_beepValue+1
  8128  004EF2  C026  F12A         	movff	Beep@value+2,_m_beepValue+2
  8129  004EF6  C027  F12B         	movff	Beep@value+3,_m_beepValue+3
  8130                           
  8131                           ;Beep.c: 34: m_beepFlag = 1;
  8132  004EFA  0E01               	movlw	1
  8133  004EFC  0101               	movlb	1	; () banked
  8134  004EFE  6F76               	movwf	_m_beepFlag& (0+255),b
  8135                           
  8136                           ; BSR set to: 1
  8137                           ;Beep.c: 35: m_beepTimer = TickGet();
  8138  004F00  EC9C  F028         	call	_TickGet	;wreg free
  8139  004F04  C01C  F124         	movff	?_TickGet,_m_beepTimer
  8140  004F08  C01D  F125         	movff	?_TickGet+1,_m_beepTimer+1
  8141  004F0C  C01E  F126         	movff	?_TickGet+2,_m_beepTimer+2
  8142  004F10  C01F  F127         	movff	?_TickGet+3,_m_beepTimer+3
  8143                           
  8144                           ;Beep.c: 37: (LATDbits.LATD1) = 1;
  8145  004F14  828C               	bsf	3980,1,c	;volatile
  8146  004F16  0012               	return		;funcret
  8147  004F18                     __end_of_Beep:
  8148                           	opt stack 0
  8149                           tblptru	equ	0xFF8
  8150                           tblptrh	equ	0xFF7
  8151                           tblptrl	equ	0xFF6
  8152                           tablat	equ	0xFF5
  8153                           prodh	equ	0xFF4
  8154                           prodl	equ	0xFF3
  8155                           intcon	equ	0xFF2
  8156                           intcon2	equ	0xFF1
  8157                           postinc0	equ	0xFEE
  8158                           wreg	equ	0xFE8
  8159                           postdec1	equ	0xFE5
  8160                           fsr1h	equ	0xFE2
  8161                           fsr1l	equ	0xFE1
  8162                           indf2	equ	0xFDF
  8163                           postinc2	equ	0xFDE
  8164                           postdec2	equ	0xFDD
  8165                           fsr2h	equ	0xFDA
  8166                           fsr2l	equ	0xFD9
  8167                           status	equ	0xFD8
  8168                           
  8169 ;; *************** function _HandleConnectionResponse *****************
  8170 ;; Defined at:
  8171 ;;		line 660 in file "../src/NDC.c"
  8172 ;; Parameters:    Size  Location     Type
  8173 ;;		None
  8174 ;; Auto vars:     Size  Location     Type
  8175 ;;		None
  8176 ;; Return value:  Size  Location     Type
  8177 ;;		None               void
  8178 ;; Registers used:
  8179 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  8180 ;; Tracked objects:
  8181 ;;		On entry : F/0
  8182 ;;		On exit  : 0/0
  8183 ;;		Unchanged: 0/0
  8184 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8185 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8186 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8187 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8188 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8189 ;;Total ram usage:        0 bytes
  8190 ;; Hardware stack levels used:    1
  8191 ;; Hardware stack levels required when called:   16
  8192 ;; This function calls:
  8193 ;;		_SendGetConfigData
  8194 ;;		_TickGet
  8195 ;;		_UDPGetArray
  8196 ;; This function is called by:
  8197 ;;		_NDCFSM
  8198 ;; This function uses a non-reentrant model
  8199 ;;
  8200                           
  8201                           	psect	text54
  8202  0043E0                     __ptext54:
  8203                           	opt stack 0
  8204  0043E0                     _HandleConnectionResponse:
  8205                           	opt stack 13
  8206                           
  8207                           ; BSR set to: 0
  8208                           ;NDC.c: 663: m_bytesRead = UDPGetArray(m_messageBuffer, m_bytesAvailable);
  8209                           
  8210                           ;incstack = 0
  8211  0043E0  0E41               	movlw	low _m_messageBuffer
  8212  0043E2  6E23               	movwf	UDPGetArray@cData,c
  8213  0043E4  0E03               	movlw	high _m_messageBuffer
  8214  0043E6  6E24               	movwf	UDPGetArray@cData+1,c
  8215  0043E8  C0C9  F025         	movff	_m_bytesAvailable,UDPGetArray@wDataLen
  8216  0043EC  C0CA  F026         	movff	_m_bytesAvailable+1,UDPGetArray@wDataLen+1
  8217  0043F0  EC8D  F021         	call	_UDPGetArray	;wreg free
  8218  0043F4  C023  F0CB         	movff	?_UDPGetArray,_m_bytesRead
  8219  0043F8  C024  F0CC         	movff	?_UDPGetArray+1,_m_bytesRead+1
  8220                           
  8221                           ;NDC.c: 666: if (m_messageBuffer[0] == 0 && m_messageBuffer[1] == 2) {
  8222  0043FC  EE23  F041         	lfsr	2,_m_messageBuffer
  8223  004400  50DF               	movf	indf2,w,c
  8224  004402  A4D8               	btfss	status,2,c
  8225  004404  0012               	return	
  8226  004406  C342  FFE8         	movff	_m_messageBuffer+1,wreg
  8227  00440A  0A02               	xorlw	2
  8228  00440C  A4D8               	btfss	status,2,c
  8229  00440E  0012               	return	
  8230                           
  8231                           ;NDC.c: 667: m_timerState = TickGet();
  8232  004410  EC9C  F028         	call	_TickGet	;wreg free
  8233  004414  C01C  F150         	movff	?_TickGet,_m_timerState
  8234  004418  C01D  F151         	movff	?_TickGet+1,_m_timerState+1
  8235  00441C  C01E  F152         	movff	?_TickGet+2,_m_timerState+2
  8236  004420  C01F  F153         	movff	?_TickGet+3,_m_timerState+3
  8237                           
  8238                           ;NDC.c: 670: SendGetConfigData();
  8239  004424  EC6E  F024         	call	_SendGetConfigData	;wreg free
  8240                           
  8241                           ;NDC.c: 672: if (m_sentBytes > 0) {
  8242  004428  0101               	movlb	1	; () banked
  8243  00442A  BF6D               	btfsc	(_m_sentBytes+1)& (0+255),7,b
  8244  00442C  0012               	return	
  8245  00442E  516D               	movf	(_m_sentBytes+1)& (0+255),w,b
  8246  004430  E103               	bnz	u10560
  8247  004432  056C               	decf	_m_sentBytes& (0+255),w,b
  8248  004434  A0D8               	btfss	status,0,c
  8249  004436  0012               	return	
  8250  004438                     u10560:
  8251                           
  8252                           ; BSR set to: 1
  8253                           ;NDC.c: 674: m_state = STATE_WAIT_FOR_CONFIG_DATA;
  8254  004438  0E03               	movlw	3
  8255  00443A  0100               	movlb	0	; () banked
  8256  00443C  6FD8               	movwf	_m_state& (0+255),b
  8257  00443E  0C03               	retlw	3	;funcret
  8258  004440                     __end_of_HandleConnectionResponse:
  8259                           	opt stack 0
  8260                           tblptru	equ	0xFF8
  8261                           tblptrh	equ	0xFF7
  8262                           tblptrl	equ	0xFF6
  8263                           tablat	equ	0xFF5
  8264                           prodh	equ	0xFF4
  8265                           prodl	equ	0xFF3
  8266                           intcon	equ	0xFF2
  8267                           intcon2	equ	0xFF1
  8268                           postinc0	equ	0xFEE
  8269                           wreg	equ	0xFE8
  8270                           postdec1	equ	0xFE5
  8271                           fsr1h	equ	0xFE2
  8272                           fsr1l	equ	0xFE1
  8273                           indf2	equ	0xFDF
  8274                           postinc2	equ	0xFDE
  8275                           postdec2	equ	0xFDD
  8276                           fsr2h	equ	0xFDA
  8277                           fsr2l	equ	0xFD9
  8278                           status	equ	0xFD8
  8279                           
  8280 ;; *************** function _SendGetConfigData *****************
  8281 ;; Defined at:
  8282 ;;		line 561 in file "../src/NDC.c"
  8283 ;; Parameters:    Size  Location     Type
  8284 ;;		None
  8285 ;; Auto vars:     Size  Location     Type
  8286 ;;		None
  8287 ;; Return value:  Size  Location     Type
  8288 ;;		None               void
  8289 ;; Registers used:
  8290 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  8291 ;; Tracked objects:
  8292 ;;		On entry : 0/0
  8293 ;;		On exit  : 0/0
  8294 ;;		Unchanged: 0/0
  8295 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8296 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8297 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8298 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8299 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8300 ;;Total ram usage:        0 bytes
  8301 ;; Hardware stack levels used:    1
  8302 ;; Hardware stack levels required when called:   15
  8303 ;; This function calls:
  8304 ;;		_SendUDPMessage
  8305 ;; This function is called by:
  8306 ;;		_HandleConnectionResponse
  8307 ;; This function uses a non-reentrant model
  8308 ;;
  8309                           
  8310                           	psect	text55
  8311  0048DC                     __ptext55:
  8312                           	opt stack 0
  8313  0048DC                     _SendGetConfigData:
  8314                           	opt stack 13
  8315                           
  8316                           ;NDC.c: 562: m_messageBuffer[0] = 0;
  8317                           
  8318                           ;incstack = 0
  8319  0048DC  0E00               	movlw	0
  8320  0048DE  CFE8 F341          	movff	wreg,_m_messageBuffer
  8321                           
  8322                           ;NDC.c: 563: m_messageBuffer[1] = 0x20;
  8323  0048E2  0E20               	movlw	32
  8324  0048E4  CFE8 F342          	movff	wreg,_m_messageBuffer+1
  8325                           
  8326                           ;NDC.c: 564: m_messageBuffer[2] = g_serializedMACAddress[0];
  8327  0048E8  EE23  F043         	lfsr	2,_m_messageBuffer+2
  8328  0048EC  C0F9  FFDF         	movff	_g_serializedMACAddress,indf2
  8329                           
  8330                           ;NDC.c: 565: m_messageBuffer[3] = g_serializedMACAddress[1];
  8331  0048F0  EE23  F044         	lfsr	2,_m_messageBuffer+3
  8332  0048F4  C0FA  FFDF         	movff	_g_serializedMACAddress+1,indf2
  8333                           
  8334                           ;NDC.c: 566: m_messageBuffer[4] = g_serializedMACAddress[2];
  8335  0048F8  EE23  F045         	lfsr	2,_m_messageBuffer+4
  8336  0048FC  C0FB  FFDF         	movff	_g_serializedMACAddress+2,indf2
  8337                           
  8338                           ;NDC.c: 567: m_messageBuffer[5] = g_serializedMACAddress[3];
  8339  004900  EE23  F046         	lfsr	2,_m_messageBuffer+5
  8340  004904  C0FC  FFDF         	movff	_g_serializedMACAddress+3,indf2
  8341                           
  8342                           ;NDC.c: 568: m_messageBuffer[6] = g_serializedMACAddress[4];
  8343  004908  EE23  F047         	lfsr	2,_m_messageBuffer+6
  8344  00490C  C0FD  FFDF         	movff	_g_serializedMACAddress+4,indf2
  8345                           
  8346                           ;NDC.c: 569: m_messageBuffer[7] = g_serializedMACAddress[5];
  8347  004910  EE23  F048         	lfsr	2,_m_messageBuffer+7
  8348  004914  C0FE  FFDF         	movff	_g_serializedMACAddress+5,indf2
  8349                           
  8350                           ;NDC.c: 571: SendUDPMessage(m_messageBuffer, 8, m_udpSocket);
  8351  004918  0E41               	movlw	low _m_messageBuffer
  8352  00491A  0101               	movlb	1	; () banked
  8353  00491C  6FE8               	movwf	SendUDPMessage@message& (0+255),b
  8354  00491E  0E03               	movlw	high _m_messageBuffer
  8355  004920  6FE9               	movwf	(SendUDPMessage@message+1)& (0+255),b
  8356  004922  6BEB               	clrf	(SendUDPMessage@messageSize+1)& (0+255),b
  8357  004924  0E08               	movlw	8
  8358  004926  6FEA               	movwf	SendUDPMessage@messageSize& (0+255),b
  8359  004928  C041  F1EC         	movff	_m_udpSocket,SendUDPMessage@udpSocket
  8360  00492C  EF65  F023         	goto	_SendUDPMessage	;wreg free
  8361  004930                     __end_of_SendGetConfigData:
  8362                           	opt stack 0
  8363                           tblptru	equ	0xFF8
  8364                           tblptrh	equ	0xFF7
  8365                           tblptrl	equ	0xFF6
  8366                           tablat	equ	0xFF5
  8367                           prodh	equ	0xFF4
  8368                           prodl	equ	0xFF3
  8369                           intcon	equ	0xFF2
  8370                           intcon2	equ	0xFF1
  8371                           postinc0	equ	0xFEE
  8372                           wreg	equ	0xFE8
  8373                           postdec1	equ	0xFE5
  8374                           fsr1h	equ	0xFE2
  8375                           fsr1l	equ	0xFE1
  8376                           indf2	equ	0xFDF
  8377                           postinc2	equ	0xFDE
  8378                           postdec2	equ	0xFDD
  8379                           fsr2h	equ	0xFDA
  8380                           fsr2l	equ	0xFD9
  8381                           status	equ	0xFD8
  8382                           
  8383 ;; *************** function _CheckWaitForCodeTimer *****************
  8384 ;; Defined at:
  8385 ;;		line 226 in file "../src/NDC.c"
  8386 ;; Parameters:    Size  Location     Type
  8387 ;;		None
  8388 ;; Auto vars:     Size  Location     Type
  8389 ;;		None
  8390 ;; Return value:  Size  Location     Type
  8391 ;;		None               void
  8392 ;; Registers used:
  8393 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  8394 ;; Tracked objects:
  8395 ;;		On entry : 0/1
  8396 ;;		On exit  : E/0
  8397 ;;		Unchanged: 0/0
  8398 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8399 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8400 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8401 ;;      Temps:          0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8402 ;;      Totals:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8403 ;;Total ram usage:       12 bytes
  8404 ;; Hardware stack levels used:    1
  8405 ;; Hardware stack levels required when called:    8
  8406 ;; This function calls:
  8407 ;;		_TickGet
  8408 ;; This function is called by:
  8409 ;;		_NDCFSM
  8410 ;; This function uses a non-reentrant model
  8411 ;;
  8412                           
  8413                           	psect	text56
  8414  002EB6                     __ptext56:
  8415                           	opt stack 0
  8416  002EB6                     _CheckWaitForCodeTimer:
  8417                           	opt stack 21
  8418                           
  8419                           ;NDC.c: 228: if (m_timerWaitForPinCode == 0)
  8420                           
  8421                           ;incstack = 0
  8422  002EB6  0101               	movlb	1	; () banked
  8423  002EB8  5154               	movf	_m_timerWaitForPinCode& (0+255),w,b
  8424  002EBA  1155               	iorwf	(_m_timerWaitForPinCode+1)& (0+255),w,b
  8425  002EBC  1156               	iorwf	(_m_timerWaitForPinCode+2)& (0+255),w,b
  8426  002EBE  1157               	iorwf	(_m_timerWaitForPinCode+3)& (0+255),w,b
  8427  002EC0  E101               	bnz	l11000
  8428  002EC2  0012               	return	
  8429  002EC4                     l11000:
  8430                           
  8431                           ; BSR set to: 1
  8432                           ;NDC.c: 232: if (TickGet() - m_timerWaitForPinCode > ((((((40000000ul) / 4)+128ull)/256u
      +                          ll)) * m_waitForCodeTime)) {
  8433  002EC4  EC9C  F028         	call	_TickGet	;wreg free
  8434  002EC8  0101               	movlb	1	; () banked
  8435  002ECA  5154               	movf	_m_timerWaitForPinCode& (0+255),w,b
  8436  002ECC  5C1C               	subwf	?_TickGet,w,c
  8437  002ECE  0100               	movlb	0	; () banked
  8438  002ED0  6F60               	movwf	??_CheckWaitForCodeTimer& (0+255),b
  8439  002ED2  0101               	movlb	1	; () banked
  8440  002ED4  5155               	movf	(_m_timerWaitForPinCode+1)& (0+255),w,b
  8441  002ED6  581D               	subwfb	?_TickGet+1,w,c
  8442  002ED8  0100               	movlb	0	; () banked
  8443  002EDA  6F61               	movwf	(??_CheckWaitForCodeTimer+1)& (0+255),b
  8444  002EDC  0101               	movlb	1	; () banked
  8445  002EDE  5156               	movf	(_m_timerWaitForPinCode+2)& (0+255),w,b
  8446  002EE0  581E               	subwfb	?_TickGet+2,w,c
  8447  002EE2  0100               	movlb	0	; () banked
  8448  002EE4  6F62               	movwf	(??_CheckWaitForCodeTimer+2)& (0+255),b
  8449  002EE6  0101               	movlb	1	; () banked
  8450  002EE8  5157               	movf	(_m_timerWaitForPinCode+3)& (0+255),w,b
  8451  002EEA  581F               	subwfb	?_TickGet+3,w,c
  8452  002EEC  0100               	movlb	0	; () banked
  8453  002EEE  6F63               	movwf	(??_CheckWaitForCodeTimer+3)& (0+255),b
  8454  002EF0  C16E  F064         	movff	_m_waitForCodeTime,??_CheckWaitForCodeTimer+4
  8455  002EF4  C16F  F065         	movff	_m_waitForCodeTime+1,??_CheckWaitForCodeTimer+5
  8456  002EF8  0E00               	movlw	0
  8457  002EFA  BF65               	btfsc	(??_CheckWaitForCodeTimer+5)& (0+255),7,b
  8458  002EFC  0EFF               	movlw	255
  8459  002EFE  6F66               	movwf	(??_CheckWaitForCodeTimer+6)& (0+255),b
  8460  002F00  6F67               	movwf	(??_CheckWaitForCodeTimer+7)& (0+255),b
  8461  002F02  0E97               	movlw	151
  8462  002F04  0364               	mulwf	(??_CheckWaitForCodeTimer+4)& (0+255),b
  8463  002F06  CFF3 F068          	movff	prodl,??_CheckWaitForCodeTimer+8
  8464  002F0A  CFF4 F069          	movff	prodh,??_CheckWaitForCodeTimer+9
  8465  002F0E  6B6A               	clrf	(??_CheckWaitForCodeTimer+10)& (0+255),b
  8466  002F10  6B6B               	clrf	(??_CheckWaitForCodeTimer+11)& (0+255),b
  8467  002F12  0365               	mulwf	(??_CheckWaitForCodeTimer+5)& (0+255),b
  8468  002F14  50F3               	movf	prodl,w,c
  8469  002F16  2769               	addwf	(??_CheckWaitForCodeTimer+9)& (0+255),f,b
  8470  002F18  50F4               	movf	prodh,w,c
  8471  002F1A  236A               	addwfc	(??_CheckWaitForCodeTimer+10)& (0+255),f,b
  8472  002F1C  0E00               	movlw	0
  8473  002F1E  236B               	addwfc	(??_CheckWaitForCodeTimer+11)& (0+255),f,b
  8474  002F20  0E98               	movlw	152
  8475  002F22  0364               	mulwf	(??_CheckWaitForCodeTimer+4)& (0+255),b
  8476  002F24  50F3               	movf	prodl,w,c
  8477  002F26  2769               	addwf	(??_CheckWaitForCodeTimer+9)& (0+255),f,b
  8478  002F28  50F4               	movf	prodh,w,c
  8479  002F2A  236A               	addwfc	(??_CheckWaitForCodeTimer+10)& (0+255),f,b
  8480  002F2C  0E00               	movlw	0
  8481  002F2E  236B               	addwfc	(??_CheckWaitForCodeTimer+11)& (0+255),f,b
  8482  002F30  0E97               	movlw	151
  8483  002F32  0366               	mulwf	(??_CheckWaitForCodeTimer+6)& (0+255),b
  8484  002F34  50F3               	movf	prodl,w,c
  8485  002F36  276A               	addwf	(??_CheckWaitForCodeTimer+10)& (0+255),f,b
  8486  002F38  50F4               	movf	prodh,w,c
  8487  002F3A  236B               	addwfc	(??_CheckWaitForCodeTimer+11)& (0+255),f,b
  8488  002F3C  0E98               	movlw	152
  8489  002F3E  0365               	mulwf	(??_CheckWaitForCodeTimer+5)& (0+255),b
  8490  002F40  50F3               	movf	prodl,w,c
  8491  002F42  276A               	addwf	(??_CheckWaitForCodeTimer+10)& (0+255),f,b
  8492  002F44  50F4               	movf	prodh,w,c
  8493  002F46  236B               	addwfc	(??_CheckWaitForCodeTimer+11)& (0+255),f,b
  8494  002F48  0E00               	movlw	0
  8495  002F4A  0364               	mulwf	(??_CheckWaitForCodeTimer+4)& (0+255),b
  8496  002F4C  50F3               	movf	prodl,w,c
  8497  002F4E  276A               	addwf	(??_CheckWaitForCodeTimer+10)& (0+255),f,b
  8498  002F50  50F4               	movf	prodh,w,c
  8499  002F52  236B               	addwfc	(??_CheckWaitForCodeTimer+11)& (0+255),f,b
  8500  002F54  0E97               	movlw	151
  8501  002F56  0367               	mulwf	(??_CheckWaitForCodeTimer+7)& (0+255),b
  8502  002F58  50F3               	movf	prodl,w,c
  8503  002F5A  276B               	addwf	(??_CheckWaitForCodeTimer+11)& (0+255),f,b
  8504  002F5C  0E98               	movlw	152
  8505  002F5E  0366               	mulwf	(??_CheckWaitForCodeTimer+6)& (0+255),b
  8506  002F60  50F3               	movf	prodl,w,c
  8507  002F62  276B               	addwf	(??_CheckWaitForCodeTimer+11)& (0+255),f,b
  8508  002F64  0E00               	movlw	0
  8509  002F66  0365               	mulwf	(??_CheckWaitForCodeTimer+5)& (0+255),b
  8510  002F68  50F3               	movf	prodl,w,c
  8511  002F6A  276B               	addwf	(??_CheckWaitForCodeTimer+11)& (0+255),f,b
  8512  002F6C  0E00               	movlw	0
  8513  002F6E  0364               	mulwf	(??_CheckWaitForCodeTimer+4)& (0+255),b
  8514  002F70  50F3               	movf	prodl,w,c
  8515  002F72  276B               	addwf	(??_CheckWaitForCodeTimer+11)& (0+255),f,b
  8516  002F74  5160               	movf	??_CheckWaitForCodeTimer& (0+255),w,b
  8517  002F76  5D68               	subwf	(??_CheckWaitForCodeTimer+8)& (0+255),w,b
  8518  002F78  5161               	movf	(??_CheckWaitForCodeTimer+1)& (0+255),w,b
  8519  002F7A  5969               	subwfb	(??_CheckWaitForCodeTimer+9)& (0+255),w,b
  8520  002F7C  5162               	movf	(??_CheckWaitForCodeTimer+2)& (0+255),w,b
  8521  002F7E  596A               	subwfb	(??_CheckWaitForCodeTimer+10)& (0+255),w,b
  8522  002F80  5163               	movf	(??_CheckWaitForCodeTimer+3)& (0+255),w,b
  8523  002F82  596B               	subwfb	(??_CheckWaitForCodeTimer+11)& (0+255),w,b
  8524  002F84  B0D8               	btfsc	status,0,c
  8525  002F86  0012               	return	
  8526                           
  8527                           ; BSR set to: 0
  8528                           ;NDC.c: 233: m_flashDiodeState = 0;
  8529  002F88  6BD5               	clrf	_m_flashDiodeState& (0+255),b
  8530                           
  8531                           ;NDC.c: 234: m_flashDiodeEnable = 0;
  8532  002F8A  6A40               	clrf	_m_flashDiodeEnable,c
  8533                           
  8534                           ;NDC.c: 235: m_timerWaitForPinCode = 0;
  8535  002F8C  0101               	movlb	1	; () banked
  8536  002F8E  6B54               	clrf	_m_timerWaitForPinCode& (0+255),b
  8537  002F90  6B55               	clrf	(_m_timerWaitForPinCode+1)& (0+255),b
  8538  002F92  6B56               	clrf	(_m_timerWaitForPinCode+2)& (0+255),b
  8539  002F94  6B57               	clrf	(_m_timerWaitForPinCode+3)& (0+255),b
  8540                           
  8541                           ;NDC.c: 237: (LATDbits.LATD2) = 0;
  8542  002F96  948C               	bcf	3980,2,c	;volatile
  8543  002F98  0012               	return		;funcret
  8544  002F9A                     __end_of_CheckWaitForCodeTimer:
  8545                           	opt stack 0
  8546                           tblptru	equ	0xFF8
  8547                           tblptrh	equ	0xFF7
  8548                           tblptrl	equ	0xFF6
  8549                           tablat	equ	0xFF5
  8550                           prodh	equ	0xFF4
  8551                           prodl	equ	0xFF3
  8552                           intcon	equ	0xFF2
  8553                           intcon2	equ	0xFF1
  8554                           postinc0	equ	0xFEE
  8555                           wreg	equ	0xFE8
  8556                           postdec1	equ	0xFE5
  8557                           fsr1h	equ	0xFE2
  8558                           fsr1l	equ	0xFE1
  8559                           indf2	equ	0xFDF
  8560                           postinc2	equ	0xFDE
  8561                           postdec2	equ	0xFDD
  8562                           fsr2h	equ	0xFDA
  8563                           fsr2l	equ	0xFD9
  8564                           status	equ	0xFD8
  8565                           
  8566 ;; *************** function _CheckKeypad *****************
  8567 ;; Defined at:
  8568 ;;		line 257 in file "../src/NDC.c"
  8569 ;; Parameters:    Size  Location     Type
  8570 ;;		None
  8571 ;; Auto vars:     Size  Location     Type
  8572 ;;  buff            8    0[BANK2 ] unsigned char [8]
  8573 ;;  wiegandCode     4   14[BANK2 ] long 
  8574 ;;  tmp             4    0        long 
  8575 ;;  index           2   18[BANK2 ] int 
  8576 ;;  i               2   12[BANK2 ] int 
  8577 ;;  stopIndex       2   10[BANK2 ] int 
  8578 ;;  messageSize     2    8[BANK2 ] int 
  8579 ;; Return value:  Size  Location     Type
  8580 ;;		None               void
  8581 ;; Registers used:
  8582 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  8583 ;; Tracked objects:
  8584 ;;		On entry : 0/0
  8585 ;;		On exit  : D/0
  8586 ;;		Unchanged: 0/0
  8587 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8588 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8589 ;;      Locals:         0       0       0      20       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8590 ;;      Temps:          0       0       3       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8591 ;;      Totals:         0       0       3      20       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8592 ;;Total ram usage:       23 bytes
  8593 ;; Hardware stack levels used:    1
  8594 ;; Hardware stack levels required when called:   15
  8595 ;; This function calls:
  8596 ;;		_GetWiegandCode
  8597 ;;		_SendUDPMessage
  8598 ;;		_TickGet
  8599 ;;		_ltoa
  8600 ;;		_memset
  8601 ;; This function is called by:
  8602 ;;		_NDCFSM
  8603 ;; This function uses a non-reentrant model
  8604 ;;
  8605                           
  8606                           	psect	text57
  8607  001670                     __ptext57:
  8608                           	opt stack 0
  8609  001670                     _CheckKeypad:
  8610                           	opt stack 14
  8611                           
  8612                           ;NDC.c: 258: long wiegandCode;
  8613                           ;NDC.c: 259: long tmp;
  8614                           ;NDC.c: 260: char buff[8];
  8615                           ;NDC.c: 261: int index;
  8616                           ;NDC.c: 262: int i, stopIndex;
  8617                           ;NDC.c: 263: int messageSize;
  8618                           ;NDC.c: 265: if (m_state != STATE_CONNECTED)
  8619                           
  8620                           ;incstack = 0
  8621  001670  0E04               	movlw	4
  8622  001672  0100               	movlb	0	; () banked
  8623  001674  19D8               	xorwf	_m_state& (0+255),w,b
  8624  001676  E001               	bz	l11016
  8625  001678  0012               	return	
  8626  00167A                     l11016:
  8627                           
  8628                           ; BSR set to: 0
  8629                           ;NDC.c: 268: if (g_wiegandFlag == 1) {
  8630  00167A  05D0               	decf	_g_wiegandFlag& (0+255),w,b
  8631  00167C  A4D8               	btfss	status,2,c
  8632  00167E  0012               	return	
  8633                           
  8634                           ; BSR set to: 0
  8635                           ;NDC.c: 269: wiegandCode = GetWiegandCode();
  8636  001680  EC37  F025         	call	_GetWiegandCode	;wreg free
  8637  001684  C01C  F2F4         	movff	?_GetWiegandCode,CheckKeypad@wiegandCode
  8638  001688  C01D  F2F5         	movff	?_GetWiegandCode+1,CheckKeypad@wiegandCode+1
  8639  00168C  C01E  F2F6         	movff	?_GetWiegandCode+2,CheckKeypad@wiegandCode+2
  8640  001690  C01F  F2F7         	movff	?_GetWiegandCode+3,CheckKeypad@wiegandCode+3
  8641                           
  8642                           ; BSR set to: 0
  8643                           ;NDC.c: 273: if (wiegandCode > 12) {
  8644  001694  0102               	movlb	2	; () banked
  8645  001696  BFF7               	btfsc	(CheckKeypad@wiegandCode+3)& (0+255),7,b
  8646  001698  D0CC               	goto	l11096
  8647  00169A  51F7               	movf	(CheckKeypad@wiegandCode+3)& (0+255),w,b
  8648  00169C  11F6               	iorwf	(CheckKeypad@wiegandCode+2)& (0+255),w,b
  8649  00169E  11F5               	iorwf	(CheckKeypad@wiegandCode+1)& (0+255),w,b
  8650  0016A0  E104               	bnz	u10360
  8651  0016A2  0E0D               	movlw	13
  8652  0016A4  5DF4               	subwf	CheckKeypad@wiegandCode& (0+255),w,b
  8653  0016A6  E201 D0C4          	bnc	l11096
  8654  0016AA                     u10360:
  8655                           
  8656                           ; BSR set to: 2
  8657                           ;NDC.c: 276: tmp = wiegandCode;
  8658  0016AA  0100               	movlb	0	; () banked
  8659  0016AC  6BD2               	clrf	_m_codeLength& (0+255),b
  8660                           
  8661                           ; BSR set to: 0
  8662                           ;NDC.c: 278: memset((void*) buff, 0, 8);
  8663  0016AE  0EE6               	movlw	low CheckKeypad@buff
  8664  0016B0  6E1C               	movwf	memset@p1,c
  8665  0016B2  0E02               	movlw	high CheckKeypad@buff
  8666  0016B4  6E1D               	movwf	memset@p1+1,c
  8667  0016B6  6A1F               	clrf	memset@c+1,c
  8668  0016B8  6A1E               	clrf	memset@c,c
  8669  0016BA  6A21               	clrf	memset@n+1,c
  8670  0016BC  0E08               	movlw	8
  8671  0016BE  6E20               	movwf	memset@n,c
  8672  0016C0  EC10  F028         	call	_memset	;wreg free
  8673                           
  8674                           ;NDC.c: 280: ltoa(wiegandCode, buff, 10);
  8675  0016C4  C2F4  F06D         	movff	CheckKeypad@wiegandCode,ltoa@buf
  8676  0016C8  C2F5  F06E         	movff	CheckKeypad@wiegandCode+1,ltoa@buf+1
  8677  0016CC  0EE6               	movlw	low CheckKeypad@buff
  8678  0016CE  6F6F               	movwf	ltoa@val& (0+255),b
  8679  0016D0  0E02               	movlw	high CheckKeypad@buff
  8680  0016D2  6F70               	movwf	(ltoa@val+1)& (0+255),b
  8681  0016D4  0E00               	movlw	low (CheckKeypad@buff shr (0+16))
  8682  0016D6  6F71               	movwf	(ltoa@val+2)& (0+255),b
  8683  0016D8  0E00               	movlw	high (CheckKeypad@buff shr (0+16))
  8684  0016DA  6F72               	movwf	(ltoa@val+3)& (0+255),b
  8685  0016DC  6B74               	clrf	(ltoa@base+1)& (0+255),b
  8686  0016DE  0E0A               	movlw	10
  8687  0016E0  6F73               	movwf	ltoa@base& (0+255),b
  8688  0016E2  ECF7  F025         	call	_ltoa	;wreg free
  8689                           
  8690                           ; BSR set to: 0
  8691                           ;NDC.c: 284: index = 0;
  8692  0016E6  0102               	movlb	2	; () banked
  8693  0016E8  6BF8               	clrf	CheckKeypad@index& (0+255),b
  8694  0016EA  6BF9               	clrf	(CheckKeypad@index+1)& (0+255),b
  8695                           
  8696                           ; BSR set to: 2
  8697                           ;NDC.c: 286: m_messageBuffer[index++] = 0;
  8698  0016EC  0E00               	movlw	0
  8699  0016EE  CFE8 F341          	movff	wreg,_m_messageBuffer
  8700                           
  8701                           ; BSR set to: 2
  8702  0016F2  4BF8               	infsnz	CheckKeypad@index& (0+255),f,b
  8703  0016F4  2BF9               	incf	(CheckKeypad@index+1)& (0+255),f,b
  8704                           
  8705                           ; BSR set to: 2
  8706                           ;NDC.c: 287: m_messageBuffer[index++] = 5;
  8707  0016F6  0E41               	movlw	low _m_messageBuffer
  8708  0016F8  25F8               	addwf	CheckKeypad@index& (0+255),w,b
  8709  0016FA  6ED9               	movwf	fsr2l,c
  8710  0016FC  0E03               	movlw	high _m_messageBuffer
  8711  0016FE  21F9               	addwfc	(CheckKeypad@index+1)& (0+255),w,b
  8712  001700  6EDA               	movwf	fsr2h,c
  8713  001702  0E05               	movlw	5
  8714  001704  6EDF               	movwf	indf2,c
  8715                           
  8716                           ; BSR set to: 2
  8717  001706  4BF8               	infsnz	CheckKeypad@index& (0+255),f,b
  8718  001708  2BF9               	incf	(CheckKeypad@index+1)& (0+255),f,b
  8719                           
  8720                           ; BSR set to: 2
  8721                           ;NDC.c: 288: m_messageBuffer[index++] = g_serializedMACAddress[0];
  8722  00170A  0E41               	movlw	low _m_messageBuffer
  8723  00170C  25F8               	addwf	CheckKeypad@index& (0+255),w,b
  8724  00170E  6ED9               	movwf	fsr2l,c
  8725  001710  0E03               	movlw	high _m_messageBuffer
  8726  001712  21F9               	addwfc	(CheckKeypad@index+1)& (0+255),w,b
  8727  001714  6EDA               	movwf	fsr2h,c
  8728  001716  C0F9  FFDF         	movff	_g_serializedMACAddress,indf2
  8729                           
  8730                           ; BSR set to: 2
  8731  00171A  4BF8               	infsnz	CheckKeypad@index& (0+255),f,b
  8732  00171C  2BF9               	incf	(CheckKeypad@index+1)& (0+255),f,b
  8733                           
  8734                           ; BSR set to: 2
  8735                           ;NDC.c: 289: m_messageBuffer[index++] = g_serializedMACAddress[1];
  8736  00171E  0E41               	movlw	low _m_messageBuffer
  8737  001720  25F8               	addwf	CheckKeypad@index& (0+255),w,b
  8738  001722  6ED9               	movwf	fsr2l,c
  8739  001724  0E03               	movlw	high _m_messageBuffer
  8740  001726  21F9               	addwfc	(CheckKeypad@index+1)& (0+255),w,b
  8741  001728  6EDA               	movwf	fsr2h,c
  8742  00172A  C0FA  FFDF         	movff	_g_serializedMACAddress+1,indf2
  8743                           
  8744                           ; BSR set to: 2
  8745  00172E  4BF8               	infsnz	CheckKeypad@index& (0+255),f,b
  8746  001730  2BF9               	incf	(CheckKeypad@index+1)& (0+255),f,b
  8747                           
  8748                           ; BSR set to: 2
  8749                           ;NDC.c: 290: m_messageBuffer[index++] = g_serializedMACAddress[2];
  8750  001732  0E41               	movlw	low _m_messageBuffer
  8751  001734  25F8               	addwf	CheckKeypad@index& (0+255),w,b
  8752  001736  6ED9               	movwf	fsr2l,c
  8753  001738  0E03               	movlw	high _m_messageBuffer
  8754  00173A  21F9               	addwfc	(CheckKeypad@index+1)& (0+255),w,b
  8755  00173C  6EDA               	movwf	fsr2h,c
  8756  00173E  C0FB  FFDF         	movff	_g_serializedMACAddress+2,indf2
  8757                           
  8758                           ; BSR set to: 2
  8759  001742  4BF8               	infsnz	CheckKeypad@index& (0+255),f,b
  8760  001744  2BF9               	incf	(CheckKeypad@index+1)& (0+255),f,b
  8761                           
  8762                           ; BSR set to: 2
  8763                           ;NDC.c: 291: m_messageBuffer[index++] = g_serializedMACAddress[3];
  8764  001746  0E41               	movlw	low _m_messageBuffer
  8765  001748  25F8               	addwf	CheckKeypad@index& (0+255),w,b
  8766  00174A  6ED9               	movwf	fsr2l,c
  8767  00174C  0E03               	movlw	high _m_messageBuffer
  8768  00174E  21F9               	addwfc	(CheckKeypad@index+1)& (0+255),w,b
  8769  001750  6EDA               	movwf	fsr2h,c
  8770  001752  C0FC  FFDF         	movff	_g_serializedMACAddress+3,indf2
  8771                           
  8772                           ; BSR set to: 2
  8773  001756  4BF8               	infsnz	CheckKeypad@index& (0+255),f,b
  8774  001758  2BF9               	incf	(CheckKeypad@index+1)& (0+255),f,b
  8775                           
  8776                           ; BSR set to: 2
  8777                           ;NDC.c: 292: m_messageBuffer[index++] = g_serializedMACAddress[4];
  8778  00175A  0E41               	movlw	low _m_messageBuffer
  8779  00175C  25F8               	addwf	CheckKeypad@index& (0+255),w,b
  8780  00175E  6ED9               	movwf	fsr2l,c
  8781  001760  0E03               	movlw	high _m_messageBuffer
  8782  001762  21F9               	addwfc	(CheckKeypad@index+1)& (0+255),w,b
  8783  001764  6EDA               	movwf	fsr2h,c
  8784  001766  C0FD  FFDF         	movff	_g_serializedMACAddress+4,indf2
  8785                           
  8786                           ; BSR set to: 2
  8787  00176A  4BF8               	infsnz	CheckKeypad@index& (0+255),f,b
  8788  00176C  2BF9               	incf	(CheckKeypad@index+1)& (0+255),f,b
  8789                           
  8790                           ; BSR set to: 2
  8791                           ;NDC.c: 293: m_messageBuffer[index++] = g_serializedMACAddress[5];
  8792  00176E  0E41               	movlw	low _m_messageBuffer
  8793  001770  25F8               	addwf	CheckKeypad@index& (0+255),w,b
  8794  001772  6ED9               	movwf	fsr2l,c
  8795  001774  0E03               	movlw	high _m_messageBuffer
  8796  001776  21F9               	addwfc	(CheckKeypad@index+1)& (0+255),w,b
  8797  001778  6EDA               	movwf	fsr2h,c
  8798  00177A  C0FE  FFDF         	movff	_g_serializedMACAddress+5,indf2
  8799                           
  8800                           ; BSR set to: 2
  8801  00177E  4BF8               	infsnz	CheckKeypad@index& (0+255),f,b
  8802  001780  2BF9               	incf	(CheckKeypad@index+1)& (0+255),f,b
  8803                           
  8804                           ; BSR set to: 2
  8805                           ;NDC.c: 295: m_messageBuffer[index++] = 8;
  8806  001782  0E41               	movlw	low _m_messageBuffer
  8807  001784  25F8               	addwf	CheckKeypad@index& (0+255),w,b
  8808  001786  6ED9               	movwf	fsr2l,c
  8809  001788  0E03               	movlw	high _m_messageBuffer
  8810  00178A  21F9               	addwfc	(CheckKeypad@index+1)& (0+255),w,b
  8811  00178C  6EDA               	movwf	fsr2h,c
  8812  00178E  0E08               	movlw	8
  8813  001790  6EDF               	movwf	indf2,c
  8814                           
  8815                           ; BSR set to: 2
  8816  001792  4BF8               	infsnz	CheckKeypad@index& (0+255),f,b
  8817  001794  2BF9               	incf	(CheckKeypad@index+1)& (0+255),f,b
  8818                           
  8819                           ; BSR set to: 2
  8820                           ;NDC.c: 297: for (stopIndex = 7; stopIndex > 0; stopIndex--) {
  8821  001796  6BF1               	clrf	(CheckKeypad@stopIndex+1)& (0+255),b
  8822  001798  0E07               	movlw	7
  8823  00179A  6FF0               	movwf	CheckKeypad@stopIndex& (0+255),b
  8824  00179C                     l11070:
  8825                           
  8826                           ; BSR set to: 2
  8827                           ;NDC.c: 298: if (buff[stopIndex] != 0)
  8828  00179C  0EE6               	movlw	low CheckKeypad@buff
  8829  00179E  25F0               	addwf	CheckKeypad@stopIndex& (0+255),w,b
  8830  0017A0  6ED9               	movwf	fsr2l,c
  8831  0017A2  0E02               	movlw	high CheckKeypad@buff
  8832  0017A4  21F1               	addwfc	(CheckKeypad@stopIndex+1)& (0+255),w,b
  8833  0017A6  6EDA               	movwf	fsr2h,c
  8834  0017A8  50DF               	movf	indf2,w,c
  8835  0017AA  E112               	bnz	l460
  8836                           
  8837                           ; BSR set to: 2
  8838                           ;NDC.c: 301: m_messageBuffer[index++] = 0;
  8839  0017AC  0E41               	movlw	low _m_messageBuffer
  8840  0017AE  25F8               	addwf	CheckKeypad@index& (0+255),w,b
  8841  0017B0  6ED9               	movwf	fsr2l,c
  8842  0017B2  0E03               	movlw	high _m_messageBuffer
  8843  0017B4  21F9               	addwfc	(CheckKeypad@index+1)& (0+255),w,b
  8844  0017B6  6EDA               	movwf	fsr2h,c
  8845  0017B8  6ADF               	clrf	indf2,c
  8846                           
  8847                           ; BSR set to: 2
  8848  0017BA  4BF8               	infsnz	CheckKeypad@index& (0+255),f,b
  8849  0017BC  2BF9               	incf	(CheckKeypad@index+1)& (0+255),f,b
  8850                           
  8851                           ; BSR set to: 2
  8852  0017BE  07F0               	decf	CheckKeypad@stopIndex& (0+255),f,b
  8853  0017C0  A0D8               	btfss	status,0,c
  8854  0017C2  07F1               	decf	(CheckKeypad@stopIndex+1)& (0+255),f,b
  8855                           
  8856                           ; BSR set to: 2
  8857  0017C4  BFF1               	btfsc	(CheckKeypad@stopIndex+1)& (0+255),7,b
  8858  0017C6  D004               	goto	l460
  8859  0017C8  51F1               	movf	(CheckKeypad@stopIndex+1)& (0+255),w,b
  8860  0017CA  E1E8               	bnz	l11070
  8861  0017CC  05F0               	decf	CheckKeypad@stopIndex& (0+255),w,b
  8862  0017CE  E2E6               	bc	l11070
  8863  0017D0                     l460:
  8864                           
  8865                           ; BSR set to: 2
  8866                           ;NDC.c: 302: }
  8867                           ;NDC.c: 304: for (i = 0; i <= stopIndex; i++) {
  8868  0017D0  6BF2               	clrf	CheckKeypad@i& (0+255),b
  8869  0017D2  6BF3               	clrf	(CheckKeypad@i+1)& (0+255),b
  8870  0017D4  D014               	goto	l11088
  8871  0017D6                     l11082:
  8872                           
  8873                           ; BSR set to: 1
  8874                           ;NDC.c: 305: m_messageBuffer[index++] = buff[i] - 0x30;
  8875  0017D6  0E41               	movlw	low _m_messageBuffer
  8876  0017D8  0102               	movlb	2	; () banked
  8877  0017DA  25F8               	addwf	CheckKeypad@index& (0+255),w,b
  8878  0017DC  6ED9               	movwf	fsr2l,c
  8879  0017DE  0E03               	movlw	high _m_messageBuffer
  8880  0017E0  21F9               	addwfc	(CheckKeypad@index+1)& (0+255),w,b
  8881  0017E2  6EDA               	movwf	fsr2h,c
  8882  0017E4  0EE6               	movlw	low CheckKeypad@buff
  8883  0017E6  25F2               	addwf	CheckKeypad@i& (0+255),w,b
  8884  0017E8  6EE1               	movwf	fsr1l,c
  8885  0017EA  0E02               	movlw	high CheckKeypad@buff
  8886  0017EC  21F3               	addwfc	(CheckKeypad@i+1)& (0+255),w,b
  8887  0017EE  6EE2               	movwf	fsr1h,c
  8888  0017F0  50E7               	movf	indf1,w,c
  8889  0017F2  0FD0               	addlw	208
  8890  0017F4  6EDF               	movwf	indf2,c
  8891                           
  8892                           ; BSR set to: 2
  8893  0017F6  4BF8               	infsnz	CheckKeypad@index& (0+255),f,b
  8894  0017F8  2BF9               	incf	(CheckKeypad@index+1)& (0+255),f,b
  8895                           
  8896                           ; BSR set to: 2
  8897  0017FA  4BF2               	infsnz	CheckKeypad@i& (0+255),f,b
  8898  0017FC  2BF3               	incf	(CheckKeypad@i+1)& (0+255),f,b
  8899  0017FE                     l11088:
  8900                           
  8901                           ; BSR set to: 2
  8902  0017FE  51F2               	movf	CheckKeypad@i& (0+255),w,b
  8903  001800  5DF0               	subwf	CheckKeypad@stopIndex& (0+255),w,b
  8904  001802  51F1               	movf	(CheckKeypad@stopIndex+1)& (0+255),w,b
  8905  001804  0A80               	xorlw	128
  8906  001806  0101               	movlb	1	; () banked
  8907  001808  6FED               	movwf	??_CheckKeypad& (0+255),b
  8908  00180A  0102               	movlb	2	; () banked
  8909  00180C  51F3               	movf	(CheckKeypad@i+1)& (0+255),w,b
  8910  00180E  0A80               	xorlw	128
  8911  001810  0101               	movlb	1	; () banked
  8912  001812  59ED               	subwfb	??_CheckKeypad& (0+255),w,b
  8913  001814  E2E0               	bc	l11082
  8914                           
  8915                           ; BSR set to: 1
  8916                           ;NDC.c: 306: }
  8917                           ;NDC.c: 308: SendUDPMessage(m_messageBuffer, 17, m_udpSocket);
  8918  001816  0E41               	movlw	low _m_messageBuffer
  8919  001818  6FE8               	movwf	SendUDPMessage@message& (0+255),b
  8920  00181A  0E03               	movlw	high _m_messageBuffer
  8921  00181C  6FE9               	movwf	(SendUDPMessage@message+1)& (0+255),b
  8922  00181E  6BEB               	clrf	(SendUDPMessage@messageSize+1)& (0+255),b
  8923  001820  0E11               	movlw	17
  8924  001822  6FEA               	movwf	SendUDPMessage@messageSize& (0+255),b
  8925  001824  C041  F1EC         	movff	_m_udpSocket,SendUDPMessage@udpSocket
  8926  001828  EC65  F023         	call	_SendUDPMessage	;wreg free
  8927                           
  8928                           ;NDC.c: 310: m_codeLength = 0;
  8929  00182C  0100               	movlb	0	; () banked
  8930  00182E  6BD2               	clrf	_m_codeLength& (0+255),b
  8931  001830  0012               	return	
  8932  001832                     l11096:
  8933                           
  8934                           ; BSR set to: 2
  8935                           ;NDC.c: 313: }
  8936                           ;NDC.c: 316: if (wiegandCode <= 9)
  8937  001832  BFF7               	btfsc	(CheckKeypad@wiegandCode+3)& (0+255),7,b
  8938  001834  D007               	goto	l11098
  8939  001836  51F7               	movf	(CheckKeypad@wiegandCode+3)& (0+255),w,b
  8940  001838  11F6               	iorwf	(CheckKeypad@wiegandCode+2)& (0+255),w,b
  8941  00183A  11F5               	iorwf	(CheckKeypad@wiegandCode+1)& (0+255),w,b
  8942  00183C  E11D               	bnz	l11110
  8943  00183E  0E0A               	movlw	10
  8944  001840  5DF4               	subwf	CheckKeypad@wiegandCode& (0+255),w,b
  8945  001842  E21A               	bc	l11110
  8946  001844                     l11098:
  8947                           
  8948                           ; BSR set to: 2
  8949                           ;NDC.c: 317: {
  8950                           ;NDC.c: 318: m_timerKeyPressed = TickGet();
  8951  001844  EC9C  F028         	call	_TickGet	;wreg free
  8952  001848  C01C  F144         	movff	?_TickGet,_m_timerKeyPressed
  8953  00184C  C01D  F145         	movff	?_TickGet+1,_m_timerKeyPressed+1
  8954  001850  C01E  F146         	movff	?_TickGet+2,_m_timerKeyPressed+2
  8955  001854  C01F  F147         	movff	?_TickGet+3,_m_timerKeyPressed+3
  8956                           
  8957                           ;NDC.c: 319: m_keyPressedFlag = 1;
  8958  001858  0E01               	movlw	1
  8959  00185A  0100               	movlb	0	; () banked
  8960  00185C  6FD6               	movwf	_m_keyPressedFlag& (0+255),b
  8961                           
  8962                           ; BSR set to: 0
  8963                           ;NDC.c: 321: if (m_codeLength < 8) {
  8964  00185E  0E08               	movlw	8
  8965  001860  61D2               	cpfslt	_m_codeLength& (0+255),b
  8966  001862  0C08               	retlw	8
  8967                           
  8968                           ; BSR set to: 0
  8969                           ;NDC.c: 322: m_userCode[m_codeLength] = wiegandCode;
  8970  001864  0E14               	movlw	low _m_userCode
  8971  001866  25D2               	addwf	_m_codeLength& (0+255),w,b
  8972  001868  6ED9               	movwf	fsr2l,c
  8973  00186A  6ADA               	clrf	fsr2h,c
  8974  00186C  0E01               	movlw	high _m_userCode
  8975  00186E  22DA               	addwfc	fsr2h,f,c
  8976  001870  C2F4  FFDF         	movff	CheckKeypad@wiegandCode,indf2
  8977                           
  8978                           ; BSR set to: 0
  8979                           ;NDC.c: 323: m_codeLength++;
  8980  001874  2BD2               	incf	_m_codeLength& (0+255),f,b
  8981  001876  0012               	return	
  8982  001878                     l11110:
  8983                           
  8984                           ; BSR set to: 2
  8985                           ;NDC.c: 327: }
  8986                           ;NDC.c: 329: if (wiegandCode == 11) {
  8987  001878  0E0B               	movlw	11
  8988  00187A  19F4               	xorwf	CheckKeypad@wiegandCode& (0+255),w,b
  8989  00187C  11F5               	iorwf	(CheckKeypad@wiegandCode+1)& (0+255),w,b
  8990  00187E  11F6               	iorwf	(CheckKeypad@wiegandCode+2)& (0+255),w,b
  8991  001880  11F7               	iorwf	(CheckKeypad@wiegandCode+3)& (0+255),w,b
  8992  001882  E16C               	bnz	l11140
  8993                           
  8994                           ; BSR set to: 2
  8995                           ;NDC.c: 332: if (m_codeLength != 0) {
  8996  001884  0100               	movlb	0	; () banked
  8997  001886  51D2               	movf	_m_codeLength& (0+255),w,b
  8998  001888  E05F               	bz	l11134
  8999                           
  9000                           ; BSR set to: 0
  9001                           ;NDC.c: 333: m_messageBuffer[0] = 0;
  9002  00188A  0E00               	movlw	0
  9003  00188C  CFE8 F341          	movff	wreg,_m_messageBuffer
  9004                           
  9005                           ;NDC.c: 334: m_messageBuffer[1] = 3;
  9006  001890  0E03               	movlw	3
  9007  001892  CFE8 F342          	movff	wreg,_m_messageBuffer+1
  9008                           
  9009                           ; BSR set to: 0
  9010                           ;NDC.c: 335: m_messageBuffer[2] = g_serializedMACAddress[0];
  9011  001896  EE23  F043         	lfsr	2,_m_messageBuffer+2
  9012  00189A  C0F9  FFDF         	movff	_g_serializedMACAddress,indf2
  9013                           
  9014                           ;NDC.c: 336: m_messageBuffer[3] = g_serializedMACAddress[1];
  9015  00189E  EE23  F044         	lfsr	2,_m_messageBuffer+3
  9016  0018A2  C0FA  FFDF         	movff	_g_serializedMACAddress+1,indf2
  9017                           
  9018                           ;NDC.c: 337: m_messageBuffer[4] = g_serializedMACAddress[2];
  9019  0018A6  EE23  F045         	lfsr	2,_m_messageBuffer+4
  9020  0018AA  C0FB  FFDF         	movff	_g_serializedMACAddress+2,indf2
  9021                           
  9022                           ;NDC.c: 338: m_messageBuffer[5] = g_serializedMACAddress[3];
  9023  0018AE  EE23  F046         	lfsr	2,_m_messageBuffer+5
  9024  0018B2  C0FC  FFDF         	movff	_g_serializedMACAddress+3,indf2
  9025                           
  9026                           ;NDC.c: 339: m_messageBuffer[6] = g_serializedMACAddress[4];
  9027  0018B6  EE23  F047         	lfsr	2,_m_messageBuffer+6
  9028  0018BA  C0FD  FFDF         	movff	_g_serializedMACAddress+4,indf2
  9029                           
  9030                           ;NDC.c: 340: m_messageBuffer[7] = g_serializedMACAddress[5];
  9031  0018BE  EE23  F048         	lfsr	2,_m_messageBuffer+7
  9032  0018C2  C0FE  FFDF         	movff	_g_serializedMACAddress+5,indf2
  9033                           
  9034                           ;NDC.c: 341: m_messageBuffer[8] = m_codeLength;
  9035  0018C6  EE23  F049         	lfsr	2,_m_messageBuffer+8
  9036  0018CA  C0D2  FFDF         	movff	_m_codeLength,indf2
  9037                           
  9038                           ; BSR set to: 0
  9039                           ;NDC.c: 343: for (i = 0; i < m_codeLength; i++) {
  9040  0018CE  0102               	movlb	2	; () banked
  9041  0018D0  6BF2               	clrf	CheckKeypad@i& (0+255),b
  9042  0018D2  6BF3               	clrf	(CheckKeypad@i+1)& (0+255),b
  9043  0018D4  D011               	goto	l11124
  9044  0018D6                     l11120:
  9045                           
  9046                           ; BSR set to: 1
  9047                           ;NDC.c: 344: m_messageBuffer [9 + i] = m_userCode[i];
  9048  0018D6  0E14               	movlw	low _m_userCode
  9049  0018D8  0102               	movlb	2	; () banked
  9050  0018DA  25F2               	addwf	CheckKeypad@i& (0+255),w,b
  9051  0018DC  6ED9               	movwf	fsr2l,c
  9052  0018DE  0E01               	movlw	high _m_userCode
  9053  0018E0  21F3               	addwfc	(CheckKeypad@i+1)& (0+255),w,b
  9054  0018E2  6EDA               	movwf	fsr2h,c
  9055  0018E4  0E4A               	movlw	low (_m_messageBuffer+9)
  9056  0018E6  25F2               	addwf	CheckKeypad@i& (0+255),w,b
  9057  0018E8  6EE1               	movwf	fsr1l,c
  9058  0018EA  0E03               	movlw	high (_m_messageBuffer+9)
  9059  0018EC  21F3               	addwfc	(CheckKeypad@i+1)& (0+255),w,b
  9060  0018EE  6EE2               	movwf	fsr1h,c
  9061  0018F0  CFDF FFE7          	movff	indf2,indf1
  9062                           
  9063                           ; BSR set to: 2
  9064  0018F4  4BF2               	infsnz	CheckKeypad@i& (0+255),f,b
  9065  0018F6  2BF3               	incf	(CheckKeypad@i+1)& (0+255),f,b
  9066  0018F8                     l11124:
  9067                           
  9068                           ; BSR set to: 2
  9069  0018F8  0100               	movlb	0	; () banked
  9070  0018FA  51D2               	movf	_m_codeLength& (0+255),w,b
  9071  0018FC  0101               	movlb	1	; () banked
  9072  0018FE  6FED               	movwf	??_CheckKeypad& (0+255),b
  9073  001900  6BEE               	clrf	(??_CheckKeypad+1)& (0+255),b
  9074  001902  51ED               	movf	??_CheckKeypad& (0+255),w,b
  9075  001904  0102               	movlb	2	; () banked
  9076  001906  5DF2               	subwf	CheckKeypad@i& (0+255),w,b
  9077  001908  51F3               	movf	(CheckKeypad@i+1)& (0+255),w,b
  9078  00190A  0A80               	xorlw	128
  9079  00190C  0101               	movlb	1	; () banked
  9080  00190E  6FEF               	movwf	(??_CheckKeypad+2)& (0+255),b
  9081  001910  51EE               	movf	(??_CheckKeypad+1)& (0+255),w,b
  9082  001912  0A80               	xorlw	128
  9083  001914  59EF               	subwfb	(??_CheckKeypad+2)& (0+255),w,b
  9084  001916  E3DF               	bnc	l11120
  9085                           
  9086                           ; BSR set to: 1
  9087                           ;NDC.c: 345: }
  9088                           ;NDC.c: 347: messageSize = 9 + m_codeLength;
  9089  001918  0E09               	movlw	9
  9090  00191A  0100               	movlb	0	; () banked
  9091  00191C  25D2               	addwf	_m_codeLength& (0+255),w,b
  9092  00191E  0102               	movlb	2	; () banked
  9093  001920  6FEE               	movwf	CheckKeypad@messageSize& (0+255),b
  9094  001922  6BEF               	clrf	(CheckKeypad@messageSize+1)& (0+255),b
  9095  001924  0E00               	movlw	0
  9096  001926  23EF               	addwfc	(CheckKeypad@messageSize+1)& (0+255),f,b
  9097                           
  9098                           ; BSR set to: 2
  9099                           ;NDC.c: 349: SendUDPMessage(m_messageBuffer, messageSize, m_udpSocket);
  9100  001928  0E41               	movlw	low _m_messageBuffer
  9101  00192A  0101               	movlb	1	; () banked
  9102  00192C  6FE8               	movwf	SendUDPMessage@message& (0+255),b
  9103  00192E  0E03               	movlw	high _m_messageBuffer
  9104  001930  6FE9               	movwf	(SendUDPMessage@message+1)& (0+255),b
  9105  001932  C2EE  F1EA         	movff	CheckKeypad@messageSize,SendUDPMessage@messageSize
  9106  001936  C2EF  F1EB         	movff	CheckKeypad@messageSize+1,SendUDPMessage@messageSize+1
  9107  00193A  C041  F1EC         	movff	_m_udpSocket,SendUDPMessage@udpSocket
  9108  00193E  EC65  F023         	call	_SendUDPMessage	;wreg free
  9109                           
  9110                           ;NDC.c: 351: m_codeLength = 0;
  9111  001942  0100               	movlb	0	; () banked
  9112  001944  6BD2               	clrf	_m_codeLength& (0+255),b
  9113                           
  9114                           ; BSR set to: 0
  9115                           ;NDC.c: 352: m_keyPressedFlag = 0;
  9116  001946  6BD6               	clrf	_m_keyPressedFlag& (0+255),b
  9117  001948                     l11134:
  9118                           
  9119                           ; BSR set to: 0
  9120                           ;NDC.c: 353: }
  9121                           ;NDC.c: 354: m_timerWaitForPinCode = 0;
  9122  001948  0101               	movlb	1	; () banked
  9123  00194A  6B54               	clrf	_m_timerWaitForPinCode& (0+255),b
  9124  00194C  6B55               	clrf	(_m_timerWaitForPinCode+1)& (0+255),b
  9125  00194E  6B56               	clrf	(_m_timerWaitForPinCode+2)& (0+255),b
  9126  001950  6B57               	clrf	(_m_timerWaitForPinCode+3)& (0+255),b
  9127                           
  9128                           ; BSR set to: 1
  9129                           ;NDC.c: 356: if (m_openDoorFlag == 0)
  9130  001952  0100               	movlb	0	; () banked
  9131  001954  51D7               	movf	_m_openDoorFlag& (0+255),w,b
  9132  001956  B4D8               	btfsc	status,2,c
  9133                           
  9134                           ; BSR set to: 0
  9135                           ;NDC.c: 357: (LATDbits.LATD2) = 0;
  9136  001958  948C               	bcf	3980,2,c	;volatile
  9137  00195A  0012               	return	
  9138  00195C                     l11140:
  9139                           
  9140                           ; BSR set to: 2
  9141                           ;NDC.c: 360: }
  9142                           ;NDC.c: 363: if (wiegandCode == 10) {
  9143  00195C  0E0A               	movlw	10
  9144  00195E  19F4               	xorwf	CheckKeypad@wiegandCode& (0+255),w,b
  9145  001960  11F5               	iorwf	(CheckKeypad@wiegandCode+1)& (0+255),w,b
  9146  001962  11F6               	iorwf	(CheckKeypad@wiegandCode+2)& (0+255),w,b
  9147  001964  11F7               	iorwf	(CheckKeypad@wiegandCode+3)& (0+255),w,b
  9148  001966  A4D8               	btfss	status,2,c
  9149  001968  0012               	return	
  9150                           
  9151                           ; BSR set to: 2
  9152                           ;NDC.c: 364: m_codeLength = 0;
  9153  00196A  0100               	movlb	0	; () banked
  9154  00196C  6BD2               	clrf	_m_codeLength& (0+255),b
  9155                           
  9156                           ;NDC.c: 365: m_keyPressedFlag = 0;
  9157  00196E  6BD6               	clrf	_m_keyPressedFlag& (0+255),b
  9158                           
  9159                           ;NDC.c: 366: m_timerWaitForPinCode = 0;
  9160  001970  0101               	movlb	1	; () banked
  9161  001972  6B54               	clrf	_m_timerWaitForPinCode& (0+255),b
  9162  001974  6B55               	clrf	(_m_timerWaitForPinCode+1)& (0+255),b
  9163  001976  6B56               	clrf	(_m_timerWaitForPinCode+2)& (0+255),b
  9164  001978  6B57               	clrf	(_m_timerWaitForPinCode+3)& (0+255),b
  9165                           
  9166                           ; BSR set to: 1
  9167                           ;NDC.c: 368: if (m_openDoorFlag == 0)
  9168  00197A  0100               	movlb	0	; () banked
  9169  00197C  51D7               	movf	_m_openDoorFlag& (0+255),w,b
  9170  00197E  B4D8               	btfsc	status,2,c
  9171                           
  9172                           ; BSR set to: 0
  9173                           ;NDC.c: 369: (LATDbits.LATD2) = 0;
  9174  001980  948C               	bcf	3980,2,c	;volatile
  9175  001982  0012               	return		;funcret
  9176  001984                     __end_of_CheckKeypad:
  9177                           	opt stack 0
  9178                           tblptru	equ	0xFF8
  9179                           tblptrh	equ	0xFF7
  9180                           tblptrl	equ	0xFF6
  9181                           tablat	equ	0xFF5
  9182                           prodh	equ	0xFF4
  9183                           prodl	equ	0xFF3
  9184                           intcon	equ	0xFF2
  9185                           intcon2	equ	0xFF1
  9186                           postinc0	equ	0xFEE
  9187                           wreg	equ	0xFE8
  9188                           indf1	equ	0xFE7
  9189                           postdec1	equ	0xFE5
  9190                           fsr1h	equ	0xFE2
  9191                           fsr1l	equ	0xFE1
  9192                           indf2	equ	0xFDF
  9193                           postinc2	equ	0xFDE
  9194                           postdec2	equ	0xFDD
  9195                           fsr2h	equ	0xFDA
  9196                           fsr2l	equ	0xFD9
  9197                           status	equ	0xFD8
  9198                           
  9199 ;; *************** function _ltoa *****************
  9200 ;; Defined at:
  9201 ;;		line 7 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\ltoa.c"
  9202 ;; Parameters:    Size  Location     Type
  9203 ;;  buf             2   13[BANK0 ] PTR unsigned char 
  9204 ;;		 -> RAM(3935), 
  9205 ;;  val             4   15[BANK0 ] long 
  9206 ;;  base            2   19[BANK0 ] int 
  9207 ;; Auto vars:     Size  Location     Type
  9208 ;;  cp              2    0        PTR unsigned char 
  9209 ;;		 -> RAM(3935), 
  9210 ;; Return value:  Size  Location     Type
  9211 ;;                  2   13[BANK0 ] PTR unsigned char 
  9212 ;; Registers used:
  9213 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  9214 ;; Tracked objects:
  9215 ;;		On entry : F/0
  9216 ;;		On exit  : F/0
  9217 ;;		Unchanged: 0/0
  9218 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9219 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9220 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9221 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9222 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9223 ;;Total ram usage:       10 bytes
  9224 ;; Hardware stack levels used:    1
  9225 ;; Hardware stack levels required when called:    8
  9226 ;; This function calls:
  9227 ;;		_ultoa
  9228 ;; This function is called by:
  9229 ;;		_CheckKeypad
  9230 ;; This function uses a non-reentrant model
  9231 ;;
  9232                           
  9233                           	psect	text58
  9234  004BEE                     __ptext58:
  9235                           	opt stack 0
  9236  004BEE                     _ltoa:
  9237                           	opt stack 20
  9238                           
  9239                           ; BSR set to: 0
  9240                           
  9241                           ;incstack = 0
  9242  004BEE  AF72               	btfss	(ltoa@val+3)& (0+255),7,b
  9243  004BF0  D010               	goto	l10688
  9244                           
  9245                           ; BSR set to: 0
  9246  004BF2  C06D  FFD9         	movff	ltoa@buf,fsr2l
  9247  004BF6  C06E  FFDA         	movff	ltoa@buf+1,fsr2h
  9248  004BFA  0E2D               	movlw	45
  9249  004BFC  6EDF               	movwf	indf2,c
  9250                           
  9251                           ; BSR set to: 0
  9252  004BFE  4B6D               	infsnz	ltoa@buf& (0+255),f,b
  9253  004C00  2B6E               	incf	(ltoa@buf+1)& (0+255),f,b
  9254                           
  9255                           ; BSR set to: 0
  9256  004C02  1F72               	comf	(ltoa@val+3)& (0+255),f,b
  9257  004C04  1F71               	comf	(ltoa@val+2)& (0+255),f,b
  9258  004C06  1F70               	comf	(ltoa@val+1)& (0+255),f,b
  9259  004C08  6D6F               	negf	ltoa@val& (0+255),b
  9260  004C0A  0E00               	movlw	0
  9261  004C0C  2370               	addwfc	(ltoa@val+1)& (0+255),f,b
  9262  004C0E  2371               	addwfc	(ltoa@val+2)& (0+255),f,b
  9263  004C10  2372               	addwfc	(ltoa@val+3)& (0+255),f,b
  9264  004C12                     l10688:
  9265                           
  9266                           ; BSR set to: 0
  9267  004C12  C06D  F060         	movff	ltoa@buf,ultoa@buf
  9268  004C16  C06E  F061         	movff	ltoa@buf+1,ultoa@buf+1
  9269  004C1A  C06F  F062         	movff	ltoa@val,ultoa@val
  9270  004C1E  C070  F063         	movff	ltoa@val+1,ultoa@val+1
  9271  004C22  C071  F064         	movff	ltoa@val+2,ultoa@val+2
  9272  004C26  C072  F065         	movff	ltoa@val+3,ultoa@val+3
  9273  004C2A  C073  F066         	movff	ltoa@base,ultoa@base
  9274  004C2E  C074  F067         	movff	ltoa@base+1,ultoa@base+1
  9275  004C32  EFE3  F016         	goto	_ultoa	;wreg free
  9276  004C36                     __end_of_ltoa:
  9277                           	opt stack 0
  9278                           tblptru	equ	0xFF8
  9279                           tblptrh	equ	0xFF7
  9280                           tblptrl	equ	0xFF6
  9281                           tablat	equ	0xFF5
  9282                           prodh	equ	0xFF4
  9283                           prodl	equ	0xFF3
  9284                           intcon	equ	0xFF2
  9285                           intcon2	equ	0xFF1
  9286                           postinc0	equ	0xFEE
  9287                           wreg	equ	0xFE8
  9288                           indf1	equ	0xFE7
  9289                           postdec1	equ	0xFE5
  9290                           fsr1h	equ	0xFE2
  9291                           fsr1l	equ	0xFE1
  9292                           indf2	equ	0xFDF
  9293                           postinc2	equ	0xFDE
  9294                           postdec2	equ	0xFDD
  9295                           fsr2h	equ	0xFDA
  9296                           fsr2l	equ	0xFD9
  9297                           status	equ	0xFD8
  9298                           
  9299 ;; *************** function _ultoa *****************
  9300 ;; Defined at:
  9301 ;;		line 32 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\ltoa.c"
  9302 ;; Parameters:    Size  Location     Type
  9303 ;;  buf             2    0[BANK0 ] PTR unsigned char 
  9304 ;;		 -> RAM(3935), 
  9305 ;;  val             4    2[BANK0 ] unsigned long 
  9306 ;;  base            2    6[BANK0 ] int 
  9307 ;; Auto vars:     Size  Location     Type
  9308 ;;  v               4    8[BANK0 ] unsigned long 
  9309 ;;  c               1   12[BANK0 ] unsigned char 
  9310 ;; Return value:  Size  Location     Type
  9311 ;;                  2    0[BANK0 ] PTR unsigned char 
  9312 ;; Registers used:
  9313 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  9314 ;; Tracked objects:
  9315 ;;		On entry : F/0
  9316 ;;		On exit  : F/0
  9317 ;;		Unchanged: 0/0
  9318 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9319 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9320 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9321 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9322 ;;      Totals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9323 ;;Total ram usage:       13 bytes
  9324 ;; Hardware stack levels used:    1
  9325 ;; Hardware stack levels required when called:    7
  9326 ;; This function calls:
  9327 ;;		___lldiv
  9328 ;;		___llmod
  9329 ;; This function is called by:
  9330 ;;		_ltoa
  9331 ;; This function uses a non-reentrant model
  9332 ;;
  9333                           
  9334                           	psect	text59
  9335  002DC6                     __ptext59:
  9336                           	opt stack 0
  9337  002DC6                     _ultoa:
  9338                           	opt stack 20
  9339                           
  9340                           ; BSR set to: 0
  9341                           
  9342                           ; BSR set to: 0
  9343                           ;incstack = 0
  9344  002DC6  C062  F068         	movff	ultoa@val,ultoa@v
  9345  002DCA  C063  F069         	movff	ultoa@val+1,ultoa@v+1
  9346  002DCE  C064  F06A         	movff	ultoa@val+2,ultoa@v+2
  9347  002DD2  C065  F06B         	movff	ultoa@val+3,ultoa@v+3
  9348  002DD6                     l10612:
  9349                           
  9350                           ; BSR set to: 0
  9351  002DD6  C068  F01C         	movff	ultoa@v,___lldiv@dividend
  9352  002DDA  C069  F01D         	movff	ultoa@v+1,___lldiv@dividend+1
  9353  002DDE  C06A  F01E         	movff	ultoa@v+2,___lldiv@dividend+2
  9354  002DE2  C06B  F01F         	movff	ultoa@v+3,___lldiv@dividend+3
  9355  002DE6  C066  F020         	movff	ultoa@base,___lldiv@divisor
  9356  002DEA  C067  F021         	movff	ultoa@base+1,___lldiv@divisor+1
  9357  002DEE  0E00               	movlw	0
  9358  002DF0  BE21               	btfsc	___lldiv@divisor+1,7,c
  9359  002DF2  0EFF               	movlw	-1
  9360  002DF4  6E22               	movwf	___lldiv@divisor+2,c
  9361  002DF6  6E23               	movwf	___lldiv@divisor+3,c
  9362  002DF8  ECAE  F020         	call	___lldiv	;wreg free
  9363  002DFC  C01C  F068         	movff	?___lldiv,ultoa@v
  9364  002E00  C01D  F069         	movff	?___lldiv+1,ultoa@v+1
  9365  002E04  C01E  F06A         	movff	?___lldiv+2,ultoa@v+2
  9366  002E08  C01F  F06B         	movff	?___lldiv+3,ultoa@v+3
  9367                           
  9368                           ; BSR set to: 0
  9369  002E0C  4B60               	infsnz	ultoa@buf& (0+255),f,b
  9370  002E0E  2B61               	incf	(ultoa@buf+1)& (0+255),f,b
  9371                           
  9372                           ; BSR set to: 0
  9373  002E10  5168               	movf	ultoa@v& (0+255),w,b
  9374  002E12  1169               	iorwf	(ultoa@v+1)& (0+255),w,b
  9375  002E14  116A               	iorwf	(ultoa@v+2)& (0+255),w,b
  9376  002E16  116B               	iorwf	(ultoa@v+3)& (0+255),w,b
  9377  002E18  E1DE               	bnz	l10612
  9378                           
  9379                           ; BSR set to: 0
  9380  002E1A  C060  FFD9         	movff	ultoa@buf,fsr2l
  9381  002E1E  C061  FFDA         	movff	ultoa@buf+1,fsr2h
  9382  002E22  6ADF               	clrf	indf2,c
  9383                           
  9384                           ; BSR set to: 0
  9385  002E24  0760               	decf	ultoa@buf& (0+255),f,b
  9386  002E26  A0D8               	btfss	status,0,c
  9387  002E28  0761               	decf	(ultoa@buf+1)& (0+255),f,b
  9388  002E2A                     l10622:
  9389                           
  9390                           ; BSR set to: 0
  9391  002E2A  C062  F01C         	movff	ultoa@val,___llmod@dividend
  9392  002E2E  C063  F01D         	movff	ultoa@val+1,___llmod@dividend+1
  9393  002E32  C064  F01E         	movff	ultoa@val+2,___llmod@dividend+2
  9394  002E36  C065  F01F         	movff	ultoa@val+3,___llmod@dividend+3
  9395  002E3A  C066  F020         	movff	ultoa@base,___llmod@divisor
  9396  002E3E  C067  F021         	movff	ultoa@base+1,___llmod@divisor+1
  9397  002E42  0E00               	movlw	0
  9398  002E44  BE21               	btfsc	___llmod@divisor+1,7,c
  9399  002E46  0EFF               	movlw	-1
  9400  002E48  6E22               	movwf	___llmod@divisor+2,c
  9401  002E4A  6E23               	movwf	___llmod@divisor+3,c
  9402  002E4C  ECBF  F021         	call	___llmod	;wreg free
  9403  002E50  501C               	movf	?___llmod,w,c
  9404  002E52  6F6C               	movwf	ultoa@c& (0+255),b
  9405                           
  9406                           ; BSR set to: 0
  9407  002E54  C062  F01C         	movff	ultoa@val,___lldiv@dividend
  9408  002E58  C063  F01D         	movff	ultoa@val+1,___lldiv@dividend+1
  9409  002E5C  C064  F01E         	movff	ultoa@val+2,___lldiv@dividend+2
  9410  002E60  C065  F01F         	movff	ultoa@val+3,___lldiv@dividend+3
  9411  002E64  C066  F020         	movff	ultoa@base,___lldiv@divisor
  9412  002E68  C067  F021         	movff	ultoa@base+1,___lldiv@divisor+1
  9413  002E6C  0E00               	movlw	0
  9414  002E6E  BE21               	btfsc	___lldiv@divisor+1,7,c
  9415  002E70  0EFF               	movlw	-1
  9416  002E72  6E22               	movwf	___lldiv@divisor+2,c
  9417  002E74  6E23               	movwf	___lldiv@divisor+3,c
  9418  002E76  ECAE  F020         	call	___lldiv	;wreg free
  9419  002E7A  C01C  F062         	movff	?___lldiv,ultoa@val
  9420  002E7E  C01D  F063         	movff	?___lldiv+1,ultoa@val+1
  9421  002E82  C01E  F064         	movff	?___lldiv+2,ultoa@val+2
  9422  002E86  C01F  F065         	movff	?___lldiv+3,ultoa@val+3
  9423                           
  9424                           ; BSR set to: 0
  9425  002E8A  0E09               	movlw	9
  9426  002E8C  656C               	cpfsgt	ultoa@c& (0+255),b
  9427  002E8E  D002               	goto	l2631
  9428                           
  9429                           ; BSR set to: 0
  9430  002E90  0E07               	movlw	7
  9431  002E92  276C               	addwf	ultoa@c& (0+255),f,b
  9432  002E94                     l2631:
  9433                           
  9434                           ; BSR set to: 0
  9435  002E94  0E30               	movlw	48
  9436  002E96  276C               	addwf	ultoa@c& (0+255),f,b
  9437                           
  9438                           ; BSR set to: 0
  9439  002E98  C060  FFD9         	movff	ultoa@buf,fsr2l
  9440  002E9C  C061  FFDA         	movff	ultoa@buf+1,fsr2h
  9441  002EA0  C06C  FFDF         	movff	ultoa@c,indf2
  9442                           
  9443                           ; BSR set to: 0
  9444  002EA4  0760               	decf	ultoa@buf& (0+255),f,b
  9445  002EA6  A0D8               	btfss	status,0,c
  9446  002EA8  0761               	decf	(ultoa@buf+1)& (0+255),f,b
  9447                           
  9448                           ; BSR set to: 0
  9449  002EAA  5162               	movf	ultoa@val& (0+255),w,b
  9450  002EAC  1163               	iorwf	(ultoa@val+1)& (0+255),w,b
  9451  002EAE  1164               	iorwf	(ultoa@val+2)& (0+255),w,b
  9452  002EB0  1165               	iorwf	(ultoa@val+3)& (0+255),w,b
  9453  002EB2  E1BB               	bnz	l10622
  9454                           
  9455                           ; BSR set to: 0
  9456  002EB4  0012               	return		;funcret
  9457  002EB6                     __end_of_ultoa:
  9458                           	opt stack 0
  9459                           tblptru	equ	0xFF8
  9460                           tblptrh	equ	0xFF7
  9461                           tblptrl	equ	0xFF6
  9462                           tablat	equ	0xFF5
  9463                           prodh	equ	0xFF4
  9464                           prodl	equ	0xFF3
  9465                           intcon	equ	0xFF2
  9466                           intcon2	equ	0xFF1
  9467                           postinc0	equ	0xFEE
  9468                           wreg	equ	0xFE8
  9469                           indf1	equ	0xFE7
  9470                           postdec1	equ	0xFE5
  9471                           fsr1h	equ	0xFE2
  9472                           fsr1l	equ	0xFE1
  9473                           indf2	equ	0xFDF
  9474                           postinc2	equ	0xFDE
  9475                           postdec2	equ	0xFDD
  9476                           fsr2h	equ	0xFDA
  9477                           fsr2l	equ	0xFD9
  9478                           status	equ	0xFD8
  9479                           
  9480 ;; *************** function ___llmod *****************
  9481 ;; Defined at:
  9482 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\llmod.c"
  9483 ;; Parameters:    Size  Location     Type
  9484 ;;  dividend        4   27[COMRAM] unsigned long 
  9485 ;;  divisor         4   31[COMRAM] unsigned long 
  9486 ;; Auto vars:     Size  Location     Type
  9487 ;;  counter         1   35[COMRAM] unsigned char 
  9488 ;; Return value:  Size  Location     Type
  9489 ;;                  4   27[COMRAM] unsigned long 
  9490 ;; Registers used:
  9491 ;;		wreg, status,2, status,0
  9492 ;; Tracked objects:
  9493 ;;		On entry : F/0
  9494 ;;		On exit  : F/0
  9495 ;;		Unchanged: F/0
  9496 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9497 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9498 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9499 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9500 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9501 ;;Total ram usage:        9 bytes
  9502 ;; Hardware stack levels used:    1
  9503 ;; Hardware stack levels required when called:    6
  9504 ;; This function calls:
  9505 ;;		Nothing
  9506 ;; This function is called by:
  9507 ;;		_ultoa
  9508 ;; This function uses a non-reentrant model
  9509 ;;
  9510                           
  9511                           	psect	text60
  9512  00437E                     __ptext60:
  9513                           	opt stack 0
  9514  00437E                     ___llmod:
  9515                           	opt stack 20
  9516                           
  9517                           ; BSR set to: 0
  9518                           
  9519                           ; BSR set to: 0
  9520                           ;incstack = 0
  9521  00437E  5020               	movf	___llmod@divisor,w,c
  9522  004380  1021               	iorwf	___llmod@divisor+1,w,c
  9523  004382  1022               	iorwf	___llmod@divisor+2,w,c
  9524  004384  1023               	iorwf	___llmod@divisor+3,w,c
  9525  004386  E023               	bz	l2584
  9526                           
  9527                           ; BSR set to: 0
  9528  004388  0E01               	movlw	1
  9529  00438A  6E24               	movwf	___llmod@counter,c
  9530  00438C  D006               	goto	l10540
  9531  00438E                     l10538:
  9532                           
  9533                           ; BSR set to: 0
  9534  00438E  90D8               	bcf	status,0,c
  9535  004390  3620               	rlcf	___llmod@divisor,f,c
  9536  004392  3621               	rlcf	___llmod@divisor+1,f,c
  9537  004394  3622               	rlcf	___llmod@divisor+2,f,c
  9538  004396  3623               	rlcf	___llmod@divisor+3,f,c
  9539  004398  2A24               	incf	___llmod@counter,f,c
  9540  00439A                     l10540:
  9541                           
  9542                           ; BSR set to: 0
  9543  00439A  AE23               	btfss	___llmod@divisor+3,7,c
  9544  00439C  D7F8               	goto	l10538
  9545  00439E                     l10542:
  9546                           
  9547                           ; BSR set to: 0
  9548  00439E  5020               	movf	___llmod@divisor,w,c
  9549  0043A0  5C1C               	subwf	___llmod@dividend,w,c
  9550  0043A2  5021               	movf	___llmod@divisor+1,w,c
  9551  0043A4  581D               	subwfb	___llmod@dividend+1,w,c
  9552  0043A6  5022               	movf	___llmod@divisor+2,w,c
  9553  0043A8  581E               	subwfb	___llmod@dividend+2,w,c
  9554  0043AA  5023               	movf	___llmod@divisor+3,w,c
  9555  0043AC  581F               	subwfb	___llmod@dividend+3,w,c
  9556  0043AE  E308               	bnc	l10546
  9557                           
  9558                           ; BSR set to: 0
  9559  0043B0  5020               	movf	___llmod@divisor,w,c
  9560  0043B2  5E1C               	subwf	___llmod@dividend,f,c
  9561  0043B4  5021               	movf	___llmod@divisor+1,w,c
  9562  0043B6  5A1D               	subwfb	___llmod@dividend+1,f,c
  9563  0043B8  5022               	movf	___llmod@divisor+2,w,c
  9564  0043BA  5A1E               	subwfb	___llmod@dividend+2,f,c
  9565  0043BC  5023               	movf	___llmod@divisor+3,w,c
  9566  0043BE  5A1F               	subwfb	___llmod@dividend+3,f,c
  9567  0043C0                     l10546:
  9568                           
  9569                           ; BSR set to: 0
  9570  0043C0  90D8               	bcf	status,0,c
  9571  0043C2  3223               	rrcf	___llmod@divisor+3,f,c
  9572  0043C4  3222               	rrcf	___llmod@divisor+2,f,c
  9573  0043C6  3221               	rrcf	___llmod@divisor+1,f,c
  9574  0043C8  3220               	rrcf	___llmod@divisor,f,c
  9575                           
  9576                           ; BSR set to: 0
  9577  0043CA  2E24               	decfsz	___llmod@counter,f,c
  9578  0043CC  D7E8               	goto	l10542
  9579  0043CE                     l2584:
  9580                           
  9581                           ; BSR set to: 0
  9582  0043CE  C01C  F01C         	movff	___llmod@dividend,?___llmod
  9583  0043D2  C01D  F01D         	movff	___llmod@dividend+1,?___llmod+1
  9584  0043D6  C01E  F01E         	movff	___llmod@dividend+2,?___llmod+2
  9585  0043DA  C01F  F01F         	movff	___llmod@dividend+3,?___llmod+3
  9586                           
  9587                           ; BSR set to: 0
  9588  0043DE  0012               	return		;funcret
  9589  0043E0                     __end_of___llmod:
  9590                           	opt stack 0
  9591                           tblptru	equ	0xFF8
  9592                           tblptrh	equ	0xFF7
  9593                           tblptrl	equ	0xFF6
  9594                           tablat	equ	0xFF5
  9595                           prodh	equ	0xFF4
  9596                           prodl	equ	0xFF3
  9597                           intcon	equ	0xFF2
  9598                           intcon2	equ	0xFF1
  9599                           postinc0	equ	0xFEE
  9600                           wreg	equ	0xFE8
  9601                           indf1	equ	0xFE7
  9602                           postdec1	equ	0xFE5
  9603                           fsr1h	equ	0xFE2
  9604                           fsr1l	equ	0xFE1
  9605                           indf2	equ	0xFDF
  9606                           postinc2	equ	0xFDE
  9607                           postdec2	equ	0xFDD
  9608                           fsr2h	equ	0xFDA
  9609                           fsr2l	equ	0xFD9
  9610                           status	equ	0xFD8
  9611                           
  9612 ;; *************** function ___lldiv *****************
  9613 ;; Defined at:
  9614 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\lldiv.c"
  9615 ;; Parameters:    Size  Location     Type
  9616 ;;  dividend        4   27[COMRAM] unsigned long 
  9617 ;;  divisor         4   31[COMRAM] unsigned long 
  9618 ;; Auto vars:     Size  Location     Type
  9619 ;;  quotient        4   35[COMRAM] unsigned long 
  9620 ;;  counter         1   39[COMRAM] unsigned char 
  9621 ;; Return value:  Size  Location     Type
  9622 ;;                  4   27[COMRAM] unsigned long 
  9623 ;; Registers used:
  9624 ;;		wreg, status,2, status,0
  9625 ;; Tracked objects:
  9626 ;;		On entry : F/0
  9627 ;;		On exit  : F/0
  9628 ;;		Unchanged: F/0
  9629 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9630 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9631 ;;      Locals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9632 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9633 ;;      Totals:        13       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9634 ;;Total ram usage:       13 bytes
  9635 ;; Hardware stack levels used:    1
  9636 ;; Hardware stack levels required when called:    6
  9637 ;; This function calls:
  9638 ;;		Nothing
  9639 ;; This function is called by:
  9640 ;;		_ultoa
  9641 ;; This function uses a non-reentrant model
  9642 ;;
  9643                           
  9644                           	psect	text61
  9645  00415C                     __ptext61:
  9646                           	opt stack 0
  9647  00415C                     ___lldiv:
  9648                           	opt stack 20
  9649                           
  9650                           ; BSR set to: 0
  9651                           
  9652                           ; BSR set to: 0
  9653                           ;incstack = 0
  9654  00415C  6A24               	clrf	___lldiv@quotient,c
  9655  00415E  6A25               	clrf	___lldiv@quotient+1,c
  9656  004160  6A26               	clrf	___lldiv@quotient+2,c
  9657  004162  6A27               	clrf	___lldiv@quotient+3,c
  9658                           
  9659                           ; BSR set to: 0
  9660  004164  5020               	movf	___lldiv@divisor,w,c
  9661  004166  1021               	iorwf	___lldiv@divisor+1,w,c
  9662  004168  1022               	iorwf	___lldiv@divisor+2,w,c
  9663  00416A  1023               	iorwf	___lldiv@divisor+3,w,c
  9664  00416C  E029               	bz	l2574
  9665                           
  9666                           ; BSR set to: 0
  9667  00416E  0E01               	movlw	1
  9668  004170  6E28               	movwf	___lldiv@counter,c
  9669  004172  D006               	goto	l10520
  9670  004174                     l10518:
  9671                           
  9672                           ; BSR set to: 0
  9673  004174  90D8               	bcf	status,0,c
  9674  004176  3620               	rlcf	___lldiv@divisor,f,c
  9675  004178  3621               	rlcf	___lldiv@divisor+1,f,c
  9676  00417A  3622               	rlcf	___lldiv@divisor+2,f,c
  9677  00417C  3623               	rlcf	___lldiv@divisor+3,f,c
  9678  00417E  2A28               	incf	___lldiv@counter,f,c
  9679  004180                     l10520:
  9680                           
  9681                           ; BSR set to: 0
  9682  004180  AE23               	btfss	___lldiv@divisor+3,7,c
  9683  004182  D7F8               	goto	l10518
  9684  004184                     l10522:
  9685                           
  9686                           ; BSR set to: 0
  9687  004184  90D8               	bcf	status,0,c
  9688  004186  3624               	rlcf	___lldiv@quotient,f,c
  9689  004188  3625               	rlcf	___lldiv@quotient+1,f,c
  9690  00418A  3626               	rlcf	___lldiv@quotient+2,f,c
  9691  00418C  3627               	rlcf	___lldiv@quotient+3,f,c
  9692                           
  9693                           ; BSR set to: 0
  9694  00418E  5020               	movf	___lldiv@divisor,w,c
  9695  004190  5C1C               	subwf	___lldiv@dividend,w,c
  9696  004192  5021               	movf	___lldiv@divisor+1,w,c
  9697  004194  581D               	subwfb	___lldiv@dividend+1,w,c
  9698  004196  5022               	movf	___lldiv@divisor+2,w,c
  9699  004198  581E               	subwfb	___lldiv@dividend+2,w,c
  9700  00419A  5023               	movf	___lldiv@divisor+3,w,c
  9701  00419C  581F               	subwfb	___lldiv@dividend+3,w,c
  9702  00419E  E309               	bnc	l10530
  9703                           
  9704                           ; BSR set to: 0
  9705  0041A0  5020               	movf	___lldiv@divisor,w,c
  9706  0041A2  5E1C               	subwf	___lldiv@dividend,f,c
  9707  0041A4  5021               	movf	___lldiv@divisor+1,w,c
  9708  0041A6  5A1D               	subwfb	___lldiv@dividend+1,f,c
  9709  0041A8  5022               	movf	___lldiv@divisor+2,w,c
  9710  0041AA  5A1E               	subwfb	___lldiv@dividend+2,f,c
  9711  0041AC  5023               	movf	___lldiv@divisor+3,w,c
  9712  0041AE  5A1F               	subwfb	___lldiv@dividend+3,f,c
  9713                           
  9714                           ; BSR set to: 0
  9715  0041B0  8024               	bsf	___lldiv@quotient,0,c
  9716  0041B2                     l10530:
  9717                           
  9718                           ; BSR set to: 0
  9719  0041B2  90D8               	bcf	status,0,c
  9720  0041B4  3223               	rrcf	___lldiv@divisor+3,f,c
  9721  0041B6  3222               	rrcf	___lldiv@divisor+2,f,c
  9722  0041B8  3221               	rrcf	___lldiv@divisor+1,f,c
  9723  0041BA  3220               	rrcf	___lldiv@divisor,f,c
  9724                           
  9725                           ; BSR set to: 0
  9726  0041BC  2E28               	decfsz	___lldiv@counter,f,c
  9727  0041BE  D7E2               	goto	l10522
  9728  0041C0                     l2574:
  9729                           
  9730                           ; BSR set to: 0
  9731  0041C0  C024  F01C         	movff	___lldiv@quotient,?___lldiv
  9732  0041C4  C025  F01D         	movff	___lldiv@quotient+1,?___lldiv+1
  9733  0041C8  C026  F01E         	movff	___lldiv@quotient+2,?___lldiv+2
  9734  0041CC  C027  F01F         	movff	___lldiv@quotient+3,?___lldiv+3
  9735                           
  9736                           ; BSR set to: 0
  9737  0041D0  0012               	return		;funcret
  9738  0041D2                     __end_of___lldiv:
  9739                           	opt stack 0
  9740                           tblptru	equ	0xFF8
  9741                           tblptrh	equ	0xFF7
  9742                           tblptrl	equ	0xFF6
  9743                           tablat	equ	0xFF5
  9744                           prodh	equ	0xFF4
  9745                           prodl	equ	0xFF3
  9746                           intcon	equ	0xFF2
  9747                           intcon2	equ	0xFF1
  9748                           postinc0	equ	0xFEE
  9749                           wreg	equ	0xFE8
  9750                           indf1	equ	0xFE7
  9751                           postdec1	equ	0xFE5
  9752                           fsr1h	equ	0xFE2
  9753                           fsr1l	equ	0xFE1
  9754                           indf2	equ	0xFDF
  9755                           postinc2	equ	0xFDE
  9756                           postdec2	equ	0xFDD
  9757                           fsr2h	equ	0xFDA
  9758                           fsr2l	equ	0xFD9
  9759                           status	equ	0xFD8
  9760                           
  9761 ;; *************** function _SendUDPMessage *****************
  9762 ;; Defined at:
  9763 ;;		line 393 in file "../src/NDC.c"
  9764 ;; Parameters:    Size  Location     Type
  9765 ;;  message         2    0[BANK1 ] PTR unsigned char 
  9766 ;;		 -> m_messageBuffer(500), 
  9767 ;;  messageSize     2    2[BANK1 ] int 
  9768 ;;  udpSocket       1    4[BANK1 ] unsigned char 
  9769 ;; Auto vars:     Size  Location     Type
  9770 ;;  i               2  100[BANK0 ] int 
  9771 ;; Return value:  Size  Location     Type
  9772 ;;		None               void
  9773 ;; Registers used:
  9774 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  9775 ;; Tracked objects:
  9776 ;;		On entry : F/1
  9777 ;;		On exit  : 0/0
  9778 ;;		Unchanged: 0/0
  9779 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9780 ;;      Params:         0       0       5       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9781 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9782 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9783 ;;      Totals:         0       2       5       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9784 ;;Total ram usage:        7 bytes
  9785 ;; Hardware stack levels used:    1
  9786 ;; Hardware stack levels required when called:   14
  9787 ;; This function calls:
  9788 ;;		_DelayMs
  9789 ;;		_StackTask
  9790 ;;		_UDPFlush
  9791 ;;		_UDPIsPutReady
  9792 ;;		_UDPPutArray
  9793 ;; This function is called by:
  9794 ;;		_CheckKeypad
  9795 ;;		_SendDoorStatus
  9796 ;;		_SendDoorSwitchPressedEvent
  9797 ;;		_SendFirstConnectionMadeEvent
  9798 ;;		_SendDoorOpenEvent
  9799 ;;		_SendDoorClosedEvent
  9800 ;;		_SendDoorOpenTooLongEvent
  9801 ;;		_SendDoorSwitchPressedTooLongEvent
  9802 ;;		_SendDoorTimerExpiredEvent
  9803 ;;		_SendGetConfigData
  9804 ;;		_SendDeviceReadySignal
  9805 ;;		_SendConnectionRequest
  9806 ;;		_SendVersionString
  9807 ;;		_SendHeartBeat
  9808 ;; This function uses a non-reentrant model
  9809 ;;
  9810                           
  9811                           	psect	text62
  9812  0046CA                     __ptext62:
  9813                           	opt stack 0
  9814  0046CA                     _SendUDPMessage:
  9815                           	opt stack 13
  9816                           
  9817                           ; BSR set to: 1
  9818                           ;NDC.c: 395: int i;
  9819                           ;NDC.c: 398: for (i = 0; i < 10; i++) {
  9820                           
  9821                           ; BSR set to: 0
  9822                           ;incstack = 0
  9823  0046CA  0100               	movlb	0	; () banked
  9824  0046CC  6BC4               	clrf	SendUDPMessage@i& (0+255),b
  9825  0046CE  6BC5               	clrf	(SendUDPMessage@i+1)& (0+255),b
  9826  0046D0                     l10450:
  9827                           
  9828                           ; BSR set to: 0
  9829                           ;NDC.c: 399: if (UDPIsPutReady(udpSocket) != 0) {
  9830  0046D0  0101               	movlb	1	; () banked
  9831  0046D2  51EC               	movf	SendUDPMessage@udpSocket& (0+255),w,b
  9832  0046D4  EC3D  F026         	call	_UDPIsPutReady
  9833  0046D8  5025               	movf	?_UDPIsPutReady,w,c
  9834  0046DA  1026               	iorwf	?_UDPIsPutReady+1,w,c
  9835  0046DC  E012               	bz	l10460
  9836                           
  9837                           ;NDC.c: 401: m_sentBytes = UDPPutArray(message, messageSize);
  9838  0046DE  C1E8  F020         	movff	SendUDPMessage@message,UDPPutArray@cData
  9839  0046E2  C1E9  F021         	movff	SendUDPMessage@message+1,UDPPutArray@cData+1
  9840  0046E6  C1EA  F022         	movff	SendUDPMessage@messageSize,UDPPutArray@wDataLen
  9841  0046EA  C1EB  F023         	movff	SendUDPMessage@messageSize+1,UDPPutArray@wDataLen+1
  9842  0046EE  EC93  F023         	call	_UDPPutArray	;wreg free
  9843  0046F2  C020  F16C         	movff	?_UDPPutArray,_m_sentBytes
  9844  0046F6  C021  F16D         	movff	?_UDPPutArray+1,_m_sentBytes+1
  9845                           
  9846                           ;NDC.c: 402: UDPFlush();
  9847  0046FA  ECCB  F012         	call	_UDPFlush	;wreg free
  9848                           
  9849                           ; BSR set to: 1
  9850                           ;NDC.c: 405: StackTask();
  9851  0046FE  EF41  F011         	goto	_StackTask	;wreg free
  9852  004702                     l10460:
  9853                           
  9854                           ;NDC.c: 410: StackTask();
  9855  004702  EC41  F011         	call	_StackTask	;wreg free
  9856                           
  9857                           ;NDC.c: 411: }
  9858                           ;NDC.c: 412: DelayMs(10);
  9859  004706  6A1D               	clrf	DelayMs@ms+1,c
  9860  004708  0E0A               	movlw	10
  9861  00470A  6E1C               	movwf	DelayMs@ms,c
  9862  00470C  EC1B  F026         	call	_DelayMs	;wreg free
  9863  004710  0100               	movlb	0	; () banked
  9864  004712  4BC4               	infsnz	SendUDPMessage@i& (0+255),f,b
  9865  004714  2BC5               	incf	(SendUDPMessage@i+1)& (0+255),f,b
  9866                           
  9867                           ; BSR set to: 0
  9868  004716  BFC5               	btfsc	(SendUDPMessage@i+1)& (0+255),7,b
  9869  004718  D7DB               	goto	l10450
  9870  00471A  51C5               	movf	(SendUDPMessage@i+1)& (0+255),w,b
  9871  00471C  E103               	bnz	u9620
  9872  00471E  0E0A               	movlw	10
  9873  004720  5DC4               	subwf	SendUDPMessage@i& (0+255),w,b
  9874  004722  E3D6               	bnc	l10450
  9875  004724                     u9620:
  9876  004724  0012               	return		;funcret
  9877  004726                     __end_of_SendUDPMessage:
  9878                           	opt stack 0
  9879                           tblptru	equ	0xFF8
  9880                           tblptrh	equ	0xFF7
  9881                           tblptrl	equ	0xFF6
  9882                           tablat	equ	0xFF5
  9883                           prodh	equ	0xFF4
  9884                           prodl	equ	0xFF3
  9885                           intcon	equ	0xFF2
  9886                           intcon2	equ	0xFF1
  9887                           postinc0	equ	0xFEE
  9888                           wreg	equ	0xFE8
  9889                           indf1	equ	0xFE7
  9890                           postdec1	equ	0xFE5
  9891                           fsr1h	equ	0xFE2
  9892                           fsr1l	equ	0xFE1
  9893                           indf2	equ	0xFDF
  9894                           postinc2	equ	0xFDE
  9895                           postdec2	equ	0xFDD
  9896                           fsr2h	equ	0xFDA
  9897                           fsr2l	equ	0xFD9
  9898                           status	equ	0xFD8
  9899                           
  9900 ;; *************** function _StackTask *****************
  9901 ;; Defined at:
  9902 ;;		line 218 in file "../framework/tcpip/src/common/stack_task.c"
  9903 ;; Parameters:    Size  Location     Type
  9904 ;;		None
  9905 ;; Auto vars:     Size  Location     Type
  9906 ;;  bCurrentLink    1   92[BANK0 ] unsigned char 
  9907 ;;  tempLocalIP     4   96[BANK0 ] struct .
  9908 ;;  dataCount       2   93[BANK0 ] unsigned int 
  9909 ;;  cIPFrameType    1   95[BANK0 ] unsigned char 
  9910 ;;  cFrameType      1   91[BANK0 ] unsigned char 
  9911 ;; Return value:  Size  Location     Type
  9912 ;;		None               void
  9913 ;; Registers used:
  9914 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  9915 ;; Tracked objects:
  9916 ;;		On entry : 0/1
  9917 ;;		On exit  : 0/0
  9918 ;;		Unchanged: 0/0
  9919 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9920 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9921 ;;      Locals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9922 ;;      Temps:          0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9923 ;;      Totals:         0      21       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9924 ;;Total ram usage:       21 bytes
  9925 ;; Hardware stack levels used:    1
  9926 ;; Hardware stack levels required when called:   13
  9927 ;; This function calls:
  9928 ;;		_ARPProcess
  9929 ;;		_DHCPInit
  9930 ;;		_DHCPIsBound
  9931 ;;		_DHCPTask
  9932 ;;		_ICMPProcess
  9933 ;;		_IPGetHeader
  9934 ;;		_MACGetHeader
  9935 ;;		_MACIsLinked
  9936 ;;		_UDPDiscard
  9937 ;;		_UDPProcess
  9938 ;;		_UDPTask
  9939 ;; This function is called by:
  9940 ;;		_SendUDPMessage
  9941 ;;		_main
  9942 ;; This function uses a non-reentrant model
  9943 ;;
  9944                           
  9945                           	psect	text63
  9946  002282                     __ptext63:
  9947                           	opt stack 0
  9948  002282                     _StackTask:
  9949                           	opt stack 17
  9950                           
  9951                           ;stack_task.c: 220: uint16_t dataCount;
  9952                           ;stack_task.c: 221: TCPIP_UINT32_VAL tempLocalIP;
  9953                           ;stack_task.c: 222: uint8_t cFrameType;
  9954                           ;stack_task.c: 223: uint8_t cIPFrameType;
  9955                           ;stack_task.c: 273: if (AppConfig.Flags.bIsDHCPEnabled) {
  9956                           
  9957                           ;incstack = 0
  9958  002282  0101               	movlb	1	; () banked
  9959  002284  ADA5               	btfss	(_AppConfig+44)& (0+255),6,b
  9960  002286  D029               	goto	l10390
  9961                           
  9962                           ; BSR set to: 1
  9963                           ;stack_task.c: 274: static bool bLastLinkState = 0;
  9964                           ;stack_task.c: 275: bool bCurrentLinkState;
  9965                           ;stack_task.c: 277: bCurrentLinkState = MACIsLinked();
  9966  002288  ECFF  F029         	call	_MACIsLinked	;wreg free
  9967  00228C  0100               	movlb	0	; () banked
  9968  00228E  6FBC               	movwf	StackTask@bCurrentLinkState& (0+255),b
  9969                           
  9970                           ; BSR set to: 0
  9971                           ;stack_task.c: 278: if (bCurrentLinkState != bLastLinkState) {
  9972  002290  0101               	movlb	1	; () banked
  9973  002292  5174               	movf	StackTask@bLastLinkState& (0+255),w,b
  9974  002294  0100               	movlb	0	; () banked
  9975  002296  19BC               	xorwf	StackTask@bCurrentLinkState& (0+255),w,b
  9976  002298  E018               	bz	l10384
  9977                           
  9978                           ; BSR set to: 0
  9979                           ;stack_task.c: 279: bLastLinkState = bCurrentLinkState;
  9980  00229A  C0BC  F174         	movff	StackTask@bCurrentLinkState,StackTask@bLastLinkState
  9981                           
  9982                           ; BSR set to: 0
  9983                           ;stack_task.c: 280: if (!bCurrentLinkState) {
  9984  00229E  51BC               	movf	StackTask@bCurrentLinkState& (0+255),w,b
  9985  0022A0  E114               	bnz	l10384
  9986                           
  9987                           ; BSR set to: 0
  9988                           ;stack_task.c: 281: AppConfig.MyIPAddr.Val = AppConfig.DefaultIPAddr.Val;
  9989  0022A2  C18D  F179         	movff	_AppConfig+20,_AppConfig
  9990  0022A6  C18E  F17A         	movff	_AppConfig+21,_AppConfig+1
  9991  0022AA  C18F  F17B         	movff	_AppConfig+22,_AppConfig+2
  9992  0022AE  C190  F17C         	movff	_AppConfig+23,_AppConfig+3
  9993                           
  9994                           ;stack_task.c: 282: AppConfig.MyMask.Val = AppConfig.DefaultMask.Val;
  9995  0022B2  C191  F17D         	movff	_AppConfig+24,_AppConfig+4
  9996  0022B6  C192  F17E         	movff	_AppConfig+25,_AppConfig+5
  9997  0022BA  C193  F17F         	movff	_AppConfig+26,_AppConfig+6
  9998  0022BE  C194  F180         	movff	_AppConfig+27,_AppConfig+7
  9999                           
 10000                           ;stack_task.c: 283: AppConfig.Flags.bInConfigMode = 1;
 10001  0022C2  0101               	movlb	1	; () banked
 10002  0022C4  8FA5               	bsf	(_AppConfig+44)& (0+255),7,b
 10003                           
 10004                           ; BSR set to: 1
 10005                           ;stack_task.c: 284: DHCPInit(0);
 10006  0022C6  EC9D  F026         	call	_DHCPInit
 10007  0022CA                     l10384:
 10008                           
 10009                           ; BSR set to: 0
 10010                           ;stack_task.c: 285: }
 10011                           ;stack_task.c: 286: }
 10012                           ;stack_task.c: 292: DHCPTask();
 10013  0022CA  EC06  F008         	call	_DHCPTask	;wreg free
 10014                           
 10015                           ; BSR set to: 0
 10016                           ;stack_task.c: 294: if (DHCPIsBound(0))
 10017  0022CE  EC5F  F02A         	call	_DHCPIsBound
 10018  0022D2  0900               	iorlw	0
 10019  0022D4  E002               	bz	l10390
 10020                           
 10021                           ; BSR set to: 0
 10022                           ;stack_task.c: 295: AppConfig.Flags.bInConfigMode = 0;
 10023  0022D6  0101               	movlb	1	; () banked
 10024  0022D8  9FA5               	bcf	(_AppConfig+44)& (0+255),7,b
 10025  0022DA                     l10390:
 10026                           
 10027                           ;stack_task.c: 296: }
 10028                           ;stack_task.c: 309: UDPTask();
 10029  0022DA  EC0A  F012         	call	_UDPTask	;wreg free
 10030  0022DE                     l10392:
 10031                           
 10032                           ;stack_task.c: 323: UDPDiscard();
 10033  0022DE  EC1C  F02A         	call	_UDPDiscard	;wreg free
 10034                           
 10035                           ;stack_task.c: 328: if (!MACGetHeader(&remoteNode.MACAddr, &cFrameType))
 10036  0022E2  0EBA               	movlw	low (_remoteNode+4)
 10037  0022E4  6E26               	movwf	MACGetHeader@remote,c
 10038  0022E6  0E01               	movlw	high (_remoteNode+4)
 10039  0022E8  6E27               	movwf	MACGetHeader@remote+1,c
 10040  0022EA  0EBB               	movlw	low StackTask@cFrameType
 10041  0022EC  6E28               	movwf	MACGetHeader@type,c
 10042  0022EE  EC0F  F01C         	call	_MACGetHeader	;wreg free
 10043  0022F2  0900               	iorlw	0
 10044  0022F4  E001 D086          	bnz	l10422
 10045  0022F8  0012               	return	
 10046  0022FA                     l10398:
 10047                           
 10048                           ; BSR set to: 0
 10049                           ;stack_task.c: 344: ARPProcess();
 10050  0022FA  ECDF  F015         	call	_ARPProcess	;wreg free
 10051                           
 10052                           ;stack_task.c: 345: break;
 10053  0022FE  D7EF               	goto	l10392
 10054  002300                     l10400:
 10055                           
 10056                           ; BSR set to: 0
 10057                           ;stack_task.c: 348: if (!IPGetHeader(&tempLocalIP, &remoteNode, &cIPFrameType, &dataCoun
      +                          t))
 10058  002300  0EB6               	movlw	low _remoteNode
 10059  002302  6F85               	movwf	IPGetHeader@remote& (0+255),b
 10060  002304  0E01               	movlw	high _remoteNode
 10061  002306  6F86               	movwf	(IPGetHeader@remote+1)& (0+255),b
 10062  002308  0EBF               	movlw	low StackTask@cIPFrameType
 10063  00230A  6F87               	movwf	IPGetHeader@protocol& (0+255),b
 10064  00230C  0EBD               	movlw	low StackTask@dataCount
 10065  00230E  6F88               	movwf	IPGetHeader@len& (0+255),b
 10066  002310  0EC0               	movlw	StackTask@tempLocalIP& (0+255)
 10067  002312  ECCD  F017         	call	_IPGetHeader
 10068  002316  0900               	iorlw	0
 10069  002318  E0E2               	bz	l10392
 10070                           
 10071                           ; BSR set to: 0
 10072                           ;stack_task.c: 352: if (cIPFrameType == (1u)) {
 10073  00231A  05BF               	decf	StackTask@cIPFrameType& (0+255),w,b
 10074  00231C  E15F               	bnz	l10414
 10075                           
 10076                           ; BSR set to: 0
 10077                           ;stack_task.c: 368: if ((tempLocalIP.Val == AppConfig.MyIPAddr.Val) ||
 10078                           ;stack_task.c: 369: (tempLocalIP.Val == 0xFFFFFFFF) ||
 10079                           ;stack_task.c: 373: (tempLocalIP.Val == ((AppConfig.MyIPAddr.Val & AppConfig.MyMask.Val)
      +                           | ~AppConfig.MyMask.Val))) {
 10080  00231E  0101               	movlb	1	; () banked
 10081  002320  5179               	movf	_AppConfig& (0+255),w,b
 10082  002322  0100               	movlb	0	; () banked
 10083  002324  19C0               	xorwf	StackTask@tempLocalIP& (0+255),w,b
 10084  002326  E10F               	bnz	u9530
 10085  002328  0101               	movlb	1	; () banked
 10086  00232A  517A               	movf	(_AppConfig+1)& (0+255),w,b
 10087  00232C  0100               	movlb	0	; () banked
 10088  00232E  19C1               	xorwf	(StackTask@tempLocalIP+1)& (0+255),w,b
 10089  002330  E10A               	bnz	u9530
 10090  002332  0101               	movlb	1	; () banked
 10091  002334  517B               	movf	(_AppConfig+2)& (0+255),w,b
 10092  002336  0100               	movlb	0	; () banked
 10093  002338  19C2               	xorwf	(StackTask@tempLocalIP+2)& (0+255),w,b
 10094  00233A  E105               	bnz	u9530
 10095  00233C  0101               	movlb	1	; () banked
 10096  00233E  517C               	movf	(_AppConfig+3)& (0+255),w,b
 10097  002340  0100               	movlb	0	; () banked
 10098  002342  19C3               	xorwf	(StackTask@tempLocalIP+3)& (0+255),w,b
 10099  002344  E040               	bz	l10412
 10100  002346                     u9530:
 10101                           
 10102                           ; BSR set to: 0
 10103  002346  29C0               	incf	StackTask@tempLocalIP& (0+255),w,b
 10104  002348  E106               	bnz	u9540
 10105  00234A  29C1               	incf	(StackTask@tempLocalIP+1)& (0+255),w,b
 10106  00234C  E104               	bnz	u9540
 10107  00234E  29C2               	incf	(StackTask@tempLocalIP+2)& (0+255),w,b
 10108  002350  E102               	bnz	u9540
 10109  002352  29C3               	incf	(StackTask@tempLocalIP+3)& (0+255),w,b
 10110  002354  E038               	bz	l10412
 10111  002356                     u9540:
 10112                           
 10113                           ; BSR set to: 0
 10114  002356  C17D  F0AF         	movff	_AppConfig+4,??_StackTask
 10115  00235A  C17E  F0B0         	movff	_AppConfig+5,??_StackTask+1
 10116  00235E  C17F  F0B1         	movff	_AppConfig+6,??_StackTask+2
 10117  002362  C180  F0B2         	movff	_AppConfig+7,??_StackTask+3
 10118  002366  1FAF               	comf	??_StackTask& (0+255),f,b
 10119  002368  1FB0               	comf	(??_StackTask+1)& (0+255),f,b
 10120  00236A  1FB1               	comf	(??_StackTask+2)& (0+255),f,b
 10121  00236C  1FB2               	comf	(??_StackTask+3)& (0+255),f,b
 10122  00236E  0101               	movlb	1	; () banked
 10123  002370  5179               	movf	_AppConfig& (0+255),w,b
 10124  002372  157D               	andwf	(_AppConfig+4)& (0+255),w,b
 10125  002374  0100               	movlb	0	; () banked
 10126  002376  6FB3               	movwf	(??_StackTask+4)& (0+255),b
 10127  002378  0101               	movlb	1	; () banked
 10128  00237A  517A               	movf	(_AppConfig+1)& (0+255),w,b
 10129  00237C  157E               	andwf	(_AppConfig+5)& (0+255),w,b
 10130  00237E  0100               	movlb	0	; () banked
 10131  002380  6FB4               	movwf	(??_StackTask+5)& (0+255),b
 10132  002382  0101               	movlb	1	; () banked
 10133  002384  517B               	movf	(_AppConfig+2)& (0+255),w,b
 10134  002386  157F               	andwf	(_AppConfig+6)& (0+255),w,b
 10135  002388  0100               	movlb	0	; () banked
 10136  00238A  6FB5               	movwf	(??_StackTask+6)& (0+255),b
 10137  00238C  0101               	movlb	1	; () banked
 10138  00238E  517C               	movf	(_AppConfig+3)& (0+255),w,b
 10139  002390  1580               	andwf	(_AppConfig+7)& (0+255),w,b
 10140  002392  0100               	movlb	0	; () banked
 10141  002394  6FB6               	movwf	(??_StackTask+7)& (0+255),b
 10142  002396  51AF               	movf	??_StackTask& (0+255),w,b
 10143  002398  11B3               	iorwf	(??_StackTask+4)& (0+255),w,b
 10144  00239A  6FB7               	movwf	(??_StackTask+8)& (0+255),b
 10145  00239C  51B0               	movf	(??_StackTask+1)& (0+255),w,b
 10146  00239E  11B4               	iorwf	(??_StackTask+5)& (0+255),w,b
 10147  0023A0  6FB8               	movwf	(??_StackTask+9)& (0+255),b
 10148  0023A2  51B1               	movf	(??_StackTask+2)& (0+255),w,b
 10149  0023A4  11B5               	iorwf	(??_StackTask+6)& (0+255),w,b
 10150  0023A6  6FB9               	movwf	(??_StackTask+10)& (0+255),b
 10151  0023A8  51B2               	movf	(??_StackTask+3)& (0+255),w,b
 10152  0023AA  11B6               	iorwf	(??_StackTask+7)& (0+255),w,b
 10153  0023AC  6FBA               	movwf	(??_StackTask+11)& (0+255),b
 10154  0023AE  51C0               	movf	StackTask@tempLocalIP& (0+255),w,b
 10155  0023B0  19B7               	xorwf	(??_StackTask+8)& (0+255),w,b
 10156  0023B2  E195               	bnz	l10392
 10157  0023B4  51C1               	movf	(StackTask@tempLocalIP+1)& (0+255),w,b
 10158  0023B6  19B8               	xorwf	(??_StackTask+9)& (0+255),w,b
 10159  0023B8  E192               	bnz	l10392
 10160  0023BA  51C2               	movf	(StackTask@tempLocalIP+2)& (0+255),w,b
 10161  0023BC  19B9               	xorwf	(??_StackTask+10)& (0+255),w,b
 10162  0023BE  E18F               	bnz	l10392
 10163  0023C0  51C3               	movf	(StackTask@tempLocalIP+3)& (0+255),w,b
 10164  0023C2  19BA               	xorwf	(??_StackTask+11)& (0+255),w,b
 10165  0023C4  E18C               	bnz	l10392
 10166  0023C6                     l10412:
 10167                           
 10168                           ; BSR set to: 0
 10169                           ;stack_task.c: 374: ICMPProcess(&remoteNode, dataCount);
 10170  0023C6  0EB6               	movlw	low _remoteNode
 10171  0023C8  6F85               	movwf	ICMPProcess@remote& (0+255),b
 10172  0023CA  0E01               	movlw	high _remoteNode
 10173  0023CC  6F86               	movwf	(ICMPProcess@remote+1)& (0+255),b
 10174  0023CE  C0BD  F087         	movff	StackTask@dataCount,ICMPProcess@len
 10175  0023D2  C0BE  F088         	movff	StackTask@dataCount+1,ICMPProcess@len+1
 10176  0023D6  ECBF  F01C         	call	_ICMPProcess	;wreg free
 10177  0023DA  D781               	goto	l10392
 10178  0023DC                     l10414:
 10179                           
 10180                           ; BSR set to: 0
 10181                           ;stack_task.c: 378: }
 10182                           ;stack_task.c: 389: if (cIPFrameType == (17u)) {
 10183  0023DC  0E11               	movlw	17
 10184  0023DE  19BF               	xorwf	StackTask@cIPFrameType& (0+255),w,b
 10185  0023E0  E001 D77D          	bnz	l10392
 10186                           
 10187                           ; BSR set to: 0
 10188                           ;stack_task.c: 391: if (UDPProcess(&remoteNode, &tempLocalIP, dataCount))
 10189  0023E4  0EB6               	movlw	low _remoteNode
 10190  0023E6  6F7D               	movwf	UDPProcess@remoteNode& (0+255),b
 10191  0023E8  0E01               	movlw	high _remoteNode
 10192  0023EA  6F7E               	movwf	(UDPProcess@remoteNode+1)& (0+255),b
 10193  0023EC  0EC0               	movlw	low StackTask@tempLocalIP
 10194  0023EE  6F7F               	movwf	UDPProcess@localIP& (0+255),b
 10195  0023F0  C0BD  F080         	movff	StackTask@dataCount,UDPProcess@len
 10196  0023F4  C0BE  F081         	movff	StackTask@dataCount+1,UDPProcess@len+1
 10197  0023F8  EC51  F015         	call	_UDPProcess	;wreg free
 10198  0023FC  0900               	iorlw	0
 10199  0023FE  E101 D76E          	bz	l10392
 10200  002402  0012               	return	
 10201  002404                     l10422:
 10202  002404  0100               	movlb	0	; () banked
 10203  002406  51BB               	movf	StackTask@cFrameType& (0+255),w,b
 10204                           
 10205                           ; Switch size 1, requested type "speed"
 10206                           ; Number of cases is 2, Range of values is 0 to 6
 10207                           ; switch strategies available:
 10208                           ; Name         Instructions Cycles
 10209                           ; simple_byte            7     4 (average)
 10210                           ;	Chosen strategy is simple_byte
 10211  002408  E101 D77A          	bz	l10400
 10212  00240C  0A06               	xorlw	6	; case 6
 10213  00240E  E101 D774          	bz	l10398
 10214  002412  D765               	goto	l10392
 10215  002414                     __end_of_StackTask:
 10216                           	opt stack 0
 10217                           tblptru	equ	0xFF8
 10218                           tblptrh	equ	0xFF7
 10219                           tblptrl	equ	0xFF6
 10220                           tablat	equ	0xFF5
 10221                           prodh	equ	0xFF4
 10222                           prodl	equ	0xFF3
 10223                           intcon	equ	0xFF2
 10224                           intcon2	equ	0xFF1
 10225                           postinc0	equ	0xFEE
 10226                           wreg	equ	0xFE8
 10227                           indf1	equ	0xFE7
 10228                           postdec1	equ	0xFE5
 10229                           fsr1h	equ	0xFE2
 10230                           fsr1l	equ	0xFE1
 10231                           indf2	equ	0xFDF
 10232                           postinc2	equ	0xFDE
 10233                           postdec2	equ	0xFDD
 10234                           fsr2h	equ	0xFDA
 10235                           fsr2l	equ	0xFD9
 10236                           status	equ	0xFD8
 10237                           
 10238 ;; *************** function _UDPTask *****************
 10239 ;; Defined at:
 10240 ;;		line 269 in file "../framework/tcpip/src/udp.c"
 10241 ;; Parameters:    Size  Location     Type
 10242 ;;		None
 10243 ;; Auto vars:     Size  Location     Type
 10244 ;;  ss              1   50[BANK0 ] unsigned char 
 10245 ;; Return value:  Size  Location     Type
 10246 ;;		None               void
 10247 ;; Registers used:
 10248 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 10249 ;; Tracked objects:
 10250 ;;		On entry : E/1
 10251 ;;		On exit  : F/0
 10252 ;;		Unchanged: 0/0
 10253 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10254 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10255 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10256 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10257 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10258 ;;Total ram usage:        5 bytes
 10259 ;; Hardware stack levels used:    1
 10260 ;; Hardware stack levels required when called:   12
 10261 ;; This function calls:
 10262 ;;		_ARPIsResolved
 10263 ;;		_ARPResolve
 10264 ;;		_TickGetDiv256
 10265 ;; This function is called by:
 10266 ;;		_StackTask
 10267 ;; This function uses a non-reentrant model
 10268 ;;
 10269                           
 10270                           	psect	text64
 10271  002414                     __ptext64:
 10272                           	opt stack 0
 10273  002414                     _UDPTask:
 10274                           	opt stack 17
 10275                           
 10276                           ;udp.c: 271: UDP_SOCKET ss;
 10277                           ;udp.c: 273: for (ss = 0; ss < (10u); ss++) {
 10278                           
 10279                           ;incstack = 0
 10280  002414  0100               	movlb	0	; () banked
 10281  002416  6B92               	clrf	UDPTask@ss& (0+255),b
 10282  002418                     l10126:
 10283                           
 10284                           ; BSR set to: 0
 10285                           ;udp.c: 277: if ((UDPSocketInfo[ss].smState == UDP_OPENED) ||
 10286                           ;udp.c: 278: (UDPSocketInfo[ss].smState == UDP_CLOSED))
 10287  002418  5192               	movf	UDPTask@ss& (0+255),w,b
 10288  00241A  0D17               	mullw	23
 10289  00241C  0E0E               	movlw	low (_UDPSocketInfo+14)
 10290  00241E  24F3               	addwf	prodl,w,c
 10291  002420  6ED9               	movwf	fsr2l,c
 10292  002422  0E02               	movlw	high (_UDPSocketInfo+14)
 10293  002424  20F4               	addwfc	prodh,w,c
 10294  002426  6EDA               	movwf	fsr2h,c
 10295  002428  0E05               	movlw	5
 10296  00242A  18DE               	xorwf	postinc2,w,c
 10297  00242C  E101 D0AE          	bz	l10150
 10298                           
 10299                           ; BSR set to: 0
 10300  002430  5192               	movf	UDPTask@ss& (0+255),w,b
 10301  002432  0D17               	mullw	23
 10302  002434  0E0E               	movlw	low (_UDPSocketInfo+14)
 10303  002436  24F3               	addwf	prodl,w,c
 10304  002438  6ED9               	movwf	fsr2l,c
 10305  00243A  0E02               	movlw	high (_UDPSocketInfo+14)
 10306  00243C  20F4               	addwfc	prodh,w,c
 10307  00243E  6EDA               	movwf	fsr2h,c
 10308  002440  0E04               	movlw	4
 10309  002442  18DE               	xorwf	postinc2,w,c
 10310  002444  E101 D0A2          	bz	l10150
 10311  002448  D090               	goto	l10148
 10312  00244A                     l10130:
 10313                           
 10314                           ; BSR set to: 0
 10315                           ;udp.c: 323: UDPSocketInfo[ss].eventTime = (uint16_t) TickGetDiv256();
 10316  00244A  EC63  F028         	call	_TickGetDiv256	;wreg free
 10317  00244E  0100               	movlb	0	; () banked
 10318  002450  5192               	movf	UDPTask@ss& (0+255),w,b
 10319  002452  0D17               	mullw	23
 10320  002454  0E15               	movlw	low (_UDPSocketInfo+21)
 10321  002456  24F3               	addwf	prodl,w,c
 10322  002458  6ED9               	movwf	fsr2l,c
 10323  00245A  0E02               	movlw	high (_UDPSocketInfo+21)
 10324  00245C  20F4               	addwfc	prodh,w,c
 10325  00245E  6EDA               	movwf	fsr2h,c
 10326  002460  C01C  FFDE         	movff	?_TickGetDiv256,postinc2
 10327  002464  C01D  FFDD         	movff	?_TickGetDiv256+1,postdec2
 10328                           
 10329                           ; BSR set to: 0
 10330                           ;udp.c: 324: ARPResolve(&UDPSocketInfo[ss].remote.remoteNode.IPAddr);
 10331  002468  5192               	movf	UDPTask@ss& (0+255),w,b
 10332  00246A  0D17               	mullw	23
 10333  00246C  0E00               	movlw	low _UDPSocketInfo
 10334  00246E  24F3               	addwf	prodl,w,c
 10335  002470  6F60               	movwf	ARPResolve@IPAddr& (0+255),b
 10336  002472  0E02               	movlw	high _UDPSocketInfo
 10337  002474  20F4               	addwfc	prodh,w,c
 10338  002476  6F61               	movwf	(ARPResolve@IPAddr+1)& (0+255),b
 10339  002478  EC11  F019         	call	_ARPResolve	;wreg free
 10340                           
 10341                           ;udp.c: 325: UDPSocketInfo[ss].smState = UDP_GATEWAY_GET_ARP;
 10342  00247C  0100               	movlb	0	; () banked
 10343  00247E  5192               	movf	UDPTask@ss& (0+255),w,b
 10344  002480  0D17               	mullw	23
 10345  002482  0E0E               	movlw	low (_UDPSocketInfo+14)
 10346  002484  24F3               	addwf	prodl,w,c
 10347  002486  6ED9               	movwf	fsr2l,c
 10348  002488  0E02               	movlw	high (_UDPSocketInfo+14)
 10349  00248A  20F4               	addwfc	prodh,w,c
 10350  00248C  6EDA               	movwf	fsr2h,c
 10351  00248E  0E03               	movlw	3
 10352  002490  D06A               	goto	L4
 10353  002492                     l10136:
 10354                           
 10355                           ; BSR set to: 0
 10356                           ;udp.c: 329: if (!ARPIsResolved(&UDPSocketInfo[ss].remote.remoteNode.IPAddr,
 10357                           ;udp.c: 330: &UDPSocketInfo[ss].remote.remoteNode.MACAddr)) {
 10358  002492  5192               	movf	UDPTask@ss& (0+255),w,b
 10359  002494  0D17               	mullw	23
 10360  002496  0E00               	movlw	low _UDPSocketInfo
 10361  002498  24F3               	addwf	prodl,w,c
 10362  00249A  6E1C               	movwf	ARPIsResolved@IPAddr,c
 10363  00249C  0E02               	movlw	high _UDPSocketInfo
 10364  00249E  20F4               	addwfc	prodh,w,c
 10365  0024A0  6E1D               	movwf	ARPIsResolved@IPAddr+1,c
 10366  0024A2  5192               	movf	UDPTask@ss& (0+255),w,b
 10367  0024A4  0D17               	mullw	23
 10368  0024A6  0E04               	movlw	low (_UDPSocketInfo+4)
 10369  0024A8  24F3               	addwf	prodl,w,c
 10370  0024AA  6E1E               	movwf	ARPIsResolved@MACAddr,c
 10371  0024AC  0E02               	movlw	high (_UDPSocketInfo+4)
 10372  0024AE  20F4               	addwfc	prodh,w,c
 10373  0024B0  6E1F               	movwf	ARPIsResolved@MACAddr+1,c
 10374  0024B2  EC73  F019         	call	_ARPIsResolved	;wreg free
 10375  0024B6  0900               	iorlw	0
 10376  0024B8  E14C               	bnz	l10144
 10377                           
 10378                           ;udp.c: 335: if ((uint16_t) TickGetDiv256() - UDPSocketInfo[ss].eventTime > (uint16_t) U
      +                          DPSocketInfo[ss].retryInterval) {
 10379  0024BA  0100               	movlb	0	; () banked
 10380  0024BC  5192               	movf	UDPTask@ss& (0+255),w,b
 10381  0024BE  0D17               	mullw	23
 10382  0024C0  0E15               	movlw	low (_UDPSocketInfo+21)
 10383  0024C2  24F3               	addwf	prodl,w,c
 10384  0024C4  6ED9               	movwf	fsr2l,c
 10385  0024C6  0E02               	movlw	high (_UDPSocketInfo+21)
 10386  0024C8  20F4               	addwfc	prodh,w,c
 10387  0024CA  6EDA               	movwf	fsr2h,c
 10388  0024CC  CFDE F08E          	movff	postinc2,??_UDPTask
 10389  0024D0  CFDD F08F          	movff	postdec2,??_UDPTask+1
 10390  0024D4  EC63  F028         	call	_TickGetDiv256	;wreg free
 10391  0024D8  0100               	movlb	0	; () banked
 10392  0024DA  518E               	movf	??_UDPTask& (0+255),w,b
 10393  0024DC  5E1C               	subwf	?_TickGetDiv256,f,c
 10394  0024DE  518F               	movf	(??_UDPTask+1)& (0+255),w,b
 10395  0024E0  5A1D               	subwfb	?_TickGetDiv256+1,f,c
 10396  0024E2  5192               	movf	UDPTask@ss& (0+255),w,b
 10397  0024E4  0D17               	mullw	23
 10398  0024E6  0E0F               	movlw	low (_UDPSocketInfo+15)
 10399  0024E8  24F3               	addwf	prodl,w,c
 10400  0024EA  6ED9               	movwf	fsr2l,c
 10401  0024EC  0E02               	movlw	high (_UDPSocketInfo+15)
 10402  0024EE  20F4               	addwfc	prodh,w,c
 10403  0024F0  6EDA               	movwf	fsr2h,c
 10404  0024F2  501C               	movf	?_TickGetDiv256,w,c
 10405  0024F4  5CDE               	subwf	postinc2,w,c
 10406  0024F6  501D               	movf	?_TickGetDiv256+1,w,c
 10407  0024F8  58DE               	subwfb	postinc2,w,c
 10408  0024FA  E248               	bc	l10150
 10409                           
 10410                           ; BSR set to: 0
 10411                           ;udp.c: 337: if (UDPSocketInfo[ss].retryCount < 6u) {
 10412  0024FC  5192               	movf	UDPTask@ss& (0+255),w,b
 10413  0024FE  0D17               	mullw	23
 10414  002500  0E13               	movlw	low (_UDPSocketInfo+19)
 10415  002502  24F3               	addwf	prodl,w,c
 10416  002504  6ED9               	movwf	fsr2l,c
 10417  002506  0E02               	movlw	high (_UDPSocketInfo+19)
 10418  002508  20F4               	addwfc	prodh,w,c
 10419  00250A  6EDA               	movwf	fsr2h,c
 10420  00250C  0E06               	movlw	6
 10421  00250E  60DF               	cpfslt	indf2,c
 10422  002510  D016               	goto	l1766
 10423                           
 10424                           ; BSR set to: 0
 10425                           ;udp.c: 338: UDPSocketInfo[ss].retryCount++;
 10426  002512  5192               	movf	UDPTask@ss& (0+255),w,b
 10427  002514  0D17               	mullw	23
 10428  002516  0E13               	movlw	low (_UDPSocketInfo+19)
 10429  002518  24F3               	addwf	prodl,w,c
 10430  00251A  6ED9               	movwf	fsr2l,c
 10431  00251C  0E02               	movlw	high (_UDPSocketInfo+19)
 10432  00251E  20F4               	addwfc	prodh,w,c
 10433  002520  6EDA               	movwf	fsr2h,c
 10434  002522  2ADF               	incf	indf2,f,c
 10435                           
 10436                           ;udp.c: 339: UDPSocketInfo[ss].retryInterval <<= 1;
 10437  002524  5192               	movf	UDPTask@ss& (0+255),w,b
 10438  002526  0D17               	mullw	23
 10439  002528  0E0F               	movlw	low (_UDPSocketInfo+15)
 10440  00252A  24F3               	addwf	prodl,w,c
 10441  00252C  6ED9               	movwf	fsr2l,c
 10442  00252E  0E02               	movlw	high (_UDPSocketInfo+15)
 10443  002530  20F4               	addwfc	prodh,w,c
 10444  002532  6EDA               	movwf	fsr2h,c
 10445  002534  90D8               	bcf	status,0,c
 10446  002536  36DE               	rlcf	postinc2,f,c
 10447  002538  36DE               	rlcf	postinc2,f,c
 10448  00253A  36DE               	rlcf	postinc2,f,c
 10449  00253C  36DE               	rlcf	postinc2,f,c
 10450  00253E                     l1766:
 10451                           
 10452                           ; BSR set to: 0
 10453                           ;udp.c: 340: }
 10454                           ;udp.c: 342: UDPSocketInfo[ss].smState = UDP_GATEWAY_SEND_ARP;
 10455  00253E  5192               	movf	UDPTask@ss& (0+255),w,b
 10456  002540  0D17               	mullw	23
 10457  002542  0E0E               	movlw	low (_UDPSocketInfo+14)
 10458  002544  24F3               	addwf	prodl,w,c
 10459  002546  6ED9               	movwf	fsr2l,c
 10460  002548  0E02               	movlw	high (_UDPSocketInfo+14)
 10461  00254A  20F4               	addwfc	prodh,w,c
 10462  00254C  6EDA               	movwf	fsr2h,c
 10463  00254E  0E02               	movlw	2
 10464  002550  D00A               	goto	L4
 10465  002552                     l10144:
 10466                           
 10467                           ;udp.c: 345: UDPSocketInfo[ss].smState = UDP_OPENED;
 10468  002552  0100               	movlb	0	; () banked
 10469  002554  5192               	movf	UDPTask@ss& (0+255),w,b
 10470  002556  0D17               	mullw	23
 10471  002558  0E0E               	movlw	low (_UDPSocketInfo+14)
 10472  00255A  24F3               	addwf	prodl,w,c
 10473  00255C  6ED9               	movwf	fsr2l,c
 10474  00255E  0E02               	movlw	high (_UDPSocketInfo+14)
 10475  002560  20F4               	addwfc	prodh,w,c
 10476  002562  6EDA               	movwf	fsr2h,c
 10477  002564  0E05               	movlw	5
 10478  002566                     L4:
 10479  002566  6EDF               	movwf	indf2,c
 10480  002568  D011               	goto	l10150
 10481  00256A                     l10148:
 10482                           
 10483                           ; BSR set to: 0
 10484  00256A  5192               	movf	UDPTask@ss& (0+255),w,b
 10485  00256C  0D17               	mullw	23
 10486  00256E  0E0E               	movlw	low (_UDPSocketInfo+14)
 10487  002570  24F3               	addwf	prodl,w,c
 10488  002572  6ED9               	movwf	fsr2l,c
 10489  002574  0E02               	movlw	high (_UDPSocketInfo+14)
 10490  002576  20F4               	addwfc	prodh,w,c
 10491  002578  6EDA               	movwf	fsr2h,c
 10492  00257A  50DF               	movf	indf2,w,c
 10493                           
 10494                           ; Switch size 1, requested type "speed"
 10495                           ; Number of cases is 4, Range of values is 2 to 5
 10496                           ; switch strategies available:
 10497                           ; Name         Instructions Cycles
 10498                           ; simple_byte           13     7 (average)
 10499                           ;	Chosen strategy is simple_byte
 10500  00257C  0A02               	xorlw	2	; case 2
 10501  00257E  E101 D764          	bz	l10130
 10502  002582  0A01               	xorlw	1	; case 3
 10503  002584  E086               	bz	l10136
 10504  002586  0A07               	xorlw	7	; case 4
 10505  002588  A4D8               	btfss	status,2,c
 10506  00258A  0A01               	xorlw	1	; case 5
 10507  00258C                     l10150:
 10508                           
 10509                           ; BSR set to: 0
 10510  00258C  2B92               	incf	UDPTask@ss& (0+255),f,b
 10511                           
 10512                           ; BSR set to: 0
 10513  00258E  0E09               	movlw	9
 10514  002590  6592               	cpfsgt	UDPTask@ss& (0+255),b
 10515  002592  D742               	goto	l10126
 10516  002594  0C09               	retlw	9
 10517  002596                     __end_of_UDPTask:
 10518                           	opt stack 0
 10519                           tblptru	equ	0xFF8
 10520                           tblptrh	equ	0xFF7
 10521                           tblptrl	equ	0xFF6
 10522                           tablat	equ	0xFF5
 10523                           prodh	equ	0xFF4
 10524                           prodl	equ	0xFF3
 10525                           intcon	equ	0xFF2
 10526                           intcon2	equ	0xFF1
 10527                           postinc0	equ	0xFEE
 10528                           wreg	equ	0xFE8
 10529                           indf1	equ	0xFE7
 10530                           postdec1	equ	0xFE5
 10531                           fsr1h	equ	0xFE2
 10532                           fsr1l	equ	0xFE1
 10533                           indf2	equ	0xFDF
 10534                           postinc2	equ	0xFDE
 10535                           postdec2	equ	0xFDD
 10536                           fsr2h	equ	0xFDA
 10537                           fsr2l	equ	0xFD9
 10538                           status	equ	0xFD8
 10539                           
 10540 ;; *************** function _TickGetDiv256 *****************
 10541 ;; Defined at:
 10542 ;;		line 286 in file "../framework/tcpip/src/common/tick.c"
 10543 ;; Parameters:    Size  Location     Type
 10544 ;;		None
 10545 ;; Auto vars:     Size  Location     Type
 10546 ;;  dw              4   31[COMRAM] unsigned long 
 10547 ;; Return value:  Size  Location     Type
 10548 ;;                  4   27[COMRAM] unsigned long 
 10549 ;; Registers used:
 10550 ;;		fsr2l, fsr2h, cstack
 10551 ;; Tracked objects:
 10552 ;;		On entry : E/0
 10553 ;;		On exit  : 0/0
 10554 ;;		Unchanged: 0/0
 10555 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10556 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10557 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10558 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10559 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10560 ;;Total ram usage:        8 bytes
 10561 ;; Hardware stack levels used:    1
 10562 ;; Hardware stack levels required when called:    7
 10563 ;; This function calls:
 10564 ;;		_GetTickCopy
 10565 ;; This function is called by:
 10566 ;;		_UDPTask
 10567 ;; This function uses a non-reentrant model
 10568 ;;
 10569                           
 10570                           	psect	text65
 10571  0050C6                     __ptext65:
 10572                           	opt stack 0
 10573  0050C6                     _TickGetDiv256:
 10574                           	opt stack 21
 10575                           
 10576                           ;tick.c: 288: uint32_t dw;
 10577                           ;tick.c: 290: GetTickCopy();
 10578                           
 10579                           ; BSR set to: 0
 10580                           ;incstack = 0
 10581  0050C6  EC25  F028         	call	_GetTickCopy	;wreg free
 10582                           
 10583                           ;tick.c: 291: ((uint8_t *) & dw)[0] = vTickReading[1];
 10584  0050CA  C02A  F020         	movff	_vTickReading+1,TickGetDiv256@dw	;volatile
 10585                           
 10586                           ;tick.c: 292: ((uint8_t *) & dw)[1] = vTickReading[2];
 10587  0050CE  C02B  F021         	movff	_vTickReading+2,TickGetDiv256@dw+1	;volatile
 10588                           
 10589                           ;tick.c: 293: ((uint8_t *) & dw)[2] = vTickReading[3];
 10590  0050D2  C02C  F022         	movff	_vTickReading+3,TickGetDiv256@dw+2	;volatile
 10591                           
 10592                           ;tick.c: 294: ((uint8_t *) & dw)[3] = vTickReading[4];
 10593  0050D6  C02D  F023         	movff	_vTickReading+4,TickGetDiv256@dw+3	;volatile
 10594                           
 10595                           ;tick.c: 296: return dw;
 10596  0050DA  C020  F01C         	movff	TickGetDiv256@dw,?_TickGetDiv256
 10597  0050DE  C021  F01D         	movff	TickGetDiv256@dw+1,?_TickGetDiv256+1
 10598  0050E2  C022  F01E         	movff	TickGetDiv256@dw+2,?_TickGetDiv256+2
 10599  0050E6  C023  F01F         	movff	TickGetDiv256@dw+3,?_TickGetDiv256+3
 10600  0050EA  0012               	return		;funcret
 10601  0050EC                     __end_of_TickGetDiv256:
 10602                           	opt stack 0
 10603                           tblptru	equ	0xFF8
 10604                           tblptrh	equ	0xFF7
 10605                           tblptrl	equ	0xFF6
 10606                           tablat	equ	0xFF5
 10607                           prodh	equ	0xFF4
 10608                           prodl	equ	0xFF3
 10609                           intcon	equ	0xFF2
 10610                           intcon2	equ	0xFF1
 10611                           postinc0	equ	0xFEE
 10612                           wreg	equ	0xFE8
 10613                           indf1	equ	0xFE7
 10614                           postdec1	equ	0xFE5
 10615                           fsr1h	equ	0xFE2
 10616                           fsr1l	equ	0xFE1
 10617                           indf2	equ	0xFDF
 10618                           postinc2	equ	0xFDE
 10619                           postdec2	equ	0xFDD
 10620                           fsr2h	equ	0xFDA
 10621                           fsr2l	equ	0xFD9
 10622                           status	equ	0xFD8
 10623                           
 10624 ;; *************** function _ARPResolve *****************
 10625 ;; Defined at:
 10626 ;;		line 531 in file "../framework/tcpip/src/arp.c"
 10627 ;; Parameters:    Size  Location     Type
 10628 ;;  IPAddr          2    0[BANK0 ] PTR struct .
 10629 ;;		 -> UDPSocketInfo.remote(10), UDPSocketInfo(230), 
 10630 ;; Auto vars:     Size  Location     Type
 10631 ;;  packet         28   18[BANK0 ] struct .
 10632 ;; Return value:  Size  Location     Type
 10633 ;;		None               void
 10634 ;; Registers used:
 10635 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 10636 ;; Tracked objects:
 10637 ;;		On entry : F/0
 10638 ;;		On exit  : 0/0
 10639 ;;		Unchanged: 0/0
 10640 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10641 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10642 ;;      Locals:         0      32       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10643 ;;      Temps:          0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10644 ;;      Totals:         0      46       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10645 ;;Total ram usage:       46 bytes
 10646 ;; Hardware stack levels used:    1
 10647 ;; Hardware stack levels required when called:   11
 10648 ;; This function calls:
 10649 ;;		_ARPPut
 10650 ;; This function is called by:
 10651 ;;		_UDPTask
 10652 ;; This function uses a non-reentrant model
 10653 ;;
 10654                           
 10655                           	psect	text66
 10656  003222                     __ptext66:
 10657                           	opt stack 0
 10658  003222                     _ARPResolve:
 10659                           	opt stack 17
 10660                           
 10661                           ; BSR set to: 0
 10662                           ;arp.c: 533: ARP_PACKET packet;
 10663                           ;arp.c: 556: packet.Operation = 0x0001u;
 10664                           
 10665                           ;incstack = 0
 10666  003222  6B79               	clrf	(ARPResolve@packet+7)& (0+255),b
 10667  003224  0E01               	movlw	1
 10668  003226  6F78               	movwf	(ARPResolve@packet+6)& (0+255),b
 10669                           
 10670                           ; BSR set to: 0
 10671                           ;arp.c: 557: packet.TargetMACAddr.v[0] = 0xff;
 10672  003228  6984               	setf	(ARPResolve@packet+18)& (0+255),b
 10673                           
 10674                           ; BSR set to: 0
 10675                           ;arp.c: 558: packet.TargetMACAddr.v[1] = 0xff;
 10676  00322A  6985               	setf	(ARPResolve@packet+19)& (0+255),b
 10677                           
 10678                           ; BSR set to: 0
 10679                           ;arp.c: 559: packet.TargetMACAddr.v[2] = 0xff;
 10680  00322C  6986               	setf	(ARPResolve@packet+20)& (0+255),b
 10681                           
 10682                           ; BSR set to: 0
 10683                           ;arp.c: 560: packet.TargetMACAddr.v[3] = 0xff;
 10684  00322E  6987               	setf	(ARPResolve@packet+21)& (0+255),b
 10685                           
 10686                           ; BSR set to: 0
 10687                           ;arp.c: 561: packet.TargetMACAddr.v[4] = 0xff;
 10688  003230  6988               	setf	(ARPResolve@packet+22)& (0+255),b
 10689                           
 10690                           ; BSR set to: 0
 10691                           ;arp.c: 562: packet.TargetMACAddr.v[5] = 0xff;
 10692  003232  6989               	setf	(ARPResolve@packet+23)& (0+255),b
 10693                           
 10694                           ; BSR set to: 0
 10695                           ;arp.c: 567: packet.TargetIPAddr = ((AppConfig.MyIPAddr.Val ^ IPAddr->Val) & AppConfig.M
      +                          yMask.Val) ? AppConfig.MyGateway : *IPAddr;
 10696  003234  C060  FFD9         	movff	ARPResolve@IPAddr,fsr2l
 10697  003238  C061  FFDA         	movff	ARPResolve@IPAddr+1,fsr2h
 10698  00323C  CFDE F062          	movff	postinc2,??_ARPResolve
 10699  003240  CFDE F063          	movff	postinc2,??_ARPResolve+1
 10700  003244  CFDE F064          	movff	postinc2,??_ARPResolve+2
 10701  003248  CFDE F065          	movff	postinc2,??_ARPResolve+3
 10702  00324C  0101               	movlb	1	; () banked
 10703  00324E  5179               	movf	_AppConfig& (0+255),w,b
 10704  003250  0100               	movlb	0	; () banked
 10705  003252  1962               	xorwf	??_ARPResolve& (0+255),w,b
 10706  003254  6F66               	movwf	(??_ARPResolve+4)& (0+255),b
 10707  003256  0101               	movlb	1	; () banked
 10708  003258  517A               	movf	(_AppConfig+1)& (0+255),w,b
 10709  00325A  0100               	movlb	0	; () banked
 10710  00325C  1963               	xorwf	(??_ARPResolve+1)& (0+255),w,b
 10711  00325E  6F67               	movwf	(??_ARPResolve+5)& (0+255),b
 10712  003260  0101               	movlb	1	; () banked
 10713  003262  517B               	movf	(_AppConfig+2)& (0+255),w,b
 10714  003264  0100               	movlb	0	; () banked
 10715  003266  1964               	xorwf	(??_ARPResolve+2)& (0+255),w,b
 10716  003268  6F68               	movwf	(??_ARPResolve+6)& (0+255),b
 10717  00326A  0101               	movlb	1	; () banked
 10718  00326C  517C               	movf	(_AppConfig+3)& (0+255),w,b
 10719  00326E  0100               	movlb	0	; () banked
 10720  003270  1965               	xorwf	(??_ARPResolve+3)& (0+255),w,b
 10721  003272  6F69               	movwf	(??_ARPResolve+7)& (0+255),b
 10722  003274  0101               	movlb	1	; () banked
 10723  003276  517D               	movf	(_AppConfig+4)& (0+255),w,b
 10724  003278  0100               	movlb	0	; () banked
 10725  00327A  1566               	andwf	(??_ARPResolve+4)& (0+255),w,b
 10726  00327C  6F6A               	movwf	(??_ARPResolve+8)& (0+255),b
 10727  00327E  0101               	movlb	1	; () banked
 10728  003280  517E               	movf	(_AppConfig+5)& (0+255),w,b
 10729  003282  0100               	movlb	0	; () banked
 10730  003284  1567               	andwf	(??_ARPResolve+5)& (0+255),w,b
 10731  003286  6F6B               	movwf	(??_ARPResolve+9)& (0+255),b
 10732  003288  0101               	movlb	1	; () banked
 10733  00328A  517F               	movf	(_AppConfig+6)& (0+255),w,b
 10734  00328C  0100               	movlb	0	; () banked
 10735  00328E  1568               	andwf	(??_ARPResolve+6)& (0+255),w,b
 10736  003290  6F6C               	movwf	(??_ARPResolve+10)& (0+255),b
 10737  003292  0101               	movlb	1	; () banked
 10738  003294  5180               	movf	(_AppConfig+7)& (0+255),w,b
 10739  003296  0100               	movlb	0	; () banked
 10740  003298  1569               	andwf	(??_ARPResolve+7)& (0+255),w,b
 10741  00329A  6F6D               	movwf	(??_ARPResolve+11)& (0+255),b
 10742  00329C  516A               	movf	(??_ARPResolve+8)& (0+255),w,b
 10743  00329E  116B               	iorwf	(??_ARPResolve+9)& (0+255),w,b
 10744  0032A0  116C               	iorwf	(??_ARPResolve+10)& (0+255),w,b
 10745  0032A2  116D               	iorwf	(??_ARPResolve+11)& (0+255),w,b
 10746  0032A4  E10D               	bnz	l1331
 10747                           
 10748                           ; BSR set to: 0
 10749  0032A6  C060  FFD9         	movff	ARPResolve@IPAddr,fsr2l
 10750  0032AA  C061  FFDA         	movff	ARPResolve@IPAddr+1,fsr2h
 10751  0032AE  CFDE F06E          	movff	postinc2,_ARPResolve$5917
 10752  0032B2  CFDE F06F          	movff	postinc2,_ARPResolve$5917+1
 10753  0032B6  CFDE F070          	movff	postinc2,_ARPResolve$5917+2
 10754  0032BA  CFDE F071          	movff	postinc2,_ARPResolve$5917+3
 10755  0032BE  D008               	goto	l1333
 10756  0032C0                     l1331:
 10757                           
 10758                           ; BSR set to: 0
 10759  0032C0  C181  F06E         	movff	_AppConfig+8,_ARPResolve$5917
 10760  0032C4  C182  F06F         	movff	_AppConfig+9,_ARPResolve$5917+1
 10761  0032C8  C183  F070         	movff	_AppConfig+10,_ARPResolve$5917+2
 10762  0032CC  C184  F071         	movff	_AppConfig+11,_ARPResolve$5917+3
 10763  0032D0                     l1333:
 10764                           
 10765                           ; BSR set to: 0
 10766  0032D0  C06E  F08A         	movff	_ARPResolve$5917,ARPResolve@packet+24
 10767  0032D4  C06F  F08B         	movff	_ARPResolve$5917+1,ARPResolve@packet+25
 10768  0032D8  C070  F08C         	movff	_ARPResolve$5917+2,ARPResolve@packet+26
 10769  0032DC  C071  F08D         	movff	_ARPResolve$5917+3,ARPResolve@packet+27
 10770                           
 10771                           ; BSR set to: 0
 10772                           ;arp.c: 572: ARPPut(&packet);
 10773  0032E0  0E72               	movlw	ARPResolve@packet& (0+255)
 10774  0032E2  EFD5  F019         	goto	_ARPPut
 10775  0032E6                     __end_of_ARPResolve:
 10776                           	opt stack 0
 10777                           tblptru	equ	0xFF8
 10778                           tblptrh	equ	0xFF7
 10779                           tblptrl	equ	0xFF6
 10780                           tablat	equ	0xFF5
 10781                           prodh	equ	0xFF4
 10782                           prodl	equ	0xFF3
 10783                           intcon	equ	0xFF2
 10784                           intcon2	equ	0xFF1
 10785                           postinc0	equ	0xFEE
 10786                           wreg	equ	0xFE8
 10787                           indf1	equ	0xFE7
 10788                           postdec1	equ	0xFE5
 10789                           fsr1h	equ	0xFE2
 10790                           fsr1l	equ	0xFE1
 10791                           indf2	equ	0xFDF
 10792                           postinc2	equ	0xFDE
 10793                           postdec2	equ	0xFDD
 10794                           fsr2h	equ	0xFDA
 10795                           fsr2l	equ	0xFD9
 10796                           status	equ	0xFD8
 10797                           
 10798 ;; *************** function _ARPIsResolved *****************
 10799 ;; Defined at:
 10800 ;;		line 612 in file "../framework/tcpip/src/arp.c"
 10801 ;; Parameters:    Size  Location     Type
 10802 ;;  IPAddr          2   27[COMRAM] PTR struct .
 10803 ;;		 -> UDPSocketInfo.remote(10), UDPSocketInfo(230), 
 10804 ;;  MACAddr         2   29[COMRAM] PTR struct .
 10805 ;;		 -> UDPSocketInfo.remote(10), UDPSocketInfo(230), 
 10806 ;; Auto vars:     Size  Location     Type
 10807 ;;		None
 10808 ;; Return value:  Size  Location     Type
 10809 ;;                  1    wreg      unsigned char 
 10810 ;; Registers used:
 10811 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0
 10812 ;; Tracked objects:
 10813 ;;		On entry : F/0
 10814 ;;		On exit  : E/0
 10815 ;;		Unchanged: 0/0
 10816 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10817 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10818 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10819 ;;      Temps:          0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10820 ;;      Totals:         4      12       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10821 ;;Total ram usage:       16 bytes
 10822 ;; Hardware stack levels used:    1
 10823 ;; Hardware stack levels required when called:    6
 10824 ;; This function calls:
 10825 ;;		Nothing
 10826 ;; This function is called by:
 10827 ;;		_UDPTask
 10828 ;; This function uses a non-reentrant model
 10829 ;;
 10830                           
 10831                           	psect	text67
 10832  0032E6                     __ptext67:
 10833                           	opt stack 0
 10834  0032E6                     _ARPIsResolved:
 10835                           	opt stack 22
 10836                           
 10837                           ; BSR set to: 0
 10838                           ;arp.c: 614: if ((Cache.IPAddr.Val == IPAddr->Val) ||
 10839                           ;arp.c: 615: ((Cache.IPAddr.Val == AppConfig.MyGateway.Val) && ((AppConfig.MyIPAddr.Val 
      +                          ^ IPAddr->Val) & AppConfig.MyMask.Val))) {
 10840                           
 10841                           ;incstack = 0
 10842  0032E6  C01C  FFD9         	movff	ARPIsResolved@IPAddr,fsr2l
 10843  0032EA  C01D  FFDA         	movff	ARPIsResolved@IPAddr+1,fsr2h
 10844  0032EE  0101               	movlb	1	; () banked
 10845  0032F0  510A               	movf	_Cache& (0+255),w,b
 10846  0032F2  18DE               	xorwf	postinc2,w,c
 10847  0032F4  E109               	bnz	u8120
 10848  0032F6  510B               	movf	(_Cache+1)& (0+255),w,b
 10849  0032F8  18DE               	xorwf	postinc2,w,c
 10850  0032FA  E106               	bnz	u8120
 10851  0032FC  510C               	movf	(_Cache+2)& (0+255),w,b
 10852  0032FE  18DE               	xorwf	postinc2,w,c
 10853  003300  E103               	bnz	u8120
 10854  003302  510D               	movf	(_Cache+3)& (0+255),w,b
 10855  003304  18DE               	xorwf	postinc2,w,c
 10856  003306  E044               	bz	l9550
 10857  003308                     u8120:
 10858                           
 10859                           ; BSR set to: 1
 10860  003308  510A               	movf	_Cache& (0+255),w,b
 10861  00330A  1981               	xorwf	(_AppConfig+8)& (0+255),w,b
 10862  00330C  E14D               	bnz	l9556
 10863  00330E  510B               	movf	(_Cache+1)& (0+255),w,b
 10864  003310  1982               	xorwf	(_AppConfig+9)& (0+255),w,b
 10865  003312  E14A               	bnz	l9556
 10866  003314  510C               	movf	(_Cache+2)& (0+255),w,b
 10867  003316  1983               	xorwf	(_AppConfig+10)& (0+255),w,b
 10868  003318  E147               	bnz	l9556
 10869  00331A  510D               	movf	(_Cache+3)& (0+255),w,b
 10870  00331C  1984               	xorwf	(_AppConfig+11)& (0+255),w,b
 10871  00331E  E144               	bnz	l9556
 10872                           
 10873                           ; BSR set to: 1
 10874  003320  C01C  FFD9         	movff	ARPIsResolved@IPAddr,fsr2l
 10875  003324  C01D  FFDA         	movff	ARPIsResolved@IPAddr+1,fsr2h
 10876  003328  CFDE F060          	movff	postinc2,??_ARPIsResolved
 10877  00332C  CFDE F061          	movff	postinc2,??_ARPIsResolved+1
 10878  003330  CFDE F062          	movff	postinc2,??_ARPIsResolved+2
 10879  003334  CFDE F063          	movff	postinc2,??_ARPIsResolved+3
 10880  003338  5179               	movf	_AppConfig& (0+255),w,b
 10881  00333A  0100               	movlb	0	; () banked
 10882  00333C  1960               	xorwf	??_ARPIsResolved& (0+255),w,b
 10883  00333E  6F64               	movwf	(??_ARPIsResolved+4)& (0+255),b
 10884  003340  0101               	movlb	1	; () banked
 10885  003342  517A               	movf	(_AppConfig+1)& (0+255),w,b
 10886  003344  0100               	movlb	0	; () banked
 10887  003346  1961               	xorwf	(??_ARPIsResolved+1)& (0+255),w,b
 10888  003348  6F65               	movwf	(??_ARPIsResolved+5)& (0+255),b
 10889  00334A  0101               	movlb	1	; () banked
 10890  00334C  517B               	movf	(_AppConfig+2)& (0+255),w,b
 10891  00334E  0100               	movlb	0	; () banked
 10892  003350  1962               	xorwf	(??_ARPIsResolved+2)& (0+255),w,b
 10893  003352  6F66               	movwf	(??_ARPIsResolved+6)& (0+255),b
 10894  003354  0101               	movlb	1	; () banked
 10895  003356  517C               	movf	(_AppConfig+3)& (0+255),w,b
 10896  003358  0100               	movlb	0	; () banked
 10897  00335A  1963               	xorwf	(??_ARPIsResolved+3)& (0+255),w,b
 10898  00335C  6F67               	movwf	(??_ARPIsResolved+7)& (0+255),b
 10899  00335E  0101               	movlb	1	; () banked
 10900  003360  517D               	movf	(_AppConfig+4)& (0+255),w,b
 10901  003362  0100               	movlb	0	; () banked
 10902  003364  1564               	andwf	(??_ARPIsResolved+4)& (0+255),w,b
 10903  003366  6F68               	movwf	(??_ARPIsResolved+8)& (0+255),b
 10904  003368  0101               	movlb	1	; () banked
 10905  00336A  517E               	movf	(_AppConfig+5)& (0+255),w,b
 10906  00336C  0100               	movlb	0	; () banked
 10907  00336E  1565               	andwf	(??_ARPIsResolved+5)& (0+255),w,b
 10908  003370  6F69               	movwf	(??_ARPIsResolved+9)& (0+255),b
 10909  003372  0101               	movlb	1	; () banked
 10910  003374  517F               	movf	(_AppConfig+6)& (0+255),w,b
 10911  003376  0100               	movlb	0	; () banked
 10912  003378  1566               	andwf	(??_ARPIsResolved+6)& (0+255),w,b
 10913  00337A  6F6A               	movwf	(??_ARPIsResolved+10)& (0+255),b
 10914  00337C  0101               	movlb	1	; () banked
 10915  00337E  5180               	movf	(_AppConfig+7)& (0+255),w,b
 10916  003380  0100               	movlb	0	; () banked
 10917  003382  1567               	andwf	(??_ARPIsResolved+7)& (0+255),w,b
 10918  003384  6F6B               	movwf	(??_ARPIsResolved+11)& (0+255),b
 10919  003386  5168               	movf	(??_ARPIsResolved+8)& (0+255),w,b
 10920  003388  1169               	iorwf	(??_ARPIsResolved+9)& (0+255),w,b
 10921  00338A  116A               	iorwf	(??_ARPIsResolved+10)& (0+255),w,b
 10922  00338C  116B               	iorwf	(??_ARPIsResolved+11)& (0+255),w,b
 10923  00338E  E00C               	bz	l9556
 10924  003390                     l9550:
 10925                           
 10926                           ;arp.c: 616: *MACAddr = Cache.MACAddr;
 10927  003390  EE21  F00E         	lfsr	2,_Cache+4
 10928  003394  C01E  FFE1         	movff	ARPIsResolved@MACAddr,fsr1l
 10929  003398  C01F  FFE2         	movff	ARPIsResolved@MACAddr+1,fsr1h
 10930  00339C  0E05               	movlw	5
 10931  00339E                     u8151:
 10932  00339E  CFDB FFE3          	movff	plusw2,plusw1
 10933  0033A2  06E8               	decf	wreg,f,c
 10934  0033A4  E2FC               	bc	u8151
 10935                           
 10936                           ;arp.c: 618: return 1;
 10937  0033A6  0C01               	retlw	1
 10938  0033A8                     l9556:
 10939                           
 10940                           ;arp.c: 619: }
 10941                           ;arp.c: 623: return 0;
 10942  0033A8  0C00               	retlw	0	;funcret
 10943  0033AA                     __end_of_ARPIsResolved:
 10944                           	opt stack 0
 10945                           tblptru	equ	0xFF8
 10946                           tblptrh	equ	0xFF7
 10947                           tblptrl	equ	0xFF6
 10948                           tablat	equ	0xFF5
 10949                           prodh	equ	0xFF4
 10950                           prodl	equ	0xFF3
 10951                           intcon	equ	0xFF2
 10952                           intcon2	equ	0xFF1
 10953                           postinc0	equ	0xFEE
 10954                           wreg	equ	0xFE8
 10955                           indf1	equ	0xFE7
 10956                           postdec1	equ	0xFE5
 10957                           plusw1	equ	0xFE3
 10958                           fsr1h	equ	0xFE2
 10959                           fsr1l	equ	0xFE1
 10960                           indf2	equ	0xFDF
 10961                           postinc2	equ	0xFDE
 10962                           postdec2	equ	0xFDD
 10963                           plusw2	equ	0xFDB
 10964                           fsr2h	equ	0xFDA
 10965                           fsr2l	equ	0xFD9
 10966                           status	equ	0xFD8
 10967                           
 10968 ;; *************** function _UDPProcess *****************
 10969 ;; Defined at:
 10970 ;;		line 1116 in file "../framework/tcpip/src/udp.c"
 10971 ;; Parameters:    Size  Location     Type
 10972 ;;  remoteNode      2   29[BANK0 ] PTR struct .
 10973 ;;		 -> remoteNode(10), 
 10974 ;;  localIP         1   31[BANK0 ] PTR struct .
 10975 ;;		 -> StackTask@tempLocalIP(4), 
 10976 ;;  len             2   32[BANK0 ] unsigned int 
 10977 ;; Auto vars:     Size  Location     Type
 10978 ;;  pseudoHeader   12   39[BANK0 ] struct _PSEUDO_HEADER
 10979 ;;  h               8   51[BANK0 ] struct .
 10980 ;;  checksums       4   35[BANK0 ] struct .
 10981 ;;  s               1   34[BANK0 ] unsigned char 
 10982 ;; Return value:  Size  Location     Type
 10983 ;;                  1    wreg      unsigned char 
 10984 ;; Registers used:
 10985 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 10986 ;; Tracked objects:
 10987 ;;		On entry : F/0
 10988 ;;		On exit  : 0/0
 10989 ;;		Unchanged: 0/0
 10990 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10991 ;;      Params:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10992 ;;      Locals:         0      25       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10993 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10994 ;;      Totals:         0      30       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10995 ;;Total ram usage:       30 bytes
 10996 ;; Hardware stack levels used:    1
 10997 ;; Hardware stack levels required when called:    8
 10998 ;; This function calls:
 10999 ;;		_CalcIPBufferChecksum
 11000 ;;		_CalcIPChecksum
 11001 ;;		_FindMatchingSocket
 11002 ;;		_IPSetRxBuffer
 11003 ;;		_MACDiscardRx
 11004 ;;		_MACGetArray
 11005 ;;		_swaps
 11006 ;; This function is called by:
 11007 ;;		_StackTask
 11008 ;; This function uses a non-reentrant model
 11009 ;;
 11010                           
 11011                           	psect	text68
 11012  002AA2                     __ptext68:
 11013                           	opt stack 0
 11014  002AA2                     _UDPProcess:
 11015                           	opt stack 21
 11016                           
 11017                           ; BSR set to: 0
 11018                           ;udp.c: 1118: UDP_HEADER h;
 11019                           ;udp.c: 1119: UDP_SOCKET s;
 11020                           ;udp.c: 1120: PSEUDO_HEADER pseudoHeader;
 11021                           ;udp.c: 1121: TCPIP_UINT32_VAL checksums;
 11022                           ;udp.c: 1123: UDPRxCount = 0;
 11023                           
 11024                           ;incstack = 0
 11025  002AA2  6A33               	clrf	_UDPRxCount,c
 11026  002AA4  6A34               	clrf	_UDPRxCount+1,c
 11027                           
 11028                           ; BSR set to: 0
 11029                           ;udp.c: 1126: MACGetArray((uint8_t *) & h, sizeof (h));
 11030  002AA6  0E93               	movlw	low UDPProcess@h
 11031  002AA8  6E1C               	movwf	MACGetArray@val,c
 11032  002AAA  6A1D               	clrf	MACGetArray@val+1,c
 11033  002AAC  6A1F               	clrf	MACGetArray@len+1,c
 11034  002AAE  0E08               	movlw	8
 11035  002AB0  6E1E               	movwf	MACGetArray@len,c
 11036  002AB2  EC85  F025         	call	_MACGetArray	;wreg free
 11037                           
 11038                           ;udp.c: 1128: h.SourcePort = swaps(h.SourcePort);
 11039  002AB6  C093  F01C         	movff	UDPProcess@h,swaps@v
 11040  002ABA  C094  F01D         	movff	UDPProcess@h+1,swaps@v+1
 11041  002ABE  EC42  F029         	call	_swaps	;wreg free
 11042  002AC2  C01C  F093         	movff	?_swaps,UDPProcess@h
 11043  002AC6  C01D  F094         	movff	?_swaps+1,UDPProcess@h+1
 11044                           
 11045                           ;udp.c: 1129: h.DestinationPort = swaps(h.DestinationPort);
 11046  002ACA  C095  F01C         	movff	UDPProcess@h+2,swaps@v
 11047  002ACE  C096  F01D         	movff	UDPProcess@h+3,swaps@v+1
 11048  002AD2  EC42  F029         	call	_swaps	;wreg free
 11049  002AD6  C01C  F095         	movff	?_swaps,UDPProcess@h+2
 11050  002ADA  C01D  F096         	movff	?_swaps+1,UDPProcess@h+3
 11051                           
 11052                           ;udp.c: 1130: h.Length = swaps(h.Length) - sizeof (UDP_HEADER);
 11053  002ADE  C097  F01C         	movff	UDPProcess@h+4,swaps@v
 11054  002AE2  C098  F01D         	movff	UDPProcess@h+5,swaps@v+1
 11055  002AE6  EC42  F029         	call	_swaps	;wreg free
 11056  002AEA  0EF8               	movlw	248
 11057  002AEC  241C               	addwf	?_swaps,w,c
 11058  002AEE  0100               	movlb	0	; () banked
 11059  002AF0  6F97               	movwf	(UDPProcess@h+4)& (0+255),b
 11060  002AF2  0EFF               	movlw	255
 11061  002AF4  201D               	addwfc	?_swaps+1,w,c
 11062  002AF6  6F98               	movwf	(UDPProcess@h+5)& (0+255),b
 11063                           
 11064                           ; BSR set to: 0
 11065                           ;udp.c: 1133: if (h.Checksum) {
 11066  002AF8  5199               	movf	(UDPProcess@h+6)& (0+255),w,b
 11067  002AFA  119A               	iorwf	(UDPProcess@h+7)& (0+255),w,b
 11068  002AFC  E04A               	bz	l10354
 11069                           
 11070                           ; BSR set to: 0
 11071                           ;udp.c: 1135: pseudoHeader.SourceAddress = remoteNode->IPAddr;
 11072  002AFE  C07D  FFD9         	movff	UDPProcess@remoteNode,fsr2l
 11073  002B02  C07E  FFDA         	movff	UDPProcess@remoteNode+1,fsr2h
 11074  002B06  CFDE F087          	movff	postinc2,UDPProcess@pseudoHeader
 11075  002B0A  CFDE F088          	movff	postinc2,UDPProcess@pseudoHeader+1
 11076  002B0E  CFDE F089          	movff	postinc2,UDPProcess@pseudoHeader+2
 11077  002B12  CFDE F08A          	movff	postinc2,UDPProcess@pseudoHeader+3
 11078                           
 11079                           ; BSR set to: 0
 11080                           ;udp.c: 1136: pseudoHeader.DestAddress.Val = localIP->Val;
 11081  002B16  517F               	movf	UDPProcess@localIP& (0+255),w,b
 11082  002B18  6ED9               	movwf	fsr2l,c
 11083  002B1A  6ADA               	clrf	fsr2h,c
 11084  002B1C  CFDE F08B          	movff	postinc2,UDPProcess@pseudoHeader+4
 11085  002B20  CFDE F08C          	movff	postinc2,UDPProcess@pseudoHeader+5
 11086  002B24  CFDE F08D          	movff	postinc2,UDPProcess@pseudoHeader+6
 11087  002B28  CFDE F08E          	movff	postinc2,UDPProcess@pseudoHeader+7
 11088                           
 11089                           ; BSR set to: 0
 11090                           ;udp.c: 1137: pseudoHeader.Zero = 0x0;
 11091  002B2C  6B8F               	clrf	(UDPProcess@pseudoHeader+8)& (0+255),b
 11092                           
 11093                           ;udp.c: 1138: pseudoHeader.Protocol = (17u);
 11094  002B2E  0E11               	movlw	17
 11095  002B30  6F90               	movwf	(UDPProcess@pseudoHeader+9)& (0+255),b
 11096                           
 11097                           ; BSR set to: 0
 11098                           ;udp.c: 1139: pseudoHeader.Length = len;
 11099  002B32  C080  F091         	movff	UDPProcess@len,UDPProcess@pseudoHeader+10
 11100  002B36  C081  F092         	movff	UDPProcess@len+1,UDPProcess@pseudoHeader+11
 11101                           
 11102                           ; BSR set to: 0
 11103                           ;udp.c: 1141: (pseudoHeader.Length = swaps(pseudoHeader.Length));
 11104  002B3A  C091  F01C         	movff	UDPProcess@pseudoHeader+10,swaps@v
 11105  002B3E  C092  F01D         	movff	UDPProcess@pseudoHeader+11,swaps@v+1
 11106  002B42  EC42  F029         	call	_swaps	;wreg free
 11107  002B46  C01C  F091         	movff	?_swaps,UDPProcess@pseudoHeader+10
 11108  002B4A  C01D  F092         	movff	?_swaps+1,UDPProcess@pseudoHeader+11
 11109                           
 11110                           ;udp.c: 1143: checksums.w[0] = ~CalcIPChecksum((uint8_t *) & pseudoHeader,
 11111                           ;udp.c: 1144: sizeof (pseudoHeader));
 11112  002B4E  6A1D               	clrf	CalcIPChecksum@count+1,c
 11113  002B50  0E0C               	movlw	12
 11114  002B52  6E1C               	movwf	CalcIPChecksum@count,c
 11115  002B54  0E87               	movlw	UDPProcess@pseudoHeader& (0+255)
 11116  002B56  ECE6  F01E         	call	_CalcIPChecksum
 11117  002B5A  1C1C               	comf	?_CalcIPChecksum,w,c
 11118  002B5C  0100               	movlb	0	; () banked
 11119  002B5E  6F83               	movwf	UDPProcess@checksums& (0+255),b
 11120  002B60  1C1D               	comf	?_CalcIPChecksum+1,w,c
 11121  002B62  6F84               	movwf	(UDPProcess@checksums+1)& (0+255),b
 11122                           
 11123                           ; BSR set to: 0
 11124                           ;udp.c: 1147: IPSetRxBuffer(0);
 11125  002B64  6A23               	clrf	IPSetRxBuffer@Offset+1,c
 11126  002B66  6A22               	clrf	IPSetRxBuffer@Offset,c
 11127  002B68  EC25  F02A         	call	_IPSetRxBuffer	;wreg free
 11128                           
 11129                           ; BSR set to: 1
 11130                           ;udp.c: 1148: checksums.w[1] = CalcIPBufferChecksum(len);
 11131  002B6C  C080  F023         	movff	UDPProcess@len,CalcIPBufferChecksum@len
 11132  002B70  C081  F024         	movff	UDPProcess@len+1,CalcIPBufferChecksum@len+1
 11133  002B74  ECA9  F018         	call	_CalcIPBufferChecksum	;wreg free
 11134  002B78  C023  F085         	movff	?_CalcIPBufferChecksum,UDPProcess@checksums+2
 11135  002B7C  C024  F086         	movff	?_CalcIPBufferChecksum+1,UDPProcess@checksums+3
 11136                           
 11137                           ; BSR set to: 0
 11138                           ;udp.c: 1150: if (checksums.w[0] != checksums.w[1]) {
 11139  002B80  5183               	movf	UDPProcess@checksums& (0+255),w,b
 11140  002B82  1985               	xorwf	(UDPProcess@checksums+2)& (0+255),w,b
 11141  002B84  E103               	bnz	u9440
 11142  002B86  5184               	movf	(UDPProcess@checksums+1)& (0+255),w,b
 11143  002B88  1986               	xorwf	(UDPProcess@checksums+3)& (0+255),w,b
 11144  002B8A  E003               	bz	l10354
 11145  002B8C                     u9440:
 11146  002B8C                     l10348:
 11147                           
 11148                           ; BSR set to: 0
 11149                           ;udp.c: 1151: MACDiscardRx();
 11150  002B8C  ECD8  F026         	call	_MACDiscardRx	;wreg free
 11151                           
 11152                           ;udp.c: 1152: return 0;
 11153  002B90  0C00               	retlw	0
 11154  002B92                     l10354:
 11155                           
 11156                           ; BSR set to: 0
 11157                           ;udp.c: 1153: }
 11158                           ;udp.c: 1154: }
 11159                           ;udp.c: 1156: s = FindMatchingSocket(&h, remoteNode, localIP);
 11160  002B92  C07D  F026         	movff	UDPProcess@remoteNode,FindMatchingSocket@remoteNode
 11161  002B96  C07E  F027         	movff	UDPProcess@remoteNode+1,FindMatchingSocket@remoteNode+1
 11162  002B9A  C07F  F028         	movff	UDPProcess@localIP,FindMatchingSocket@localIP
 11163  002B9E  0E93               	movlw	UDPProcess@h& (0+255)
 11164  002BA0  EC62  F016         	call	_FindMatchingSocket
 11165  002BA4  0100               	movlb	0	; () banked
 11166  002BA6  6F82               	movwf	UDPProcess@s& (0+255),b
 11167                           
 11168                           ; BSR set to: 0
 11169                           ;udp.c: 1157: if (s == (0xffu)) {
 11170  002BA8  2982               	incf	UDPProcess@s& (0+255),w,b
 11171  002BAA  E0F0               	bz	l10348
 11172                           
 11173                           ; BSR set to: 0
 11174                           ;udp.c: 1163: SocketWithRxData = s;
 11175  002BAC  C082  F043         	movff	UDPProcess@s,_SocketWithRxData
 11176                           
 11177                           ;udp.c: 1164: UDPRxCount = h.Length;
 11178  002BB0  C097  F033         	movff	UDPProcess@h+4,_UDPRxCount
 11179  002BB4  C098  F034         	movff	UDPProcess@h+5,_UDPRxCount+1
 11180                           
 11181                           ;udp.c: 1165: Flags.bFirstRead = 1;
 11182  002BB8  803B               	bsf	_Flags,0,c
 11183                           
 11184                           ;udp.c: 1166: Flags.bWasDiscarded = 0;
 11185  002BBA  923B               	bcf	_Flags,1,c
 11186                           
 11187                           ; BSR set to: 0
 11188                           ;udp.c: 1167: }
 11189                           ;udp.c: 1169: return 1;
 11190  002BBC  0C01               	retlw	1	;funcret
 11191  002BBE                     __end_of_UDPProcess:
 11192                           	opt stack 0
 11193                           tblptru	equ	0xFF8
 11194                           tblptrh	equ	0xFF7
 11195                           tblptrl	equ	0xFF6
 11196                           tablat	equ	0xFF5
 11197                           prodh	equ	0xFF4
 11198                           prodl	equ	0xFF3
 11199                           intcon	equ	0xFF2
 11200                           intcon2	equ	0xFF1
 11201                           postinc0	equ	0xFEE
 11202                           wreg	equ	0xFE8
 11203                           indf1	equ	0xFE7
 11204                           postdec1	equ	0xFE5
 11205                           plusw1	equ	0xFE3
 11206                           fsr1h	equ	0xFE2
 11207                           fsr1l	equ	0xFE1
 11208                           indf2	equ	0xFDF
 11209                           postinc2	equ	0xFDE
 11210                           postdec2	equ	0xFDD
 11211                           plusw2	equ	0xFDB
 11212                           fsr2h	equ	0xFDA
 11213                           fsr2l	equ	0xFD9
 11214                           status	equ	0xFD8
 11215                           
 11216 ;; *************** function _FindMatchingSocket *****************
 11217 ;; Defined at:
 11218 ;;		line 1196 in file "../framework/tcpip/src/udp.c"
 11219 ;; Parameters:    Size  Location     Type
 11220 ;;  h               1    wreg     PTR struct .
 11221 ;;		 -> UDPProcess@h(8), 
 11222 ;;  remoteNode      2   37[COMRAM] PTR struct .
 11223 ;;		 -> remoteNode(10), 
 11224 ;;  localIP         1   39[COMRAM] PTR struct .
 11225 ;;		 -> StackTask@tempLocalIP(4), 
 11226 ;; Auto vars:     Size  Location     Type
 11227 ;;  h               1    8[BANK0 ] PTR struct .
 11228 ;;		 -> UDPProcess@h(8), 
 11229 ;;  p               2   11[BANK0 ] PTR struct .
 11230 ;;		 -> UDPSocketInfo(230), 
 11231 ;;  s               1   10[BANK0 ] unsigned char 
 11232 ;;  partialMatch    1    9[BANK0 ] unsigned char 
 11233 ;; Return value:  Size  Location     Type
 11234 ;;                  1    wreg      unsigned char 
 11235 ;; Registers used:
 11236 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 11237 ;; Tracked objects:
 11238 ;;		On entry : F/0
 11239 ;;		On exit  : E/0
 11240 ;;		Unchanged: 0/0
 11241 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11242 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11243 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11244 ;;      Temps:          0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11245 ;;      Totals:         3      13       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11246 ;;Total ram usage:       16 bytes
 11247 ;; Hardware stack levels used:    1
 11248 ;; Hardware stack levels required when called:    7
 11249 ;; This function calls:
 11250 ;;		_memcpy
 11251 ;; This function is called by:
 11252 ;;		_UDPProcess
 11253 ;; This function uses a non-reentrant model
 11254 ;;
 11255                           
 11256                           	psect	text69
 11257  002CC4                     __ptext69:
 11258                           	opt stack 0
 11259  002CC4                     _FindMatchingSocket:
 11260                           	opt stack 21
 11261                           
 11262                           ;incstack = 0
 11263                           ;FindMatchingSocket@h stored from wreg
 11264  002CC4  6F68               	movwf	FindMatchingSocket@h& (0+255),b
 11265                           
 11266                           ;udp.c: 1200: UDP_SOCKET s;
 11267                           ;udp.c: 1201: UDP_SOCKET partialMatch;
 11268                           ;udp.c: 1202: UDP_SOCKET_INFO *p;
 11269                           ;udp.c: 1214: if (remoteNode->IPAddr.Val == AppConfig.MyIPAddr.Val)
 11270  002CC6  C026  FFD9         	movff	FindMatchingSocket@remoteNode,fsr2l
 11271  002CCA  C027  FFDA         	movff	FindMatchingSocket@remoteNode+1,fsr2h
 11272  002CCE  0101               	movlb	1	; () banked
 11273  002CD0  5179               	movf	_AppConfig& (0+255),w,b
 11274  002CD2  18DE               	xorwf	postinc2,w,c
 11275  002CD4  E10A               	bnz	l1846
 11276  002CD6  517A               	movf	(_AppConfig+1)& (0+255),w,b
 11277  002CD8  18DE               	xorwf	postinc2,w,c
 11278  002CDA  E107               	bnz	l1846
 11279  002CDC  517B               	movf	(_AppConfig+2)& (0+255),w,b
 11280  002CDE  18DE               	xorwf	postinc2,w,c
 11281  002CE0  E104               	bnz	l1846
 11282  002CE2  517C               	movf	(_AppConfig+3)& (0+255),w,b
 11283  002CE4  18DE               	xorwf	postinc2,w,c
 11284  002CE6  E101               	bnz	l1846
 11285                           
 11286                           ; BSR set to: 1
 11287                           ;udp.c: 1215: return (0xffu);
 11288  002CE8  0CFF               	retlw	255
 11289  002CEA                     l1846:
 11290                           
 11291                           ; BSR set to: 1
 11292                           ;udp.c: 1217: partialMatch = (0xffu);
 11293  002CEA  0100               	movlb	0	; () banked
 11294  002CEC  6969               	setf	FindMatchingSocket@partialMatch& (0+255),b
 11295                           
 11296                           ; BSR set to: 0
 11297                           ;udp.c: 1219: p = UDPSocketInfo;
 11298  002CEE  0E00               	movlw	low _UDPSocketInfo
 11299  002CF0  6F6B               	movwf	FindMatchingSocket@p& (0+255),b
 11300  002CF2  0E02               	movlw	high _UDPSocketInfo
 11301  002CF4  6F6C               	movwf	(FindMatchingSocket@p+1)& (0+255),b
 11302                           
 11303                           ; BSR set to: 0
 11304                           ;udp.c: 1220: for (s = 0; s < (10u); s++) {
 11305  002CF6  6B6A               	clrf	FindMatchingSocket@s& (0+255),b
 11306  002CF8                     l9890:
 11307                           
 11308                           ; BSR set to: 0
 11309                           ;udp.c: 1225: if (p->localPort == h->DestinationPort) {
 11310  002CF8  5168               	movf	FindMatchingSocket@h& (0+255),w,b
 11311  002CFA  6ED9               	movwf	fsr2l,c
 11312  002CFC  6ADA               	clrf	fsr2h,c
 11313  002CFE  0E02               	movlw	2
 11314  002D00  26D9               	addwf	fsr2l,f,c
 11315  002D02  EE10 F00C          	lfsr	1,12
 11316  002D06  516B               	movf	FindMatchingSocket@p& (0+255),w,b
 11317  002D08  26E1               	addwf	fsr1l,f,c
 11318  002D0A  516C               	movf	(FindMatchingSocket@p+1)& (0+255),w,b
 11319  002D0C  22E2               	addwfc	fsr1h,f,c
 11320  002D0E  50DE               	movf	postinc2,w,c
 11321  002D10  18E6               	xorwf	postinc1,w,c
 11322  002D12  E12A               	bnz	l9900
 11323  002D14  50DE               	movf	postinc2,w,c
 11324  002D16  18E6               	xorwf	postinc1,w,c
 11325  002D18  E127               	bnz	l9900
 11326                           
 11327                           ; BSR set to: 0
 11328                           ;udp.c: 1226: if (p->remotePort == h->SourcePort) {
 11329  002D1A  5168               	movf	FindMatchingSocket@h& (0+255),w,b
 11330  002D1C  6ED9               	movwf	fsr2l,c
 11331  002D1E  6ADA               	clrf	fsr2h,c
 11332  002D20  EE10 F00A          	lfsr	1,10
 11333  002D24  516B               	movf	FindMatchingSocket@p& (0+255),w,b
 11334  002D26  26E1               	addwf	fsr1l,f,c
 11335  002D28  516C               	movf	(FindMatchingSocket@p+1)& (0+255),w,b
 11336  002D2A  22E2               	addwfc	fsr1h,f,c
 11337  002D2C  50DE               	movf	postinc2,w,c
 11338  002D2E  18E6               	xorwf	postinc1,w,c
 11339  002D30  E119               	bnz	l1851
 11340  002D32  50DE               	movf	postinc2,w,c
 11341  002D34  18E6               	xorwf	postinc1,w,c
 11342  002D36  E116               	bnz	l1851
 11343                           
 11344                           ; BSR set to: 0
 11345                           ;udp.c: 1227: if (p->remote.remoteNode.IPAddr.Val == remoteNode->IPAddr.Val) {
 11346  002D38  C026  FFD9         	movff	FindMatchingSocket@remoteNode,fsr2l
 11347  002D3C  C027  FFDA         	movff	FindMatchingSocket@remoteNode+1,fsr2h
 11348  002D40  C06B  FFE1         	movff	FindMatchingSocket@p,fsr1l
 11349  002D44  C06C  FFE2         	movff	FindMatchingSocket@p+1,fsr1h
 11350  002D48  50DE               	movf	postinc2,w,c
 11351  002D4A  18E6               	xorwf	postinc1,w,c
 11352  002D4C  E10B               	bnz	l1851
 11353  002D4E  50DE               	movf	postinc2,w,c
 11354  002D50  18E6               	xorwf	postinc1,w,c
 11355  002D52  E108               	bnz	l1851
 11356  002D54  50DE               	movf	postinc2,w,c
 11357  002D56  18E6               	xorwf	postinc1,w,c
 11358  002D58  E105               	bnz	l1851
 11359  002D5A  50DE               	movf	postinc2,w,c
 11360  002D5C  18E6               	xorwf	postinc1,w,c
 11361  002D5E  E102               	bnz	l1851
 11362                           
 11363                           ; BSR set to: 0
 11364                           ;udp.c: 1228: return s;
 11365  002D60  516A               	movf	FindMatchingSocket@s& (0+255),w,b
 11366  002D62  0012               	return	
 11367  002D64                     l1851:
 11368                           
 11369                           ; BSR set to: 0
 11370                           ;udp.c: 1229: }
 11371                           ;udp.c: 1230: }
 11372                           ;udp.c: 1232: partialMatch = s;
 11373  002D64  C06A  F069         	movff	FindMatchingSocket@s,FindMatchingSocket@partialMatch
 11374  002D68                     l9900:
 11375                           
 11376                           ; BSR set to: 0
 11377                           ;udp.c: 1233: }
 11378                           ;udp.c: 1234: p++;
 11379  002D68  0E17               	movlw	23
 11380  002D6A  276B               	addwf	FindMatchingSocket@p& (0+255),f,b
 11381  002D6C  0E00               	movlw	0
 11382  002D6E  236C               	addwfc	(FindMatchingSocket@p+1)& (0+255),f,b
 11383                           
 11384                           ; BSR set to: 0
 11385  002D70  2B6A               	incf	FindMatchingSocket@s& (0+255),f,b
 11386                           
 11387                           ; BSR set to: 0
 11388  002D72  0E09               	movlw	9
 11389  002D74  656A               	cpfsgt	FindMatchingSocket@s& (0+255),b
 11390  002D76  D7C0               	goto	l9890
 11391                           
 11392                           ; BSR set to: 0
 11393                           ;udp.c: 1235: }
 11394                           ;udp.c: 1237: if (partialMatch != (0xffu)) {
 11395  002D78  2969               	incf	FindMatchingSocket@partialMatch& (0+255),w,b
 11396  002D7A  E023               	bz	l9914
 11397                           
 11398                           ; BSR set to: 0
 11399                           ;udp.c: 1238: p = &UDPSocketInfo[partialMatch];
 11400  002D7C  5169               	movf	FindMatchingSocket@partialMatch& (0+255),w,b
 11401  002D7E  0D17               	mullw	23
 11402  002D80  0E00               	movlw	low _UDPSocketInfo
 11403  002D82  24F3               	addwf	prodl,w,c
 11404  002D84  6F6B               	movwf	FindMatchingSocket@p& (0+255),b
 11405  002D86  0E02               	movlw	high _UDPSocketInfo
 11406  002D88  20F4               	addwfc	prodh,w,c
 11407  002D8A  6F6C               	movwf	(FindMatchingSocket@p+1)& (0+255),b
 11408                           
 11409                           ; BSR set to: 0
 11410                           ;udp.c: 1240: memcpy((void *) &p->remote.remoteNode,
 11411                           ;udp.c: 1241: (const void *) remoteNode, sizeof (p->remote.remoteNode));
 11412  002D8C  C06B  F01C         	movff	FindMatchingSocket@p,memcpy@d1
 11413  002D90  C06C  F01D         	movff	FindMatchingSocket@p+1,memcpy@d1+1
 11414  002D94  C026  F01E         	movff	FindMatchingSocket@remoteNode,memcpy@s1
 11415  002D98  C027  F01F         	movff	FindMatchingSocket@remoteNode+1,memcpy@s1+1
 11416  002D9C  6A21               	clrf	memcpy@n+1,c
 11417  002D9E  0E0A               	movlw	10
 11418  002DA0  6E20               	movwf	memcpy@n,c
 11419  002DA2  ECEE  F023         	call	_memcpy	;wreg free
 11420                           
 11421                           ;udp.c: 1243: p->remotePort = h->SourcePort;
 11422  002DA6  0100               	movlb	0	; () banked
 11423  002DA8  5168               	movf	FindMatchingSocket@h& (0+255),w,b
 11424  002DAA  6ED9               	movwf	fsr2l,c
 11425  002DAC  6ADA               	clrf	fsr2h,c
 11426  002DAE  EE10 F00A          	lfsr	1,10
 11427  002DB2  516B               	movf	FindMatchingSocket@p& (0+255),w,b
 11428  002DB4  26E1               	addwf	fsr1l,f,c
 11429  002DB6  516C               	movf	(FindMatchingSocket@p+1)& (0+255),w,b
 11430  002DB8  22E2               	addwfc	fsr1h,f,c
 11431  002DBA  CFDE FFE6          	movff	postinc2,postinc1
 11432  002DBE  CFDD FFE5          	movff	postdec2,postdec1
 11433  002DC2                     l9914:
 11434                           
 11435                           ; BSR set to: 0
 11436                           ;udp.c: 1244: }
 11437                           ;udp.c: 1246: return partialMatch;
 11438  002DC2  5169               	movf	FindMatchingSocket@partialMatch& (0+255),w,b
 11439  002DC4  0012               	return		;funcret
 11440  002DC6                     __end_of_FindMatchingSocket:
 11441                           	opt stack 0
 11442                           tblptru	equ	0xFF8
 11443                           tblptrh	equ	0xFF7
 11444                           tblptrl	equ	0xFF6
 11445                           tablat	equ	0xFF5
 11446                           prodh	equ	0xFF4
 11447                           prodl	equ	0xFF3
 11448                           intcon	equ	0xFF2
 11449                           intcon2	equ	0xFF1
 11450                           postinc0	equ	0xFEE
 11451                           wreg	equ	0xFE8
 11452                           indf1	equ	0xFE7
 11453                           postinc1	equ	0xFE6
 11454                           postdec1	equ	0xFE5
 11455                           plusw1	equ	0xFE3
 11456                           fsr1h	equ	0xFE2
 11457                           fsr1l	equ	0xFE1
 11458                           indf2	equ	0xFDF
 11459                           postinc2	equ	0xFDE
 11460                           postdec2	equ	0xFDD
 11461                           plusw2	equ	0xFDB
 11462                           fsr2h	equ	0xFDA
 11463                           fsr2l	equ	0xFD9
 11464                           status	equ	0xFD8
 11465                           
 11466 ;; *************** function _MACGetHeader *****************
 11467 ;; Defined at:
 11468 ;;		line 399 in file "../framework/tcpip/src/eth97j60.c"
 11469 ;; Parameters:    Size  Location     Type
 11470 ;;  remote          2   37[COMRAM] PTR struct .
 11471 ;;		 -> remoteNode(10), 
 11472 ;;  type            1   39[COMRAM] PTR unsigned char 
 11473 ;;		 -> StackTask@cFrameType(1), 
 11474 ;; Auto vars:     Size  Location     Type
 11475 ;;  header         20    0[BANK0 ] struct _ENC_PREAMBLE
 11476 ;; Return value:  Size  Location     Type
 11477 ;;                  1    wreg      unsigned char 
 11478 ;; Registers used:
 11479 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 11480 ;; Tracked objects:
 11481 ;;		On entry : 0/0
 11482 ;;		On exit  : 0/0
 11483 ;;		Unchanged: 0/0
 11484 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11485 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11486 ;;      Locals:         0      20       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11487 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11488 ;;      Totals:         3      20       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11489 ;;Total ram usage:       23 bytes
 11490 ;; Hardware stack levels used:    1
 11491 ;; Hardware stack levels required when called:    7
 11492 ;; This function calls:
 11493 ;;		_MACDiscardRx
 11494 ;;		_MACGetArray
 11495 ;;		_memcpy
 11496 ;;		_swaps
 11497 ;; This function is called by:
 11498 ;;		_StackTask
 11499 ;; This function uses a non-reentrant model
 11500 ;;
 11501                           
 11502                           	psect	text70
 11503  00381E                     __ptext70:
 11504                           	opt stack 0
 11505  00381E                     _MACGetHeader:
 11506                           	opt stack 22
 11507                           
 11508                           ;eth97j60.c: 401: ENC_PREAMBLE header;
 11509                           ;eth97j60.c: 404: if(EPKTCNT == 0u)
 11510                           
 11511                           ;incstack = 0
 11512  00381E  010E               	movlb	14	; () banked
 11513  003820  51D9               	movf	217,w,b
 11514  003822  E101               	bnz	l10160
 11515                           
 11516                           ;eth97j60.c: 405: {
 11517                           ;eth97j60.c: 406: return 0;
 11518  003824  0C00               	retlw	0
 11519  003826                     l10160:
 11520                           
 11521                           ; BSR set to: 14
 11522                           ;eth97j60.c: 407: }
 11523                           ;eth97j60.c: 410: if(WasDiscarded == 0)
 11524  003826  503C               	movf	_WasDiscarded,w,c
 11525  003828  E103               	bnz	l2018
 11526                           
 11527                           ; BSR set to: 14
 11528                           ;eth97j60.c: 411: {
 11529                           ;eth97j60.c: 412: MACDiscardRx();
 11530  00382A  ECD8  F026         	call	_MACDiscardRx	;wreg free
 11531  00382E  0C00               	retlw	0
 11532  003830                     l2018:
 11533                           
 11534                           ; BSR set to: 14
 11535                           ;eth97j60.c: 414: }
 11536                           ;eth97j60.c: 416: CurrentPacketLocation.Val = NextPacketLocation.Val;
 11537  003830  C168  F166         	movff	_NextPacketLocation,_CurrentPacketLocation
 11538  003834  C169  F167         	movff	_NextPacketLocation+1,_CurrentPacketLocation+1
 11539                           
 11540                           ;eth97j60.c: 419: ERDPT = CurrentPacketLocation.Val;
 11541  003838  C166  FF7A         	movff	_CurrentPacketLocation,3962	;volatile
 11542  00383C  C167  FF7B         	movff	_CurrentPacketLocation+1,3963	;volatile
 11543                           
 11544                           ; BSR set to: 14
 11545                           ;eth97j60.c: 422: MACGetArray((uint8_t*)&header, sizeof(header));
 11546  003840  0E60               	movlw	low MACGetHeader@header
 11547  003842  6E1C               	movwf	MACGetArray@val,c
 11548  003844  6A1D               	clrf	MACGetArray@val+1,c
 11549  003846  6A1F               	clrf	MACGetArray@len+1,c
 11550  003848  0E14               	movlw	20
 11551  00384A  6E1E               	movwf	MACGetArray@len,c
 11552  00384C  EC85  F025         	call	_MACGetArray	;wreg free
 11553                           
 11554                           ;eth97j60.c: 426: header.Type.Val = swaps(header.Type.Val);
 11555  003850  C072  F01C         	movff	MACGetHeader@header+18,swaps@v
 11556  003854  C073  F01D         	movff	MACGetHeader@header+19,swaps@v+1
 11557  003858  EC42  F029         	call	_swaps	;wreg free
 11558  00385C  C01C  F072         	movff	?_swaps,MACGetHeader@header+18
 11559  003860  C01D  F073         	movff	?_swaps+1,MACGetHeader@header+19
 11560                           
 11561                           ;eth97j60.c: 430: if(header.NextPacketPointer > ((((8*1024ul) - (1ul+1518ul+7ul) - 0u - 
      +                          0ul - 0ul)-2ul) | 0x0001ul) || ((TCPIP_UINT8_VAL*)(&header.NextPacketPointer))->bits.b0 
      +                          ||
 11562                           ;eth97j60.c: 431: header.StatusVector.bits.Zero ||
 11563                           ;eth97j60.c: 432: header.StatusVector.bits.CRCError ||
 11564                           ;eth97j60.c: 433: header.StatusVector.bits.ByteCount > 1518u ||
 11565                           ;eth97j60.c: 434: !header.StatusVector.bits.ReceiveOk)
 11566  003864  0E0A               	movlw	10
 11567  003866  0100               	movlb	0	; () banked
 11568  003868  5D60               	subwf	MACGetHeader@header& (0+255),w,b
 11569  00386A  0E1A               	movlw	26
 11570  00386C  5961               	subwfb	(MACGetHeader@header+1)& (0+255),w,b
 11571  00386E  E20B               	bc	l2021
 11572                           
 11573                           ; BSR set to: 0
 11574  003870  A160               	btfss	MACGetHeader@header& (0+255),0,b
 11575                           
 11576                           ; BSR set to: 0
 11577  003872  BF65               	btfsc	(MACGetHeader@header+5)& (0+255),7,b
 11578  003874  D008               	goto	l2021
 11579                           
 11580                           ; BSR set to: 0
 11581  003876  B964               	btfsc	(MACGetHeader@header+4)& (0+255),4,b
 11582  003878  D006               	goto	l2021
 11583                           
 11584                           ; BSR set to: 0
 11585  00387A  0EEF               	movlw	239
 11586  00387C  5D62               	subwf	(MACGetHeader@header+2)& (0+255),w,b
 11587  00387E  0E05               	movlw	5
 11588  003880  5963               	subwfb	(MACGetHeader@header+3)& (0+255),w,b
 11589  003882  E201               	bc	l2021
 11590                           
 11591                           ; BSR set to: 0
 11592  003884  AF64               	btfss	(MACGetHeader@header+4)& (0+255),7,b
 11593  003886                     l2021:
 11594                           
 11595                           ; BSR set to: 0
 11596  003886  00FF               	reset		;# 
 11597                           
 11598                           ;eth97j60.c: 437: }
 11599                           ;eth97j60.c: 440: NextPacketLocation.Val = header.NextPacketPointer;
 11600  003888  C060  F168         	movff	MACGetHeader@header,_NextPacketLocation
 11601  00388C  C061  F169         	movff	MACGetHeader@header+1,_NextPacketLocation+1
 11602                           
 11603                           ;eth97j60.c: 445: memcpy((void*)remote->v, (void*)header.SourceMACAddr.v, sizeof(*remote
      +                          ));
 11604  003890  C026  F01C         	movff	MACGetHeader@remote,memcpy@d1
 11605  003894  C027  F01D         	movff	MACGetHeader@remote+1,memcpy@d1+1
 11606  003898  0E6C               	movlw	low (MACGetHeader@header+12)
 11607  00389A  6E1E               	movwf	memcpy@s1,c
 11608  00389C  6A1F               	clrf	memcpy@s1+1,c
 11609  00389E  6A21               	clrf	memcpy@n+1,c
 11610  0038A0  0E06               	movlw	6
 11611  0038A2  6E20               	movwf	memcpy@n,c
 11612  0038A4  ECEE  F023         	call	_memcpy	;wreg free
 11613                           
 11614                           ;eth97j60.c: 448: *type = (0xFFu);
 11615  0038A8  5028               	movf	MACGetHeader@type,w,c
 11616  0038AA  6ED9               	movwf	fsr2l,c
 11617  0038AC  6ADA               	clrf	fsr2h,c
 11618  0038AE  68DF               	setf	indf2,c
 11619                           
 11620                           ;eth97j60.c: 449: if( (header.Type.v[1] == 0x08u) &&
 11621                           ;eth97j60.c: 450: ((header.Type.v[0] == (0x00u)) || (header.Type.v[0] == (0x06u))) )
 11622  0038B0  0E08               	movlw	8
 11623  0038B2  0100               	movlb	0	; () banked
 11624  0038B4  1973               	xorwf	(MACGetHeader@header+19)& (0+255),w,b
 11625  0038B6  E10A               	bnz	l10196
 11626                           
 11627                           ; BSR set to: 0
 11628  0038B8  5172               	movf	(MACGetHeader@header+18)& (0+255),w,b
 11629  0038BA  E003               	bz	l10194
 11630                           
 11631                           ; BSR set to: 0
 11632  0038BC  0E06               	movlw	6
 11633  0038BE  1972               	xorwf	(MACGetHeader@header+18)& (0+255),w,b
 11634  0038C0  E105               	bnz	l10196
 11635  0038C2                     l10194:
 11636                           
 11637                           ; BSR set to: 0
 11638                           ;eth97j60.c: 451: {
 11639                           ;eth97j60.c: 452: *type = header.Type.v[0];
 11640  0038C2  5028               	movf	MACGetHeader@type,w,c
 11641  0038C4  6ED9               	movwf	fsr2l,c
 11642  0038C6  6ADA               	clrf	fsr2h,c
 11643  0038C8  C072  FFDF         	movff	MACGetHeader@header+18,indf2
 11644  0038CC                     l10196:
 11645                           
 11646                           ; BSR set to: 0
 11647                           ;eth97j60.c: 453: }
 11648                           ;eth97j60.c: 456: WasDiscarded = 0;
 11649  0038CC  6A3C               	clrf	_WasDiscarded,c
 11650                           
 11651                           ; BSR set to: 0
 11652                           ;eth97j60.c: 457: return 1;
 11653  0038CE  0C01               	retlw	1	;funcret
 11654  0038D0                     __end_of_MACGetHeader:
 11655                           	opt stack 0
 11656                           tblptru	equ	0xFF8
 11657                           tblptrh	equ	0xFF7
 11658                           tblptrl	equ	0xFF6
 11659                           tablat	equ	0xFF5
 11660                           prodh	equ	0xFF4
 11661                           prodl	equ	0xFF3
 11662                           intcon	equ	0xFF2
 11663                           intcon2	equ	0xFF1
 11664                           postinc0	equ	0xFEE
 11665                           wreg	equ	0xFE8
 11666                           indf1	equ	0xFE7
 11667                           postinc1	equ	0xFE6
 11668                           postdec1	equ	0xFE5
 11669                           plusw1	equ	0xFE3
 11670                           fsr1h	equ	0xFE2
 11671                           fsr1l	equ	0xFE1
 11672                           indf2	equ	0xFDF
 11673                           postinc2	equ	0xFDE
 11674                           postdec2	equ	0xFDD
 11675                           plusw2	equ	0xFDB
 11676                           fsr2h	equ	0xFDA
 11677                           fsr2l	equ	0xFD9
 11678                           status	equ	0xFD8
 11679                           
 11680 ;; *************** function _IPGetHeader *****************
 11681 ;; Defined at:
 11682 ;;		line 95 in file "../framework/tcpip/src/ip.c"
 11683 ;; Parameters:    Size  Location     Type
 11684 ;;  localIP         1    wreg     PTR struct .
 11685 ;;		 -> StackTask@tempLocalIP(4), 
 11686 ;;  remote          2   37[BANK0 ] PTR struct .
 11687 ;;		 -> remoteNode(10), 
 11688 ;;  protocol        1   39[BANK0 ] PTR unsigned char 
 11689 ;;		 -> StackTask@cIPFrameType(1), 
 11690 ;;  len             1   40[BANK0 ] PTR unsigned int 
 11691 ;;		 -> StackTask@dataCount(2), 
 11692 ;; Auto vars:     Size  Location     Type
 11693 ;;  localIP         1   47[BANK0 ] PTR struct .
 11694 ;;		 -> StackTask@tempLocalIP(4), 
 11695 ;;  header         20   48[BANK0 ] struct _IP_HEADER
 11696 ;;  CalcChecksum    2   45[BANK0 ] struct .
 11697 ;; Return value:  Size  Location     Type
 11698 ;;                  1    wreg      unsigned char 
 11699 ;; Registers used:
 11700 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
 11701 ;; Tracked objects:
 11702 ;;		On entry : F/0
 11703 ;;		On exit  : F/0
 11704 ;;		Unchanged: 0/0
 11705 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11706 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11707 ;;      Locals:         0      23       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11708 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11709 ;;      Totals:         0      31       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11710 ;;Total ram usage:       31 bytes
 11711 ;; Hardware stack levels used:    1
 11712 ;; Hardware stack levels required when called:    9
 11713 ;; This function calls:
 11714 ;;		_MACCalcRxChecksum
 11715 ;;		_MACGetArray
 11716 ;;		_MACSetReadPtrInRx
 11717 ;;		_SwapIPHeader
 11718 ;; This function is called by:
 11719 ;;		_StackTask
 11720 ;; This function uses a non-reentrant model
 11721 ;;
 11722                           
 11723                           	psect	text71
 11724  002F9A                     __ptext71:
 11725                           	opt stack 0
 11726  002F9A                     _IPGetHeader:
 11727                           	opt stack 20
 11728                           
 11729                           ;incstack = 0
 11730                           ;IPGetHeader@localIP stored from wreg
 11731  002F9A  6F8F               	movwf	IPGetHeader@localIP& (0+255),b
 11732                           
 11733                           ;ip.c: 100: TCPIP_UINT16_VAL CalcChecksum;
 11734                           ;ip.c: 101: IP_HEADER header;
 11735                           ;ip.c: 112: MACGetArray((uint8_t *) & header, sizeof (header));
 11736  002F9C  0E90               	movlw	low IPGetHeader@header
 11737  002F9E  6E1C               	movwf	MACGetArray@val,c
 11738  002FA0  6A1D               	clrf	MACGetArray@val+1,c
 11739  002FA2  6A1F               	clrf	MACGetArray@len+1,c
 11740  002FA4  0E14               	movlw	20
 11741  002FA6  6E1E               	movwf	MACGetArray@len,c
 11742  002FA8  EC85  F025         	call	_MACGetArray	;wreg free
 11743                           
 11744                           ;ip.c: 115: if ((header.VersionIHL & 0xf0) != (0x40u))
 11745  002FAC  0100               	movlb	0	; () banked
 11746  002FAE  5190               	movf	IPGetHeader@header& (0+255),w,b
 11747  002FB0  0BF0               	andlw	240
 11748  002FB2  0A40               	xorlw	64
 11749  002FB4  E001               	bz	l10254
 11750                           
 11751                           ; BSR set to: 0
 11752                           ;ip.c: 116: return 0;
 11753  002FB6  0C00               	retlw	0
 11754  002FB8                     l10254:
 11755                           
 11756                           ; BSR set to: 0
 11757                           ;ip.c: 120: if (header.FragmentInfo & 0xFF1F)
 11758  002FB8  0E1F               	movlw	31
 11759  002FBA  6F89               	movwf	??_IPGetHeader& (0+255),b
 11760  002FBC  698A               	setf	(??_IPGetHeader+1)& (0+255),b
 11761  002FBE  EE20  F096         	lfsr	2,IPGetHeader@header+6
 11762  002FC2  CFDE F08B          	movff	postinc2,??_IPGetHeader+2
 11763  002FC6  CFDD F08C          	movff	postdec2,??_IPGetHeader+3
 11764  002FCA  5189               	movf	??_IPGetHeader& (0+255),w,b
 11765  002FCC  178B               	andwf	(??_IPGetHeader+2)& (0+255),f,b
 11766  002FCE  518A               	movf	(??_IPGetHeader+1)& (0+255),w,b
 11767  002FD0  178C               	andwf	(??_IPGetHeader+3)& (0+255),f,b
 11768  002FD2  518B               	movf	(??_IPGetHeader+2)& (0+255),w,b
 11769  002FD4  118C               	iorwf	(??_IPGetHeader+3)& (0+255),w,b
 11770  002FD6  E001               	bz	l10260
 11771  002FD8  0C00               	retlw	0
 11772  002FDA                     l10260:
 11773                           
 11774                           ; BSR set to: 0
 11775                           ;ip.c: 123: IPHeaderLen = (header.VersionIHL & 0x0f) << 2;
 11776  002FDA  C090  F089         	movff	IPGetHeader@header,??_IPGetHeader
 11777  002FDE  0E0F               	movlw	15
 11778  002FE0  1789               	andwf	??_IPGetHeader& (0+255),f,b
 11779  002FE2  90D8               	bcf	status,0,c
 11780  002FE4  3789               	rlcf	??_IPGetHeader& (0+255),f,b
 11781  002FE6  90D8               	bcf	status,0,c
 11782  002FE8  3589               	rlcf	??_IPGetHeader& (0+255),w,b
 11783  002FEA  6FCD               	movwf	_IPHeaderLen& (0+255),b
 11784                           
 11785                           ; BSR set to: 0
 11786                           ;ip.c: 130: CalcChecksum.Val = MACCalcRxChecksum(0, IPHeaderLen);
 11787  002FEC  6B7E               	clrf	(MACCalcRxChecksum@offset+1)& (0+255),b
 11788  002FEE  6B7D               	clrf	MACCalcRxChecksum@offset& (0+255),b
 11789  002FF0  C0CD  F07F         	movff	_IPHeaderLen,MACCalcRxChecksum@len
 11790  002FF4  6B80               	clrf	(MACCalcRxChecksum@len+1)& (0+255),b
 11791  002FF6  EC59  F021         	call	_MACCalcRxChecksum	;wreg free
 11792  002FFA  C07D  F08D         	movff	?_MACCalcRxChecksum,IPGetHeader@CalcChecksum
 11793  002FFE  C07E  F08E         	movff	?_MACCalcRxChecksum+1,IPGetHeader@CalcChecksum+1
 11794                           
 11795                           ; BSR set to: 0
 11796                           ;ip.c: 133: MACSetReadPtrInRx(IPHeaderLen);
 11797  003002  C0CD  F01C         	movff	_IPHeaderLen,MACSetReadPtrInRx@offset
 11798  003006  6A1D               	clrf	MACSetReadPtrInRx@offset+1,c
 11799  003008  EC11  F027         	call	_MACSetReadPtrInRx	;wreg free
 11800                           
 11801                           ; BSR set to: 1
 11802                           ;ip.c: 135: if (CalcChecksum.Val)
 11803  00300C  0100               	movlb	0	; () banked
 11804  00300E  518D               	movf	IPGetHeader@CalcChecksum& (0+255),w,b
 11805  003010  118E               	iorwf	(IPGetHeader@CalcChecksum+1)& (0+255),w,b
 11806  003012  E001               	bz	l10272
 11807  003014  0C00               	retlw	0
 11808  003016                     l10272:
 11809                           
 11810                           ; BSR set to: 0
 11811                           ;ip.c: 173: }
 11812                           ;ip.c: 176: SwapIPHeader(&header);
 11813  003016  0E90               	movlw	IPGetHeader@header& (0+255)
 11814  003018  EC34  F020         	call	_SwapIPHeader
 11815                           
 11816                           ;ip.c: 180: if (localIP)
 11817  00301C  0100               	movlb	0	; () banked
 11818  00301E  518F               	movf	IPGetHeader@localIP& (0+255),w,b
 11819  003020  E00D               	bz	l10278
 11820                           
 11821                           ; BSR set to: 0
 11822                           ;ip.c: 181: localIP->Val = header.DestAddress.Val;
 11823  003022  EE20  F0A0         	lfsr	2,IPGetHeader@header+16
 11824  003026  518F               	movf	IPGetHeader@localIP& (0+255),w,b
 11825  003028  6EE1               	movwf	fsr1l,c
 11826  00302A  6AE2               	clrf	fsr1h,c
 11827  00302C  CFDE FFE6          	movff	postinc2,postinc1
 11828  003030  CFDE FFE6          	movff	postinc2,postinc1
 11829  003034  CFDE FFE6          	movff	postinc2,postinc1
 11830  003038  CFDE FFE6          	movff	postinc2,postinc1
 11831  00303C                     l10278:
 11832                           
 11833                           ; BSR set to: 0
 11834                           ;ip.c: 183: remote->IPAddr.Val = header.SourceAddress.Val;
 11835  00303C  EE20  F09C         	lfsr	2,IPGetHeader@header+12
 11836  003040  C085  FFE1         	movff	IPGetHeader@remote,fsr1l
 11837  003044  C086  FFE2         	movff	IPGetHeader@remote+1,fsr1h
 11838  003048  CFDE FFE6          	movff	postinc2,postinc1
 11839  00304C  CFDE FFE6          	movff	postinc2,postinc1
 11840  003050  CFDE FFE6          	movff	postinc2,postinc1
 11841  003054  CFDE FFE6          	movff	postinc2,postinc1
 11842                           
 11843                           ; BSR set to: 0
 11844                           ;ip.c: 184: *protocol = header.Protocol;
 11845  003058  5187               	movf	IPGetHeader@protocol& (0+255),w,b
 11846  00305A  6ED9               	movwf	fsr2l,c
 11847  00305C  6ADA               	clrf	fsr2h,c
 11848  00305E  C099  FFDF         	movff	IPGetHeader@header+9,indf2
 11849                           
 11850                           ; BSR set to: 0
 11851                           ;ip.c: 185: *len = header.TotalLength - IPHeaderLen;
 11852  003062  51CD               	movf	_IPHeaderLen& (0+255),w,b
 11853  003064  5D92               	subwf	(IPGetHeader@header+2)& (0+255),w,b
 11854  003066  6F89               	movwf	??_IPGetHeader& (0+255),b
 11855  003068  0E00               	movlw	0
 11856  00306A  5993               	subwfb	(IPGetHeader@header+3)& (0+255),w,b
 11857  00306C  6F8A               	movwf	(??_IPGetHeader+1)& (0+255),b
 11858  00306E  5188               	movf	IPGetHeader@len& (0+255),w,b
 11859  003070  6ED9               	movwf	fsr2l,c
 11860  003072  6ADA               	clrf	fsr2h,c
 11861  003074  C089  FFDE         	movff	??_IPGetHeader,postinc2
 11862  003078  C08A  FFDD         	movff	??_IPGetHeader+1,postdec2
 11863                           
 11864                           ; BSR set to: 0
 11865                           
 11866                           ; BSR set to: 0
 11867                           ;ip.c: 187: return 1;
 11868  00307C  0C01               	retlw	1	;funcret
 11869  00307E                     __end_of_IPGetHeader:
 11870                           	opt stack 0
 11871                           tblptru	equ	0xFF8
 11872                           tblptrh	equ	0xFF7
 11873                           tblptrl	equ	0xFF6
 11874                           tablat	equ	0xFF5
 11875                           prodh	equ	0xFF4
 11876                           prodl	equ	0xFF3
 11877                           intcon	equ	0xFF2
 11878                           intcon2	equ	0xFF1
 11879                           postinc0	equ	0xFEE
 11880                           wreg	equ	0xFE8
 11881                           indf1	equ	0xFE7
 11882                           postinc1	equ	0xFE6
 11883                           postdec1	equ	0xFE5
 11884                           plusw1	equ	0xFE3
 11885                           fsr1h	equ	0xFE2
 11886                           fsr1l	equ	0xFE1
 11887                           indf2	equ	0xFDF
 11888                           postinc2	equ	0xFDE
 11889                           postdec2	equ	0xFDD
 11890                           plusw2	equ	0xFDB
 11891                           fsr2h	equ	0xFDA
 11892                           fsr2l	equ	0xFD9
 11893                           status	equ	0xFD8
 11894                           
 11895 ;; *************** function _ICMPProcess *****************
 11896 ;; Defined at:
 11897 ;;		line 101 in file "../framework/tcpip/src/icmp.c"
 11898 ;; Parameters:    Size  Location     Type
 11899 ;;  remote          2   37[BANK0 ] PTR struct .
 11900 ;;		 -> remoteNode(10), 
 11901 ;;  len             2   39[BANK0 ] unsigned int 
 11902 ;; Auto vars:     Size  Location     Type
 11903 ;;  dwVal           4   41[BANK0 ] struct .
 11904 ;; Return value:  Size  Location     Type
 11905 ;;		None               void
 11906 ;; Registers used:
 11907 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 11908 ;; Tracked objects:
 11909 ;;		On entry : F/0
 11910 ;;		On exit  : 0/0
 11911 ;;		Unchanged: 0/0
 11912 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11913 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11914 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11915 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11916 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11917 ;;Total ram usage:        8 bytes
 11918 ;; Hardware stack levels used:    1
 11919 ;; Hardware stack levels required when called:   10
 11920 ;; This function calls:
 11921 ;;		_IPPutHeader
 11922 ;;		_MACCalcRxChecksum
 11923 ;;		_MACFlush
 11924 ;;		_MACGetArray
 11925 ;;		_MACIsMemCopyDone
 11926 ;;		_MACIsTxReady
 11927 ;;		_MACMemCopyAsync
 11928 ;;		_MACPutArray
 11929 ;;		_MACSetWritePtr
 11930 ;; This function is called by:
 11931 ;;		_StackTask
 11932 ;; This function uses a non-reentrant model
 11933 ;;
 11934                           
 11935                           	psect	text72
 11936  00397E                     __ptext72:
 11937                           	opt stack 0
 11938  00397E                     _ICMPProcess:
 11939                           	opt stack 19
 11940                           
 11941                           ; BSR set to: 0
 11942                           ;icmp.c: 103: TCPIP_UINT32_VAL dwVal;
 11943                           ;icmp.c: 106: MACGetArray((uint8_t *) & dwVal, sizeof (dwVal));
 11944                           
 11945                           ; BSR set to: 0
 11946                           ;incstack = 0
 11947  00397E  0E89               	movlw	low ICMPProcess@dwVal
 11948  003980  6E1C               	movwf	MACGetArray@val,c
 11949  003982  6A1D               	clrf	MACGetArray@val+1,c
 11950  003984  6A1F               	clrf	MACGetArray@len+1,c
 11951  003986  0E04               	movlw	4
 11952  003988  6E1E               	movwf	MACGetArray@len,c
 11953  00398A  EC85  F025         	call	_MACGetArray	;wreg free
 11954                           
 11955                           ;icmp.c: 109: if (dwVal.w[0] == 0x0008u) {
 11956  00398E  0E08               	movlw	8
 11957  003990  0100               	movlb	0	; () banked
 11958  003992  1989               	xorwf	ICMPProcess@dwVal& (0+255),w,b
 11959  003994  118A               	iorwf	(ICMPProcess@dwVal+1)& (0+255),w,b
 11960  003996  A4D8               	btfss	status,2,c
 11961  003998  0012               	return	
 11962                           
 11963                           ; BSR set to: 0
 11964                           ;icmp.c: 114: if (MACCalcRxChecksum(0 + sizeof (IP_HEADER), len))
 11965  00399A  6B7E               	clrf	(MACCalcRxChecksum@offset+1)& (0+255),b
 11966  00399C  0E14               	movlw	20
 11967  00399E  6F7D               	movwf	MACCalcRxChecksum@offset& (0+255),b
 11968  0039A0  C087  F07F         	movff	ICMPProcess@len,MACCalcRxChecksum@len
 11969  0039A4  C088  F080         	movff	ICMPProcess@len+1,MACCalcRxChecksum@len+1
 11970  0039A8  EC59  F021         	call	_MACCalcRxChecksum	;wreg free
 11971  0039AC  517D               	movf	?_MACCalcRxChecksum& (0+255),w,b
 11972  0039AE  117E               	iorwf	(?_MACCalcRxChecksum+1)& (0+255),w,b
 11973  0039B0  E001               	bz	l1586
 11974  0039B2  0012               	return	
 11975  0039B4                     l1586:
 11976                           
 11977                           ; BSR set to: 0
 11978                           ;icmp.c: 118: dwVal.v[0] = 0x00;
 11979  0039B4  6B89               	clrf	ICMPProcess@dwVal& (0+255),b
 11980                           
 11981                           ; BSR set to: 0
 11982                           ;icmp.c: 119: dwVal.v[2] += 8;
 11983  0039B6  0E08               	movlw	8
 11984  0039B8  278B               	addwf	(ICMPProcess@dwVal+2)& (0+255),f,b
 11985                           
 11986                           ;icmp.c: 120: if (dwVal.v[2] < 8u) {
 11987  0039BA  618B               	cpfslt	(ICMPProcess@dwVal+2)& (0+255),b
 11988  0039BC  D004               	goto	l10304
 11989                           
 11990                           ; BSR set to: 0
 11991                           ;icmp.c: 121: dwVal.v[3]++;
 11992  0039BE  2B8C               	incf	(ICMPProcess@dwVal+3)& (0+255),f,b
 11993                           
 11994                           ; BSR set to: 0
 11995                           ;icmp.c: 122: if (dwVal.v[3] == 0u)
 11996  0039C0  518C               	movf	(ICMPProcess@dwVal+3)& (0+255),w,b
 11997  0039C2  E101               	bnz	l10304
 11998                           
 11999                           ; BSR set to: 0
 12000                           ;icmp.c: 123: dwVal.v[2]++;
 12001  0039C4  2B8B               	incf	(ICMPProcess@dwVal+2)& (0+255),f,b
 12002  0039C6                     l10304:
 12003  0039C6  ECC2  F028         	call	_MACIsTxReady	;wreg free
 12004  0039CA  0900               	iorlw	0
 12005  0039CC  E0FC               	bz	l10304
 12006                           
 12007                           ;icmp.c: 132: MACSetWritePtr((((8*1024ul) - (1ul+1518ul+7ul) - 0u - 0ul - 0ul) + 1ul) + 
      +                          sizeof (ETHER_HEADER));
 12008  0039CE  0E1A               	movlw	26
 12009  0039D0  6E1D               	movwf	MACSetWritePtr@address+1,c
 12010  0039D2  0E19               	movlw	25
 12011  0039D4  6E1C               	movwf	MACSetWritePtr@address,c
 12012  0039D6  EC56  F02A         	call	_MACSetWritePtr	;wreg free
 12013                           
 12014                           ;icmp.c: 135: IPPutHeader(remote, (1u), len);
 12015  0039DA  C085  F060         	movff	ICMPProcess@remote,IPPutHeader@remote
 12016  0039DE  C086  F061         	movff	ICMPProcess@remote+1,IPPutHeader@remote+1
 12017  0039E2  0E01               	movlw	1
 12018  0039E4  0100               	movlb	0	; () banked
 12019  0039E6  6F62               	movwf	IPPutHeader@protocol& (0+255),b
 12020  0039E8  C087  F063         	movff	ICMPProcess@len,IPPutHeader@len
 12021  0039EC  C088  F064         	movff	ICMPProcess@len+1,IPPutHeader@len+1
 12022  0039F0  EC15  F01D         	call	_IPPutHeader	;wreg free
 12023                           
 12024                           ;icmp.c: 138: MACPutArray((uint8_t *) & dwVal, sizeof (dwVal));
 12025  0039F4  0E89               	movlw	low ICMPProcess@dwVal
 12026  0039F6  6E1C               	movwf	MACPutArray@val,c
 12027  0039F8  6A1D               	clrf	MACPutArray@val+1,c
 12028  0039FA  6A1F               	clrf	MACPutArray@len+1,c
 12029  0039FC  0E04               	movlw	4
 12030  0039FE  6E1E               	movwf	MACPutArray@len,c
 12031  003A00  EC76  F028         	call	_MACPutArray	;wreg free
 12032                           
 12033                           ;icmp.c: 139: MACMemCopyAsync(-1, -1, len - 4);
 12034  003A04  681E               	setf	MACMemCopyAsync@destAddr+1,c
 12035  003A06  681D               	setf	MACMemCopyAsync@destAddr,c
 12036  003A08  6820               	setf	MACMemCopyAsync@sourceAddr+1,c
 12037  003A0A  681F               	setf	MACMemCopyAsync@sourceAddr,c
 12038  003A0C  0EFC               	movlw	252
 12039  003A0E  0100               	movlb	0	; () banked
 12040  003A10  2587               	addwf	ICMPProcess@len& (0+255),w,b
 12041  003A12  6E21               	movwf	MACMemCopyAsync@len,c
 12042  003A14  0EFF               	movlw	255
 12043  003A16  2188               	addwfc	(ICMPProcess@len+1)& (0+255),w,b
 12044  003A18  6E22               	movwf	MACMemCopyAsync@len+1,c
 12045  003A1A  EC2A  F014         	call	_MACMemCopyAsync	;wreg free
 12046  003A1E                     l10314:
 12047  003A1E  EC63  F02A         	call	_MACIsMemCopyDone	;wreg free
 12048  003A22  0900               	iorlw	0
 12049  003A24  E0FC               	bz	l10314
 12050                           
 12051                           ;icmp.c: 143: MACFlush();
 12052  003A26  EF05  F029         	goto	_MACFlush	;wreg free
 12053  003A2A                     __end_of_ICMPProcess:
 12054                           	opt stack 0
 12055                           tblptru	equ	0xFF8
 12056                           tblptrh	equ	0xFF7
 12057                           tblptrl	equ	0xFF6
 12058                           tablat	equ	0xFF5
 12059                           prodh	equ	0xFF4
 12060                           prodl	equ	0xFF3
 12061                           intcon	equ	0xFF2
 12062                           intcon2	equ	0xFF1
 12063                           postinc0	equ	0xFEE
 12064                           wreg	equ	0xFE8
 12065                           indf1	equ	0xFE7
 12066                           postinc1	equ	0xFE6
 12067                           postdec1	equ	0xFE5
 12068                           plusw1	equ	0xFE3
 12069                           fsr1h	equ	0xFE2
 12070                           fsr1l	equ	0xFE1
 12071                           indf2	equ	0xFDF
 12072                           postinc2	equ	0xFDE
 12073                           postdec2	equ	0xFDD
 12074                           plusw2	equ	0xFDB
 12075                           fsr2h	equ	0xFDA
 12076                           fsr2l	equ	0xFD9
 12077                           status	equ	0xFD8
 12078                           
 12079 ;; *************** function _MACMemCopyAsync *****************
 12080 ;; Defined at:
 12081 ;;		line 859 in file "../framework/tcpip/src/eth97j60.c"
 12082 ;; Parameters:    Size  Location     Type
 12083 ;;  destAddr        2   28[COMRAM] unsigned short 
 12084 ;;  sourceAddr      2   30[COMRAM] unsigned short 
 12085 ;;  len             2   32[COMRAM] unsigned int 
 12086 ;; Auto vars:     Size  Location     Type
 12087 ;;  WriteSave       2    2[BANK0 ] struct .
 12088 ;;  ReadSave        2    0[BANK0 ] struct .
 12089 ;;  UpdateReadPo    1    5[BANK0 ] unsigned char 
 12090 ;;  UpdateWriteP    1    4[BANK0 ] unsigned char 
 12091 ;; Return value:  Size  Location     Type
 12092 ;;		None               void
 12093 ;; Registers used:
 12094 ;;		wreg, status,2, status,0, cstack
 12095 ;; Tracked objects:
 12096 ;;		On entry : F/0
 12097 ;;		On exit  : F/0
 12098 ;;		Unchanged: 0/0
 12099 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12100 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12101 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12102 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12103 ;;      Totals:        10       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12104 ;;Total ram usage:       16 bytes
 12105 ;; Hardware stack levels used:    1
 12106 ;; Hardware stack levels required when called:    7
 12107 ;; This function calls:
 12108 ;;		_MACGet
 12109 ;;		_MACPut
 12110 ;; This function is called by:
 12111 ;;		_ICMPProcess
 12112 ;; This function uses a non-reentrant model
 12113 ;;
 12114                           
 12115                           	psect	text73
 12116  002854                     __ptext73:
 12117                           	opt stack 0
 12118  002854                     _MACMemCopyAsync:
 12119                           	opt stack 21
 12120                           
 12121                           ; BSR set to: 0
 12122                           ;eth97j60.c: 861: TCPIP_UINT16_VAL ReadSave, WriteSave;
 12123                           ;eth97j60.c: 862: bool UpdateWritePointer = 0;
 12124                           
 12125                           ;incstack = 0
 12126  002854  6B64               	clrf	MACMemCopyAsync@UpdateWritePointer& (0+255),b
 12127                           
 12128                           ;eth97j60.c: 863: bool UpdateReadPointer = 0;
 12129  002856  6B65               	clrf	MACMemCopyAsync@UpdateReadPointer& (0+255),b
 12130                           
 12131                           ; BSR set to: 0
 12132                           ;eth97j60.c: 865: if(destAddr == (unsigned short)-1)
 12133  002858  281D               	incf	MACMemCopyAsync@destAddr,w,c
 12134  00285A  E108               	bnz	l9822
 12135  00285C  281E               	incf	MACMemCopyAsync@destAddr+1,w,c
 12136  00285E  E106               	bnz	l9822
 12137                           
 12138                           ; BSR set to: 0
 12139                           ;eth97j60.c: 866: {
 12140                           ;eth97j60.c: 867: UpdateWritePointer = 1;
 12141  002860  0E01               	movlw	1
 12142  002862  6F64               	movwf	MACMemCopyAsync@UpdateWritePointer& (0+255),b
 12143                           
 12144                           ; BSR set to: 0
 12145                           ;eth97j60.c: 868: destAddr = EWRPT;
 12146  002864  CEE2 F01D          	movff	3810,MACMemCopyAsync@destAddr	;volatile
 12147  002868  CEE3 F01E          	movff	3811,MACMemCopyAsync@destAddr+1	;volatile
 12148  00286C                     l9822:
 12149                           
 12150                           ; BSR set to: 0
 12151                           ;eth97j60.c: 869: }
 12152                           ;eth97j60.c: 870: if(sourceAddr == (unsigned short)-1)
 12153  00286C  281F               	incf	MACMemCopyAsync@sourceAddr,w,c
 12154  00286E  E108               	bnz	l9828
 12155  002870  2820               	incf	MACMemCopyAsync@sourceAddr+1,w,c
 12156  002872  E106               	bnz	l9828
 12157                           
 12158                           ; BSR set to: 0
 12159                           ;eth97j60.c: 871: {
 12160                           ;eth97j60.c: 872: UpdateReadPointer = 1;
 12161  002874  0E01               	movlw	1
 12162  002876  6F65               	movwf	MACMemCopyAsync@UpdateReadPointer& (0+255),b
 12163                           
 12164                           ; BSR set to: 0
 12165                           ;eth97j60.c: 873: sourceAddr = ERDPT;
 12166  002878  CF7A F01F          	movff	3962,MACMemCopyAsync@sourceAddr	;volatile
 12167  00287C  CF7B F020          	movff	3963,MACMemCopyAsync@sourceAddr+1	;volatile
 12168  002880                     l9828:
 12169                           
 12170                           ; BSR set to: 0
 12171                           ;eth97j60.c: 874: }
 12172                           ;eth97j60.c: 878: if(len <= 1u)
 12173  002880  5022               	movf	MACMemCopyAsync@len+1,w,c
 12174  002882  E12E               	bnz	l9844
 12175  002884  0E02               	movlw	2
 12176  002886  5C21               	subwf	MACMemCopyAsync@len,w,c
 12177  002888  E22B               	bc	l9844
 12178                           
 12179                           ; BSR set to: 0
 12180                           ;eth97j60.c: 879: {
 12181                           ;eth97j60.c: 880: ReadSave.Val = ERDPT;
 12182  00288A  CF7A F060          	movff	3962,MACMemCopyAsync@ReadSave	;volatile
 12183  00288E  CF7B F061          	movff	3963,MACMemCopyAsync@ReadSave+1	;volatile
 12184                           
 12185                           ;eth97j60.c: 881: WriteSave.Val = EWRPT;
 12186  002892  CEE2 F062          	movff	3810,MACMemCopyAsync@WriteSave	;volatile
 12187  002896  CEE3 F063          	movff	3811,MACMemCopyAsync@WriteSave+1	;volatile
 12188                           
 12189                           ;eth97j60.c: 882: ERDPT = sourceAddr;
 12190  00289A  C01F  FF7A         	movff	MACMemCopyAsync@sourceAddr,3962	;volatile
 12191  00289E  C020  FF7B         	movff	MACMemCopyAsync@sourceAddr+1,3963	;volatile
 12192                           
 12193                           ;eth97j60.c: 883: EWRPT = destAddr;
 12194  0028A2  C01D  FEE2         	movff	MACMemCopyAsync@destAddr,3810	;volatile
 12195  0028A6  C01E  FEE3         	movff	MACMemCopyAsync@destAddr+1,3811	;volatile
 12196                           
 12197                           ;eth97j60.c: 884: while(len--)
 12198  0028AA  D004               	goto	l9834
 12199  0028AC                     l9832:
 12200                           
 12201                           ;eth97j60.c: 885: MACPut(MACGet());
 12202  0028AC  EC6C  F02A         	call	_MACGet	;wreg free
 12203  0028B0  EC46  F02A         	call	_MACPut
 12204  0028B4                     l9834:
 12205  0028B4  0621               	decf	MACMemCopyAsync@len,f,c
 12206  0028B6  A0D8               	btfss	status,0,c
 12207  0028B8  0622               	decf	MACMemCopyAsync@len+1,f,c
 12208  0028BA  2821               	incf	MACMemCopyAsync@len,w,c
 12209  0028BC  E1F7               	bnz	l9832
 12210  0028BE  2822               	incf	MACMemCopyAsync@len+1,w,c
 12211  0028C0  E1F5               	bnz	l9832
 12212                           
 12213                           ;eth97j60.c: 886: if(!UpdateReadPointer)
 12214  0028C2  0100               	movlb	0	; () banked
 12215  0028C4  5165               	movf	MACMemCopyAsync@UpdateReadPointer& (0+255),w,b
 12216  0028C6  E104               	bnz	l9840
 12217                           
 12218                           ; BSR set to: 0
 12219                           ;eth97j60.c: 887: {
 12220                           ;eth97j60.c: 888: ERDPT = ReadSave.Val;
 12221  0028C8  C060  FF7A         	movff	MACMemCopyAsync@ReadSave,3962	;volatile
 12222  0028CC  C061  FF7B         	movff	MACMemCopyAsync@ReadSave+1,3963	;volatile
 12223  0028D0                     l9840:
 12224                           
 12225                           ; BSR set to: 0
 12226                           ;eth97j60.c: 889: }
 12227                           ;eth97j60.c: 890: if(!UpdateWritePointer)
 12228  0028D0  5164               	movf	MACMemCopyAsync@UpdateWritePointer& (0+255),w,b
 12229  0028D2  A4D8               	btfss	status,2,c
 12230  0028D4  0012               	return	
 12231                           
 12232                           ; BSR set to: 0
 12233                           ;eth97j60.c: 891: {
 12234                           ;eth97j60.c: 892: EWRPT = WriteSave.Val;
 12235  0028D6  C062  FEE2         	movff	MACMemCopyAsync@WriteSave,3810	;volatile
 12236  0028DA  C063  FEE3         	movff	MACMemCopyAsync@WriteSave+1,3811	;volatile
 12237  0028DE  0012               	return	
 12238  0028E0                     l9844:
 12239                           
 12240                           ; BSR set to: 0
 12241                           ;eth97j60.c: 895: else
 12242                           ;eth97j60.c: 896: {
 12243                           ;eth97j60.c: 897: if(UpdateWritePointer)
 12244  0028E0  5164               	movf	MACMemCopyAsync@UpdateWritePointer& (0+255),w,b
 12245  0028E2  E00A               	bz	l2079
 12246                           
 12247                           ; BSR set to: 0
 12248                           ;eth97j60.c: 898: {
 12249                           ;eth97j60.c: 899: WriteSave.Val = destAddr + len;
 12250  0028E4  5021               	movf	MACMemCopyAsync@len,w,c
 12251  0028E6  241D               	addwf	MACMemCopyAsync@destAddr,w,c
 12252  0028E8  6F62               	movwf	MACMemCopyAsync@WriteSave& (0+255),b
 12253  0028EA  5022               	movf	MACMemCopyAsync@len+1,w,c
 12254  0028EC  201E               	addwfc	MACMemCopyAsync@destAddr+1,w,c
 12255  0028EE  6F63               	movwf	(MACMemCopyAsync@WriteSave+1)& (0+255),b
 12256                           
 12257                           ; BSR set to: 0
 12258                           ;eth97j60.c: 900: EWRPT = WriteSave.Val;
 12259  0028F0  C062  FEE2         	movff	MACMemCopyAsync@WriteSave,3810	;volatile
 12260  0028F4  C063  FEE3         	movff	MACMemCopyAsync@WriteSave+1,3811	;volatile
 12261  0028F8                     l2079:
 12262                           
 12263                           ; BSR set to: 0
 12264                           ;eth97j60.c: 901: }
 12265                           ;eth97j60.c: 902: len += sourceAddr - 1;
 12266  0028F8  6823               	setf	??_MACMemCopyAsync& (0+255),c
 12267  0028FA  6824               	setf	(??_MACMemCopyAsync+1)& (0+255),c
 12268  0028FC  C01F  F025         	movff	MACMemCopyAsync@sourceAddr,??_MACMemCopyAsync+2
 12269  002900  C020  F026         	movff	MACMemCopyAsync@sourceAddr+1,??_MACMemCopyAsync+3
 12270  002904  5023               	movf	??_MACMemCopyAsync,w,c
 12271  002906  2625               	addwf	??_MACMemCopyAsync+2,f,c
 12272  002908  5024               	movf	??_MACMemCopyAsync+1,w,c
 12273  00290A  2226               	addwfc	??_MACMemCopyAsync+3,f,c
 12274  00290C  5025               	movf	??_MACMemCopyAsync+2,w,c
 12275  00290E  2621               	addwf	MACMemCopyAsync@len,f,c
 12276  002910  5026               	movf	??_MACMemCopyAsync+3,w,c
 12277  002912  2222               	addwfc	MACMemCopyAsync@len+1,f,c
 12278  002914                     l2080:
 12279                           
 12280                           ; BSR set to: 0
 12281  002914  BAD2               	btfsc	4050,5,c	;volatile
 12282  002916  D7FE               	goto	l2080
 12283                           
 12284                           ; BSR set to: 0
 12285                           ;eth97j60.c: 904: EDMAST = sourceAddr;
 12286  002918  C01F  FEF0         	movff	MACMemCopyAsync@sourceAddr,3824	;volatile
 12287  00291C  C020  FEF1         	movff	MACMemCopyAsync@sourceAddr+1,3825	;volatile
 12288                           
 12289                           ;eth97j60.c: 905: EDMADST = destAddr;
 12290  002920  C01D  FEF4         	movff	MACMemCopyAsync@destAddr,3828	;volatile
 12291  002924  C01E  FEF5         	movff	MACMemCopyAsync@destAddr+1,3829	;volatile
 12292                           
 12293                           ; BSR set to: 0
 12294                           ;eth97j60.c: 906: if((sourceAddr <= ((((8*1024ul) - (1ul+1518ul+7ul) - 0u - 0ul - 0ul)-2
      +                          ul) | 0x0001ul)) && (len > ((((8*1024ul) - (1ul+1518ul+7ul) - 0u - 0ul - 0ul)-2ul) | 0x0
      +                          001ul)))
 12295  002928  0E0A               	movlw	10
 12296  00292A  5C1F               	subwf	MACMemCopyAsync@sourceAddr,w,c
 12297  00292C  0E1A               	movlw	26
 12298  00292E  5820               	subwfb	MACMemCopyAsync@sourceAddr+1,w,c
 12299  002930  E209               	bc	l9856
 12300                           
 12301                           ; BSR set to: 0
 12302  002932  0E0A               	movlw	10
 12303  002934  5C21               	subwf	MACMemCopyAsync@len,w,c
 12304  002936  0E1A               	movlw	26
 12305  002938  5822               	subwfb	MACMemCopyAsync@len+1,w,c
 12306  00293A  E304               	bnc	l9856
 12307                           
 12308                           ; BSR set to: 0
 12309                           ;eth97j60.c: 907: len -= (((((8*1024ul) - (1ul+1518ul+7ul) - 0u - 0ul - 0ul)-2ul) | 0x00
      +                          01ul)-(0ul)+1ul);
 12310  00293C  0E0A               	movlw	10
 12311  00293E  5E21               	subwf	MACMemCopyAsync@len,f,c
 12312  002940  0E1A               	movlw	26
 12313  002942  5A22               	subwfb	MACMemCopyAsync@len+1,f,c
 12314  002944                     l9856:
 12315                           
 12316                           ; BSR set to: 0
 12317                           ;eth97j60.c: 908: EDMAND = len;
 12318  002944  C021  FEF2         	movff	MACMemCopyAsync@len,3826	;volatile
 12319  002948  C022  FEF3         	movff	MACMemCopyAsync@len+1,3827	;volatile
 12320                           
 12321                           ; BSR set to: 0
 12322                           ;eth97j60.c: 909: ECON1bits.CSUMEN = 0;
 12323  00294C  98D2               	bcf	4050,4,c	;volatile
 12324                           
 12325                           ; BSR set to: 0
 12326                           ;eth97j60.c: 910: ECON1bits.DMAST = 1;
 12327  00294E  8AD2               	bsf	4050,5,c	;volatile
 12328  002950                     l2084:
 12329                           
 12330                           ; BSR set to: 0
 12331  002950  BAD2               	btfsc	4050,5,c	;volatile
 12332  002952  D7FE               	goto	l2084
 12333                           
 12334                           ; BSR set to: 0
 12335                           ;eth97j60.c: 913: if(UpdateReadPointer)
 12336  002954  5165               	movf	MACMemCopyAsync@UpdateReadPointer& (0+255),w,b
 12337  002956  B4D8               	btfsc	status,2,c
 12338  002958  0012               	return	
 12339                           
 12340                           ; BSR set to: 0
 12341                           ;eth97j60.c: 914: {
 12342                           ;eth97j60.c: 915: len++;
 12343  00295A  4A21               	infsnz	MACMemCopyAsync@len,f,c
 12344  00295C  2A22               	incf	MACMemCopyAsync@len+1,f,c
 12345                           
 12346                           ; BSR set to: 0
 12347                           ;eth97j60.c: 916: if((sourceAddr <= ((((8*1024ul) - (1ul+1518ul+7ul) - 0u - 0ul - 0ul)-2
      +                          ul) | 0x0001ul)) && (len > ((((8*1024ul) - (1ul+1518ul+7ul) - 0u - 0ul - 0ul)-2ul) | 0x0
      +                          001ul)))
 12348  00295E  0E0A               	movlw	10
 12349  002960  5C1F               	subwf	MACMemCopyAsync@sourceAddr,w,c
 12350  002962  0E1A               	movlw	26
 12351  002964  5820               	subwfb	MACMemCopyAsync@sourceAddr+1,w,c
 12352  002966  E209               	bc	l9872
 12353                           
 12354                           ; BSR set to: 0
 12355  002968  0E0A               	movlw	10
 12356  00296A  5C21               	subwf	MACMemCopyAsync@len,w,c
 12357  00296C  0E1A               	movlw	26
 12358  00296E  5822               	subwfb	MACMemCopyAsync@len+1,w,c
 12359  002970  E304               	bnc	l9872
 12360                           
 12361                           ; BSR set to: 0
 12362                           ;eth97j60.c: 917: len -= (((((8*1024ul) - (1ul+1518ul+7ul) - 0u - 0ul - 0ul)-2ul) | 0x00
      +                          01ul)-(0ul)+1ul);
 12363  002972  0E0A               	movlw	10
 12364  002974  5E21               	subwf	MACMemCopyAsync@len,f,c
 12365  002976  0E1A               	movlw	26
 12366  002978  5A22               	subwfb	MACMemCopyAsync@len+1,f,c
 12367  00297A                     l9872:
 12368                           
 12369                           ; BSR set to: 0
 12370                           ;eth97j60.c: 918: ERDPT = len;
 12371  00297A  C021  FF7A         	movff	MACMemCopyAsync@len,3962	;volatile
 12372  00297E  C022  FF7B         	movff	MACMemCopyAsync@len+1,3963	;volatile
 12373                           
 12374                           ; BSR set to: 0
 12375  002982  0012               	return		;funcret
 12376  002984                     __end_of_MACMemCopyAsync:
 12377                           	opt stack 0
 12378                           tblptru	equ	0xFF8
 12379                           tblptrh	equ	0xFF7
 12380                           tblptrl	equ	0xFF6
 12381                           tablat	equ	0xFF5
 12382                           prodh	equ	0xFF4
 12383                           prodl	equ	0xFF3
 12384                           intcon	equ	0xFF2
 12385                           intcon2	equ	0xFF1
 12386                           postinc0	equ	0xFEE
 12387                           wreg	equ	0xFE8
 12388                           indf1	equ	0xFE7
 12389                           postinc1	equ	0xFE6
 12390                           postdec1	equ	0xFE5
 12391                           plusw1	equ	0xFE3
 12392                           fsr1h	equ	0xFE2
 12393                           fsr1l	equ	0xFE1
 12394                           indf2	equ	0xFDF
 12395                           postinc2	equ	0xFDE
 12396                           postdec2	equ	0xFDD
 12397                           plusw2	equ	0xFDB
 12398                           fsr2h	equ	0xFDA
 12399                           fsr2l	equ	0xFD9
 12400                           status	equ	0xFD8
 12401                           
 12402 ;; *************** function _MACIsMemCopyDone *****************
 12403 ;; Defined at:
 12404 ;;		line 961 in file "../framework/tcpip/src/eth97j60.c"
 12405 ;; Parameters:    Size  Location     Type
 12406 ;;		None
 12407 ;; Auto vars:     Size  Location     Type
 12408 ;;		None
 12409 ;; Return value:  Size  Location     Type
 12410 ;;                  1    wreg      unsigned char 
 12411 ;; Registers used:
 12412 ;;		wreg
 12413 ;; Tracked objects:
 12414 ;;		On entry : 0/0
 12415 ;;		On exit  : 0/0
 12416 ;;		Unchanged: 0/0
 12417 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12418 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12419 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12420 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12421 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12422 ;;Total ram usage:        0 bytes
 12423 ;; Hardware stack levels used:    1
 12424 ;; Hardware stack levels required when called:    6
 12425 ;; This function calls:
 12426 ;;		Nothing
 12427 ;; This function is called by:
 12428 ;;		_ICMPProcess
 12429 ;; This function uses a non-reentrant model
 12430 ;;
 12431                           
 12432                           	psect	text74
 12433  0054C6                     __ptext74:
 12434                           	opt stack 0
 12435  0054C6                     _MACIsMemCopyDone:
 12436                           	opt stack 22
 12437                           
 12438                           ;eth97j60.c: 963: return !ECON1bits.DMAST;
 12439                           
 12440                           ; BSR set to: 0
 12441                           ;incstack = 0
 12442  0054C6  AAD2               	btfss	4050,5,c	;volatile
 12443  0054C8  0C01               	retlw	1
 12444  0054CA  0C00               	retlw	0	;funcret
 12445  0054CC                     __end_of_MACIsMemCopyDone:
 12446                           	opt stack 0
 12447                           tblptru	equ	0xFF8
 12448                           tblptrh	equ	0xFF7
 12449                           tblptrl	equ	0xFF6
 12450                           tablat	equ	0xFF5
 12451                           prodh	equ	0xFF4
 12452                           prodl	equ	0xFF3
 12453                           intcon	equ	0xFF2
 12454                           intcon2	equ	0xFF1
 12455                           postinc0	equ	0xFEE
 12456                           wreg	equ	0xFE8
 12457                           indf1	equ	0xFE7
 12458                           postinc1	equ	0xFE6
 12459                           postdec1	equ	0xFE5
 12460                           plusw1	equ	0xFE3
 12461                           fsr1h	equ	0xFE2
 12462                           fsr1l	equ	0xFE1
 12463                           indf2	equ	0xFDF
 12464                           postinc2	equ	0xFDE
 12465                           postdec2	equ	0xFDD
 12466                           plusw2	equ	0xFDB
 12467                           fsr2h	equ	0xFDA
 12468                           fsr2l	equ	0xFD9
 12469                           status	equ	0xFD8
 12470                           
 12471 ;; *************** function _MACCalcRxChecksum *****************
 12472 ;; Defined at:
 12473 ;;		line 664 in file "../framework/tcpip/src/eth97j60.c"
 12474 ;; Parameters:    Size  Location     Type
 12475 ;;  offset          2   29[BANK0 ] unsigned int 
 12476 ;;  len             2   31[BANK0 ] unsigned int 
 12477 ;; Auto vars:     Size  Location     Type
 12478 ;;  temp            2   35[BANK0 ] unsigned int 
 12479 ;;  RDSave          2   33[BANK0 ] unsigned int 
 12480 ;; Return value:  Size  Location     Type
 12481 ;;                  2   29[BANK0 ] unsigned int 
 12482 ;; Registers used:
 12483 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 12484 ;; Tracked objects:
 12485 ;;		On entry : F/0
 12486 ;;		On exit  : F/0
 12487 ;;		Unchanged: 0/0
 12488 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12489 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12490 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12491 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12492 ;;      Totals:         2       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12493 ;;Total ram usage:       10 bytes
 12494 ;; Hardware stack levels used:    1
 12495 ;; Hardware stack levels required when called:    8
 12496 ;; This function calls:
 12497 ;;		_CalcIPBufferChecksum
 12498 ;; This function is called by:
 12499 ;;		_ICMPProcess
 12500 ;;		_IPGetHeader
 12501 ;; This function uses a non-reentrant model
 12502 ;;
 12503                           
 12504                           	psect	text75
 12505  0042B2                     __ptext75:
 12506                           	opt stack 0
 12507  0042B2                     _MACCalcRxChecksum:
 12508                           	opt stack 20
 12509                           
 12510                           ; BSR set to: 0
 12511                           ;eth97j60.c: 666: uint16_t temp;
 12512                           ;eth97j60.c: 667: uint16_t RDSave;
 12513                           ;eth97j60.c: 670: temp = CurrentPacketLocation.Val + sizeof(ENC_PREAMBLE) + offset;
 12514                           
 12515                           ;incstack = 0
 12516  0042B2  517D               	movf	MACCalcRxChecksum@offset& (0+255),w,b
 12517  0042B4  0101               	movlb	1	; () banked
 12518  0042B6  2566               	addwf	_CurrentPacketLocation& (0+255),w,b
 12519  0042B8  6E27               	movwf	??_MACCalcRxChecksum& (0+255),c
 12520  0042BA  0100               	movlb	0	; () banked
 12521  0042BC  517E               	movf	(MACCalcRxChecksum@offset+1)& (0+255),w,b
 12522  0042BE  0101               	movlb	1	; () banked
 12523  0042C0  2167               	addwfc	(_CurrentPacketLocation+1)& (0+255),w,b
 12524  0042C2  6E28               	movwf	(??_MACCalcRxChecksum+1)& (0+255),c
 12525  0042C4  0E14               	movlw	20
 12526  0042C6  2427               	addwf	??_MACCalcRxChecksum,w,c
 12527  0042C8  0100               	movlb	0	; () banked
 12528  0042CA  6F83               	movwf	MACCalcRxChecksum@temp& (0+255),b
 12529  0042CC  0E00               	movlw	0
 12530  0042CE  2028               	addwfc	??_MACCalcRxChecksum+1,w,c
 12531  0042D0  6F84               	movwf	(MACCalcRxChecksum@temp+1)& (0+255),b
 12532                           
 12533                           ;eth97j60.c: 671: if(temp > ((((8*1024ul) - (1ul+1518ul+7ul) - 0u - 0ul - 0ul)-2ul) | 0x
      +                          0001ul))
 12534  0042D2  0E0A               	movlw	10
 12535  0042D4  5D83               	subwf	MACCalcRxChecksum@temp& (0+255),w,b
 12536  0042D6  0E1A               	movlw	26
 12537  0042D8  5984               	subwfb	(MACCalcRxChecksum@temp+1)& (0+255),w,b
 12538  0042DA  E304               	bnc	l9802
 12539                           
 12540                           ; BSR set to: 0
 12541                           ;eth97j60.c: 672: {
 12542                           ;eth97j60.c: 673: temp -= (((((8*1024ul) - (1ul+1518ul+7ul) - 0u - 0ul - 0ul)-2ul) | 0x0
      +                          001ul)-(0ul)+1ul);
 12543  0042DC  0E0A               	movlw	10
 12544  0042DE  5F83               	subwf	MACCalcRxChecksum@temp& (0+255),f,b
 12545  0042E0  0E1A               	movlw	26
 12546  0042E2  5B84               	subwfb	(MACCalcRxChecksum@temp+1)& (0+255),f,b
 12547  0042E4                     l9802:
 12548                           
 12549                           ; BSR set to: 0
 12550                           ;eth97j60.c: 674: }
 12551                           ;eth97j60.c: 676: RDSave = ERDPT;
 12552  0042E4  CF7A F081          	movff	3962,MACCalcRxChecksum@RDSave	;volatile
 12553  0042E8  CF7B F082          	movff	3963,MACCalcRxChecksum@RDSave+1	;volatile
 12554                           
 12555                           ; BSR set to: 0
 12556                           ;eth97j60.c: 677: ERDPT = temp;
 12557  0042EC  C083  FF7A         	movff	MACCalcRxChecksum@temp,3962	;volatile
 12558  0042F0  C084  FF7B         	movff	MACCalcRxChecksum@temp+1,3963	;volatile
 12559                           
 12560                           ; BSR set to: 0
 12561                           ;eth97j60.c: 678: temp = CalcIPBufferChecksum(len);
 12562  0042F4  C07F  F023         	movff	MACCalcRxChecksum@len,CalcIPBufferChecksum@len
 12563  0042F8  C080  F024         	movff	MACCalcRxChecksum@len+1,CalcIPBufferChecksum@len+1
 12564  0042FC  ECA9  F018         	call	_CalcIPBufferChecksum	;wreg free
 12565  004300  C023  F083         	movff	?_CalcIPBufferChecksum,MACCalcRxChecksum@temp
 12566  004304  C024  F084         	movff	?_CalcIPBufferChecksum+1,MACCalcRxChecksum@temp+1
 12567                           
 12568                           ; BSR set to: 0
 12569                           ;eth97j60.c: 679: ERDPT = RDSave;
 12570  004308  C081  FF7A         	movff	MACCalcRxChecksum@RDSave,3962	;volatile
 12571  00430C  C082  FF7B         	movff	MACCalcRxChecksum@RDSave+1,3963	;volatile
 12572                           
 12573                           ; BSR set to: 0
 12574                           ;eth97j60.c: 681: return temp;
 12575  004310  C083  F07D         	movff	MACCalcRxChecksum@temp,?_MACCalcRxChecksum
 12576  004314  C084  F07E         	movff	MACCalcRxChecksum@temp+1,?_MACCalcRxChecksum+1
 12577                           
 12578                           ; BSR set to: 0
 12579  004318  0012               	return		;funcret
 12580  00431A                     __end_of_MACCalcRxChecksum:
 12581                           	opt stack 0
 12582                           tblptru	equ	0xFF8
 12583                           tblptrh	equ	0xFF7
 12584                           tblptrl	equ	0xFF6
 12585                           tablat	equ	0xFF5
 12586                           prodh	equ	0xFF4
 12587                           prodl	equ	0xFF3
 12588                           intcon	equ	0xFF2
 12589                           intcon2	equ	0xFF1
 12590                           postinc0	equ	0xFEE
 12591                           wreg	equ	0xFE8
 12592                           indf1	equ	0xFE7
 12593                           postinc1	equ	0xFE6
 12594                           postdec1	equ	0xFE5
 12595                           plusw1	equ	0xFE3
 12596                           fsr1h	equ	0xFE2
 12597                           fsr1l	equ	0xFE1
 12598                           indf2	equ	0xFDF
 12599                           postinc2	equ	0xFDE
 12600                           postdec2	equ	0xFDD
 12601                           plusw2	equ	0xFDB
 12602                           fsr2h	equ	0xFDA
 12603                           fsr2l	equ	0xFD9
 12604                           status	equ	0xFD8
 12605                           
 12606 ;; *************** function _DHCPTask *****************
 12607 ;; Defined at:
 12608 ;;		line 428 in file "../framework/tcpip/src/dhcp_client.c"
 12609 ;; Parameters:    Size  Location     Type
 12610 ;;		None
 12611 ;; Auto vars:     Size  Location     Type
 12612 ;;  i               1   78[BANK0 ] unsigned char 
 12613 ;; Return value:  Size  Location     Type
 12614 ;;		None               void
 12615 ;; Registers used:
 12616 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 12617 ;; Tracked objects:
 12618 ;;		On entry : F/0
 12619 ;;		On exit  : F/0
 12620 ;;		Unchanged: 0/0
 12621 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12622 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12623 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12624 ;;      Temps:          0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12625 ;;      Totals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12626 ;;Total ram usage:       13 bytes
 12627 ;; Hardware stack levels used:    1
 12628 ;; Hardware stack levels required when called:   11
 12629 ;; This function calls:
 12630 ;;		_LFSRRand
 12631 ;;		_MACIsLinked
 12632 ;;		_TickGet
 12633 ;;		_UDPClose
 12634 ;;		_UDPIsGetReady
 12635 ;;		_UDPIsPutReady
 12636 ;;		_UDPOpenEx
 12637 ;;		__DHCPReceive
 12638 ;;		__DHCPSend
 12639 ;;		___lwmod
 12640 ;;		_memset
 12641 ;; This function is called by:
 12642 ;;		_StackTask
 12643 ;; This function uses a non-reentrant model
 12644 ;;
 12645                           
 12646                           	psect	text76
 12647  00100C                     __ptext76:
 12648                           	opt stack 0
 12649  00100C                     _DHCPTask:
 12650                           	opt stack 18
 12651                           
 12652                           ; BSR set to: 0
 12653                           ;dhcp_client.c: 430: uint8_t i;
 12654                           ;dhcp_client.c: 432: for (i = 0; i < (1u); i++) {
 12655                           
 12656                           ; BSR set to: 0
 12657                           ;incstack = 0
 12658  00100C  6BAE               	clrf	DHCPTask@i& (0+255),b
 12659  00100E  D308               	goto	l10112
 12660  001010                     l9968:
 12661                           
 12662                           ; BSR set to: 0
 12663                           ;dhcp_client.c: 445: DHCPClient.hDHCPSocket = UDPOpenEx(0, 0u, (68u), (67u));
 12664  001010  6B60               	clrf	UDPOpenEx@remoteHost& (0+255),b
 12665  001012  6B61               	clrf	(UDPOpenEx@remoteHost+1)& (0+255),b
 12666  001014  6B62               	clrf	(UDPOpenEx@remoteHost+2)& (0+255),b
 12667  001016  6B63               	clrf	(UDPOpenEx@remoteHost+3)& (0+255),b
 12668  001018  6B64               	clrf	UDPOpenEx@remoteHostType& (0+255),b
 12669  00101A  6B66               	clrf	(UDPOpenEx@localPort+1)& (0+255),b
 12670  00101C  0E44               	movlw	68
 12671  00101E  6F65               	movwf	UDPOpenEx@localPort& (0+255),b
 12672  001020  6B68               	clrf	(UDPOpenEx@remotePort+1)& (0+255),b
 12673  001022  0E43               	movlw	67
 12674  001024  6F67               	movwf	UDPOpenEx@remotePort& (0+255),b
 12675  001026  EC88  F013         	call	_UDPOpenEx	;wreg free
 12676  00102A  6FD9               	movwf	_DHCPClient& (0+255),b
 12677                           
 12678                           ; BSR set to: 0
 12679                           ;dhcp_client.c: 446: if (DHCPClient.hDHCPSocket == (0xffu))
 12680  00102C  29D9               	incf	_DHCPClient& (0+255),w,b
 12681  00102E  E101 D31A          	bz	l10114
 12682                           
 12683                           ; BSR set to: 0
 12684                           ;dhcp_client.c: 449: DHCPClient.smState = SM_DHCP_SEND_DISCOVERY;
 12685  001032  0E02               	movlw	2
 12686  001034  6FDA               	movwf	(_DHCPClient+1)& (0+255),b
 12687  001036                     l1436:
 12688                           
 12689                           ; BSR set to: 0
 12690                           ;dhcp_client.c: 457: DHCPClient.dwLeaseTime = 60;
 12691  001036  0E3C               	movlw	60
 12692  001038  6FE4               	movwf	(_DHCPClient+11)& (0+255),b
 12693  00103A  6BE5               	clrf	(_DHCPClient+12)& (0+255),b
 12694  00103C  6BE6               	clrf	(_DHCPClient+13)& (0+255),b
 12695  00103E  6BE7               	clrf	(_DHCPClient+14)& (0+255),b
 12696                           
 12697                           ; BSR set to: 0
 12698                           ;dhcp_client.c: 458: DHCPClient.validValues.val = 0x00;
 12699  001040  6BF8               	clrf	(_DHCPClient+31)& (0+255),b
 12700                           
 12701                           ; BSR set to: 0
 12702                           ;dhcp_client.c: 459: DHCPClient.flags.bits.bIsBound = 0;
 12703  001042  91DB               	bcf	(_DHCPClient+2)& (0+255),0,b
 12704                           
 12705                           ; BSR set to: 0
 12706                           ;dhcp_client.c: 460: DHCPClient.flags.bits.bOfferReceived = 0;
 12707  001044  95DB               	bcf	(_DHCPClient+2)& (0+255),2,b
 12708                           
 12709                           ; BSR set to: 0
 12710                           ;dhcp_client.c: 466: if (!MACIsLinked())
 12711  001046  ECFF  F029         	call	_MACIsLinked	;wreg free
 12712  00104A  0900               	iorlw	0
 12713  00104C  E101 D30B          	bz	l10114
 12714                           
 12715                           ;dhcp_client.c: 470: if (UDPIsPutReady(DHCPClient.hDHCPSocket) < 300u)
 12716  001050  0100               	movlb	0	; () banked
 12717  001052  51D9               	movf	_DHCPClient& (0+255),w,b
 12718  001054  EC3D  F026         	call	_UDPIsPutReady
 12719  001058  0E2C               	movlw	44
 12720  00105A  5C25               	subwf	?_UDPIsPutReady,w,c
 12721  00105C  0E01               	movlw	1
 12722  00105E  5826               	subwfb	?_UDPIsPutReady+1,w,c
 12723  001060  E201 D301          	bnc	l10114
 12724                           
 12725                           ;dhcp_client.c: 477: DHCPClient.flags.bits.bUseUnicastMode ^= 1;
 12726  001064  0100               	movlb	0	; () banked
 12727  001066  79DB               	btg	(_DHCPClient+2)& (0+255),4,b
 12728                           
 12729                           ; BSR set to: 0
 12730                           ;dhcp_client.c: 481: memset((void *) &UDPSocketInfo[DHCPClient.hDHCPSocket].remote.remot
      +                          eNode, 0xFF, sizeof (UDPSocketInfo[0].remote.remoteNode));
 12731  001068  51D9               	movf	_DHCPClient& (0+255),w,b
 12732  00106A  0D17               	mullw	23
 12733  00106C  0E00               	movlw	low _UDPSocketInfo
 12734  00106E  24F3               	addwf	prodl,w,c
 12735  001070  6E1C               	movwf	memset@p1,c
 12736  001072  0E02               	movlw	high _UDPSocketInfo
 12737  001074  20F4               	addwfc	prodh,w,c
 12738  001076  6E1D               	movwf	memset@p1+1,c
 12739  001078  6A1F               	clrf	memset@c+1,c
 12740  00107A  681E               	setf	memset@c,c
 12741  00107C  6A21               	clrf	memset@n+1,c
 12742  00107E  0E0A               	movlw	10
 12743  001080  6E20               	movwf	memset@n,c
 12744  001082  EC10  F028         	call	_memset	;wreg free
 12745                           
 12746                           ; BSR set to: 0
 12747                           ;dhcp_client.c: 484: _DHCPSend((1u), 0);
 12748  001086  6B99               	clrf	__DHCPSend@bRenewing& (0+255),b
 12749  001088  0E01               	movlw	1
 12750  00108A  EC68  F00F         	call	__DHCPSend
 12751                           
 12752                           ; BSR set to: 1
 12753                           ;dhcp_client.c: 487: DHCPClient.dwTimer = TickGet() + ((DHCPClient.dwBaseTime * (((((400
      +                          00000ul) / 4)+128ull)/256ull))) + (LFSRRand() % (((((40000000ul) / 4)+128ull)/256ull))))
      +                          ;
 12754  00108E  EC2C  F01F         	call	_LFSRRand	;wreg free
 12755  001092  C01C  F01F         	movff	?_LFSRRand,___lwmod@dividend
 12756  001096  C01D  F020         	movff	?_LFSRRand+1,___lwmod@dividend+1
 12757  00109A  0E98               	movlw	152
 12758  00109C  6E22               	movwf	___lwmod@divisor+1,c
 12759  00109E  0E97               	movlw	151
 12760  0010A0  6E21               	movwf	___lwmod@divisor,c
 12761  0010A2  EC7E  F026         	call	___lwmod	;wreg free
 12762  0010A6  C0E0  F0A2         	movff	_DHCPClient+7,??_DHCPTask
 12763  0010AA  C0E1  F0A3         	movff	_DHCPClient+8,??_DHCPTask+1
 12764  0010AE  C0E2  F0A4         	movff	_DHCPClient+9,??_DHCPTask+2
 12765  0010B2  C0E3  F0A5         	movff	_DHCPClient+10,??_DHCPTask+3
 12766  0010B6  0E97               	movlw	151
 12767  0010B8  0100               	movlb	0	; () banked
 12768  0010BA  03A2               	mulwf	??_DHCPTask& (0+255),b
 12769  0010BC  CFF3 F0A6          	movff	prodl,??_DHCPTask+4
 12770  0010C0  CFF4 F0A7          	movff	prodh,??_DHCPTask+5
 12771  0010C4  6BA8               	clrf	(??_DHCPTask+6)& (0+255),b
 12772  0010C6  6BA9               	clrf	(??_DHCPTask+7)& (0+255),b
 12773  0010C8  03A3               	mulwf	(??_DHCPTask+1)& (0+255),b
 12774  0010CA  50F3               	movf	prodl,w,c
 12775  0010CC  27A7               	addwf	(??_DHCPTask+5)& (0+255),f,b
 12776  0010CE  50F4               	movf	prodh,w,c
 12777  0010D0  23A8               	addwfc	(??_DHCPTask+6)& (0+255),f,b
 12778  0010D2  0E00               	movlw	0
 12779  0010D4  23A9               	addwfc	(??_DHCPTask+7)& (0+255),f,b
 12780  0010D6  0E98               	movlw	152
 12781  0010D8  03A2               	mulwf	??_DHCPTask& (0+255),b
 12782  0010DA  50F3               	movf	prodl,w,c
 12783  0010DC  27A7               	addwf	(??_DHCPTask+5)& (0+255),f,b
 12784  0010DE  50F4               	movf	prodh,w,c
 12785  0010E0  23A8               	addwfc	(??_DHCPTask+6)& (0+255),f,b
 12786  0010E2  0E00               	movlw	0
 12787  0010E4  23A9               	addwfc	(??_DHCPTask+7)& (0+255),f,b
 12788  0010E6  0E97               	movlw	151
 12789  0010E8  03A4               	mulwf	(??_DHCPTask+2)& (0+255),b
 12790  0010EA  50F3               	movf	prodl,w,c
 12791  0010EC  27A8               	addwf	(??_DHCPTask+6)& (0+255),f,b
 12792  0010EE  50F4               	movf	prodh,w,c
 12793  0010F0  23A9               	addwfc	(??_DHCPTask+7)& (0+255),f,b
 12794  0010F2  0E98               	movlw	152
 12795  0010F4  03A3               	mulwf	(??_DHCPTask+1)& (0+255),b
 12796  0010F6  50F3               	movf	prodl,w,c
 12797  0010F8  27A8               	addwf	(??_DHCPTask+6)& (0+255),f,b
 12798  0010FA  50F4               	movf	prodh,w,c
 12799  0010FC  23A9               	addwfc	(??_DHCPTask+7)& (0+255),f,b
 12800  0010FE  0E00               	movlw	0
 12801  001100  03A2               	mulwf	??_DHCPTask& (0+255),b
 12802  001102  50F3               	movf	prodl,w,c
 12803  001104  27A8               	addwf	(??_DHCPTask+6)& (0+255),f,b
 12804  001106  50F4               	movf	prodh,w,c
 12805  001108  23A9               	addwfc	(??_DHCPTask+7)& (0+255),f,b
 12806  00110A  0E97               	movlw	151
 12807  00110C  03A5               	mulwf	(??_DHCPTask+3)& (0+255),b
 12808  00110E  50F3               	movf	prodl,w,c
 12809  001110  27A9               	addwf	(??_DHCPTask+7)& (0+255),f,b
 12810  001112  0E98               	movlw	152
 12811  001114  03A4               	mulwf	(??_DHCPTask+2)& (0+255),b
 12812  001116  50F3               	movf	prodl,w,c
 12813  001118  27A9               	addwf	(??_DHCPTask+7)& (0+255),f,b
 12814  00111A  0E00               	movlw	0
 12815  00111C  03A3               	mulwf	(??_DHCPTask+1)& (0+255),b
 12816  00111E  50F3               	movf	prodl,w,c
 12817  001120  27A9               	addwf	(??_DHCPTask+7)& (0+255),f,b
 12818  001122  0E00               	movlw	0
 12819  001124  03A2               	mulwf	??_DHCPTask& (0+255),b
 12820  001126  50F3               	movf	prodl,w,c
 12821  001128  27A9               	addwf	(??_DHCPTask+7)& (0+255),f,b
 12822  00112A  501F               	movf	?___lwmod,w,c
 12823  00112C  25A6               	addwf	(??_DHCPTask+4)& (0+255),w,b
 12824  00112E  6FAA               	movwf	(??_DHCPTask+8)& (0+255),b
 12825  001130  5020               	movf	?___lwmod+1,w,c
 12826  001132  21A7               	addwfc	(??_DHCPTask+5)& (0+255),w,b
 12827  001134  6FAB               	movwf	(??_DHCPTask+9)& (0+255),b
 12828  001136  0E00               	movlw	0
 12829  001138  21A8               	addwfc	(??_DHCPTask+6)& (0+255),w,b
 12830  00113A  6FAC               	movwf	(??_DHCPTask+10)& (0+255),b
 12831  00113C  0E00               	movlw	0
 12832  00113E  21A9               	addwfc	(??_DHCPTask+7)& (0+255),w,b
 12833  001140  6FAD               	movwf	(??_DHCPTask+11)& (0+255),b
 12834  001142  EC9C  F028         	call	_TickGet	;wreg free
 12835  001146  501C               	movf	?_TickGet,w,c
 12836  001148  0100               	movlb	0	; () banked
 12837  00114A  25AA               	addwf	(??_DHCPTask+8)& (0+255),w,b
 12838  00114C  6FDC               	movwf	(_DHCPClient+3)& (0+255),b
 12839  00114E  501D               	movf	?_TickGet+1,w,c
 12840  001150  21AB               	addwfc	(??_DHCPTask+9)& (0+255),w,b
 12841  001152  6FDD               	movwf	(_DHCPClient+4)& (0+255),b
 12842  001154  501E               	movf	?_TickGet+2,w,c
 12843  001156  21AC               	addwfc	(??_DHCPTask+10)& (0+255),w,b
 12844  001158  6FDE               	movwf	(_DHCPClient+5)& (0+255),b
 12845  00115A  501F               	movf	?_TickGet+3,w,c
 12846  00115C  21AD               	addwfc	(??_DHCPTask+11)& (0+255),w,b
 12847  00115E  6FDF               	movwf	(_DHCPClient+6)& (0+255),b
 12848                           
 12849                           ; BSR set to: 0
 12850                           ;dhcp_client.c: 488: DHCPClient.smState = SM_DHCP_GET_OFFER;
 12851  001160  0E03               	movlw	3
 12852  001162  D0C0               	goto	L6
 12853  001164                     l10000:
 12854                           
 12855                           ; BSR set to: 0
 12856                           ;dhcp_client.c: 493: if (UDPIsGetReady(DHCPClient.hDHCPSocket) < 250u) {
 12857  001164  51D9               	movf	_DHCPClient& (0+255),w,b
 12858  001166  EC8C  F027         	call	_UDPIsGetReady
 12859  00116A  5027               	movf	?_UDPIsGetReady+1,w,c
 12860  00116C  E12A               	bnz	l1440
 12861  00116E  0EFA               	movlw	250
 12862  001170  5C26               	subwf	?_UDPIsGetReady,w,c
 12863  001172  E227               	bc	l1440
 12864                           
 12865                           ;dhcp_client.c: 495: if ((long) (TickGet() - DHCPClient.dwTimer) > 0) {
 12866  001174  EC9C  F028         	call	_TickGet	;wreg free
 12867  001178  0100               	movlb	0	; () banked
 12868  00117A  51DC               	movf	(_DHCPClient+3)& (0+255),w,b
 12869  00117C  5C1C               	subwf	?_TickGet,w,c
 12870  00117E  6FA2               	movwf	??_DHCPTask& (0+255),b
 12871  001180  51DD               	movf	(_DHCPClient+4)& (0+255),w,b
 12872  001182  581D               	subwfb	?_TickGet+1,w,c
 12873  001184  6FA3               	movwf	(??_DHCPTask+1)& (0+255),b
 12874  001186  51DE               	movf	(_DHCPClient+5)& (0+255),w,b
 12875  001188  581E               	subwfb	?_TickGet+2,w,c
 12876  00118A  6FA4               	movwf	(??_DHCPTask+2)& (0+255),b
 12877  00118C  51DF               	movf	(_DHCPClient+6)& (0+255),w,b
 12878  00118E  581F               	subwfb	?_TickGet+3,w,c
 12879  001190  6FA5               	movwf	(??_DHCPTask+3)& (0+255),b
 12880  001192  BFA5               	btfsc	(??_DHCPTask+3)& (0+255),7,b
 12881  001194  D268               	goto	l10114
 12882  001196  51A5               	movf	(??_DHCPTask+3)& (0+255),w,b
 12883  001198  11A4               	iorwf	(??_DHCPTask+2)& (0+255),w,b
 12884  00119A  11A3               	iorwf	(??_DHCPTask+1)& (0+255),w,b
 12885  00119C  E103               	bnz	u8870
 12886  00119E  05A2               	decf	??_DHCPTask& (0+255),w,b
 12887  0011A0  E201 D261          	bnc	l10114
 12888  0011A4                     u8870:
 12889                           
 12890                           ; BSR set to: 0
 12891                           ;dhcp_client.c: 497: if (DHCPClient.dwBaseTime < 64ul) {
 12892  0011A4  51E3               	movf	(_DHCPClient+10)& (0+255),w,b
 12893  0011A6  11E2               	iorwf	(_DHCPClient+9)& (0+255),w,b
 12894  0011A8  11E1               	iorwf	(_DHCPClient+8)& (0+255),w,b
 12895  0011AA  E108               	bnz	l10008
 12896  0011AC  0E40               	movlw	64
 12897  0011AE  5DE0               	subwf	(_DHCPClient+7)& (0+255),w,b
 12898  0011B0  E205               	bc	l10008
 12899                           
 12900                           ; BSR set to: 0
 12901                           ;dhcp_client.c: 498: DHCPClient.dwBaseTime <<= 1;
 12902  0011B2  90D8               	bcf	status,0,c
 12903  0011B4  37E0               	rlcf	(_DHCPClient+7)& (0+255),f,b
 12904  0011B6  37E1               	rlcf	(_DHCPClient+8)& (0+255),f,b
 12905  0011B8  37E2               	rlcf	(_DHCPClient+9)& (0+255),f,b
 12906  0011BA  37E3               	rlcf	(_DHCPClient+10)& (0+255),f,b
 12907  0011BC                     l10008:
 12908                           
 12909                           ;dhcp_client.c: 499: }
 12910                           ;dhcp_client.c: 500: DHCPClient.smState = SM_DHCP_SEND_DISCOVERY;
 12911  0011BC  0E02               	movlw	2
 12912  0011BE  0100               	movlb	0	; () banked
 12913  0011C0  D091               	goto	L6
 12914  0011C2                     l1440:
 12915                           
 12916                           ;dhcp_client.c: 503: }
 12917                           ;dhcp_client.c: 507: DHCPClient.flags.bits.bDHCPServerDetected = 1;
 12918  0011C2  0100               	movlb	0	; () banked
 12919  0011C4  87DB               	bsf	(_DHCPClient+2)& (0+255),3,b
 12920                           
 12921                           ; BSR set to: 0
 12922                           ;dhcp_client.c: 510: if (_DHCPReceive() != (2u))
 12923  0011C6  EC2D  F00E         	call	__DHCPReceive	;wreg free
 12924  0011CA  0A02               	xorlw	2
 12925  0011CC  E001 D24B          	bnz	l10114
 12926                           
 12927                           ;dhcp_client.c: 515: DHCPClient.smState = SM_DHCP_SEND_REQUEST;
 12928  0011D0  0E04               	movlw	4
 12929  0011D2  0100               	movlb	0	; () banked
 12930  0011D4  6FDA               	movwf	(_DHCPClient+1)& (0+255),b
 12931  0011D6                     l10016:
 12932                           
 12933                           ; BSR set to: 0
 12934                           ;dhcp_client.c: 519: if (UDPIsPutReady(DHCPClient.hDHCPSocket) < 258u)
 12935  0011D6  51D9               	movf	_DHCPClient& (0+255),w,b
 12936  0011D8  EC3D  F026         	call	_UDPIsPutReady
 12937  0011DC  0E02               	movlw	2
 12938  0011DE  5C25               	subwf	?_UDPIsPutReady,w,c
 12939  0011E0  0E01               	movlw	1
 12940  0011E2  5826               	subwfb	?_UDPIsPutReady+1,w,c
 12941  0011E4  E201 D23F          	bnc	l10114
 12942                           
 12943                           ;dhcp_client.c: 527: memset((void *) &UDPSocketInfo[DHCPClient.hDHCPSocket].remote.remot
      +                          eNode, 0xFF, sizeof (UDPSocketInfo[0].remote.remoteNode));
 12944  0011E8  0100               	movlb	0	; () banked
 12945  0011EA  51D9               	movf	_DHCPClient& (0+255),w,b
 12946  0011EC  0D17               	mullw	23
 12947  0011EE  0E00               	movlw	low _UDPSocketInfo
 12948  0011F0  24F3               	addwf	prodl,w,c
 12949  0011F2  6E1C               	movwf	memset@p1,c
 12950  0011F4  0E02               	movlw	high _UDPSocketInfo
 12951  0011F6  20F4               	addwfc	prodh,w,c
 12952  0011F8  6E1D               	movwf	memset@p1+1,c
 12953  0011FA  6A1F               	clrf	memset@c+1,c
 12954  0011FC  681E               	setf	memset@c,c
 12955  0011FE  6A21               	clrf	memset@n+1,c
 12956  001200  0E0A               	movlw	10
 12957  001202  6E20               	movwf	memset@n,c
 12958  001204  EC10  F028         	call	_memset	;wreg free
 12959                           
 12960                           ;dhcp_client.c: 530: _DHCPSend((3u), 0);
 12961  001208  6B99               	clrf	__DHCPSend@bRenewing& (0+255),b
 12962  00120A  0E03               	movlw	3
 12963  00120C  EC68  F00F         	call	__DHCPSend
 12964                           
 12965                           ;dhcp_client.c: 535: DHCPClient.dwTimer = TickGet() + ((DHCPClient.dwBaseTime * (((((400
      +                          00000ul) / 4)+128ull)/256ull))) + (LFSRRand() % (((((40000000ul) / 4)+128ull)/256ull))))
      +                          ;
 12966  001210  EC2C  F01F         	call	_LFSRRand	;wreg free
 12967  001214  C01C  F01F         	movff	?_LFSRRand,___lwmod@dividend
 12968  001218  C01D  F020         	movff	?_LFSRRand+1,___lwmod@dividend+1
 12969  00121C  0E98               	movlw	152
 12970  00121E  6E22               	movwf	___lwmod@divisor+1,c
 12971  001220  0E97               	movlw	151
 12972  001222  6E21               	movwf	___lwmod@divisor,c
 12973  001224  EC7E  F026         	call	___lwmod	;wreg free
 12974  001228  C0E0  F0A2         	movff	_DHCPClient+7,??_DHCPTask
 12975  00122C  C0E1  F0A3         	movff	_DHCPClient+8,??_DHCPTask+1
 12976  001230  C0E2  F0A4         	movff	_DHCPClient+9,??_DHCPTask+2
 12977  001234  C0E3  F0A5         	movff	_DHCPClient+10,??_DHCPTask+3
 12978  001238  0E97               	movlw	151
 12979  00123A  0100               	movlb	0	; () banked
 12980  00123C  03A2               	mulwf	??_DHCPTask& (0+255),b
 12981  00123E  CFF3 F0A6          	movff	prodl,??_DHCPTask+4
 12982  001242  CFF4 F0A7          	movff	prodh,??_DHCPTask+5
 12983  001246  6BA8               	clrf	(??_DHCPTask+6)& (0+255),b
 12984  001248  6BA9               	clrf	(??_DHCPTask+7)& (0+255),b
 12985  00124A  03A3               	mulwf	(??_DHCPTask+1)& (0+255),b
 12986  00124C  50F3               	movf	prodl,w,c
 12987  00124E  27A7               	addwf	(??_DHCPTask+5)& (0+255),f,b
 12988  001250  50F4               	movf	prodh,w,c
 12989  001252  23A8               	addwfc	(??_DHCPTask+6)& (0+255),f,b
 12990  001254  0E00               	movlw	0
 12991  001256  23A9               	addwfc	(??_DHCPTask+7)& (0+255),f,b
 12992  001258  0E98               	movlw	152
 12993  00125A  03A2               	mulwf	??_DHCPTask& (0+255),b
 12994  00125C  50F3               	movf	prodl,w,c
 12995  00125E  27A7               	addwf	(??_DHCPTask+5)& (0+255),f,b
 12996  001260  50F4               	movf	prodh,w,c
 12997  001262  23A8               	addwfc	(??_DHCPTask+6)& (0+255),f,b
 12998  001264  0E00               	movlw	0
 12999  001266  23A9               	addwfc	(??_DHCPTask+7)& (0+255),f,b
 13000  001268  0E97               	movlw	151
 13001  00126A  03A4               	mulwf	(??_DHCPTask+2)& (0+255),b
 13002  00126C  50F3               	movf	prodl,w,c
 13003  00126E  27A8               	addwf	(??_DHCPTask+6)& (0+255),f,b
 13004  001270  50F4               	movf	prodh,w,c
 13005  001272  23A9               	addwfc	(??_DHCPTask+7)& (0+255),f,b
 13006  001274  0E98               	movlw	152
 13007  001276  03A3               	mulwf	(??_DHCPTask+1)& (0+255),b
 13008  001278  50F3               	movf	prodl,w,c
 13009  00127A  27A8               	addwf	(??_DHCPTask+6)& (0+255),f,b
 13010  00127C  50F4               	movf	prodh,w,c
 13011  00127E  23A9               	addwfc	(??_DHCPTask+7)& (0+255),f,b
 13012  001280  0E00               	movlw	0
 13013  001282  03A2               	mulwf	??_DHCPTask& (0+255),b
 13014  001284  50F3               	movf	prodl,w,c
 13015  001286  27A8               	addwf	(??_DHCPTask+6)& (0+255),f,b
 13016  001288  50F4               	movf	prodh,w,c
 13017  00128A  23A9               	addwfc	(??_DHCPTask+7)& (0+255),f,b
 13018  00128C  0E97               	movlw	151
 13019  00128E  03A5               	mulwf	(??_DHCPTask+3)& (0+255),b
 13020  001290  50F3               	movf	prodl,w,c
 13021  001292  27A9               	addwf	(??_DHCPTask+7)& (0+255),f,b
 13022  001294  0E98               	movlw	152
 13023  001296  03A4               	mulwf	(??_DHCPTask+2)& (0+255),b
 13024  001298  50F3               	movf	prodl,w,c
 13025  00129A  27A9               	addwf	(??_DHCPTask+7)& (0+255),f,b
 13026  00129C  0E00               	movlw	0
 13027  00129E  03A3               	mulwf	(??_DHCPTask+1)& (0+255),b
 13028  0012A0  50F3               	movf	prodl,w,c
 13029  0012A2  27A9               	addwf	(??_DHCPTask+7)& (0+255),f,b
 13030  0012A4  0E00               	movlw	0
 13031  0012A6  03A2               	mulwf	??_DHCPTask& (0+255),b
 13032  0012A8  50F3               	movf	prodl,w,c
 13033  0012AA  27A9               	addwf	(??_DHCPTask+7)& (0+255),f,b
 13034  0012AC  501F               	movf	?___lwmod,w,c
 13035  0012AE  25A6               	addwf	(??_DHCPTask+4)& (0+255),w,b
 13036  0012B0  6FAA               	movwf	(??_DHCPTask+8)& (0+255),b
 13037  0012B2  5020               	movf	?___lwmod+1,w,c
 13038  0012B4  21A7               	addwfc	(??_DHCPTask+5)& (0+255),w,b
 13039  0012B6  6FAB               	movwf	(??_DHCPTask+9)& (0+255),b
 13040  0012B8  0E00               	movlw	0
 13041  0012BA  21A8               	addwfc	(??_DHCPTask+6)& (0+255),w,b
 13042  0012BC  6FAC               	movwf	(??_DHCPTask+10)& (0+255),b
 13043  0012BE  0E00               	movlw	0
 13044  0012C0  21A9               	addwfc	(??_DHCPTask+7)& (0+255),w,b
 13045  0012C2  6FAD               	movwf	(??_DHCPTask+11)& (0+255),b
 13046  0012C4  EC9C  F028         	call	_TickGet	;wreg free
 13047  0012C8  501C               	movf	?_TickGet,w,c
 13048  0012CA  0100               	movlb	0	; () banked
 13049  0012CC  25AA               	addwf	(??_DHCPTask+8)& (0+255),w,b
 13050  0012CE  6FDC               	movwf	(_DHCPClient+3)& (0+255),b
 13051  0012D0  501D               	movf	?_TickGet+1,w,c
 13052  0012D2  21AB               	addwfc	(??_DHCPTask+9)& (0+255),w,b
 13053  0012D4  6FDD               	movwf	(_DHCPClient+4)& (0+255),b
 13054  0012D6  501E               	movf	?_TickGet+2,w,c
 13055  0012D8  21AC               	addwfc	(??_DHCPTask+10)& (0+255),w,b
 13056  0012DA  6FDE               	movwf	(_DHCPClient+5)& (0+255),b
 13057  0012DC  501F               	movf	?_TickGet+3,w,c
 13058  0012DE  21AD               	addwfc	(??_DHCPTask+11)& (0+255),w,b
 13059  0012E0  6FDF               	movwf	(_DHCPClient+6)& (0+255),b
 13060                           
 13061                           ; BSR set to: 0
 13062                           ;dhcp_client.c: 536: ;
 13063                           ;dhcp_client.c: 537: DHCPClient.smState = SM_DHCP_GET_REQUEST_ACK;
 13064  0012E2  0E05               	movlw	5
 13065  0012E4                     L6:
 13066  0012E4  6FDA               	movwf	(_DHCPClient+1)& (0+255),b
 13067                           
 13068                           ;dhcp_client.c: 538: break;
 13069  0012E6  D1BF               	goto	l10114
 13070  0012E8                     l10024:
 13071                           
 13072                           ; BSR set to: 0
 13073                           ;dhcp_client.c: 542: if (UDPIsGetReady(DHCPClient.hDHCPSocket) < 250u) {
 13074  0012E8  51D9               	movf	_DHCPClient& (0+255),w,b
 13075  0012EA  EC8C  F027         	call	_UDPIsGetReady
 13076  0012EE  5027               	movf	?_UDPIsGetReady+1,w,c
 13077  0012F0  E155               	bnz	l10058
 13078  0012F2  0EFA               	movlw	250
 13079  0012F4  5C26               	subwf	?_UDPIsGetReady,w,c
 13080  0012F6  E252               	bc	l10058
 13081                           
 13082                           ;dhcp_client.c: 544: if ((long) (TickGet() - DHCPClient.dwTimer) > 0) {
 13083  0012F8  EC9C  F028         	call	_TickGet	;wreg free
 13084  0012FC  0100               	movlb	0	; () banked
 13085  0012FE  51DC               	movf	(_DHCPClient+3)& (0+255),w,b
 13086  001300  5C1C               	subwf	?_TickGet,w,c
 13087  001302  6FA2               	movwf	??_DHCPTask& (0+255),b
 13088  001304  51DD               	movf	(_DHCPClient+4)& (0+255),w,b
 13089  001306  581D               	subwfb	?_TickGet+1,w,c
 13090  001308  6FA3               	movwf	(??_DHCPTask+1)& (0+255),b
 13091  00130A  51DE               	movf	(_DHCPClient+5)& (0+255),w,b
 13092  00130C  581E               	subwfb	?_TickGet+2,w,c
 13093  00130E  6FA4               	movwf	(??_DHCPTask+2)& (0+255),b
 13094  001310  51DF               	movf	(_DHCPClient+6)& (0+255),w,b
 13095  001312  581F               	subwfb	?_TickGet+3,w,c
 13096  001314  6FA5               	movwf	(??_DHCPTask+3)& (0+255),b
 13097  001316  BFA5               	btfsc	(??_DHCPTask+3)& (0+255),7,b
 13098  001318  D1A6               	goto	l10114
 13099  00131A  51A5               	movf	(??_DHCPTask+3)& (0+255),w,b
 13100  00131C  11A4               	iorwf	(??_DHCPTask+2)& (0+255),w,b
 13101  00131E  11A3               	iorwf	(??_DHCPTask+1)& (0+255),w,b
 13102  001320  E103               	bnz	u8920
 13103  001322  05A2               	decf	??_DHCPTask& (0+255),w,b
 13104  001324  E201 D19F          	bnc	l10114
 13105  001328                     u8920:
 13106                           
 13107                           ; BSR set to: 0
 13108                           ;dhcp_client.c: 545: if (DHCPClient.dwBaseTime < 64) {
 13109  001328  51E3               	movf	(_DHCPClient+10)& (0+255),w,b
 13110  00132A  11E2               	iorwf	(_DHCPClient+9)& (0+255),w,b
 13111  00132C  11E1               	iorwf	(_DHCPClient+8)& (0+255),w,b
 13112  00132E  E101               	bnz	u8931
 13113  001330  D73D               	goto	L7
 13114  001332                     u8931:
 13115  001332  D744               	goto	l10008
 13116  001334                     l10034:
 13117                           
 13118                           ;dhcp_client.c: 556: UDPClose(DHCPClient.hDHCPSocket);
 13119  001334  0100               	movlb	0	; () banked
 13120  001336  51D9               	movf	_DHCPClient& (0+255),w,b
 13121  001338  ECAB  F025         	call	_UDPClose
 13122                           
 13123                           ;dhcp_client.c: 557: DHCPClient.hDHCPSocket = (0xffu);
 13124  00133C  0100               	movlb	0	; () banked
 13125  00133E  69D9               	setf	_DHCPClient& (0+255),b
 13126                           
 13127                           ; BSR set to: 0
 13128                           ;dhcp_client.c: 558: DHCPClient.dwTimer = TickGet();
 13129  001340  EC9C  F028         	call	_TickGet	;wreg free
 13130  001344  C01C  F0DC         	movff	?_TickGet,_DHCPClient+3
 13131  001348  C01D  F0DD         	movff	?_TickGet+1,_DHCPClient+4
 13132  00134C  C01E  F0DE         	movff	?_TickGet+2,_DHCPClient+5
 13133  001350  C01F  F0DF         	movff	?_TickGet+3,_DHCPClient+6
 13134                           
 13135                           ;dhcp_client.c: 559: DHCPClient.smState = SM_DHCP_BOUND;
 13136  001354  0E06               	movlw	6
 13137  001356  0100               	movlb	0	; () banked
 13138  001358  6FDA               	movwf	(_DHCPClient+1)& (0+255),b
 13139                           
 13140                           ; BSR set to: 0
 13141                           ;dhcp_client.c: 560: DHCPClient.flags.bits.bEvent = 1;
 13142  00135A  83DB               	bsf	(_DHCPClient+2)& (0+255),1,b
 13143                           
 13144                           ; BSR set to: 0
 13145                           ;dhcp_client.c: 561: DHCPClient.flags.bits.bIsBound = 1;
 13146  00135C  81DB               	bsf	(_DHCPClient+2)& (0+255),0,b
 13147                           
 13148                           ; BSR set to: 0
 13149                           ;dhcp_client.c: 565: if (DHCPClient.validValues.bits.IPAddress) {
 13150  00135E  A1F8               	btfss	(_DHCPClient+31)& (0+255),0,b
 13151  001360  D008               	goto	l1452
 13152                           
 13153                           ; BSR set to: 0
 13154                           ;dhcp_client.c: 566: AppConfig.MyIPAddr = DHCPClient.tempIPAddress;
 13155  001362  C0EC  F179         	movff	_DHCPClient+19,_AppConfig
 13156  001366  C0ED  F17A         	movff	_DHCPClient+20,_AppConfig+1
 13157  00136A  C0EE  F17B         	movff	_DHCPClient+21,_AppConfig+2
 13158  00136E  C0EF  F17C         	movff	_DHCPClient+22,_AppConfig+3
 13159  001372                     l1452:
 13160                           
 13161                           ; BSR set to: 0
 13162                           ;dhcp_client.c: 575: }
 13163                           ;dhcp_client.c: 576: if (DHCPClient.validValues.bits.Mask)
 13164  001372  A5F8               	btfss	(_DHCPClient+31)& (0+255),2,b
 13165  001374  D008               	goto	l1453
 13166                           
 13167                           ; BSR set to: 0
 13168                           ;dhcp_client.c: 577: AppConfig.MyMask = DHCPClient.tempMask;
 13169  001376  C0F4  F17D         	movff	_DHCPClient+27,_AppConfig+4
 13170  00137A  C0F5  F17E         	movff	_DHCPClient+28,_AppConfig+5
 13171  00137E  C0F6  F17F         	movff	_DHCPClient+29,_AppConfig+6
 13172  001382  C0F7  F180         	movff	_DHCPClient+30,_AppConfig+7
 13173  001386                     l1453:
 13174                           
 13175                           ; BSR set to: 0
 13176                           ;dhcp_client.c: 578: if (DHCPClient.validValues.bits.Gateway)
 13177  001386  A3F8               	btfss	(_DHCPClient+31)& (0+255),1,b
 13178  001388  D16E               	goto	l10114
 13179                           
 13180                           ; BSR set to: 0
 13181                           ;dhcp_client.c: 579: AppConfig.MyGateway = DHCPClient.tempGateway;
 13182  00138A  C0F0  F181         	movff	_DHCPClient+23,_AppConfig+8
 13183  00138E  C0F1  F182         	movff	_DHCPClient+24,_AppConfig+9
 13184  001392  C0F2  F183         	movff	_DHCPClient+25,_AppConfig+10
 13185  001396  C0F3  F184         	movff	_DHCPClient+26,_AppConfig+11
 13186  00139A  D165               	goto	l10114
 13187  00139C                     l10058:
 13188  00139C  EC2D  F00E         	call	__DHCPReceive	;wreg free
 13189                           
 13190                           ; Switch size 1, requested type "speed"
 13191                           ; Number of cases is 2, Range of values is 5 to 6
 13192                           ; switch strategies available:
 13193                           ; Name         Instructions Cycles
 13194                           ; simple_byte            7     4 (average)
 13195                           ;	Chosen strategy is simple_byte
 13196  0013A0  0A05               	xorlw	5	; case 5
 13197  0013A2  E0C8               	bz	l10034
 13198  0013A4  D139               	goto	L8
 13199  0013A6                     l10060:
 13200                           
 13201                           ; BSR set to: 0
 13202                           ;dhcp_client.c: 600: if (TickGet() - DHCPClient.dwTimer < (((((40000000ul) / 4)+128ull)/
      +                          256ull)))
 13203  0013A6  EC9C  F028         	call	_TickGet	;wreg free
 13204  0013AA  0100               	movlb	0	; () banked
 13205  0013AC  51DC               	movf	(_DHCPClient+3)& (0+255),w,b
 13206  0013AE  5C1C               	subwf	?_TickGet,w,c
 13207  0013B0  6FA2               	movwf	??_DHCPTask& (0+255),b
 13208  0013B2  51DD               	movf	(_DHCPClient+4)& (0+255),w,b
 13209  0013B4  581D               	subwfb	?_TickGet+1,w,c
 13210  0013B6  6FA3               	movwf	(??_DHCPTask+1)& (0+255),b
 13211  0013B8  51DE               	movf	(_DHCPClient+5)& (0+255),w,b
 13212  0013BA  581E               	subwfb	?_TickGet+2,w,c
 13213  0013BC  6FA4               	movwf	(??_DHCPTask+2)& (0+255),b
 13214  0013BE  51DF               	movf	(_DHCPClient+6)& (0+255),w,b
 13215  0013C0  581F               	subwfb	?_TickGet+3,w,c
 13216  0013C2  6FA5               	movwf	(??_DHCPTask+3)& (0+255),b
 13217  0013C4  51A5               	movf	(??_DHCPTask+3)& (0+255),w,b
 13218  0013C6  11A4               	iorwf	(??_DHCPTask+2)& (0+255),w,b
 13219  0013C8  E106               	bnz	l10064
 13220  0013CA  0E97               	movlw	151
 13221  0013CC  5DA2               	subwf	??_DHCPTask& (0+255),w,b
 13222  0013CE  0E98               	movlw	152
 13223  0013D0  59A3               	subwfb	(??_DHCPTask+1)& (0+255),w,b
 13224  0013D2  E201 D148          	bnc	l10114
 13225  0013D6                     l10064:
 13226                           
 13227                           ; BSR set to: 0
 13228                           ;dhcp_client.c: 605: if (DHCPClient.dwLeaseTime > (DHCPClient.dwBaseTime * 3)) {
 13229  0013D6  C0E0  F0A2         	movff	_DHCPClient+7,??_DHCPTask
 13230  0013DA  C0E1  F0A3         	movff	_DHCPClient+8,??_DHCPTask+1
 13231  0013DE  C0E2  F0A4         	movff	_DHCPClient+9,??_DHCPTask+2
 13232  0013E2  C0E3  F0A5         	movff	_DHCPClient+10,??_DHCPTask+3
 13233  0013E6  0E03               	movlw	3
 13234  0013E8  03A2               	mulwf	??_DHCPTask& (0+255),b
 13235  0013EA  CFF3 F0A6          	movff	prodl,??_DHCPTask+4
 13236  0013EE  CFF4 F0A7          	movff	prodh,??_DHCPTask+5
 13237  0013F2  6BA8               	clrf	(??_DHCPTask+6)& (0+255),b
 13238  0013F4  6BA9               	clrf	(??_DHCPTask+7)& (0+255),b
 13239  0013F6  03A3               	mulwf	(??_DHCPTask+1)& (0+255),b
 13240  0013F8  50F3               	movf	prodl,w,c
 13241  0013FA  27A7               	addwf	(??_DHCPTask+5)& (0+255),f,b
 13242  0013FC  50F4               	movf	prodh,w,c
 13243  0013FE  23A8               	addwfc	(??_DHCPTask+6)& (0+255),f,b
 13244  001400  0E00               	movlw	0
 13245  001402  23A9               	addwfc	(??_DHCPTask+7)& (0+255),f,b
 13246  001404  03A2               	mulwf	??_DHCPTask& (0+255),b
 13247  001406  50F3               	movf	prodl,w,c
 13248  001408  27A7               	addwf	(??_DHCPTask+5)& (0+255),f,b
 13249  00140A  50F4               	movf	prodh,w,c
 13250  00140C  23A8               	addwfc	(??_DHCPTask+6)& (0+255),f,b
 13251  00140E  0E00               	movlw	0
 13252  001410  23A9               	addwfc	(??_DHCPTask+7)& (0+255),f,b
 13253  001412  0E03               	movlw	3
 13254  001414  03A4               	mulwf	(??_DHCPTask+2)& (0+255),b
 13255  001416  50F3               	movf	prodl,w,c
 13256  001418  27A8               	addwf	(??_DHCPTask+6)& (0+255),f,b
 13257  00141A  50F4               	movf	prodh,w,c
 13258  00141C  23A9               	addwfc	(??_DHCPTask+7)& (0+255),f,b
 13259  00141E  0E00               	movlw	0
 13260  001420  03A3               	mulwf	(??_DHCPTask+1)& (0+255),b
 13261  001422  50F3               	movf	prodl,w,c
 13262  001424  27A8               	addwf	(??_DHCPTask+6)& (0+255),f,b
 13263  001426  50F4               	movf	prodh,w,c
 13264  001428  23A9               	addwfc	(??_DHCPTask+7)& (0+255),f,b
 13265  00142A  0E00               	movlw	0
 13266  00142C  03A2               	mulwf	??_DHCPTask& (0+255),b
 13267  00142E  50F3               	movf	prodl,w,c
 13268  001430  27A8               	addwf	(??_DHCPTask+6)& (0+255),f,b
 13269  001432  50F4               	movf	prodh,w,c
 13270  001434  23A9               	addwfc	(??_DHCPTask+7)& (0+255),f,b
 13271  001436  0E03               	movlw	3
 13272  001438  03A5               	mulwf	(??_DHCPTask+3)& (0+255),b
 13273  00143A  50F3               	movf	prodl,w,c
 13274  00143C  27A9               	addwf	(??_DHCPTask+7)& (0+255),f,b
 13275  00143E  0E00               	movlw	0
 13276  001440  03A4               	mulwf	(??_DHCPTask+2)& (0+255),b
 13277  001442  50F3               	movf	prodl,w,c
 13278  001444  27A9               	addwf	(??_DHCPTask+7)& (0+255),f,b
 13279  001446  0E00               	movlw	0
 13280  001448  03A3               	mulwf	(??_DHCPTask+1)& (0+255),b
 13281  00144A  50F3               	movf	prodl,w,c
 13282  00144C  27A9               	addwf	(??_DHCPTask+7)& (0+255),f,b
 13283  00144E  0E00               	movlw	0
 13284  001450  03A2               	mulwf	??_DHCPTask& (0+255),b
 13285  001452  50F3               	movf	prodl,w,c
 13286  001454  27A9               	addwf	(??_DHCPTask+7)& (0+255),f,b
 13287  001456  51E4               	movf	(_DHCPClient+11)& (0+255),w,b
 13288  001458  5DA6               	subwf	(??_DHCPTask+4)& (0+255),w,b
 13289  00145A  51E5               	movf	(_DHCPClient+12)& (0+255),w,b
 13290  00145C  59A7               	subwfb	(??_DHCPTask+5)& (0+255),w,b
 13291  00145E  51E6               	movf	(_DHCPClient+13)& (0+255),w,b
 13292  001460  59A8               	subwfb	(??_DHCPTask+6)& (0+255),w,b
 13293  001462  51E7               	movf	(_DHCPClient+14)& (0+255),w,b
 13294  001464  59A9               	subwfb	(??_DHCPTask+7)& (0+255),w,b
 13295  001466  E20C               	bc	l10068
 13296                           
 13297                           ; BSR set to: 0
 13298                           ;dhcp_client.c: 606: DHCPClient.dwTimer += (((((40000000ul) / 4)+128ull)/256ull));
 13299  001468  0E97               	movlw	151
 13300  00146A  27DC               	addwf	(_DHCPClient+3)& (0+255),f,b
 13301  00146C  0E98               	movlw	152
 13302  00146E  23DD               	addwfc	(_DHCPClient+4)& (0+255),f,b
 13303  001470  0E00               	movlw	0
 13304  001472  23DE               	addwfc	(_DHCPClient+5)& (0+255),f,b
 13305  001474  23DF               	addwfc	(_DHCPClient+6)& (0+255),f,b
 13306                           
 13307                           ;dhcp_client.c: 607: DHCPClient.dwLeaseTime--;
 13308  001476  07E4               	decf	(_DHCPClient+11)& (0+255),f,b
 13309  001478  5BE5               	subwfb	(_DHCPClient+12)& (0+255),f,b
 13310  00147A  5BE6               	subwfb	(_DHCPClient+13)& (0+255),f,b
 13311  00147C  5BE7               	subwfb	(_DHCPClient+14)& (0+255),f,b
 13312                           
 13313                           ;dhcp_client.c: 608: break;
 13314  00147E  D0F3               	goto	l10114
 13315  001480                     l10068:
 13316                           
 13317                           ; BSR set to: 0
 13318                           ;dhcp_client.c: 609: }
 13319                           ;dhcp_client.c: 614: DHCPClient.hDHCPSocket = UDPOpenEx(0, 0u, (68u), (67u));
 13320  001480  6B60               	clrf	UDPOpenEx@remoteHost& (0+255),b
 13321  001482  6B61               	clrf	(UDPOpenEx@remoteHost+1)& (0+255),b
 13322  001484  6B62               	clrf	(UDPOpenEx@remoteHost+2)& (0+255),b
 13323  001486  6B63               	clrf	(UDPOpenEx@remoteHost+3)& (0+255),b
 13324  001488  6B64               	clrf	UDPOpenEx@remoteHostType& (0+255),b
 13325  00148A  6B66               	clrf	(UDPOpenEx@localPort+1)& (0+255),b
 13326  00148C  0E44               	movlw	68
 13327  00148E  6F65               	movwf	UDPOpenEx@localPort& (0+255),b
 13328  001490  6B68               	clrf	(UDPOpenEx@remotePort+1)& (0+255),b
 13329  001492  0E43               	movlw	67
 13330  001494  6F67               	movwf	UDPOpenEx@remotePort& (0+255),b
 13331  001496  EC88  F013         	call	_UDPOpenEx	;wreg free
 13332  00149A  6FD9               	movwf	_DHCPClient& (0+255),b
 13333                           
 13334                           ; BSR set to: 0
 13335                           ;dhcp_client.c: 615: if (DHCPClient.hDHCPSocket == (0xffu))
 13336  00149C  29D9               	incf	_DHCPClient& (0+255),w,b
 13337  00149E  E101 D0E2          	bz	l10114
 13338                           
 13339                           ; BSR set to: 0
 13340                           ;dhcp_client.c: 620: DHCPClient.smState = SM_DHCP_SEND_RENEW;
 13341  0014A2  0E07               	movlw	7
 13342  0014A4  6FDA               	movwf	(_DHCPClient+1)& (0+255),b
 13343  0014A6                     l10076:
 13344                           
 13345                           ; BSR set to: 0
 13346                           ;dhcp_client.c: 625: case SM_DHCP_SEND_RENEW2:
 13347                           ;dhcp_client.c: 626: case SM_DHCP_SEND_RENEW3:
 13348                           ;dhcp_client.c: 627: if (UDPIsPutReady(DHCPClient.hDHCPSocket) < 258u)
 13349  0014A6  51D9               	movf	_DHCPClient& (0+255),w,b
 13350  0014A8  EC3D  F026         	call	_UDPIsPutReady
 13351  0014AC  0E02               	movlw	2
 13352  0014AE  5C25               	subwf	?_UDPIsPutReady,w,c
 13353  0014B0  0E01               	movlw	1
 13354  0014B2  5826               	subwfb	?_UDPIsPutReady+1,w,c
 13355  0014B4  E201 D0D7          	bnc	l10114
 13356                           
 13357                           ;dhcp_client.c: 635: _DHCPSend((3u), 1);
 13358  0014B8  0E01               	movlw	1
 13359  0014BA  0100               	movlb	0	; () banked
 13360  0014BC  6F99               	movwf	__DHCPSend@bRenewing& (0+255),b
 13361  0014BE  0E03               	movlw	3
 13362  0014C0  EC68  F00F         	call	__DHCPSend
 13363                           
 13364                           ; BSR set to: 1
 13365                           ;dhcp_client.c: 636: DHCPClient.flags.bits.bOfferReceived = 0;
 13366  0014C4  0100               	movlb	0	; () banked
 13367  0014C6  95DB               	bcf	(_DHCPClient+2)& (0+255),2,b
 13368                           
 13369                           ;dhcp_client.c: 639: DHCPClient.dwTimer = TickGet() + ((DHCPClient.dwBaseTime * (((((400
      +                          00000ul) / 4)+128ull)/256ull))) + (LFSRRand() % (((((40000000ul) / 4)+128ull)/256ull))))
      +                          ;
 13370  0014C8  EC2C  F01F         	call	_LFSRRand	;wreg free
 13371  0014CC  C01C  F01F         	movff	?_LFSRRand,___lwmod@dividend
 13372  0014D0  C01D  F020         	movff	?_LFSRRand+1,___lwmod@dividend+1
 13373  0014D4  0E98               	movlw	152
 13374  0014D6  6E22               	movwf	___lwmod@divisor+1,c
 13375  0014D8  0E97               	movlw	151
 13376  0014DA  6E21               	movwf	___lwmod@divisor,c
 13377  0014DC  EC7E  F026         	call	___lwmod	;wreg free
 13378  0014E0  C0E0  F0A2         	movff	_DHCPClient+7,??_DHCPTask
 13379  0014E4  C0E1  F0A3         	movff	_DHCPClient+8,??_DHCPTask+1
 13380  0014E8  C0E2  F0A4         	movff	_DHCPClient+9,??_DHCPTask+2
 13381  0014EC  C0E3  F0A5         	movff	_DHCPClient+10,??_DHCPTask+3
 13382  0014F0  0E97               	movlw	151
 13383  0014F2  0100               	movlb	0	; () banked
 13384  0014F4  03A2               	mulwf	??_DHCPTask& (0+255),b
 13385  0014F6  CFF3 F0A6          	movff	prodl,??_DHCPTask+4
 13386  0014FA  CFF4 F0A7          	movff	prodh,??_DHCPTask+5
 13387  0014FE  6BA8               	clrf	(??_DHCPTask+6)& (0+255),b
 13388  001500  6BA9               	clrf	(??_DHCPTask+7)& (0+255),b
 13389  001502  03A3               	mulwf	(??_DHCPTask+1)& (0+255),b
 13390  001504  50F3               	movf	prodl,w,c
 13391  001506  27A7               	addwf	(??_DHCPTask+5)& (0+255),f,b
 13392  001508  50F4               	movf	prodh,w,c
 13393  00150A  23A8               	addwfc	(??_DHCPTask+6)& (0+255),f,b
 13394  00150C  0E00               	movlw	0
 13395  00150E  23A9               	addwfc	(??_DHCPTask+7)& (0+255),f,b
 13396  001510  0E98               	movlw	152
 13397  001512  03A2               	mulwf	??_DHCPTask& (0+255),b
 13398  001514  50F3               	movf	prodl,w,c
 13399  001516  27A7               	addwf	(??_DHCPTask+5)& (0+255),f,b
 13400  001518  50F4               	movf	prodh,w,c
 13401  00151A  23A8               	addwfc	(??_DHCPTask+6)& (0+255),f,b
 13402  00151C  0E00               	movlw	0
 13403  00151E  23A9               	addwfc	(??_DHCPTask+7)& (0+255),f,b
 13404  001520  0E97               	movlw	151
 13405  001522  03A4               	mulwf	(??_DHCPTask+2)& (0+255),b
 13406  001524  50F3               	movf	prodl,w,c
 13407  001526  27A8               	addwf	(??_DHCPTask+6)& (0+255),f,b
 13408  001528  50F4               	movf	prodh,w,c
 13409  00152A  23A9               	addwfc	(??_DHCPTask+7)& (0+255),f,b
 13410  00152C  0E98               	movlw	152
 13411  00152E  03A3               	mulwf	(??_DHCPTask+1)& (0+255),b
 13412  001530  50F3               	movf	prodl,w,c
 13413  001532  27A8               	addwf	(??_DHCPTask+6)& (0+255),f,b
 13414  001534  50F4               	movf	prodh,w,c
 13415  001536  23A9               	addwfc	(??_DHCPTask+7)& (0+255),f,b
 13416  001538  0E00               	movlw	0
 13417  00153A  03A2               	mulwf	??_DHCPTask& (0+255),b
 13418  00153C  50F3               	movf	prodl,w,c
 13419  00153E  27A8               	addwf	(??_DHCPTask+6)& (0+255),f,b
 13420  001540  50F4               	movf	prodh,w,c
 13421  001542  23A9               	addwfc	(??_DHCPTask+7)& (0+255),f,b
 13422  001544  0E97               	movlw	151
 13423  001546  03A5               	mulwf	(??_DHCPTask+3)& (0+255),b
 13424  001548  50F3               	movf	prodl,w,c
 13425  00154A  27A9               	addwf	(??_DHCPTask+7)& (0+255),f,b
 13426  00154C  0E98               	movlw	152
 13427  00154E  03A4               	mulwf	(??_DHCPTask+2)& (0+255),b
 13428  001550  50F3               	movf	prodl,w,c
 13429  001552  27A9               	addwf	(??_DHCPTask+7)& (0+255),f,b
 13430  001554  0E00               	movlw	0
 13431  001556  03A3               	mulwf	(??_DHCPTask+1)& (0+255),b
 13432  001558  50F3               	movf	prodl,w,c
 13433  00155A  27A9               	addwf	(??_DHCPTask+7)& (0+255),f,b
 13434  00155C  0E00               	movlw	0
 13435  00155E  03A2               	mulwf	??_DHCPTask& (0+255),b
 13436  001560  50F3               	movf	prodl,w,c
 13437  001562  27A9               	addwf	(??_DHCPTask+7)& (0+255),f,b
 13438  001564  501F               	movf	?___lwmod,w,c
 13439  001566  25A6               	addwf	(??_DHCPTask+4)& (0+255),w,b
 13440  001568  6FAA               	movwf	(??_DHCPTask+8)& (0+255),b
 13441  00156A  5020               	movf	?___lwmod+1,w,c
 13442  00156C  21A7               	addwfc	(??_DHCPTask+5)& (0+255),w,b
 13443  00156E  6FAB               	movwf	(??_DHCPTask+9)& (0+255),b
 13444  001570  0E00               	movlw	0
 13445  001572  21A8               	addwfc	(??_DHCPTask+6)& (0+255),w,b
 13446  001574  6FAC               	movwf	(??_DHCPTask+10)& (0+255),b
 13447  001576  0E00               	movlw	0
 13448  001578  21A9               	addwfc	(??_DHCPTask+7)& (0+255),w,b
 13449  00157A  6FAD               	movwf	(??_DHCPTask+11)& (0+255),b
 13450  00157C  EC9C  F028         	call	_TickGet	;wreg free
 13451  001580  501C               	movf	?_TickGet,w,c
 13452  001582  0100               	movlb	0	; () banked
 13453  001584  25AA               	addwf	(??_DHCPTask+8)& (0+255),w,b
 13454  001586  6FDC               	movwf	(_DHCPClient+3)& (0+255),b
 13455  001588  501D               	movf	?_TickGet+1,w,c
 13456  00158A  21AB               	addwfc	(??_DHCPTask+9)& (0+255),w,b
 13457  00158C  6FDD               	movwf	(_DHCPClient+4)& (0+255),b
 13458  00158E  501E               	movf	?_TickGet+2,w,c
 13459  001590  21AC               	addwfc	(??_DHCPTask+10)& (0+255),w,b
 13460  001592  6FDE               	movwf	(_DHCPClient+5)& (0+255),b
 13461  001594  501F               	movf	?_TickGet+3,w,c
 13462  001596  21AD               	addwfc	(??_DHCPTask+11)& (0+255),w,b
 13463  001598  6FDF               	movwf	(_DHCPClient+6)& (0+255),b
 13464                           
 13465                           ; BSR set to: 0
 13466                           ;dhcp_client.c: 640: DHCPClient.smState++;
 13467  00159A  2BDA               	incf	(_DHCPClient+1)& (0+255),f,b
 13468                           
 13469                           ;dhcp_client.c: 641: break;
 13470  00159C  D064               	goto	l10114
 13471  00159E                     l10086:
 13472                           
 13473                           ; BSR set to: 0
 13474                           ;dhcp_client.c: 644: case SM_DHCP_GET_RENEW_ACK2:
 13475                           ;dhcp_client.c: 645: case SM_DHCP_GET_RENEW_ACK3:
 13476                           ;dhcp_client.c: 647: if (UDPIsGetReady(DHCPClient.hDHCPSocket) < 250u) {
 13477  00159E  51D9               	movf	_DHCPClient& (0+255),w,b
 13478  0015A0  EC8C  F027         	call	_UDPIsGetReady
 13479  0015A4  5027               	movf	?_UDPIsGetReady+1,w,c
 13480  0015A6  E134               	bnz	l10108
 13481  0015A8  0EFA               	movlw	250
 13482  0015AA  5C26               	subwf	?_UDPIsGetReady,w,c
 13483  0015AC  E231               	bc	l10108
 13484                           
 13485                           ;dhcp_client.c: 649: if ((long) (TickGet() - DHCPClient.dwTimer) > 0) {
 13486  0015AE  EC9C  F028         	call	_TickGet	;wreg free
 13487  0015B2  0100               	movlb	0	; () banked
 13488  0015B4  51DC               	movf	(_DHCPClient+3)& (0+255),w,b
 13489  0015B6  5C1C               	subwf	?_TickGet,w,c
 13490  0015B8  6FA2               	movwf	??_DHCPTask& (0+255),b
 13491  0015BA  51DD               	movf	(_DHCPClient+4)& (0+255),w,b
 13492  0015BC  581D               	subwfb	?_TickGet+1,w,c
 13493  0015BE  6FA3               	movwf	(??_DHCPTask+1)& (0+255),b
 13494  0015C0  51DE               	movf	(_DHCPClient+5)& (0+255),w,b
 13495  0015C2  581E               	subwfb	?_TickGet+2,w,c
 13496  0015C4  6FA4               	movwf	(??_DHCPTask+2)& (0+255),b
 13497  0015C6  51DF               	movf	(_DHCPClient+6)& (0+255),w,b
 13498  0015C8  581F               	subwfb	?_TickGet+3,w,c
 13499  0015CA  6FA5               	movwf	(??_DHCPTask+3)& (0+255),b
 13500  0015CC  BFA5               	btfsc	(??_DHCPTask+3)& (0+255),7,b
 13501  0015CE  D04B               	goto	l10114
 13502  0015D0  51A5               	movf	(??_DHCPTask+3)& (0+255),w,b
 13503  0015D2  11A4               	iorwf	(??_DHCPTask+2)& (0+255),w,b
 13504  0015D4  11A3               	iorwf	(??_DHCPTask+1)& (0+255),w,b
 13505  0015D6  E102               	bnz	u9020
 13506  0015D8  05A2               	decf	??_DHCPTask& (0+255),w,b
 13507  0015DA  E345               	bnc	l10114
 13508  0015DC                     u9020:
 13509                           
 13510                           ; BSR set to: 0
 13511                           ;dhcp_client.c: 650: if (++DHCPClient.smState > SM_DHCP_GET_RENEW_ACK3) {
 13512  0015DC  2BDA               	incf	(_DHCPClient+1)& (0+255),f,b
 13513  0015DE  0E0C               	movlw	12
 13514  0015E0  65DA               	cpfsgt	(_DHCPClient+1)& (0+255),b
 13515  0015E2  D041               	goto	l10114
 13516  0015E4  D5EB               	goto	l10008
 13517  0015E6                     l10094:
 13518                           
 13519                           ;dhcp_client.c: 661: UDPClose(DHCPClient.hDHCPSocket);
 13520  0015E6  0100               	movlb	0	; () banked
 13521  0015E8  51D9               	movf	_DHCPClient& (0+255),w,b
 13522  0015EA  ECAB  F025         	call	_UDPClose
 13523                           
 13524                           ;dhcp_client.c: 662: DHCPClient.hDHCPSocket = (0xffu);
 13525  0015EE  0100               	movlb	0	; () banked
 13526  0015F0  69D9               	setf	_DHCPClient& (0+255),b
 13527                           
 13528                           ; BSR set to: 0
 13529                           ;dhcp_client.c: 663: DHCPClient.dwTimer = TickGet();
 13530  0015F2  EC9C  F028         	call	_TickGet	;wreg free
 13531  0015F6  C01C  F0DC         	movff	?_TickGet,_DHCPClient+3
 13532  0015FA  C01D  F0DD         	movff	?_TickGet+1,_DHCPClient+4
 13533  0015FE  C01E  F0DE         	movff	?_TickGet+2,_DHCPClient+5
 13534  001602  C01F  F0DF         	movff	?_TickGet+3,_DHCPClient+6
 13535                           
 13536                           ;dhcp_client.c: 664: DHCPClient.smState = SM_DHCP_BOUND;
 13537  001606  0E06               	movlw	6
 13538  001608  0100               	movlb	0	; () banked
 13539  00160A  6FDA               	movwf	(_DHCPClient+1)& (0+255),b
 13540                           
 13541                           ; BSR set to: 0
 13542                           ;dhcp_client.c: 665: DHCPClient.flags.bits.bEvent = 1;
 13543  00160C  83DB               	bsf	(_DHCPClient+2)& (0+255),1,b
 13544                           
 13545                           ;dhcp_client.c: 667: break;
 13546  00160E  D02B               	goto	l10114
 13547  001610                     l10108:
 13548  001610  EC2D  F00E         	call	__DHCPReceive	;wreg free
 13549                           
 13550                           ; Switch size 1, requested type "speed"
 13551                           ; Number of cases is 2, Range of values is 5 to 6
 13552                           ; switch strategies available:
 13553                           ; Name         Instructions Cycles
 13554                           ; simple_byte            7     4 (average)
 13555                           ;	Chosen strategy is simple_byte
 13556  001614  0A05               	xorlw	5	; case 5
 13557  001616  E0E7               	bz	l10094
 13558  001618                     L8:
 13559  001618  0A03               	xorlw	3	; case 6
 13560  00161A  E101 D5CF          	bz	l10008
 13561  00161E  D023               	goto	l10114
 13562  001620                     l10112:
 13563                           
 13564                           ; BSR set to: 0
 13565  001620  51DA               	movf	(_DHCPClient+1)& (0+255),w,b
 13566                           
 13567                           ; Switch size 1, requested type "speed"
 13568                           ; Number of cases is 13, Range of values is 0 to 12
 13569                           ; switch strategies available:
 13570                           ; Name         Instructions Cycles
 13571                           ; simple_byte           40    21 (average)
 13572                           ;	Chosen strategy is simple_byte
 13573  001622  E021               	bz	l10114
 13574  001624  0A01               	xorlw	1	; case 1
 13575  001626  E101 D4F3          	bz	l9968
 13576  00162A  0A03               	xorlw	3	; case 2
 13577  00162C  E101 D503          	bz	l1436
 13578  001630  0A01               	xorlw	1	; case 3
 13579  001632  E101 D597          	bz	l10000
 13580  001636  0A07               	xorlw	7	; case 4
 13581  001638  E101 D5CD          	bz	l10016
 13582  00163C  0A01               	xorlw	1	; case 5
 13583  00163E  E101 D653          	bz	l10024
 13584  001642  0A03               	xorlw	3	; case 6
 13585  001644  E101 D6AF          	bz	l10060
 13586  001648  0A01               	xorlw	1	; case 7
 13587  00164A  E101 D72C          	bz	l10076
 13588  00164E  0A0F               	xorlw	15	; case 8
 13589  001650  E0A6               	bz	l10086
 13590  001652  0A01               	xorlw	1	; case 9
 13591  001654  E101 D727          	bz	l10076
 13592  001658  0A03               	xorlw	3	; case 10
 13593  00165A  E0A1               	bz	l10086
 13594  00165C  0A01               	xorlw	1	; case 11
 13595  00165E  E101 D722          	bz	l10076
 13596  001662  0A07               	xorlw	7	; case 12
 13597  001664  E09C               	bz	l10086
 13598  001666                     l10114:
 13599  001666  0100               	movlb	0	; () banked
 13600  001668  2BAE               	incf	DHCPTask@i& (0+255),f,b
 13601                           
 13602                           ; BSR set to: 0
 13603  00166A  51AE               	movf	DHCPTask@i& (0+255),w,b
 13604  00166C  E0D9               	bz	l10112
 13605                           
 13606                           ; BSR set to: 0
 13607  00166E  0012               	return		;funcret
 13608  001670                     __end_of_DHCPTask:
 13609                           	opt stack 0
 13610                           tblptru	equ	0xFF8
 13611                           tblptrh	equ	0xFF7
 13612                           tblptrl	equ	0xFF6
 13613                           tablat	equ	0xFF5
 13614                           prodh	equ	0xFF4
 13615                           prodl	equ	0xFF3
 13616                           intcon	equ	0xFF2
 13617                           intcon2	equ	0xFF1
 13618                           postinc0	equ	0xFEE
 13619                           wreg	equ	0xFE8
 13620                           indf1	equ	0xFE7
 13621                           postinc1	equ	0xFE6
 13622                           postdec1	equ	0xFE5
 13623                           plusw1	equ	0xFE3
 13624                           fsr1h	equ	0xFE2
 13625                           fsr1l	equ	0xFE1
 13626                           indf2	equ	0xFDF
 13627                           postinc2	equ	0xFDE
 13628                           postdec2	equ	0xFDD
 13629                           plusw2	equ	0xFDB
 13630                           fsr2h	equ	0xFDA
 13631                           fsr2l	equ	0xFD9
 13632                           status	equ	0xFD8
 13633                           
 13634 ;; *************** function ___lwmod *****************
 13635 ;; Defined at:
 13636 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\lwmod.c"
 13637 ;; Parameters:    Size  Location     Type
 13638 ;;  dividend        2   30[COMRAM] unsigned int 
 13639 ;;  divisor         2   32[COMRAM] unsigned int 
 13640 ;; Auto vars:     Size  Location     Type
 13641 ;;  counter         1   34[COMRAM] unsigned char 
 13642 ;; Return value:  Size  Location     Type
 13643 ;;                  2   30[COMRAM] unsigned int 
 13644 ;; Registers used:
 13645 ;;		wreg, status,2, status,0
 13646 ;; Tracked objects:
 13647 ;;		On entry : F/1
 13648 ;;		On exit  : F/1
 13649 ;;		Unchanged: F/0
 13650 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13651 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13652 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13653 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13654 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13655 ;;Total ram usage:        5 bytes
 13656 ;; Hardware stack levels used:    1
 13657 ;; Hardware stack levels required when called:    6
 13658 ;; This function calls:
 13659 ;;		Nothing
 13660 ;; This function is called by:
 13661 ;;		_DHCPTask
 13662 ;; This function uses a non-reentrant model
 13663 ;;
 13664                           
 13665                           	psect	text77
 13666  004CFC                     __ptext77:
 13667                           	opt stack 0
 13668  004CFC                     ___lwmod:
 13669                           	opt stack 22
 13670                           
 13671                           ; BSR set to: 1
 13672                           
 13673                           ; BSR set to: 0
 13674                           ;incstack = 0
 13675  004CFC  5021               	movf	___lwmod@divisor,w,c
 13676  004CFE  1022               	iorwf	___lwmod@divisor+1,w,c
 13677  004D00  E017               	bz	l2651
 13678                           
 13679                           ; BSR set to: 1
 13680  004D02  0E01               	movlw	1
 13681  004D04  6E23               	movwf	___lwmod@counter,c
 13682  004D06  D004               	goto	l9924
 13683  004D08                     l9922:
 13684                           
 13685                           ; BSR set to: 1
 13686  004D08  90D8               	bcf	status,0,c
 13687  004D0A  3621               	rlcf	___lwmod@divisor,f,c
 13688  004D0C  3622               	rlcf	___lwmod@divisor+1,f,c
 13689  004D0E  2A23               	incf	___lwmod@counter,f,c
 13690  004D10                     l9924:
 13691                           
 13692                           ; BSR set to: 1
 13693  004D10  AE22               	btfss	___lwmod@divisor+1,7,c
 13694  004D12  D7FA               	goto	l9922
 13695  004D14                     l9926:
 13696                           
 13697                           ; BSR set to: 1
 13698  004D14  5021               	movf	___lwmod@divisor,w,c
 13699  004D16  5C1F               	subwf	___lwmod@dividend,w,c
 13700  004D18  5022               	movf	___lwmod@divisor+1,w,c
 13701  004D1A  5820               	subwfb	___lwmod@dividend+1,w,c
 13702  004D1C  E304               	bnc	l9930
 13703                           
 13704                           ; BSR set to: 1
 13705  004D1E  5021               	movf	___lwmod@divisor,w,c
 13706  004D20  5E1F               	subwf	___lwmod@dividend,f,c
 13707  004D22  5022               	movf	___lwmod@divisor+1,w,c
 13708  004D24  5A20               	subwfb	___lwmod@dividend+1,f,c
 13709  004D26                     l9930:
 13710                           
 13711                           ; BSR set to: 1
 13712  004D26  90D8               	bcf	status,0,c
 13713  004D28  3222               	rrcf	___lwmod@divisor+1,f,c
 13714  004D2A  3221               	rrcf	___lwmod@divisor,f,c
 13715                           
 13716                           ; BSR set to: 1
 13717  004D2C  2E23               	decfsz	___lwmod@counter,f,c
 13718  004D2E  D7F2               	goto	l9926
 13719  004D30                     l2651:
 13720                           
 13721                           ; BSR set to: 1
 13722  004D30  C01F  F01F         	movff	___lwmod@dividend,?___lwmod
 13723  004D34  C020  F020         	movff	___lwmod@dividend+1,?___lwmod+1
 13724                           
 13725                           ; BSR set to: 1
 13726  004D38  0012               	return		;funcret
 13727  004D3A                     __end_of___lwmod:
 13728                           	opt stack 0
 13729                           tblptru	equ	0xFF8
 13730                           tblptrh	equ	0xFF7
 13731                           tblptrl	equ	0xFF6
 13732                           tablat	equ	0xFF5
 13733                           prodh	equ	0xFF4
 13734                           prodl	equ	0xFF3
 13735                           intcon	equ	0xFF2
 13736                           intcon2	equ	0xFF1
 13737                           postinc0	equ	0xFEE
 13738                           wreg	equ	0xFE8
 13739                           indf1	equ	0xFE7
 13740                           postinc1	equ	0xFE6
 13741                           postdec1	equ	0xFE5
 13742                           plusw1	equ	0xFE3
 13743                           fsr1h	equ	0xFE2
 13744                           fsr1l	equ	0xFE1
 13745                           indf2	equ	0xFDF
 13746                           postinc2	equ	0xFDE
 13747                           postdec2	equ	0xFDD
 13748                           plusw2	equ	0xFDB
 13749                           fsr2h	equ	0xFDA
 13750                           fsr2l	equ	0xFD9
 13751                           status	equ	0xFD8
 13752                           
 13753 ;; *************** function __DHCPSend *****************
 13754 ;; Defined at:
 13755 ;;		line 977 in file "../framework/tcpip/src/dhcp_client.c"
 13756 ;; Parameters:    Size  Location     Type
 13757 ;;  messageType     1    wreg     unsigned char 
 13758 ;;  bRenewing       1   57[BANK0 ] unsigned char 
 13759 ;; Auto vars:     Size  Location     Type
 13760 ;;  messageType     1   65[BANK0 ] unsigned char 
 13761 ;;  MyIP            4   58[BANK0 ] struct .
 13762 ;;  i               1   64[BANK0 ] unsigned char 
 13763 ;; Return value:  Size  Location     Type
 13764 ;;		None               void
 13765 ;; Registers used:
 13766 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 13767 ;; Tracked objects:
 13768 ;;		On entry : F/0
 13769 ;;		On exit  : F/1
 13770 ;;		Unchanged: 0/0
 13771 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13772 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13773 ;;      Locals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13774 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13775 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13776 ;;Total ram usage:        9 bytes
 13777 ;; Hardware stack levels used:    1
 13778 ;; Hardware stack levels required when called:   10
 13779 ;; This function calls:
 13780 ;;		_UDPFlush
 13781 ;;		_UDPPut
 13782 ;;		_UDPPutArray
 13783 ;; This function is called by:
 13784 ;;		_DHCPTask
 13785 ;; This function uses a non-reentrant model
 13786 ;;
 13787                           
 13788                           	psect	text78
 13789  001ED0                     __ptext78:
 13790                           	opt stack 0
 13791  001ED0                     __DHCPSend:
 13792                           	opt stack 18
 13793                           
 13794                           ; BSR set to: 1
 13795                           ;incstack = 0
 13796                           ;__DHCPSend@messageType stored from wreg
 13797  001ED0  6FA1               	movwf	__DHCPSend@messageType& (0+255),b
 13798                           
 13799                           ;dhcp_client.c: 979: uint8_t i;
 13800                           ;dhcp_client.c: 980: TCPIP_UINT32_VAL MyIP;
 13801                           ;dhcp_client.c: 982: UDPPut((1u));
 13802  001ED2  0E01               	movlw	1
 13803  001ED4  EC46  F027         	call	_UDPPut
 13804                           
 13805                           ;dhcp_client.c: 983: UDPPut((1u));
 13806  001ED8  0E01               	movlw	1
 13807  001EDA  EC46  F027         	call	_UDPPut
 13808                           
 13809                           ;dhcp_client.c: 984: UDPPut((6u));
 13810  001EDE  0E06               	movlw	6
 13811  001EE0  EC46  F027         	call	_UDPPut
 13812                           
 13813                           ;dhcp_client.c: 985: UDPPut(0);
 13814  001EE4  0E00               	movlw	0
 13815  001EE6  EC46  F027         	call	_UDPPut
 13816                           
 13817                           ;dhcp_client.c: 986: UDPPut(0x12);
 13818  001EEA  0E12               	movlw	18
 13819  001EEC  EC46  F027         	call	_UDPPut
 13820                           
 13821                           ;dhcp_client.c: 987: UDPPut(0x23);
 13822  001EF0  0E23               	movlw	35
 13823  001EF2  EC46  F027         	call	_UDPPut
 13824                           
 13825                           ;dhcp_client.c: 988: UDPPut(0x34);
 13826  001EF6  0E34               	movlw	52
 13827  001EF8  EC46  F027         	call	_UDPPut
 13828                           
 13829                           ;dhcp_client.c: 989: UDPPut(0x56);
 13830  001EFC  0E56               	movlw	86
 13831  001EFE  EC46  F027         	call	_UDPPut
 13832                           
 13833                           ;dhcp_client.c: 990: UDPPut(0);
 13834  001F02  0E00               	movlw	0
 13835  001F04  EC46  F027         	call	_UDPPut
 13836                           
 13837                           ;dhcp_client.c: 991: UDPPut(0);
 13838  001F08  0E00               	movlw	0
 13839  001F0A  EC46  F027         	call	_UDPPut
 13840                           
 13841                           ;dhcp_client.c: 992: UDPPut(DHCPClient.flags.bits.bUseUnicastMode ? 0x00 : 0x80);
 13842  001F0E  0100               	movlb	0	; () banked
 13843  001F10  B9DB               	btfsc	(_DHCPClient+2)& (0+255),4,b
 13844  001F12  D004               	goto	l1532
 13845                           
 13846                           ; BSR set to: 0
 13847  001F14  6B9F               	clrf	(__DHCPSend$6883+1)& (0+255),b
 13848  001F16  0E80               	movlw	128
 13849  001F18  6F9E               	movwf	__DHCPSend$6883& (0+255),b
 13850  001F1A  D002               	goto	l9566
 13851  001F1C                     l1532:
 13852                           
 13853                           ; BSR set to: 0
 13854  001F1C  6B9E               	clrf	__DHCPSend$6883& (0+255),b
 13855  001F1E  6B9F               	clrf	(__DHCPSend$6883+1)& (0+255),b
 13856  001F20                     l9566:
 13857                           
 13858                           ; BSR set to: 0
 13859  001F20  519E               	movf	__DHCPSend$6883& (0+255),w,b
 13860  001F22  EC46  F027         	call	_UDPPut
 13861                           
 13862                           ;dhcp_client.c: 993: UDPPut(0);
 13863  001F26  0E00               	movlw	0
 13864  001F28  EC46  F027         	call	_UDPPut
 13865                           
 13866                           ;dhcp_client.c: 996: if ((messageType == (3u)) && bRenewing) {
 13867  001F2C  0E03               	movlw	3
 13868  001F2E  0100               	movlb	0	; () banked
 13869  001F30  19A1               	xorwf	__DHCPSend@messageType& (0+255),w,b
 13870  001F32  E10B               	bnz	l9574
 13871                           
 13872                           ; BSR set to: 0
 13873  001F34  5199               	movf	__DHCPSend@bRenewing& (0+255),w,b
 13874  001F36  E009               	bz	l9574
 13875                           
 13876                           ; BSR set to: 0
 13877                           ;dhcp_client.c: 997: UDPPutArray((uint8_t *) & DHCPClient.tempIPAddress, sizeof (DHCPCli
      +                          ent.tempIPAddress));
 13878  001F38  0EEC               	movlw	low (_DHCPClient+19)
 13879  001F3A  6E20               	movwf	UDPPutArray@cData,c
 13880  001F3C  6A21               	clrf	UDPPutArray@cData+1,c
 13881  001F3E  6A23               	clrf	UDPPutArray@wDataLen+1,c
 13882  001F40  0E04               	movlw	4
 13883  001F42  6E22               	movwf	UDPPutArray@wDataLen,c
 13884  001F44  EC93  F023         	call	_UDPPutArray	;wreg free
 13885                           
 13886                           ;dhcp_client.c: 998: } else {
 13887  001F48  D00C               	goto	l9576
 13888  001F4A                     l9574:
 13889                           
 13890                           ; BSR set to: 0
 13891                           ;dhcp_client.c: 999: UDPPut(0x00);
 13892  001F4A  0E00               	movlw	0
 13893  001F4C  EC46  F027         	call	_UDPPut
 13894                           
 13895                           ;dhcp_client.c: 1000: UDPPut(0x00);
 13896  001F50  0E00               	movlw	0
 13897  001F52  EC46  F027         	call	_UDPPut
 13898                           
 13899                           ;dhcp_client.c: 1001: UDPPut(0x00);
 13900  001F56  0E00               	movlw	0
 13901  001F58  EC46  F027         	call	_UDPPut
 13902                           
 13903                           ;dhcp_client.c: 1002: UDPPut(0x00);
 13904  001F5C  0E00               	movlw	0
 13905  001F5E  EC46  F027         	call	_UDPPut
 13906  001F62                     l9576:
 13907                           
 13908                           ;dhcp_client.c: 1003: }
 13909                           ;dhcp_client.c: 1006: for (i = 0; i < 12u; i++)
 13910  001F62  0100               	movlb	0	; () banked
 13911  001F64  6BA0               	clrf	__DHCPSend@i& (0+255),b
 13912  001F66                     l9582:
 13913                           
 13914                           ; BSR set to: 0
 13915                           ;dhcp_client.c: 1007: UDPPut(0x00);
 13916  001F66  0E00               	movlw	0
 13917  001F68  EC46  F027         	call	_UDPPut
 13918  001F6C  0100               	movlb	0	; () banked
 13919  001F6E  2BA0               	incf	__DHCPSend@i& (0+255),f,b
 13920                           
 13921                           ; BSR set to: 0
 13922  001F70  0E0B               	movlw	11
 13923  001F72  65A0               	cpfsgt	__DHCPSend@i& (0+255),b
 13924  001F74  D7F8               	goto	l9582
 13925                           
 13926                           ; BSR set to: 0
 13927                           ;dhcp_client.c: 1010: UDPPutArray((uint8_t *) & AppConfig.MyMACAddr, sizeof (AppConfig.M
      +                          yMACAddr));
 13928  001F76  0EA6               	movlw	low (_AppConfig+45)
 13929  001F78  6E20               	movwf	UDPPutArray@cData,c
 13930  001F7A  0E01               	movlw	high (_AppConfig+45)
 13931  001F7C  6E21               	movwf	UDPPutArray@cData+1,c
 13932  001F7E  6A23               	clrf	UDPPutArray@wDataLen+1,c
 13933  001F80  0E06               	movlw	6
 13934  001F82  6E22               	movwf	UDPPutArray@wDataLen,c
 13935  001F84  EC93  F023         	call	_UDPPutArray	;wreg free
 13936                           
 13937                           ;dhcp_client.c: 1013: for (i = 0; i < 202u; i++)
 13938  001F88  0100               	movlb	0	; () banked
 13939  001F8A  6BA0               	clrf	__DHCPSend@i& (0+255),b
 13940  001F8C                     l9596:
 13941                           
 13942                           ; BSR set to: 0
 13943                           ;dhcp_client.c: 1014: UDPPut(0);
 13944  001F8C  0E00               	movlw	0
 13945  001F8E  EC46  F027         	call	_UDPPut
 13946  001F92  0100               	movlb	0	; () banked
 13947  001F94  2BA0               	incf	__DHCPSend@i& (0+255),f,b
 13948                           
 13949                           ; BSR set to: 0
 13950  001F96  0EC9               	movlw	201
 13951  001F98  65A0               	cpfsgt	__DHCPSend@i& (0+255),b
 13952  001F9A  D7F8               	goto	l9596
 13953                           
 13954                           ; BSR set to: 0
 13955                           ;dhcp_client.c: 1017: UDPPut(99);
 13956  001F9C  0E63               	movlw	99
 13957  001F9E  EC46  F027         	call	_UDPPut
 13958                           
 13959                           ;dhcp_client.c: 1018: UDPPut(130);
 13960  001FA2  0E82               	movlw	130
 13961  001FA4  EC46  F027         	call	_UDPPut
 13962                           
 13963                           ;dhcp_client.c: 1019: UDPPut(83);
 13964  001FA8  0E53               	movlw	83
 13965  001FAA  EC46  F027         	call	_UDPPut
 13966                           
 13967                           ;dhcp_client.c: 1020: UDPPut(99);
 13968  001FAE  0E63               	movlw	99
 13969  001FB0  EC46  F027         	call	_UDPPut
 13970                           
 13971                           ;dhcp_client.c: 1023: UDPPut((53u));
 13972  001FB4  0E35               	movlw	53
 13973  001FB6  EC46  F027         	call	_UDPPut
 13974                           
 13975                           ;dhcp_client.c: 1024: UDPPut((1u));
 13976  001FBA  0E01               	movlw	1
 13977  001FBC  EC46  F027         	call	_UDPPut
 13978                           
 13979                           ;dhcp_client.c: 1025: UDPPut(messageType);
 13980  001FC0  0100               	movlb	0	; () banked
 13981  001FC2  51A1               	movf	__DHCPSend@messageType& (0+255),w,b
 13982  001FC4  EC46  F027         	call	_UDPPut
 13983                           
 13984                           ;dhcp_client.c: 1027: if (messageType == (1u)) {
 13985  001FC8  0100               	movlb	0	; () banked
 13986  001FCA  05A1               	decf	__DHCPSend@messageType& (0+255),w,b
 13987  001FCC  E101               	bnz	l9608
 13988                           
 13989                           ; BSR set to: 0
 13990                           ;dhcp_client.c: 1029: DHCPClient.flags.bits.bOfferReceived = 0;
 13991  001FCE  95DB               	bcf	(_DHCPClient+2)& (0+255),2,b
 13992  001FD0                     l9608:
 13993                           
 13994                           ; BSR set to: 0
 13995                           ;dhcp_client.c: 1030: }
 13996                           ;dhcp_client.c: 1032: if ((messageType == (3u)) && !bRenewing) {
 13997  001FD0  0E03               	movlw	3
 13998  001FD2  19A1               	xorwf	__DHCPSend@messageType& (0+255),w,b
 13999  001FD4  E118               	bnz	l1542
 14000                           
 14001                           ; BSR set to: 0
 14002  001FD6  5199               	movf	__DHCPSend@bRenewing& (0+255),w,b
 14003  001FD8  E116               	bnz	l1542
 14004                           
 14005                           ; BSR set to: 0
 14006                           ;dhcp_client.c: 1039: UDPPut((54u));
 14007  001FDA  0E36               	movlw	54
 14008  001FDC  EC46  F027         	call	_UDPPut
 14009                           
 14010                           ;dhcp_client.c: 1040: UDPPut((4u));
 14011  001FE0  0E04               	movlw	4
 14012  001FE2  EC46  F027         	call	_UDPPut
 14013                           
 14014                           ;dhcp_client.c: 1041: UDPPut(((uint8_t *) (&DHCPClient.dwServerID))[3]);
 14015  001FE6  0100               	movlb	0	; () banked
 14016  001FE8  51EB               	movf	(_DHCPClient+18)& (0+255),w,b
 14017  001FEA  EC46  F027         	call	_UDPPut
 14018                           
 14019                           ;dhcp_client.c: 1042: UDPPut(((uint8_t *) (&DHCPClient.dwServerID))[2]);
 14020  001FEE  0100               	movlb	0	; () banked
 14021  001FF0  51EA               	movf	(_DHCPClient+17)& (0+255),w,b
 14022  001FF2  EC46  F027         	call	_UDPPut
 14023                           
 14024                           ;dhcp_client.c: 1043: UDPPut(((uint8_t *) (&DHCPClient.dwServerID))[1]);
 14025  001FF6  0100               	movlb	0	; () banked
 14026  001FF8  51E9               	movf	(_DHCPClient+16)& (0+255),w,b
 14027  001FFA  EC46  F027         	call	_UDPPut
 14028                           
 14029                           ;dhcp_client.c: 1044: UDPPut(((uint8_t *) (&DHCPClient.dwServerID))[0]);
 14030  001FFE  0100               	movlb	0	; () banked
 14031  002000  51E8               	movf	(_DHCPClient+15)& (0+255),w,b
 14032  002002  EC46  F027         	call	_UDPPut
 14033  002006                     l1542:
 14034                           
 14035                           ;dhcp_client.c: 1045: }
 14036                           ;dhcp_client.c: 1050: UDPPut((55u));
 14037  002006  0E37               	movlw	55
 14038  002008  EC46  F027         	call	_UDPPut
 14039                           
 14040                           ;dhcp_client.c: 1051: UDPPut((4u));
 14041  00200C  0E04               	movlw	4
 14042  00200E  EC46  F027         	call	_UDPPut
 14043                           
 14044                           ;dhcp_client.c: 1052: UDPPut((1u));
 14045  002012  0E01               	movlw	1
 14046  002014  EC46  F027         	call	_UDPPut
 14047                           
 14048                           ;dhcp_client.c: 1053: UDPPut((3u));
 14049  002018  0E03               	movlw	3
 14050  00201A  EC46  F027         	call	_UDPPut
 14051                           
 14052                           ;dhcp_client.c: 1054: UDPPut((6u));
 14053  00201E  0E06               	movlw	6
 14054  002020  EC46  F027         	call	_UDPPut
 14055                           
 14056                           ;dhcp_client.c: 1055: UDPPut((12u));
 14057  002024  0E0C               	movlw	12
 14058  002026  EC46  F027         	call	_UDPPut
 14059                           
 14060                           ;dhcp_client.c: 1058: if (((messageType == (3u)) && !bRenewing) ||
 14061                           ;dhcp_client.c: 1059: ((messageType == (1u)) && DHCPClient.tempIPAddress.Val)) {
 14062  00202A  0E03               	movlw	3
 14063  00202C  0100               	movlb	0	; () banked
 14064  00202E  19A1               	xorwf	__DHCPSend@messageType& (0+255),w,b
 14065  002030  E102               	bnz	l9618
 14066                           
 14067                           ; BSR set to: 0
 14068  002032  5199               	movf	__DHCPSend@bRenewing& (0+255),w,b
 14069  002034  E007               	bz	l9622
 14070  002036                     l9618:
 14071                           
 14072                           ; BSR set to: 0
 14073  002036  05A1               	decf	__DHCPSend@messageType& (0+255),w,b
 14074  002038  E113               	bnz	l9626
 14075                           
 14076                           ; BSR set to: 0
 14077  00203A  51EC               	movf	(_DHCPClient+19)& (0+255),w,b
 14078  00203C  11ED               	iorwf	(_DHCPClient+20)& (0+255),w,b
 14079  00203E  11EE               	iorwf	(_DHCPClient+21)& (0+255),w,b
 14080  002040  11EF               	iorwf	(_DHCPClient+22)& (0+255),w,b
 14081  002042  E00E               	bz	l9626
 14082  002044                     l9622:
 14083                           
 14084                           ; BSR set to: 0
 14085                           ;dhcp_client.c: 1060: UDPPut((50u));
 14086  002044  0E32               	movlw	50
 14087  002046  EC46  F027         	call	_UDPPut
 14088                           
 14089                           ;dhcp_client.c: 1061: UDPPut((4u));
 14090  00204A  0E04               	movlw	4
 14091  00204C  EC46  F027         	call	_UDPPut
 14092                           
 14093                           ;dhcp_client.c: 1062: UDPPutArray((uint8_t *) & DHCPClient.tempIPAddress, (4u));
 14094  002050  0EEC               	movlw	low (_DHCPClient+19)
 14095  002052  6E20               	movwf	UDPPutArray@cData,c
 14096  002054  6A21               	clrf	UDPPutArray@cData+1,c
 14097  002056  6A23               	clrf	UDPPutArray@wDataLen+1,c
 14098  002058  0E04               	movlw	4
 14099  00205A  6E22               	movwf	UDPPutArray@wDataLen,c
 14100  00205C  EC93  F023         	call	_UDPPutArray	;wreg free
 14101  002060                     l9626:
 14102                           
 14103                           ;dhcp_client.c: 1063: }
 14104                           ;dhcp_client.c: 1068: UDPPut((255u));
 14105  002060  0EFF               	movlw	255
 14106  002062  EC46  F027         	call	_UDPPut
 14107                           
 14108                           ;dhcp_client.c: 1071: while (UDPTxCount < 300u)
 14109  002066  D003               	goto	l9630
 14110  002068                     l9628:
 14111                           
 14112                           ; BSR set to: 0
 14113                           ;dhcp_client.c: 1072: UDPPut(0);
 14114  002068  0E00               	movlw	0
 14115  00206A  EC46  F027         	call	_UDPPut
 14116  00206E                     l9630:
 14117  00206E  0E2C               	movlw	44
 14118  002070  0100               	movlb	0	; () banked
 14119  002072  5DC7               	subwf	_UDPTxCount& (0+255),w,b
 14120  002074  0E01               	movlw	1
 14121  002076  59C8               	subwfb	(_UDPTxCount+1)& (0+255),w,b
 14122  002078  E3F7               	bnc	l9628
 14123                           
 14124                           ; BSR set to: 0
 14125                           ;dhcp_client.c: 1075: MyIP.Val = AppConfig.MyIPAddr.Val;
 14126  00207A  C179  F09A         	movff	_AppConfig,__DHCPSend@MyIP
 14127  00207E  C17A  F09B         	movff	_AppConfig+1,__DHCPSend@MyIP+1
 14128  002082  C17B  F09C         	movff	_AppConfig+2,__DHCPSend@MyIP+2
 14129  002086  C17C  F09D         	movff	_AppConfig+3,__DHCPSend@MyIP+3
 14130                           
 14131                           ; BSR set to: 0
 14132                           ;dhcp_client.c: 1076: if (!bRenewing)
 14133  00208A  5199               	movf	__DHCPSend@bRenewing& (0+255),w,b
 14134  00208C  E105               	bnz	l9636
 14135                           
 14136                           ; BSR set to: 0
 14137                           ;dhcp_client.c: 1077: AppConfig.MyIPAddr.Val = 0x00000000;
 14138  00208E  0101               	movlb	1	; () banked
 14139  002090  6B79               	clrf	_AppConfig& (0+255),b
 14140  002092  6B7A               	clrf	(_AppConfig+1)& (0+255),b
 14141  002094  6B7B               	clrf	(_AppConfig+2)& (0+255),b
 14142  002096  6B7C               	clrf	(_AppConfig+3)& (0+255),b
 14143  002098                     l9636:
 14144                           
 14145                           ;dhcp_client.c: 1078: UDPFlush();
 14146  002098  ECCB  F012         	call	_UDPFlush	;wreg free
 14147                           
 14148                           ; BSR set to: 1
 14149                           ;dhcp_client.c: 1079: AppConfig.MyIPAddr.Val = MyIP.Val;
 14150  00209C  C09A  F179         	movff	__DHCPSend@MyIP,_AppConfig
 14151  0020A0  C09B  F17A         	movff	__DHCPSend@MyIP+1,_AppConfig+1
 14152  0020A4  C09C  F17B         	movff	__DHCPSend@MyIP+2,_AppConfig+2
 14153  0020A8  C09D  F17C         	movff	__DHCPSend@MyIP+3,_AppConfig+3
 14154                           
 14155                           ; BSR set to: 1
 14156  0020AC  0012               	return		;funcret
 14157  0020AE                     __end_of__DHCPSend:
 14158                           	opt stack 0
 14159                           tblptru	equ	0xFF8
 14160                           tblptrh	equ	0xFF7
 14161                           tblptrl	equ	0xFF6
 14162                           tablat	equ	0xFF5
 14163                           prodh	equ	0xFF4
 14164                           prodl	equ	0xFF3
 14165                           intcon	equ	0xFF2
 14166                           intcon2	equ	0xFF1
 14167                           postinc0	equ	0xFEE
 14168                           wreg	equ	0xFE8
 14169                           indf1	equ	0xFE7
 14170                           postinc1	equ	0xFE6
 14171                           postdec1	equ	0xFE5
 14172                           plusw1	equ	0xFE3
 14173                           fsr1h	equ	0xFE2
 14174                           fsr1l	equ	0xFE1
 14175                           indf2	equ	0xFDF
 14176                           postinc2	equ	0xFDE
 14177                           postdec2	equ	0xFDD
 14178                           plusw2	equ	0xFDB
 14179                           fsr2h	equ	0xFDA
 14180                           fsr2l	equ	0xFD9
 14181                           status	equ	0xFD8
 14182                           
 14183 ;; *************** function _UDPPutArray *****************
 14184 ;; Defined at:
 14185 ;;		line 702 in file "../framework/tcpip/src/udp.c"
 14186 ;; Parameters:    Size  Location     Type
 14187 ;;  cData           2   31[COMRAM] PTR unsigned char 
 14188 ;;		 -> DHCPClient(32), AppConfig(51), m_messageBuffer(500), 
 14189 ;;  wDataLen        2   33[COMRAM] unsigned int 
 14190 ;; Auto vars:     Size  Location     Type
 14191 ;;  wTemp           2   35[COMRAM] unsigned int 
 14192 ;; Return value:  Size  Location     Type
 14193 ;;                  2   31[COMRAM] unsigned int 
 14194 ;; Registers used:
 14195 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 14196 ;; Tracked objects:
 14197 ;;		On entry : 0/0
 14198 ;;		On exit  : 0/0
 14199 ;;		Unchanged: 0/0
 14200 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14201 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14202 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14203 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14204 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14205 ;;Total ram usage:        6 bytes
 14206 ;; Hardware stack levels used:    1
 14207 ;; Hardware stack levels required when called:    7
 14208 ;; This function calls:
 14209 ;;		_MACPutArray
 14210 ;; This function is called by:
 14211 ;;		_SendUDPMessage
 14212 ;;		__DHCPSend
 14213 ;; This function uses a non-reentrant model
 14214 ;;
 14215                           
 14216                           	psect	text79
 14217  004726                     __ptext79:
 14218                           	opt stack 0
 14219  004726                     _UDPPutArray:
 14220                           	opt stack 20
 14221                           
 14222                           ;udp.c: 704: uint16_t wTemp;
 14223                           ;udp.c: 706: wTemp = ((1500ul) - sizeof (IP_HEADER) - sizeof (UDP_HEADER)) - wPutOffset;
 14224                           
 14225                           ; BSR set to: 1
 14226                           ;incstack = 0
 14227  004726  5039               	movf	_wPutOffset,w,c
 14228  004728  08C0               	sublw	192
 14229  00472A  6E24               	movwf	UDPPutArray@wTemp,c
 14230  00472C  503A               	movf	_wPutOffset+1,w,c
 14231  00472E  A0D8               	btfss	status,0,c
 14232  004730  2AE8               	incf	wreg,f,c
 14233  004732  0805               	sublw	5
 14234  004734  6E25               	movwf	UDPPutArray@wTemp+1,c
 14235                           
 14236                           ;udp.c: 707: if (wTemp < wDataLen)
 14237  004736  5022               	movf	UDPPutArray@wDataLen,w,c
 14238  004738  5C24               	subwf	UDPPutArray@wTemp,w,c
 14239  00473A  5023               	movf	UDPPutArray@wDataLen+1,w,c
 14240  00473C  5825               	subwfb	UDPPutArray@wTemp+1,w,c
 14241  00473E  E204               	bc	l9232
 14242                           
 14243                           ;udp.c: 708: wDataLen = wTemp;
 14244  004740  C024  F022         	movff	UDPPutArray@wTemp,UDPPutArray@wDataLen
 14245  004744  C025  F023         	movff	UDPPutArray@wTemp+1,UDPPutArray@wDataLen+1
 14246  004748                     l9232:
 14247                           
 14248                           ;udp.c: 710: wPutOffset += wDataLen;
 14249  004748  5022               	movf	UDPPutArray@wDataLen,w,c
 14250  00474A  2639               	addwf	_wPutOffset,f,c
 14251  00474C  5023               	movf	UDPPutArray@wDataLen+1,w,c
 14252  00474E  223A               	addwfc	_wPutOffset+1,f,c
 14253                           
 14254                           ;udp.c: 711: if (wPutOffset > UDPTxCount)
 14255  004750  5039               	movf	_wPutOffset,w,c
 14256  004752  0100               	movlb	0	; () banked
 14257  004754  5DC7               	subwf	_UDPTxCount& (0+255),w,b
 14258  004756  503A               	movf	_wPutOffset+1,w,c
 14259  004758  59C8               	subwfb	(_UDPTxCount+1)& (0+255),w,b
 14260  00475A  E204               	bc	l9236
 14261                           
 14262                           ; BSR set to: 0
 14263                           ;udp.c: 712: UDPTxCount = wPutOffset;
 14264  00475C  C039  F0C7         	movff	_wPutOffset,_UDPTxCount
 14265  004760  C03A  F0C8         	movff	_wPutOffset+1,_UDPTxCount+1
 14266  004764                     l9236:
 14267                           
 14268                           ; BSR set to: 0
 14269                           ;udp.c: 715: MACPutArray(cData, wDataLen);
 14270  004764  C020  F01C         	movff	UDPPutArray@cData,MACPutArray@val
 14271  004768  C021  F01D         	movff	UDPPutArray@cData+1,MACPutArray@val+1
 14272  00476C  C022  F01E         	movff	UDPPutArray@wDataLen,MACPutArray@len
 14273  004770  C023  F01F         	movff	UDPPutArray@wDataLen+1,MACPutArray@len+1
 14274  004774  EC76  F028         	call	_MACPutArray	;wreg free
 14275                           
 14276                           ;udp.c: 717: return wDataLen;
 14277  004778  C022  F020         	movff	UDPPutArray@wDataLen,?_UDPPutArray
 14278  00477C  C023  F021         	movff	UDPPutArray@wDataLen+1,?_UDPPutArray+1
 14279  004780  0012               	return		;funcret
 14280  004782                     __end_of_UDPPutArray:
 14281                           	opt stack 0
 14282                           tblptru	equ	0xFF8
 14283                           tblptrh	equ	0xFF7
 14284                           tblptrl	equ	0xFF6
 14285                           tablat	equ	0xFF5
 14286                           prodh	equ	0xFF4
 14287                           prodl	equ	0xFF3
 14288                           intcon	equ	0xFF2
 14289                           intcon2	equ	0xFF1
 14290                           postinc0	equ	0xFEE
 14291                           wreg	equ	0xFE8
 14292                           indf1	equ	0xFE7
 14293                           postinc1	equ	0xFE6
 14294                           postdec1	equ	0xFE5
 14295                           plusw1	equ	0xFE3
 14296                           fsr1h	equ	0xFE2
 14297                           fsr1l	equ	0xFE1
 14298                           indf2	equ	0xFDF
 14299                           postinc2	equ	0xFDE
 14300                           postdec2	equ	0xFDD
 14301                           plusw2	equ	0xFDB
 14302                           fsr2h	equ	0xFDA
 14303                           fsr2l	equ	0xFD9
 14304                           status	equ	0xFD8
 14305                           
 14306 ;; *************** function _UDPPut *****************
 14307 ;; Defined at:
 14308 ;;		line 662 in file "../framework/tcpip/src/udp.c"
 14309 ;; Parameters:    Size  Location     Type
 14310 ;;  v               1    wreg     unsigned char 
 14311 ;; Auto vars:     Size  Location     Type
 14312 ;;  v               1   28[COMRAM] unsigned char 
 14313 ;; Return value:  Size  Location     Type
 14314 ;;                  1    wreg      unsigned char 
 14315 ;; Registers used:
 14316 ;;		wreg, status,2, status,0, cstack
 14317 ;; Tracked objects:
 14318 ;;		On entry : 0/0
 14319 ;;		On exit  : 0/0
 14320 ;;		Unchanged: 0/0
 14321 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14322 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14323 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14324 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14325 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14326 ;;Total ram usage:        1 bytes
 14327 ;; Hardware stack levels used:    1
 14328 ;; Hardware stack levels required when called:    7
 14329 ;; This function calls:
 14330 ;;		_MACPut
 14331 ;; This function is called by:
 14332 ;;		__DHCPSend
 14333 ;; This function uses a non-reentrant model
 14334 ;;
 14335                           
 14336                           	psect	text80
 14337  004E8C                     __ptext80:
 14338                           	opt stack 0
 14339  004E8C                     _UDPPut:
 14340                           	opt stack 20
 14341                           
 14342                           ;incstack = 0
 14343                           ;UDPPut@v stored from wreg
 14344  004E8C  6E1D               	movwf	UDPPut@v,c
 14345                           
 14346                           ;udp.c: 665: if (wPutOffset >= ((1500ul) - sizeof (IP_HEADER) - sizeof (UDP_HEADER))) {
 14347  004E8E  0EC0               	movlw	192
 14348  004E90  5C39               	subwf	_wPutOffset,w,c
 14349  004E92  0E05               	movlw	5
 14350  004E94  583A               	subwfb	_wPutOffset+1,w,c
 14351  004E96  E301               	bnc	l9374
 14352  004E98  0012               	return	
 14353  004E9A                     l9374:
 14354                           
 14355                           ;udp.c: 667: }
 14356                           ;udp.c: 670: MACPut(v);
 14357  004E9A  501D               	movf	UDPPut@v,w,c
 14358  004E9C  EC46  F02A         	call	_MACPut
 14359                           
 14360                           ;udp.c: 671: wPutOffset++;
 14361  004EA0  4A39               	infsnz	_wPutOffset,f,c
 14362  004EA2  2A3A               	incf	_wPutOffset+1,f,c
 14363                           
 14364                           ;udp.c: 672: if (wPutOffset > UDPTxCount)
 14365  004EA4  5039               	movf	_wPutOffset,w,c
 14366  004EA6  0100               	movlb	0	; () banked
 14367  004EA8  5DC7               	subwf	_UDPTxCount& (0+255),w,b
 14368  004EAA  503A               	movf	_wPutOffset+1,w,c
 14369  004EAC  59C8               	subwfb	(_UDPTxCount+1)& (0+255),w,b
 14370  004EAE  B0D8               	btfsc	status,0,c
 14371  004EB0  0012               	return	
 14372                           
 14373                           ; BSR set to: 0
 14374                           ;udp.c: 673: UDPTxCount = wPutOffset;
 14375  004EB2  C039  F0C7         	movff	_wPutOffset,_UDPTxCount
 14376  004EB6  C03A  F0C8         	movff	_wPutOffset+1,_UDPTxCount+1
 14377  004EBA  0012               	return		;funcret
 14378  004EBC                     __end_of_UDPPut:
 14379                           	opt stack 0
 14380                           tblptru	equ	0xFF8
 14381                           tblptrh	equ	0xFF7
 14382                           tblptrl	equ	0xFF6
 14383                           tablat	equ	0xFF5
 14384                           prodh	equ	0xFF4
 14385                           prodl	equ	0xFF3
 14386                           intcon	equ	0xFF2
 14387                           intcon2	equ	0xFF1
 14388                           postinc0	equ	0xFEE
 14389                           wreg	equ	0xFE8
 14390                           indf1	equ	0xFE7
 14391                           postinc1	equ	0xFE6
 14392                           postdec1	equ	0xFE5
 14393                           plusw1	equ	0xFE3
 14394                           fsr1h	equ	0xFE2
 14395                           fsr1l	equ	0xFE1
 14396                           indf2	equ	0xFDF
 14397                           postinc2	equ	0xFDE
 14398                           postdec2	equ	0xFDD
 14399                           plusw2	equ	0xFDB
 14400                           fsr2h	equ	0xFDA
 14401                           fsr2l	equ	0xFD9
 14402                           status	equ	0xFD8
 14403                           
 14404 ;; *************** function _UDPFlush *****************
 14405 ;; Defined at:
 14406 ;;		line 862 in file "../framework/tcpip/src/udp.c"
 14407 ;; Parameters:    Size  Location     Type
 14408 ;;		None
 14409 ;; Auto vars:     Size  Location     Type
 14410 ;;  wChecksum       2   31[BANK0 ] unsigned int 
 14411 ;;  wReadPtrSave    2   29[BANK0 ] unsigned short 
 14412 ;;  pseudoHeader   12   45[BANK0 ] struct _PSEUDO_HEADER
 14413 ;;  h               8   37[BANK0 ] struct .
 14414 ;;  wUDPLength      2   35[BANK0 ] unsigned int 
 14415 ;;  p               2   33[BANK0 ] PTR struct .
 14416 ;;		 -> UDPSocketInfo(230), 
 14417 ;; Return value:  Size  Location     Type
 14418 ;;		None               void
 14419 ;; Registers used:
 14420 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 14421 ;; Tracked objects:
 14422 ;;		On entry : 0/0
 14423 ;;		On exit  : F/1
 14424 ;;		Unchanged: 0/0
 14425 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14426 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14427 ;;      Locals:         0      28       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14428 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14429 ;;      Totals:         0      28       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14430 ;;Total ram usage:       28 bytes
 14431 ;; Hardware stack levels used:    1
 14432 ;; Hardware stack levels required when called:    9
 14433 ;; This function calls:
 14434 ;;		_CalcIPBufferChecksum
 14435 ;;		_CalcIPChecksum
 14436 ;;		_IPPutHeader
 14437 ;;		_MACFlush
 14438 ;;		_MACPutArray
 14439 ;;		_MACSetReadPtr
 14440 ;;		_MACSetWritePtr
 14441 ;;		_swaps
 14442 ;; This function is called by:
 14443 ;;		_SendUDPMessage
 14444 ;;		__DHCPSend
 14445 ;; This function uses a non-reentrant model
 14446 ;;
 14447                           
 14448                           	psect	text81
 14449  002596                     __ptext81:
 14450                           	opt stack 0
 14451  002596                     _UDPFlush:
 14452                           	opt stack 18
 14453                           
 14454                           ;udp.c: 864: UDP_HEADER h;
 14455                           ;udp.c: 865: UDP_SOCKET_INFO *p;
 14456                           ;udp.c: 866: uint16_t wUDPLength;
 14457                           ;udp.c: 868: p = &UDPSocketInfo[activeUDPSocket];
 14458                           
 14459                           ;incstack = 0
 14460  002596  0100               	movlb	0	; () banked
 14461  002598  51CE               	movf	_activeUDPSocket& (0+255),w,b
 14462  00259A  0D17               	mullw	23
 14463  00259C  0E00               	movlw	low _UDPSocketInfo
 14464  00259E  24F3               	addwf	prodl,w,c
 14465  0025A0  6F81               	movwf	UDPFlush@p& (0+255),b
 14466  0025A2  0E02               	movlw	high _UDPSocketInfo
 14467  0025A4  20F4               	addwfc	prodh,w,c
 14468  0025A6  6F82               	movwf	(UDPFlush@p+1)& (0+255),b
 14469                           
 14470                           ; BSR set to: 0
 14471                           ;udp.c: 870: wUDPLength = UDPTxCount + sizeof (UDP_HEADER);
 14472  0025A8  0E08               	movlw	8
 14473  0025AA  25C7               	addwf	_UDPTxCount& (0+255),w,b
 14474  0025AC  6F83               	movwf	UDPFlush@wUDPLength& (0+255),b
 14475  0025AE  0E00               	movlw	0
 14476  0025B0  21C8               	addwfc	(_UDPTxCount+1)& (0+255),w,b
 14477  0025B2  6F84               	movwf	(UDPFlush@wUDPLength+1)& (0+255),b
 14478                           
 14479                           ; BSR set to: 0
 14480                           ;udp.c: 873: h.SourcePort = swaps(p->localPort);
 14481  0025B4  EE20 F00C          	lfsr	2,12
 14482  0025B8  5181               	movf	UDPFlush@p& (0+255),w,b
 14483  0025BA  26D9               	addwf	fsr2l,f,c
 14484  0025BC  5182               	movf	(UDPFlush@p+1)& (0+255),w,b
 14485  0025BE  22DA               	addwfc	fsr2h,f,c
 14486  0025C0  CFDE F01C          	movff	postinc2,swaps@v
 14487  0025C4  CFDD F01D          	movff	postdec2,swaps@v+1
 14488  0025C8  EC42  F029         	call	_swaps	;wreg free
 14489  0025CC  C01C  F085         	movff	?_swaps,UDPFlush@h
 14490  0025D0  C01D  F086         	movff	?_swaps+1,UDPFlush@h+1
 14491                           
 14492                           ;udp.c: 874: h.DestinationPort = swaps(p->remotePort);
 14493  0025D4  0100               	movlb	0	; () banked
 14494  0025D6  EE20 F00A          	lfsr	2,10
 14495  0025DA  5181               	movf	UDPFlush@p& (0+255),w,b
 14496  0025DC  26D9               	addwf	fsr2l,f,c
 14497  0025DE  5182               	movf	(UDPFlush@p+1)& (0+255),w,b
 14498  0025E0  22DA               	addwfc	fsr2h,f,c
 14499  0025E2  CFDE F01C          	movff	postinc2,swaps@v
 14500  0025E6  CFDD F01D          	movff	postdec2,swaps@v+1
 14501  0025EA  EC42  F029         	call	_swaps	;wreg free
 14502  0025EE  C01C  F087         	movff	?_swaps,UDPFlush@h+2
 14503  0025F2  C01D  F088         	movff	?_swaps+1,UDPFlush@h+3
 14504                           
 14505                           ;udp.c: 875: h.Length = swaps(wUDPLength);
 14506  0025F6  C083  F01C         	movff	UDPFlush@wUDPLength,swaps@v
 14507  0025FA  C084  F01D         	movff	UDPFlush@wUDPLength+1,swaps@v+1
 14508  0025FE  EC42  F029         	call	_swaps	;wreg free
 14509  002602  C01C  F089         	movff	?_swaps,UDPFlush@h+4
 14510  002606  C01D  F08A         	movff	?_swaps+1,UDPFlush@h+5
 14511                           
 14512                           ;udp.c: 876: h.Checksum = 0x0000;
 14513  00260A  0100               	movlb	0	; () banked
 14514  00260C  6B8B               	clrf	(UDPFlush@h+6)& (0+255),b
 14515  00260E  6B8C               	clrf	(UDPFlush@h+7)& (0+255),b
 14516                           
 14517                           ; BSR set to: 0
 14518                           ;udp.c: 881: {
 14519                           ;udp.c: 882: PSEUDO_HEADER pseudoHeader;
 14520                           ;udp.c: 884: pseudoHeader.SourceAddress = AppConfig.MyIPAddr;
 14521  002610  C179  F08D         	movff	_AppConfig,UDPFlush@pseudoHeader
 14522  002614  C17A  F08E         	movff	_AppConfig+1,UDPFlush@pseudoHeader+1
 14523  002618  C17B  F08F         	movff	_AppConfig+2,UDPFlush@pseudoHeader+2
 14524  00261C  C17C  F090         	movff	_AppConfig+3,UDPFlush@pseudoHeader+3
 14525                           
 14526                           ; BSR set to: 0
 14527                           ;udp.c: 885: pseudoHeader.DestAddress = p->remote.remoteNode.IPAddr;
 14528  002620  C081  FFD9         	movff	UDPFlush@p,fsr2l
 14529  002624  C082  FFDA         	movff	UDPFlush@p+1,fsr2h
 14530  002628  CFDE F091          	movff	postinc2,UDPFlush@pseudoHeader+4
 14531  00262C  CFDE F092          	movff	postinc2,UDPFlush@pseudoHeader+5
 14532  002630  CFDE F093          	movff	postinc2,UDPFlush@pseudoHeader+6
 14533  002634  CFDE F094          	movff	postinc2,UDPFlush@pseudoHeader+7
 14534                           
 14535                           ; BSR set to: 0
 14536                           ;udp.c: 886: pseudoHeader.Zero = 0x0;
 14537  002638  6B95               	clrf	(UDPFlush@pseudoHeader+8)& (0+255),b
 14538                           
 14539                           ; BSR set to: 0
 14540                           ;udp.c: 887: pseudoHeader.Protocol = (17u);
 14541  00263A  0E11               	movlw	17
 14542  00263C  6F96               	movwf	(UDPFlush@pseudoHeader+9)& (0+255),b
 14543                           
 14544                           ; BSR set to: 0
 14545                           ;udp.c: 888: pseudoHeader.Length = wUDPLength;
 14546  00263E  C083  F097         	movff	UDPFlush@wUDPLength,UDPFlush@pseudoHeader+10
 14547  002642  C084  F098         	movff	UDPFlush@wUDPLength+1,UDPFlush@pseudoHeader+11
 14548                           
 14549                           ; BSR set to: 0
 14550                           ;udp.c: 889: (pseudoHeader.Length = swaps(pseudoHeader.Length));
 14551  002646  C097  F01C         	movff	UDPFlush@pseudoHeader+10,swaps@v
 14552  00264A  C098  F01D         	movff	UDPFlush@pseudoHeader+11,swaps@v+1
 14553  00264E  EC42  F029         	call	_swaps	;wreg free
 14554  002652  C01C  F097         	movff	?_swaps,UDPFlush@pseudoHeader+10
 14555  002656  C01D  F098         	movff	?_swaps+1,UDPFlush@pseudoHeader+11
 14556                           
 14557                           ;udp.c: 890: h.Checksum = ~CalcIPChecksum((uint8_t *) & pseudoHeader, sizeof (pseudoHead
      +                          er));
 14558  00265A  6A1D               	clrf	CalcIPChecksum@count+1,c
 14559  00265C  0E0C               	movlw	12
 14560  00265E  6E1C               	movwf	CalcIPChecksum@count,c
 14561  002660  0E8D               	movlw	UDPFlush@pseudoHeader& (0+255)
 14562  002662  ECE6  F01E         	call	_CalcIPChecksum
 14563  002666  1C1C               	comf	?_CalcIPChecksum,w,c
 14564  002668  0100               	movlb	0	; () banked
 14565  00266A  6F8B               	movwf	(UDPFlush@h+6)& (0+255),b
 14566  00266C  1C1D               	comf	?_CalcIPChecksum+1,w,c
 14567  00266E  6F8C               	movwf	(UDPFlush@h+7)& (0+255),b
 14568                           
 14569                           ; BSR set to: 0
 14570                           ;udp.c: 891: }
 14571                           ;udp.c: 896: MACSetWritePtr((((8*1024ul) - (1ul+1518ul+7ul) - 0u - 0ul - 0ul) + 1ul) + s
      +                          izeof (ETHER_HEADER));
 14572  002670  0E1A               	movlw	26
 14573  002672  6E1D               	movwf	MACSetWritePtr@address+1,c
 14574  002674  0E19               	movlw	25
 14575  002676  6E1C               	movwf	MACSetWritePtr@address,c
 14576  002678  EC56  F02A         	call	_MACSetWritePtr	;wreg free
 14577                           
 14578                           ;udp.c: 899: IPPutHeader(&p->remote.remoteNode, (17u), wUDPLength);
 14579  00267C  C081  F060         	movff	UDPFlush@p,IPPutHeader@remote
 14580  002680  C082  F061         	movff	UDPFlush@p+1,IPPutHeader@remote+1
 14581  002684  0E11               	movlw	17
 14582  002686  0100               	movlb	0	; () banked
 14583  002688  6F62               	movwf	IPPutHeader@protocol& (0+255),b
 14584  00268A  C083  F063         	movff	UDPFlush@wUDPLength,IPPutHeader@len
 14585  00268E  C084  F064         	movff	UDPFlush@wUDPLength+1,IPPutHeader@len+1
 14586  002692  EC15  F01D         	call	_IPPutHeader	;wreg free
 14587                           
 14588                           ;udp.c: 902: MACPutArray((uint8_t *) & h, sizeof (h));
 14589  002696  0E85               	movlw	low UDPFlush@h
 14590  002698  6E1C               	movwf	MACPutArray@val,c
 14591  00269A  6A1D               	clrf	MACPutArray@val+1,c
 14592  00269C  6A1F               	clrf	MACPutArray@len+1,c
 14593  00269E  0E08               	movlw	8
 14594  0026A0  6E1E               	movwf	MACPutArray@len,c
 14595  0026A2  EC76  F028         	call	_MACPutArray	;wreg free
 14596                           
 14597                           ;udp.c: 906: {
 14598                           ;udp.c: 907: unsigned short wReadPtrSave;
 14599                           ;udp.c: 908: uint16_t wChecksum;
 14600                           ;udp.c: 910: wReadPtrSave = MACSetReadPtr((((8*1024ul) - (1ul+1518ul+7ul) - 0u - 0ul - 0
      +                          ul) + 1ul) + sizeof (ETHER_HEADER) + sizeof (IP_HEADER));
 14601  0026A6  0E1A               	movlw	26
 14602  0026A8  6E1D               	movwf	MACSetReadPtr@address+1,c
 14603  0026AA  0E2D               	movlw	45
 14604  0026AC  6E1C               	movwf	MACSetReadPtr@address,c
 14605  0026AE  EC88  F029         	call	_MACSetReadPtr	;wreg free
 14606  0026B2  C01C  F07D         	movff	?_MACSetReadPtr,UDPFlush@wReadPtrSave
 14607  0026B6  C01D  F07E         	movff	?_MACSetReadPtr+1,UDPFlush@wReadPtrSave+1
 14608                           
 14609                           ;udp.c: 911: wChecksum = CalcIPBufferChecksum(wUDPLength);
 14610  0026BA  C083  F023         	movff	UDPFlush@wUDPLength,CalcIPBufferChecksum@len
 14611  0026BE  C084  F024         	movff	UDPFlush@wUDPLength+1,CalcIPBufferChecksum@len+1
 14612  0026C2  ECA9  F018         	call	_CalcIPBufferChecksum	;wreg free
 14613  0026C6  C023  F07F         	movff	?_CalcIPBufferChecksum,UDPFlush@wChecksum
 14614  0026CA  C024  F080         	movff	?_CalcIPBufferChecksum+1,UDPFlush@wChecksum+1
 14615                           
 14616                           ; BSR set to: 0
 14617                           ;udp.c: 912: if (wChecksum == 0x0000u)
 14618  0026CE  517F               	movf	UDPFlush@wChecksum& (0+255),w,b
 14619  0026D0  1180               	iorwf	(UDPFlush@wChecksum+1)& (0+255),w,b
 14620  0026D2  E102               	bnz	l9282
 14621                           
 14622                           ; BSR set to: 0
 14623                           ;udp.c: 913: wChecksum = 0xFFFF;
 14624  0026D4  697F               	setf	UDPFlush@wChecksum& (0+255),b
 14625  0026D6  6980               	setf	(UDPFlush@wChecksum+1)& (0+255),b
 14626  0026D8                     l9282:
 14627                           
 14628                           ; BSR set to: 0
 14629                           ;udp.c: 914: MACSetReadPtr(wReadPtrSave);
 14630  0026D8  C07D  F01C         	movff	UDPFlush@wReadPtrSave,MACSetReadPtr@address
 14631  0026DC  C07E  F01D         	movff	UDPFlush@wReadPtrSave+1,MACSetReadPtr@address+1
 14632  0026E0  EC88  F029         	call	_MACSetReadPtr	;wreg free
 14633                           
 14634                           ;udp.c: 915: MACSetWritePtr((((8*1024ul) - (1ul+1518ul+7ul) - 0u - 0ul - 0ul) + 1ul) + s
      +                          izeof (ETHER_HEADER) + sizeof (IP_HEADER) + 6);
 14635  0026E4  0E1A               	movlw	26
 14636  0026E6  6E1D               	movwf	MACSetWritePtr@address+1,c
 14637  0026E8  0E33               	movlw	51
 14638  0026EA  6E1C               	movwf	MACSetWritePtr@address,c
 14639  0026EC  EC56  F02A         	call	_MACSetWritePtr	;wreg free
 14640                           
 14641                           ;udp.c: 916: MACPutArray((uint8_t *) & wChecksum, sizeof (wChecksum));
 14642  0026F0  0E7F               	movlw	low UDPFlush@wChecksum
 14643  0026F2  6E1C               	movwf	MACPutArray@val,c
 14644  0026F4  6A1D               	clrf	MACPutArray@val+1,c
 14645  0026F6  6A1F               	clrf	MACPutArray@len+1,c
 14646  0026F8  0E02               	movlw	2
 14647  0026FA  6E1E               	movwf	MACPutArray@len,c
 14648  0026FC  EC76  F028         	call	_MACPutArray	;wreg free
 14649                           
 14650                           ;udp.c: 917: }
 14651                           ;udp.c: 921: MACFlush();
 14652  002700  EC05  F029         	call	_MACFlush	;wreg free
 14653                           
 14654                           ;udp.c: 924: UDPTxCount = 0;
 14655  002704  0100               	movlb	0	; () banked
 14656  002706  6BC7               	clrf	_UDPTxCount& (0+255),b
 14657  002708  6BC8               	clrf	(_UDPTxCount+1)& (0+255),b
 14658                           
 14659                           ; BSR set to: 0
 14660                           ;udp.c: 925: LastPutSocket = (0xffu);
 14661  00270A  0101               	movlb	1	; () banked
 14662  00270C  69E6               	setf	_LastPutSocket& (0+255),b
 14663                           
 14664                           ; BSR set to: 1
 14665  00270E  0012               	return		;funcret
 14666  002710                     __end_of_UDPFlush:
 14667                           	opt stack 0
 14668                           tblptru	equ	0xFF8
 14669                           tblptrh	equ	0xFF7
 14670                           tblptrl	equ	0xFF6
 14671                           tablat	equ	0xFF5
 14672                           prodh	equ	0xFF4
 14673                           prodl	equ	0xFF3
 14674                           intcon	equ	0xFF2
 14675                           intcon2	equ	0xFF1
 14676                           postinc0	equ	0xFEE
 14677                           wreg	equ	0xFE8
 14678                           indf1	equ	0xFE7
 14679                           postinc1	equ	0xFE6
 14680                           postdec1	equ	0xFE5
 14681                           plusw1	equ	0xFE3
 14682                           fsr1h	equ	0xFE2
 14683                           fsr1l	equ	0xFE1
 14684                           indf2	equ	0xFDF
 14685                           postinc2	equ	0xFDE
 14686                           postdec2	equ	0xFDD
 14687                           plusw2	equ	0xFDB
 14688                           fsr2h	equ	0xFDA
 14689                           fsr2l	equ	0xFD9
 14690                           status	equ	0xFD8
 14691                           
 14692 ;; *************** function _MACSetReadPtr *****************
 14693 ;; Defined at:
 14694 ;;		line 635 in file "../framework/tcpip/src/eth97j60.c"
 14695 ;; Parameters:    Size  Location     Type
 14696 ;;  address         2   27[COMRAM] unsigned short 
 14697 ;; Auto vars:     Size  Location     Type
 14698 ;;  oldVal          2   29[COMRAM] unsigned int 
 14699 ;; Return value:  Size  Location     Type
 14700 ;;                  2   27[COMRAM] unsigned short 
 14701 ;; Registers used:
 14702 ;;		None
 14703 ;; Tracked objects:
 14704 ;;		On entry : 0/0
 14705 ;;		On exit  : 0/0
 14706 ;;		Unchanged: 0/0
 14707 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14708 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14709 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14710 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14711 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14712 ;;Total ram usage:        4 bytes
 14713 ;; Hardware stack levels used:    1
 14714 ;; Hardware stack levels required when called:    6
 14715 ;; This function calls:
 14716 ;;		Nothing
 14717 ;; This function is called by:
 14718 ;;		_UDPFlush
 14719 ;; This function uses a non-reentrant model
 14720 ;;
 14721                           
 14722                           	psect	text82
 14723  005310                     __ptext82:
 14724                           	opt stack 0
 14725  005310                     _MACSetReadPtr:
 14726                           	opt stack 20
 14727                           
 14728                           ;eth97j60.c: 637: uint16_t oldVal;
 14729                           ;eth97j60.c: 639: oldVal = ERDPT;
 14730                           
 14731                           ; BSR set to: 1
 14732                           ;incstack = 0
 14733  005310  CF7A F01E          	movff	3962,MACSetReadPtr@oldVal	;volatile
 14734  005314  CF7B F01F          	movff	3963,MACSetReadPtr@oldVal+1	;volatile
 14735                           
 14736                           ;eth97j60.c: 640: ERDPT = address;
 14737  005318  C01C  FF7A         	movff	MACSetReadPtr@address,3962	;volatile
 14738  00531C  C01D  FF7B         	movff	MACSetReadPtr@address+1,3963	;volatile
 14739                           
 14740                           ;eth97j60.c: 641: return oldVal;
 14741  005320  C01E  F01C         	movff	MACSetReadPtr@oldVal,?_MACSetReadPtr
 14742  005324  C01F  F01D         	movff	MACSetReadPtr@oldVal+1,?_MACSetReadPtr+1
 14743  005328  0012               	return		;funcret
 14744  00532A                     __end_of_MACSetReadPtr:
 14745                           	opt stack 0
 14746                           tblptru	equ	0xFF8
 14747                           tblptrh	equ	0xFF7
 14748                           tblptrl	equ	0xFF6
 14749                           tablat	equ	0xFF5
 14750                           prodh	equ	0xFF4
 14751                           prodl	equ	0xFF3
 14752                           intcon	equ	0xFF2
 14753                           intcon2	equ	0xFF1
 14754                           postinc0	equ	0xFEE
 14755                           wreg	equ	0xFE8
 14756                           indf1	equ	0xFE7
 14757                           postinc1	equ	0xFE6
 14758                           postdec1	equ	0xFE5
 14759                           plusw1	equ	0xFE3
 14760                           fsr1h	equ	0xFE2
 14761                           fsr1l	equ	0xFE1
 14762                           indf2	equ	0xFDF
 14763                           postinc2	equ	0xFDE
 14764                           postdec2	equ	0xFDD
 14765                           plusw2	equ	0xFDB
 14766                           fsr2h	equ	0xFDA
 14767                           fsr2l	equ	0xFD9
 14768                           status	equ	0xFD8
 14769                           
 14770 ;; *************** function _IPPutHeader *****************
 14771 ;; Defined at:
 14772 ;;		line 208 in file "../framework/tcpip/src/ip.c"
 14773 ;; Parameters:    Size  Location     Type
 14774 ;;  remote          2    0[BANK0 ] PTR struct .
 14775 ;;		 -> UDPSocketInfo.remote(10), UDPSocketInfo(230), remoteNode(10), 
 14776 ;;  protocol        1    2[BANK0 ] unsigned char 
 14777 ;;  len             2    3[BANK0 ] unsigned int 
 14778 ;; Auto vars:     Size  Location     Type
 14779 ;;  header         20    5[BANK0 ] struct _IP_HEADER
 14780 ;; Return value:  Size  Location     Type
 14781 ;;                  2    0[BANK0 ] unsigned int 
 14782 ;; Registers used:
 14783 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 14784 ;; Tracked objects:
 14785 ;;		On entry : F/0
 14786 ;;		On exit  : 0/0
 14787 ;;		Unchanged: 0/0
 14788 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14789 ;;      Params:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14790 ;;      Locals:         0      20       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14791 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14792 ;;      Totals:         0      25       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14793 ;;Total ram usage:       25 bytes
 14794 ;; Hardware stack levels used:    1
 14795 ;; Hardware stack levels required when called:    8
 14796 ;; This function calls:
 14797 ;;		_CalcIPChecksum
 14798 ;;		_MACPutArray
 14799 ;;		_MACPutHeader
 14800 ;;		_SwapIPHeader
 14801 ;; This function is called by:
 14802 ;;		_ICMPProcess
 14803 ;;		_UDPFlush
 14804 ;; This function uses a non-reentrant model
 14805 ;;
 14806                           
 14807                           	psect	text83
 14808  003A2A                     __ptext83:
 14809                           	opt stack 0
 14810  003A2A                     _IPPutHeader:
 14811                           	opt stack 20
 14812                           
 14813                           ; BSR set to: 0
 14814                           ;ip.c: 212: IP_HEADER header;
 14815                           ;ip.c: 214: IPHeaderLen = sizeof (IP_HEADER);
 14816                           
 14817                           ;incstack = 0
 14818  003A2A  0E14               	movlw	20
 14819  003A2C  6FCD               	movwf	_IPHeaderLen& (0+255),b
 14820                           
 14821                           ;ip.c: 216: header.VersionIHL = (0x40u) | (0x05);
 14822  003A2E  0E45               	movlw	69
 14823  003A30  6F65               	movwf	IPPutHeader@header& (0+255),b
 14824                           
 14825                           ; BSR set to: 0
 14826                           ;ip.c: 217: header.TypeOfService = ((0x00) | (0x00));
 14827  003A32  6B66               	clrf	(IPPutHeader@header+1)& (0+255),b
 14828                           
 14829                           ; BSR set to: 0
 14830                           ;ip.c: 218: header.TotalLength = sizeof (header) + len;
 14831  003A34  0E14               	movlw	20
 14832  003A36  2563               	addwf	IPPutHeader@len& (0+255),w,b
 14833  003A38  6F67               	movwf	(IPPutHeader@header+2)& (0+255),b
 14834  003A3A  0E00               	movlw	0
 14835  003A3C  2164               	addwfc	(IPPutHeader@len+1)& (0+255),w,b
 14836  003A3E  6F68               	movwf	(IPPutHeader@header+3)& (0+255),b
 14837                           
 14838                           ; BSR set to: 0
 14839                           ;ip.c: 219: header.Identification = ++_Identifier;
 14840  003A40  0101               	movlb	1	; () banked
 14841  003A42  4B6A               	infsnz	__Identifier& (0+255),f,b
 14842  003A44  2B6B               	incf	(__Identifier+1)& (0+255),f,b
 14843  003A46  C16A  F069         	movff	__Identifier,IPPutHeader@header+4
 14844  003A4A  C16B  F06A         	movff	__Identifier+1,IPPutHeader@header+5
 14845                           
 14846                           ; BSR set to: 1
 14847                           ;ip.c: 220: header.FragmentInfo = 0;
 14848  003A4E  0100               	movlb	0	; () banked
 14849  003A50  6B6B               	clrf	(IPPutHeader@header+6)& (0+255),b
 14850  003A52  6B6C               	clrf	(IPPutHeader@header+7)& (0+255),b
 14851                           
 14852                           ; BSR set to: 0
 14853                           ;ip.c: 221: header.TimeToLive = (100);
 14854  003A54  0E64               	movlw	100
 14855  003A56  6F6D               	movwf	(IPPutHeader@header+8)& (0+255),b
 14856                           
 14857                           ; BSR set to: 0
 14858                           ;ip.c: 222: header.Protocol = protocol;
 14859  003A58  C062  F06E         	movff	IPPutHeader@protocol,IPPutHeader@header+9
 14860                           
 14861                           ; BSR set to: 0
 14862                           ;ip.c: 223: header.HeaderChecksum = 0;
 14863  003A5C  6B6F               	clrf	(IPPutHeader@header+10)& (0+255),b
 14864  003A5E  6B70               	clrf	(IPPutHeader@header+11)& (0+255),b
 14865                           
 14866                           ; BSR set to: 0
 14867                           ;ip.c: 224: header.SourceAddress = AppConfig.MyIPAddr;
 14868  003A60  C179  F071         	movff	_AppConfig,IPPutHeader@header+12
 14869  003A64  C17A  F072         	movff	_AppConfig+1,IPPutHeader@header+13
 14870  003A68  C17B  F073         	movff	_AppConfig+2,IPPutHeader@header+14
 14871  003A6C  C17C  F074         	movff	_AppConfig+3,IPPutHeader@header+15
 14872                           
 14873                           ; BSR set to: 0
 14874                           ;ip.c: 226: header.DestAddress.Val = remote->IPAddr.Val;
 14875  003A70  C060  FFD9         	movff	IPPutHeader@remote,fsr2l
 14876  003A74  C061  FFDA         	movff	IPPutHeader@remote+1,fsr2h
 14877  003A78  CFDE F075          	movff	postinc2,IPPutHeader@header+16
 14878  003A7C  CFDE F076          	movff	postinc2,IPPutHeader@header+17
 14879  003A80  CFDE F077          	movff	postinc2,IPPutHeader@header+18
 14880  003A84  CFDE F078          	movff	postinc2,IPPutHeader@header+19
 14881                           
 14882                           ; BSR set to: 0
 14883                           ;ip.c: 228: SwapIPHeader(&header);
 14884  003A88  0E65               	movlw	IPPutHeader@header& (0+255)
 14885  003A8A  EC34  F020         	call	_SwapIPHeader
 14886                           
 14887                           ;ip.c: 230: header.HeaderChecksum = CalcIPChecksum((uint8_t *) & header, sizeof (header)
      +                          );
 14888  003A8E  6A1D               	clrf	CalcIPChecksum@count+1,c
 14889  003A90  0E14               	movlw	20
 14890  003A92  6E1C               	movwf	CalcIPChecksum@count,c
 14891  003A94  0E65               	movlw	IPPutHeader@header& (0+255)
 14892  003A96  ECE6  F01E         	call	_CalcIPChecksum
 14893  003A9A  C01C  F06F         	movff	?_CalcIPChecksum,IPPutHeader@header+10
 14894  003A9E  C01D  F070         	movff	?_CalcIPChecksum+1,IPPutHeader@header+11
 14895                           
 14896                           ;ip.c: 232: MACPutHeader(&remote->MACAddr, (0x00u), (sizeof (header) + len));
 14897  003AA2  0E04               	movlw	4
 14898  003AA4  0100               	movlb	0	; () banked
 14899  003AA6  2560               	addwf	IPPutHeader@remote& (0+255),w,b
 14900  003AA8  6E20               	movwf	MACPutHeader@remote,c
 14901  003AAA  0E00               	movlw	0
 14902  003AAC  2161               	addwfc	(IPPutHeader@remote+1)& (0+255),w,b
 14903  003AAE  6E21               	movwf	MACPutHeader@remote+1,c
 14904  003AB0  6A22               	clrf	MACPutHeader@type,c
 14905  003AB2  0E14               	movlw	20
 14906  003AB4  2563               	addwf	IPPutHeader@len& (0+255),w,b
 14907  003AB6  6E23               	movwf	MACPutHeader@dataLen,c
 14908  003AB8  0E00               	movlw	0
 14909  003ABA  2164               	addwfc	(IPPutHeader@len+1)& (0+255),w,b
 14910  003ABC  6E24               	movwf	MACPutHeader@dataLen+1,c
 14911  003ABE  ECC1  F023         	call	_MACPutHeader	;wreg free
 14912                           
 14913                           ;ip.c: 233: MACPutArray((uint8_t *) & header, sizeof (header));
 14914  003AC2  0E65               	movlw	low IPPutHeader@header
 14915  003AC4  6E1C               	movwf	MACPutArray@val,c
 14916  003AC6  6A1D               	clrf	MACPutArray@val+1,c
 14917  003AC8  6A1F               	clrf	MACPutArray@len+1,c
 14918  003ACA  0E14               	movlw	20
 14919  003ACC  6E1E               	movwf	MACPutArray@len,c
 14920  003ACE  EF81  F028         	goto	l9014	;wreg free
 14921  003AD2                     __end_of_IPPutHeader:
 14922                           	opt stack 0
 14923                           tblptru	equ	0xFF8
 14924                           tblptrh	equ	0xFF7
 14925                           tblptrl	equ	0xFF6
 14926                           tablat	equ	0xFF5
 14927                           prodh	equ	0xFF4
 14928                           prodl	equ	0xFF3
 14929                           intcon	equ	0xFF2
 14930                           intcon2	equ	0xFF1
 14931                           postinc0	equ	0xFEE
 14932                           wreg	equ	0xFE8
 14933                           indf1	equ	0xFE7
 14934                           postinc1	equ	0xFE6
 14935                           postdec1	equ	0xFE5
 14936                           plusw1	equ	0xFE3
 14937                           fsr1h	equ	0xFE2
 14938                           fsr1l	equ	0xFE1
 14939                           indf2	equ	0xFDF
 14940                           postinc2	equ	0xFDE
 14941                           postdec2	equ	0xFDD
 14942                           plusw2	equ	0xFDB
 14943                           fsr2h	equ	0xFDA
 14944                           fsr2l	equ	0xFD9
 14945                           status	equ	0xFD8
 14946                           
 14947 ;; *************** function _SwapIPHeader *****************
 14948 ;; Defined at:
 14949 ;;		line 260 in file "../framework/tcpip/src/ip.c"
 14950 ;; Parameters:    Size  Location     Type
 14951 ;;  h               1    wreg     PTR struct _IP_HEADER
 14952 ;;		 -> IPPutHeader@header(20), IPGetHeader@header(20), 
 14953 ;; Auto vars:     Size  Location     Type
 14954 ;;  h               1   32[COMRAM] PTR struct _IP_HEADER
 14955 ;;		 -> IPPutHeader@header(20), IPGetHeader@header(20), 
 14956 ;; Return value:  Size  Location     Type
 14957 ;;		None               void
 14958 ;; Registers used:
 14959 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 14960 ;; Tracked objects:
 14961 ;;		On entry : F/0
 14962 ;;		On exit  : 0/0
 14963 ;;		Unchanged: 0/0
 14964 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14965 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14966 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14967 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14968 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14969 ;;Total ram usage:        1 bytes
 14970 ;; Hardware stack levels used:    1
 14971 ;; Hardware stack levels required when called:    7
 14972 ;; This function calls:
 14973 ;;		_swaps
 14974 ;; This function is called by:
 14975 ;;		_IPGetHeader
 14976 ;;		_IPPutHeader
 14977 ;; This function uses a non-reentrant model
 14978 ;;
 14979                           
 14980                           	psect	text84
 14981  004068                     __ptext84:
 14982                           	opt stack 0
 14983  004068                     _SwapIPHeader:
 14984                           	opt stack 21
 14985                           
 14986                           ;incstack = 0
 14987                           ;SwapIPHeader@h stored from wreg
 14988  004068  6E21               	movwf	SwapIPHeader@h,c
 14989                           
 14990                           ;ip.c: 262: h->TotalLength = swaps(h->TotalLength);
 14991  00406A  5021               	movf	SwapIPHeader@h,w,c
 14992  00406C  6ED9               	movwf	fsr2l,c
 14993  00406E  6ADA               	clrf	fsr2h,c
 14994  004070  0E02               	movlw	2
 14995  004072  26D9               	addwf	fsr2l,f,c
 14996  004074  CFDE F01C          	movff	postinc2,swaps@v
 14997  004078  CFDD F01D          	movff	postdec2,swaps@v+1
 14998  00407C  EC42  F029         	call	_swaps	;wreg free
 14999  004080  5021               	movf	SwapIPHeader@h,w,c
 15000  004082  6ED9               	movwf	fsr2l,c
 15001  004084  6ADA               	clrf	fsr2h,c
 15002  004086  0E02               	movlw	2
 15003  004088  26D9               	addwf	fsr2l,f,c
 15004  00408A  C01C  FFDE         	movff	?_swaps,postinc2
 15005  00408E  C01D  FFDD         	movff	?_swaps+1,postdec2
 15006                           
 15007                           ;ip.c: 263: h->Identification = swaps(h->Identification);
 15008  004092  5021               	movf	SwapIPHeader@h,w,c
 15009  004094  6ED9               	movwf	fsr2l,c
 15010  004096  6ADA               	clrf	fsr2h,c
 15011  004098  0E04               	movlw	4
 15012  00409A  26D9               	addwf	fsr2l,f,c
 15013  00409C  CFDE F01C          	movff	postinc2,swaps@v
 15014  0040A0  CFDD F01D          	movff	postdec2,swaps@v+1
 15015  0040A4  EC42  F029         	call	_swaps	;wreg free
 15016  0040A8  5021               	movf	SwapIPHeader@h,w,c
 15017  0040AA  6ED9               	movwf	fsr2l,c
 15018  0040AC  6ADA               	clrf	fsr2h,c
 15019  0040AE  0E04               	movlw	4
 15020  0040B0  26D9               	addwf	fsr2l,f,c
 15021  0040B2  C01C  FFDE         	movff	?_swaps,postinc2
 15022  0040B6  C01D  FFDD         	movff	?_swaps+1,postdec2
 15023                           
 15024                           ;ip.c: 264: h->HeaderChecksum = swaps(h->HeaderChecksum);
 15025  0040BA  5021               	movf	SwapIPHeader@h,w,c
 15026  0040BC  6ED9               	movwf	fsr2l,c
 15027  0040BE  6ADA               	clrf	fsr2h,c
 15028  0040C0  0E0A               	movlw	10
 15029  0040C2  26D9               	addwf	fsr2l,f,c
 15030  0040C4  CFDE F01C          	movff	postinc2,swaps@v
 15031  0040C8  CFDD F01D          	movff	postdec2,swaps@v+1
 15032  0040CC  EC42  F029         	call	_swaps	;wreg free
 15033  0040D0  5021               	movf	SwapIPHeader@h,w,c
 15034  0040D2  6ED9               	movwf	fsr2l,c
 15035  0040D4  6ADA               	clrf	fsr2h,c
 15036  0040D6  0E0A               	movlw	10
 15037  0040D8  26D9               	addwf	fsr2l,f,c
 15038  0040DA  C01C  FFDE         	movff	?_swaps,postinc2
 15039  0040DE  C01D  FFDD         	movff	?_swaps+1,postdec2
 15040  0040E2  0C0A               	retlw	10	;funcret
 15041  0040E4                     __end_of_SwapIPHeader:
 15042                           	opt stack 0
 15043                           tblptru	equ	0xFF8
 15044                           tblptrh	equ	0xFF7
 15045                           tblptrl	equ	0xFF6
 15046                           tablat	equ	0xFF5
 15047                           prodh	equ	0xFF4
 15048                           prodl	equ	0xFF3
 15049                           intcon	equ	0xFF2
 15050                           intcon2	equ	0xFF1
 15051                           postinc0	equ	0xFEE
 15052                           wreg	equ	0xFE8
 15053                           indf1	equ	0xFE7
 15054                           postinc1	equ	0xFE6
 15055                           postdec1	equ	0xFE5
 15056                           plusw1	equ	0xFE3
 15057                           fsr1h	equ	0xFE2
 15058                           fsr1l	equ	0xFE1
 15059                           indf2	equ	0xFDF
 15060                           postinc2	equ	0xFDE
 15061                           postdec2	equ	0xFDD
 15062                           plusw2	equ	0xFDB
 15063                           fsr2h	equ	0xFDA
 15064                           fsr2l	equ	0xFD9
 15065                           status	equ	0xFD8
 15066                           
 15067 ;; *************** function _CalcIPChecksum *****************
 15068 ;; Defined at:
 15069 ;;		line 1100 in file "../framework/tcpip/src/common/helpers.c"
 15070 ;; Parameters:    Size  Location     Type
 15071 ;;  buffer          1    wreg     PTR unsigned char 
 15072 ;;		 -> UDPProcess@pseudoHeader(12), UDPFlush@pseudoHeader(12), IPPutHeader@header(20), 
 15073 ;;  count           2   27[COMRAM] unsigned int 
 15074 ;; Auto vars:     Size  Location     Type
 15075 ;;  buffer          1   33[COMRAM] PTR unsigned char 
 15076 ;;		 -> UDPProcess@pseudoHeader(12), UDPFlush@pseudoHeader(12), IPPutHeader@header(20), 
 15077 ;;  sum             4   35[COMRAM] struct .
 15078 ;;  i               2   31[COMRAM] unsigned int 
 15079 ;;  val             1   34[COMRAM] PTR unsigned int 
 15080 ;;		 -> UDPProcess@pseudoHeader(12), UDPFlush@pseudoHeader(12), IPPutHeader@header(20), 
 15081 ;; Return value:  Size  Location     Type
 15082 ;;                  2   27[COMRAM] unsigned int 
 15083 ;; Registers used:
 15084 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 15085 ;; Tracked objects:
 15086 ;;		On entry : 0/0
 15087 ;;		On exit  : 0/0
 15088 ;;		Unchanged: 0/0
 15089 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15090 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15091 ;;      Locals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15092 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15093 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15094 ;;Total ram usage:       12 bytes
 15095 ;; Hardware stack levels used:    1
 15096 ;; Hardware stack levels required when called:    6
 15097 ;; This function calls:
 15098 ;;		Nothing
 15099 ;; This function is called by:
 15100 ;;		_IPPutHeader
 15101 ;;		_UDPFlush
 15102 ;;		_UDPProcess
 15103 ;; This function uses a non-reentrant model
 15104 ;;
 15105                           
 15106                           	psect	text85
 15107  003DCC                     __ptext85:
 15108                           	opt stack 0
 15109  003DCC                     _CalcIPChecksum:
 15110                           	opt stack 22
 15111                           
 15112                           ;incstack = 0
 15113                           ;CalcIPChecksum@buffer stored from wreg
 15114  003DCC  6E22               	movwf	CalcIPChecksum@buffer,c
 15115                           
 15116                           ;helpers.c: 1102: uint16_t i;
 15117                           ;helpers.c: 1103: uint16_t *val;
 15118                           ;helpers.c: 1105: union {
 15119                           ;helpers.c: 1106: uint16_t w[2];
 15120                           ;helpers.c: 1107: uint32_t dw;
 15121                           ;helpers.c: 1108: } sum;
 15122                           ;helpers.c: 1110: i = count >> 1;
 15123  003DCE  90D8               	bcf	status,0,c
 15124  003DD0  301D               	rrcf	CalcIPChecksum@count+1,w,c
 15125  003DD2  6E1E               	movwf	??_CalcIPChecksum& (0+255),c
 15126  003DD4  301C               	rrcf	CalcIPChecksum@count,w,c
 15127  003DD6  6E20               	movwf	CalcIPChecksum@i,c
 15128  003DD8  C01E  F021         	movff	??_CalcIPChecksum,CalcIPChecksum@i+1
 15129                           
 15130                           ;helpers.c: 1111: val = (uint16_t*) buffer;
 15131  003DDC  C022  F023         	movff	CalcIPChecksum@buffer,CalcIPChecksum@val
 15132                           
 15133                           ;helpers.c: 1114: sum.dw = 0x00000000ul;
 15134  003DE0  6A24               	clrf	CalcIPChecksum@sum,c
 15135  003DE2  6A25               	clrf	CalcIPChecksum@sum+1,c
 15136  003DE4  6A26               	clrf	CalcIPChecksum@sum+2,c
 15137  003DE6  6A27               	clrf	CalcIPChecksum@sum+3,c
 15138                           
 15139                           ;helpers.c: 1115: while (i--)
 15140  003DE8  D010               	goto	l9028
 15141  003DEA                     l9024:
 15142                           
 15143                           ;helpers.c: 1116: sum.dw += (uint32_t) * val++;
 15144  003DEA  5023               	movf	CalcIPChecksum@val,w,c
 15145  003DEC  6ED9               	movwf	fsr2l,c
 15146  003DEE  6ADA               	clrf	fsr2h,c
 15147  003DF0  CFDE F01E          	movff	postinc2,??_CalcIPChecksum
 15148  003DF4  CFDD F01F          	movff	postdec2,??_CalcIPChecksum+1
 15149  003DF8  501E               	movf	??_CalcIPChecksum,w,c
 15150  003DFA  2624               	addwf	CalcIPChecksum@sum,f,c
 15151  003DFC  501F               	movf	??_CalcIPChecksum+1,w,c
 15152  003DFE  2225               	addwfc	CalcIPChecksum@sum+1,f,c
 15153  003E00  0E00               	movlw	0
 15154  003E02  2226               	addwfc	CalcIPChecksum@sum+2,f,c
 15155  003E04  2227               	addwfc	CalcIPChecksum@sum+3,f,c
 15156  003E06  0E02               	movlw	2
 15157  003E08  2623               	addwf	CalcIPChecksum@val,f,c
 15158  003E0A                     l9028:
 15159  003E0A  0620               	decf	CalcIPChecksum@i,f,c
 15160  003E0C  A0D8               	btfss	status,0,c
 15161  003E0E  0621               	decf	CalcIPChecksum@i+1,f,c
 15162  003E10  2820               	incf	CalcIPChecksum@i,w,c
 15163  003E12  E1EB               	bnz	l9024
 15164  003E14  2821               	incf	CalcIPChecksum@i+1,w,c
 15165  003E16  E1E9               	bnz	l9024
 15166                           
 15167                           ;helpers.c: 1119: if (count & 0x1)
 15168  003E18  A01C               	btfss	CalcIPChecksum@count,0,c
 15169  003E1A  D009               	goto	l9032
 15170                           
 15171                           ;helpers.c: 1120: sum.dw += (uint32_t)*(uint8_t *) val;
 15172  003E1C  5023               	movf	CalcIPChecksum@val,w,c
 15173  003E1E  6ED9               	movwf	fsr2l,c
 15174  003E20  6ADA               	clrf	fsr2h,c
 15175  003E22  50DF               	movf	indf2,w,c
 15176  003E24  2624               	addwf	CalcIPChecksum@sum,f,c
 15177  003E26  0E00               	movlw	0
 15178  003E28  2225               	addwfc	CalcIPChecksum@sum+1,f,c
 15179  003E2A  2226               	addwfc	CalcIPChecksum@sum+2,f,c
 15180  003E2C  2227               	addwfc	CalcIPChecksum@sum+3,f,c
 15181  003E2E                     l9032:
 15182                           
 15183                           ;helpers.c: 1123: sum.dw = (uint32_t) sum.w[0] + (uint32_t) sum.w[1];
 15184  003E2E  5024               	movf	CalcIPChecksum@sum,w,c
 15185  003E30  2426               	addwf	CalcIPChecksum@sum+2,w,c
 15186  003E32  6E24               	movwf	CalcIPChecksum@sum,c
 15187  003E34  5025               	movf	CalcIPChecksum@sum+1,w,c
 15188  003E36  2027               	addwfc	CalcIPChecksum@sum+3,w,c
 15189  003E38  6E25               	movwf	CalcIPChecksum@sum+1,c
 15190  003E3A  6A26               	clrf	CalcIPChecksum@sum+2,c
 15191  003E3C  B0D8               	btfsc	status,0,c
 15192  003E3E  2A26               	incf	CalcIPChecksum@sum+2,f,c
 15193  003E40  6A27               	clrf	CalcIPChecksum@sum+3,c
 15194                           
 15195                           ;helpers.c: 1127: sum.w[0] += sum.w[1];
 15196  003E42  EE20  F026         	lfsr	2,CalcIPChecksum@sum+2
 15197  003E46  50DE               	movf	postinc2,w,c
 15198  003E48  2624               	addwf	CalcIPChecksum@sum,f,c
 15199  003E4A  50DD               	movf	postdec2,w,c
 15200  003E4C  2225               	addwfc	CalcIPChecksum@sum+1,f,c
 15201                           
 15202                           ;helpers.c: 1130: return ~sum.w[0];
 15203  003E4E  1C24               	comf	CalcIPChecksum@sum,w,c
 15204  003E50  6E1C               	movwf	?_CalcIPChecksum,c
 15205  003E52  1C25               	comf	CalcIPChecksum@sum+1,w,c
 15206  003E54  6E1D               	movwf	?_CalcIPChecksum+1,c
 15207  003E56  0012               	return		;funcret
 15208  003E58                     __end_of_CalcIPChecksum:
 15209                           	opt stack 0
 15210                           tblptru	equ	0xFF8
 15211                           tblptrh	equ	0xFF7
 15212                           tblptrl	equ	0xFF6
 15213                           tablat	equ	0xFF5
 15214                           prodh	equ	0xFF4
 15215                           prodl	equ	0xFF3
 15216                           intcon	equ	0xFF2
 15217                           intcon2	equ	0xFF1
 15218                           postinc0	equ	0xFEE
 15219                           wreg	equ	0xFE8
 15220                           indf1	equ	0xFE7
 15221                           postinc1	equ	0xFE6
 15222                           postdec1	equ	0xFE5
 15223                           plusw1	equ	0xFE3
 15224                           fsr1h	equ	0xFE2
 15225                           fsr1l	equ	0xFE1
 15226                           indf2	equ	0xFDF
 15227                           postinc2	equ	0xFDE
 15228                           postdec2	equ	0xFDD
 15229                           plusw2	equ	0xFDB
 15230                           fsr2h	equ	0xFDA
 15231                           fsr2l	equ	0xFD9
 15232                           status	equ	0xFD8
 15233                           
 15234 ;; *************** function _CalcIPBufferChecksum *****************
 15235 ;; Defined at:
 15236 ;;		line 785 in file "../framework/tcpip/src/eth97j60.c"
 15237 ;; Parameters:    Size  Location     Type
 15238 ;;  len             2   34[COMRAM] unsigned int 
 15239 ;; Auto vars:     Size  Location     Type
 15240 ;;  DataBuffer     20    0[BANK0 ] unsigned char [20]
 15241 ;;  Checksum        4   23[BANK0 ] struct .
 15242 ;;  ChunkLen        2   27[BANK0 ] unsigned int 
 15243 ;;  Start           2   20[BANK0 ] unsigned int 
 15244 ;;  DataPtr         1   22[BANK0 ] PTR unsigned int 
 15245 ;;		 -> CalcIPBufferChecksum@DataBuffer(20), 
 15246 ;; Return value:  Size  Location     Type
 15247 ;;                  2   34[COMRAM] unsigned int 
 15248 ;; Registers used:
 15249 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 15250 ;; Tracked objects:
 15251 ;;		On entry : 0/1
 15252 ;;		On exit  : F/0
 15253 ;;		Unchanged: 0/0
 15254 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15255 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15256 ;;      Locals:         0      29       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15257 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15258 ;;      Totals:         4      29       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15259 ;;Total ram usage:       33 bytes
 15260 ;; Hardware stack levels used:    1
 15261 ;; Hardware stack levels required when called:    7
 15262 ;; This function calls:
 15263 ;;		_MACGetArray
 15264 ;; This function is called by:
 15265 ;;		_UDPFlush
 15266 ;;		_UDPProcess
 15267 ;;		_MACCalcRxChecksum
 15268 ;; This function uses a non-reentrant model
 15269 ;;
 15270                           
 15271                           	psect	text86
 15272  003152                     __ptext86:
 15273                           	opt stack 0
 15274  003152                     _CalcIPBufferChecksum:
 15275                           	opt stack 21
 15276                           
 15277                           ;eth97j60.c: 787: uint16_t Start;
 15278                           ;eth97j60.c: 788: TCPIP_UINT32_VAL Checksum = {0x00000000ul};
 15279                           
 15280                           ;incstack = 0
 15281  003152  C11C  F077         	movff	CalcIPBufferChecksum@F7587,CalcIPBufferChecksum@Checksum
 15282  003156  C11D  F078         	movff	CalcIPBufferChecksum@F7587+1,CalcIPBufferChecksum@Checksum+1
 15283  00315A  C11E  F079         	movff	CalcIPBufferChecksum@F7587+2,CalcIPBufferChecksum@Checksum+2
 15284  00315E  C11F  F07A         	movff	CalcIPBufferChecksum@F7587+3,CalcIPBufferChecksum@Checksum+3
 15285                           
 15286                           ;eth97j60.c: 789: uint16_t ChunkLen;
 15287                           ;eth97j60.c: 790: uint8_t DataBuffer[20];
 15288                           ;eth97j60.c: 791: uint16_t *DataPtr;
 15289                           ;eth97j60.c: 794: Start = ERDPT;
 15290  003162  CF7A F074          	movff	3962,CalcIPBufferChecksum@Start	;volatile
 15291  003166  CF7B F075          	movff	3963,CalcIPBufferChecksum@Start+1	;volatile
 15292                           
 15293                           ;eth97j60.c: 796: while(len)
 15294  00316A  D03E               	goto	l9206
 15295  00316C                     l9180:
 15296                           
 15297                           ;eth97j60.c: 797: {
 15298                           ;eth97j60.c: 800: ChunkLen = len > sizeof(DataBuffer) ? sizeof(DataBuffer) : len;
 15299  00316C  5024               	movf	CalcIPBufferChecksum@len+1,w,c
 15300  00316E  E108               	bnz	l9184
 15301  003170  0E15               	movlw	21
 15302  003172  5C23               	subwf	CalcIPBufferChecksum@len,w,c
 15303  003174  E205               	bc	l9184
 15304  003176  C023  F07B         	movff	CalcIPBufferChecksum@len,CalcIPBufferChecksum@ChunkLen
 15305  00317A  C024  F07C         	movff	CalcIPBufferChecksum@len+1,CalcIPBufferChecksum@ChunkLen+1
 15306  00317E  D004               	goto	l9186
 15307  003180                     l9184:
 15308  003180  0100               	movlb	0	; () banked
 15309  003182  6B7C               	clrf	(CalcIPBufferChecksum@ChunkLen+1)& (0+255),b
 15310  003184  0E14               	movlw	20
 15311  003186  6F7B               	movwf	CalcIPBufferChecksum@ChunkLen& (0+255),b
 15312  003188                     l9186:
 15313                           
 15314                           ;eth97j60.c: 801: MACGetArray(DataBuffer, ChunkLen);
 15315  003188  0E60               	movlw	low CalcIPBufferChecksum@DataBuffer
 15316  00318A  6E1C               	movwf	MACGetArray@val,c
 15317  00318C  6A1D               	clrf	MACGetArray@val+1,c
 15318  00318E  C07B  F01E         	movff	CalcIPBufferChecksum@ChunkLen,MACGetArray@len
 15319  003192  C07C  F01F         	movff	CalcIPBufferChecksum@ChunkLen+1,MACGetArray@len+1
 15320  003196  EC85  F025         	call	_MACGetArray	;wreg free
 15321                           
 15322                           ;eth97j60.c: 803: len -= ChunkLen;
 15323  00319A  0100               	movlb	0	; () banked
 15324  00319C  517B               	movf	CalcIPBufferChecksum@ChunkLen& (0+255),w,b
 15325  00319E  5E23               	subwf	CalcIPBufferChecksum@len,f,c
 15326  0031A0  517C               	movf	(CalcIPBufferChecksum@ChunkLen+1)& (0+255),w,b
 15327  0031A2  5A24               	subwfb	CalcIPBufferChecksum@len+1,f,c
 15328                           
 15329                           ; BSR set to: 0
 15330                           ;eth97j60.c: 806: if(((TCPIP_UINT16_VAL*)&ChunkLen)->bits.b0)
 15331  0031A4  A17B               	btfss	CalcIPBufferChecksum@ChunkLen& (0+255),0,b
 15332  0031A6  D007               	goto	l9196
 15333                           
 15334                           ; BSR set to: 0
 15335                           ;eth97j60.c: 807: {
 15336                           ;eth97j60.c: 808: DataBuffer[ChunkLen] = 0x00;
 15337  0031A8  517B               	movf	CalcIPBufferChecksum@ChunkLen& (0+255),w,b
 15338  0031AA  0F60               	addlw	low CalcIPBufferChecksum@DataBuffer
 15339  0031AC  6ED9               	movwf	fsr2l,c
 15340  0031AE  6ADA               	clrf	fsr2h,c
 15341  0031B0  6ADF               	clrf	indf2,c
 15342                           
 15343                           ; BSR set to: 0
 15344                           ;eth97j60.c: 809: ChunkLen++;
 15345  0031B2  4B7B               	infsnz	CalcIPBufferChecksum@ChunkLen& (0+255),f,b
 15346  0031B4  2B7C               	incf	(CalcIPBufferChecksum@ChunkLen+1)& (0+255),f,b
 15347  0031B6                     l9196:
 15348                           
 15349                           ; BSR set to: 0
 15350                           ;eth97j60.c: 810: }
 15351                           ;eth97j60.c: 813: DataPtr = (uint16_t*)&DataBuffer[0];
 15352  0031B6  0E60               	movlw	low CalcIPBufferChecksum@DataBuffer
 15353  0031B8  6F76               	movwf	CalcIPBufferChecksum@DataPtr& (0+255),b
 15354                           
 15355                           ;eth97j60.c: 814: while(ChunkLen)
 15356  0031BA  D013               	goto	l9204
 15357  0031BC                     l9198:
 15358                           
 15359                           ; BSR set to: 0
 15360                           ;eth97j60.c: 815: {
 15361                           ;eth97j60.c: 816: Checksum.Val += *DataPtr++;
 15362  0031BC  5176               	movf	CalcIPBufferChecksum@DataPtr& (0+255),w,b
 15363  0031BE  6ED9               	movwf	fsr2l,c
 15364  0031C0  6ADA               	clrf	fsr2h,c
 15365  0031C2  CFDE F025          	movff	postinc2,??_CalcIPBufferChecksum
 15366  0031C6  CFDD F026          	movff	postdec2,??_CalcIPBufferChecksum+1
 15367  0031CA  5025               	movf	??_CalcIPBufferChecksum,w,c
 15368  0031CC  2777               	addwf	CalcIPBufferChecksum@Checksum& (0+255),f,b
 15369  0031CE  5026               	movf	??_CalcIPBufferChecksum+1,w,c
 15370  0031D0  2378               	addwfc	(CalcIPBufferChecksum@Checksum+1)& (0+255),f,b
 15371  0031D2  0E00               	movlw	0
 15372  0031D4  2379               	addwfc	(CalcIPBufferChecksum@Checksum+2)& (0+255),f,b
 15373  0031D6  237A               	addwfc	(CalcIPBufferChecksum@Checksum+3)& (0+255),f,b
 15374                           
 15375                           ; BSR set to: 0
 15376  0031D8  0E02               	movlw	2
 15377  0031DA  2776               	addwf	CalcIPBufferChecksum@DataPtr& (0+255),f,b
 15378                           
 15379                           ; BSR set to: 0
 15380                           ;eth97j60.c: 817: ChunkLen -= 2;
 15381  0031DC  5F7B               	subwf	CalcIPBufferChecksum@ChunkLen& (0+255),f,b
 15382  0031DE  0E00               	movlw	0
 15383  0031E0  5B7C               	subwfb	(CalcIPBufferChecksum@ChunkLen+1)& (0+255),f,b
 15384  0031E2                     l9204:
 15385                           
 15386                           ; BSR set to: 0
 15387  0031E2  517B               	movf	CalcIPBufferChecksum@ChunkLen& (0+255),w,b
 15388  0031E4  117C               	iorwf	(CalcIPBufferChecksum@ChunkLen+1)& (0+255),w,b
 15389  0031E6  E1EA               	bnz	l9198
 15390  0031E8                     l9206:
 15391  0031E8  5023               	movf	CalcIPBufferChecksum@len,w,c
 15392  0031EA  1024               	iorwf	CalcIPBufferChecksum@len+1,w,c
 15393  0031EC  E1BF               	bnz	l9180
 15394                           
 15395                           ;eth97j60.c: 818: }
 15396                           ;eth97j60.c: 819: }
 15397                           ;eth97j60.c: 822: ERDPT = Start;
 15398  0031EE  C074  FF7A         	movff	CalcIPBufferChecksum@Start,3962	;volatile
 15399  0031F2  C075  FF7B         	movff	CalcIPBufferChecksum@Start+1,3963	;volatile
 15400                           
 15401                           ;eth97j60.c: 825: Checksum.Val = (uint32_t)Checksum.w[0] + (uint32_t)Checksum.w[1];
 15402  0031F6  0100               	movlb	0	; () banked
 15403  0031F8  5177               	movf	CalcIPBufferChecksum@Checksum& (0+255),w,b
 15404  0031FA  2579               	addwf	(CalcIPBufferChecksum@Checksum+2)& (0+255),w,b
 15405  0031FC  6F77               	movwf	CalcIPBufferChecksum@Checksum& (0+255),b
 15406  0031FE  5178               	movf	(CalcIPBufferChecksum@Checksum+1)& (0+255),w,b
 15407  003200  217A               	addwfc	(CalcIPBufferChecksum@Checksum+3)& (0+255),w,b
 15408  003202  6F78               	movwf	(CalcIPBufferChecksum@Checksum+1)& (0+255),b
 15409  003204  6B79               	clrf	(CalcIPBufferChecksum@Checksum+2)& (0+255),b
 15410  003206  B0D8               	btfsc	status,0,c
 15411  003208  2B79               	incf	(CalcIPBufferChecksum@Checksum+2)& (0+255),f,b
 15412  00320A  6B7A               	clrf	(CalcIPBufferChecksum@Checksum+3)& (0+255),b
 15413                           
 15414                           ; BSR set to: 0
 15415                           ;eth97j60.c: 829: Checksum.w[0] += Checksum.w[1];
 15416  00320C  EE20  F079         	lfsr	2,CalcIPBufferChecksum@Checksum+2
 15417  003210  50DE               	movf	postinc2,w,c
 15418  003212  2777               	addwf	CalcIPBufferChecksum@Checksum& (0+255),f,b
 15419  003214  50DD               	movf	postdec2,w,c
 15420  003216  2378               	addwfc	(CalcIPBufferChecksum@Checksum+1)& (0+255),f,b
 15421                           
 15422                           ; BSR set to: 0
 15423                           ;eth97j60.c: 832: return ~Checksum.w[0];
 15424  003218  1D77               	comf	CalcIPBufferChecksum@Checksum& (0+255),w,b
 15425  00321A  6E23               	movwf	?_CalcIPBufferChecksum,c
 15426  00321C  1D78               	comf	(CalcIPBufferChecksum@Checksum+1)& (0+255),w,b
 15427  00321E  6E24               	movwf	?_CalcIPBufferChecksum+1,c
 15428                           
 15429                           ; BSR set to: 0
 15430  003220  0012               	return		;funcret
 15431  003222                     __end_of_CalcIPBufferChecksum:
 15432                           	opt stack 0
 15433                           tblptru	equ	0xFF8
 15434                           tblptrh	equ	0xFF7
 15435                           tblptrl	equ	0xFF6
 15436                           tablat	equ	0xFF5
 15437                           prodh	equ	0xFF4
 15438                           prodl	equ	0xFF3
 15439                           intcon	equ	0xFF2
 15440                           intcon2	equ	0xFF1
 15441                           postinc0	equ	0xFEE
 15442                           wreg	equ	0xFE8
 15443                           indf1	equ	0xFE7
 15444                           postinc1	equ	0xFE6
 15445                           postdec1	equ	0xFE5
 15446                           plusw1	equ	0xFE3
 15447                           fsr1h	equ	0xFE2
 15448                           fsr1l	equ	0xFE1
 15449                           indf2	equ	0xFDF
 15450                           postinc2	equ	0xFDE
 15451                           postdec2	equ	0xFDD
 15452                           plusw2	equ	0xFDB
 15453                           fsr2h	equ	0xFDA
 15454                           fsr2l	equ	0xFD9
 15455                           status	equ	0xFD8
 15456                           
 15457 ;; *************** function __DHCPReceive *****************
 15458 ;; Defined at:
 15459 ;;		line 695 in file "../framework/tcpip/src/dhcp_client.c"
 15460 ;; Parameters:    Size  Location     Type
 15461 ;;		None
 15462 ;; Auto vars:     Size  Location     Type
 15463 ;;  tempServerID    4    7[BANK0 ] unsigned long 
 15464 ;;  v               1   12[BANK0 ] unsigned char 
 15465 ;;  i               1   11[BANK0 ] unsigned char 
 15466 ;;  j               1    6[BANK0 ] unsigned char 
 15467 ;;  type            1    5[BANK0 ] unsigned char 
 15468 ;;  lbDone          1    4[BANK0 ] unsigned char 
 15469 ;; Return value:  Size  Location     Type
 15470 ;;                  1    wreg      unsigned char 
 15471 ;; Registers used:
 15472 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 15473 ;; Tracked objects:
 15474 ;;		On entry : 0/0
 15475 ;;		On exit  : 0/0
 15476 ;;		Unchanged: 0/0
 15477 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15478 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15479 ;;      Locals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15480 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15481 ;;      Totals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15482 ;;Total ram usage:       13 bytes
 15483 ;; Hardware stack levels used:    1
 15484 ;; Hardware stack levels required when called:    9
 15485 ;; This function calls:
 15486 ;;		_UDPDiscard
 15487 ;;		_UDPGet
 15488 ;;		_UDPGetArray
 15489 ;;		_UDPSetRxBuffer
 15490 ;; This function is called by:
 15491 ;;		_DHCPTask
 15492 ;; This function uses a non-reentrant model
 15493 ;;
 15494                           
 15495                           	psect	text87
 15496  001C5A                     __ptext87:
 15497                           	opt stack 0
 15498  001C5A                     __DHCPReceive:
 15499                           	opt stack 19
 15500                           
 15501                           ;dhcp_client.c: 733: uint8_t v;
 15502                           ;dhcp_client.c: 734: uint8_t i, j;
 15503                           ;dhcp_client.c: 735: uint8_t type;
 15504                           ;dhcp_client.c: 736: bool lbDone;
 15505                           ;dhcp_client.c: 737: uint32_t tempServerID;
 15506                           ;dhcp_client.c: 740: type = (0u);
 15507                           
 15508                           ; BSR set to: 0
 15509                           ;incstack = 0
 15510  001C5A  0100               	movlb	0	; () banked
 15511  001C5C  6B65               	clrf	__DHCPReceive@type& (0+255),b
 15512                           
 15513                           ; BSR set to: 0
 15514                           ;dhcp_client.c: 742: UDPGet(&v);
 15515  001C5E  0E6C               	movlw	__DHCPReceive@v& (0+255)
 15516  001C60  ECFB  F027         	call	_UDPGet
 15517                           
 15518                           ;dhcp_client.c: 745: if (v == (2u)) {
 15519  001C64  0E02               	movlw	2
 15520  001C66  0100               	movlb	0	; () banked
 15521  001C68  196C               	xorwf	__DHCPReceive@v& (0+255),w,b
 15522  001C6A  E001 D10E          	bnz	l9778
 15523                           
 15524                           ; BSR set to: 0
 15525                           ;dhcp_client.c: 749: UDPSetRxBuffer(28);
 15526  001C6E  6A25               	clrf	UDPSetRxBuffer@wOffset+1,c
 15527  001C70  0E1C               	movlw	28
 15528  001C72  6E24               	movwf	UDPSetRxBuffer@wOffset,c
 15529  001C74  ECA2  F029         	call	_UDPSetRxBuffer	;wreg free
 15530                           
 15531                           ; BSR set to: 1
 15532                           ;dhcp_client.c: 750: for (i = 0; i < 6u; i++) {
 15533  001C78  0100               	movlb	0	; () banked
 15534  001C7A  6B6B               	clrf	__DHCPReceive@i& (0+255),b
 15535  001C7C                     l9654:
 15536                           
 15537                           ; BSR set to: 0
 15538                           ;dhcp_client.c: 751: UDPGet(&v);
 15539  001C7C  0E6C               	movlw	__DHCPReceive@v& (0+255)
 15540  001C7E  ECFB  F027         	call	_UDPGet
 15541                           
 15542                           ;dhcp_client.c: 752: if (v != AppConfig.MyMACAddr.v[i])
 15543  001C82  0EA6               	movlw	low (_AppConfig+45)
 15544  001C84  0100               	movlb	0	; () banked
 15545  001C86  256B               	addwf	__DHCPReceive@i& (0+255),w,b
 15546  001C88  6ED9               	movwf	fsr2l,c
 15547  001C8A  6ADA               	clrf	fsr2h,c
 15548  001C8C  0E01               	movlw	high (_AppConfig+45)
 15549  001C8E  22DA               	addwfc	fsr2h,f,c
 15550  001C90  516C               	movf	__DHCPReceive@v& (0+255),w,b
 15551  001C92  18DE               	xorwf	postinc2,w,c
 15552  001C94  E001 D119          	bnz	l9792
 15553                           
 15554                           ; BSR set to: 0
 15555  001C98  2B6B               	incf	__DHCPReceive@i& (0+255),f,b
 15556                           
 15557                           ; BSR set to: 0
 15558  001C9A  0E05               	movlw	5
 15559  001C9C  656B               	cpfsgt	__DHCPReceive@i& (0+255),b
 15560  001C9E  D7EE               	goto	l9654
 15561                           
 15562                           ; BSR set to: 0
 15563                           ;dhcp_client.c: 754: }
 15564                           ;dhcp_client.c: 759: if (!DHCPClient.flags.bits.bOfferReceived) {
 15565  001CA0  B5DB               	btfsc	(_DHCPClient+2)& (0+255),2,b
 15566  001CA2  D00F               	goto	l9670
 15567                           
 15568                           ; BSR set to: 0
 15569                           ;dhcp_client.c: 760: UDPSetRxBuffer(16);
 15570  001CA4  6A25               	clrf	UDPSetRxBuffer@wOffset+1,c
 15571  001CA6  0E10               	movlw	16
 15572  001CA8  6E24               	movwf	UDPSetRxBuffer@wOffset,c
 15573  001CAA  ECA2  F029         	call	_UDPSetRxBuffer	;wreg free
 15574                           
 15575                           ; BSR set to: 1
 15576                           ;dhcp_client.c: 761: UDPGetArray((uint8_t *) & DHCPClient.tempIPAddress, sizeof (DHCPCli
      +                          ent.tempIPAddress));
 15577  001CAE  0EEC               	movlw	low (_DHCPClient+19)
 15578  001CB0  6E23               	movwf	UDPGetArray@cData,c
 15579  001CB2  6A24               	clrf	UDPGetArray@cData+1,c
 15580  001CB4  6A26               	clrf	UDPGetArray@wDataLen+1,c
 15581  001CB6  0E04               	movlw	4
 15582  001CB8  6E25               	movwf	UDPGetArray@wDataLen,c
 15583  001CBA  EC8D  F021         	call	_UDPGetArray	;wreg free
 15584                           
 15585                           ;dhcp_client.c: 762: DHCPClient.validValues.bits.IPAddress = 1;
 15586  001CBE  0100               	movlb	0	; () banked
 15587  001CC0  81F8               	bsf	(_DHCPClient+31)& (0+255),0,b
 15588  001CC2                     l9670:
 15589                           
 15590                           ; BSR set to: 0
 15591                           ;dhcp_client.c: 763: }
 15592                           ;dhcp_client.c: 768: UDPSetRxBuffer(240);
 15593  001CC2  6A25               	clrf	UDPSetRxBuffer@wOffset+1,c
 15594  001CC4  0EF0               	movlw	240
 15595  001CC6  6E24               	movwf	UDPSetRxBuffer@wOffset,c
 15596  001CC8  ECA2  F029         	call	_UDPSetRxBuffer	;wreg free
 15597                           
 15598                           ; BSR set to: 1
 15599                           ;dhcp_client.c: 770: lbDone = 0;
 15600  001CCC  0100               	movlb	0	; () banked
 15601  001CCE  6B64               	clrf	__DHCPReceive@lbDone& (0+255),b
 15602  001CD0                     l1484:
 15603                           
 15604                           ; BSR set to: 0
 15605                           ;dhcp_client.c: 775: if (!UDPGet(&v)) {
 15606  001CD0  0E6C               	movlw	__DHCPReceive@v& (0+255)
 15607  001CD2  ECFB  F027         	call	_UDPGet
 15608  001CD6  0900               	iorlw	0
 15609  001CD8  E001 D0C1          	bnz	l9774
 15610                           
 15611                           ;dhcp_client.c: 777: break;
 15612  001CDC  D0D6               	goto	l9778
 15613  001CDE                     l9676:
 15614                           
 15615                           ; BSR set to: 0
 15616                           ;dhcp_client.c: 782: UDPGet(&v);
 15617  001CDE  0E6C               	movlw	__DHCPReceive@v& (0+255)
 15618  001CE0  ECFB  F027         	call	_UDPGet
 15619                           
 15620                           ;dhcp_client.c: 784: if (v == 1u) {
 15621  001CE4  0100               	movlb	0	; () banked
 15622  001CE6  056C               	decf	__DHCPReceive@v& (0+255),w,b
 15623  001CE8  E001 D0EF          	bnz	l9792
 15624                           
 15625                           ; BSR set to: 0
 15626                           ;dhcp_client.c: 785: UDPGet(&type);
 15627  001CEC  0E65               	movlw	__DHCPReceive@type& (0+255)
 15628  001CEE  ECFB  F027         	call	_UDPGet
 15629                           
 15630                           ;dhcp_client.c: 788: if (DHCPClient.flags.bits.bOfferReceived && (type == (2u))) {
 15631  001CF2  0100               	movlb	0	; () banked
 15632  001CF4  A5DB               	btfss	(_DHCPClient+2)& (0+255),2,b
 15633  001CF6  D0C5               	goto	l9776
 15634                           
 15635                           ; BSR set to: 0
 15636  001CF8  0E02               	movlw	2
 15637  001CFA  1965               	xorwf	__DHCPReceive@type& (0+255),w,b
 15638  001CFC  E101 D0E5          	bz	l9792
 15639  001D00  D0C0               	goto	l9776
 15640  001D02                     l9688:
 15641                           
 15642                           ; BSR set to: 0
 15643                           ;dhcp_client.c: 796: UDPGet(&v);
 15644  001D02  0E6C               	movlw	__DHCPReceive@v& (0+255)
 15645  001D04  ECFB  F027         	call	_UDPGet
 15646                           
 15647                           ;dhcp_client.c: 798: if (v == 4u) {
 15648  001D08  0E04               	movlw	4
 15649  001D0A  0100               	movlb	0	; () banked
 15650  001D0C  196C               	xorwf	__DHCPReceive@v& (0+255),w,b
 15651  001D0E  E001 D0DC          	bnz	l9792
 15652                           
 15653                           ; BSR set to: 0
 15654                           ;dhcp_client.c: 800: if (DHCPClient.flags.bits.bOfferReceived) {
 15655  001D12  A5DB               	btfss	(_DHCPClient+2)& (0+255),2,b
 15656  001D14  D00A               	goto	l9706
 15657                           
 15658                           ; BSR set to: 0
 15659                           ;dhcp_client.c: 802: for (i = 0; i < 4u; i++)
 15660  001D16  6B6B               	clrf	__DHCPReceive@i& (0+255),b
 15661  001D18                     l9700:
 15662                           
 15663                           ; BSR set to: 0
 15664                           ;dhcp_client.c: 803: UDPGet(&v);
 15665  001D18  0E6C               	movlw	__DHCPReceive@v& (0+255)
 15666  001D1A  ECFB  F027         	call	_UDPGet
 15667  001D1E  0100               	movlb	0	; () banked
 15668  001D20  2B6B               	incf	__DHCPReceive@i& (0+255),f,b
 15669                           
 15670                           ; BSR set to: 0
 15671  001D22  0E03               	movlw	3
 15672  001D24  656B               	cpfsgt	__DHCPReceive@i& (0+255),b
 15673  001D26  D7F8               	goto	l9700
 15674  001D28  D0AC               	goto	l9776
 15675  001D2A                     l9706:
 15676                           
 15677                           ; BSR set to: 0
 15678                           ;dhcp_client.c: 805: UDPGetArray((uint8_t *) & DHCPClient.tempMask, sizeof (DHCPClient.t
      +                          empMask));
 15679  001D2A  0EF4               	movlw	low (_DHCPClient+27)
 15680  001D2C  6E23               	movwf	UDPGetArray@cData,c
 15681  001D2E  6A24               	clrf	UDPGetArray@cData+1,c
 15682  001D30  6A26               	clrf	UDPGetArray@wDataLen+1,c
 15683  001D32  0E04               	movlw	4
 15684  001D34  6E25               	movwf	UDPGetArray@wDataLen,c
 15685  001D36  EC8D  F021         	call	_UDPGetArray	;wreg free
 15686                           
 15687                           ;dhcp_client.c: 806: DHCPClient.validValues.bits.Mask = 1;
 15688  001D3A  0100               	movlb	0	; () banked
 15689  001D3C  85F8               	bsf	(_DHCPClient+31)& (0+255),2,b
 15690  001D3E  D0A1               	goto	l9776
 15691  001D40                     l9710:
 15692                           
 15693                           ; BSR set to: 0
 15694                           ;dhcp_client.c: 813: UDPGet(&j);
 15695  001D40  0E66               	movlw	__DHCPReceive@j& (0+255)
 15696  001D42  ECFB  F027         	call	_UDPGet
 15697                           
 15698                           ;dhcp_client.c: 815: if (j >= 4u) {
 15699  001D46  0E03               	movlw	3
 15700  001D48  0100               	movlb	0	; () banked
 15701  001D4A  6566               	cpfsgt	__DHCPReceive@j& (0+255),b
 15702  001D4C  D0BE               	goto	l9792
 15703                           
 15704                           ; BSR set to: 0
 15705                           ;dhcp_client.c: 817: if (DHCPClient.flags.bits.bOfferReceived) {
 15706  001D4E  A5DB               	btfss	(_DHCPClient+2)& (0+255),2,b
 15707  001D50  D00A               	goto	l9728
 15708                           
 15709                           ; BSR set to: 0
 15710                           ;dhcp_client.c: 819: for (i = 0; i < 4u; i++)
 15711  001D52  6B6B               	clrf	__DHCPReceive@i& (0+255),b
 15712  001D54                     l9722:
 15713                           
 15714                           ; BSR set to: 0
 15715                           ;dhcp_client.c: 820: UDPGet(&v);
 15716  001D54  0E6C               	movlw	__DHCPReceive@v& (0+255)
 15717  001D56  ECFB  F027         	call	_UDPGet
 15718  001D5A  0100               	movlb	0	; () banked
 15719  001D5C  2B6B               	incf	__DHCPReceive@i& (0+255),f,b
 15720                           
 15721                           ; BSR set to: 0
 15722  001D5E  0E03               	movlw	3
 15723  001D60  656B               	cpfsgt	__DHCPReceive@i& (0+255),b
 15724  001D62  D7F8               	goto	l9722
 15725  001D64  D00A               	goto	l9732
 15726  001D66                     l9728:
 15727                           
 15728                           ; BSR set to: 0
 15729                           ;dhcp_client.c: 822: UDPGetArray((uint8_t *) & DHCPClient.tempGateway, sizeof (DHCPClien
      +                          t.tempGateway));
 15730  001D66  0EF0               	movlw	low (_DHCPClient+23)
 15731  001D68  6E23               	movwf	UDPGetArray@cData,c
 15732  001D6A  6A24               	clrf	UDPGetArray@cData+1,c
 15733  001D6C  6A26               	clrf	UDPGetArray@wDataLen+1,c
 15734  001D6E  0E04               	movlw	4
 15735  001D70  6E25               	movwf	UDPGetArray@wDataLen,c
 15736  001D72  EC8D  F021         	call	_UDPGetArray	;wreg free
 15737                           
 15738                           ;dhcp_client.c: 823: DHCPClient.validValues.bits.Gateway = 1;
 15739  001D76  0100               	movlb	0	; () banked
 15740  001D78  83F8               	bsf	(_DHCPClient+31)& (0+255),1,b
 15741  001D7A                     l9732:
 15742                           
 15743                           ; BSR set to: 0
 15744                           ;dhcp_client.c: 829: j -= 4;
 15745  001D7A  0E04               	movlw	4
 15746  001D7C  5F66               	subwf	__DHCPReceive@j& (0+255),f,b
 15747                           
 15748                           ;dhcp_client.c: 830: while (j--)
 15749  001D7E  D003               	goto	l9736
 15750  001D80                     l9734:
 15751                           
 15752                           ; BSR set to: 0
 15753                           ;dhcp_client.c: 831: UDPGet(&v);
 15754  001D80  0E6C               	movlw	__DHCPReceive@v& (0+255)
 15755  001D82  ECFB  F027         	call	_UDPGet
 15756  001D86                     l9736:
 15757  001D86  0100               	movlb	0	; () banked
 15758  001D88  0766               	decf	__DHCPReceive@j& (0+255),f,b
 15759  001D8A  2966               	incf	__DHCPReceive@j& (0+255),w,b
 15760  001D8C  E07A               	bz	l9776
 15761  001D8E  D7F8               	goto	l9734
 15762  001D90                     l9738:
 15763                           
 15764                           ; BSR set to: 0
 15765                           ;dhcp_client.c: 893: UDPGet(&v);
 15766  001D90  0E6C               	movlw	__DHCPReceive@v& (0+255)
 15767  001D92  ECFB  F027         	call	_UDPGet
 15768                           
 15769                           ;dhcp_client.c: 895: if (v == 4u) {
 15770  001D96  0E04               	movlw	4
 15771  001D98  0100               	movlb	0	; () banked
 15772  001D9A  196C               	xorwf	__DHCPReceive@v& (0+255),w,b
 15773  001D9C  E001 D095          	bnz	l9792
 15774                           
 15775                           ; BSR set to: 0
 15776                           ;dhcp_client.c: 896: UDPGet(&(((uint8_t *) & tempServerID)[3]));
 15777  001DA0  0E67               	movlw	__DHCPReceive@tempServerID& (0+255)
 15778  001DA2  0F03               	addlw	3
 15779  001DA4  ECFB  F027         	call	_UDPGet
 15780                           
 15781                           ;dhcp_client.c: 897: UDPGet(&(((uint8_t *) & tempServerID)[2]));
 15782  001DA8  0E67               	movlw	__DHCPReceive@tempServerID& (0+255)
 15783  001DAA  0F02               	addlw	2
 15784  001DAC  ECFB  F027         	call	_UDPGet
 15785                           
 15786                           ;dhcp_client.c: 898: UDPGet(&(((uint8_t *) & tempServerID)[1]));
 15787  001DB0  0E67               	movlw	__DHCPReceive@tempServerID& (0+255)
 15788  001DB2  0100               	movlb	0	; () banked
 15789  001DB4  6F60               	movwf	??__DHCPReceive& (0+255),b
 15790  001DB6  2960               	incf	??__DHCPReceive& (0+255),w,b
 15791  001DB8  ECFB  F027         	call	_UDPGet
 15792                           
 15793                           ;dhcp_client.c: 899: UDPGet(&(((uint8_t *) & tempServerID)[0]));
 15794  001DBC  0E67               	movlw	__DHCPReceive@tempServerID& (0+255)
 15795  001DBE  ECFB  F027         	call	_UDPGet
 15796                           
 15797                           ;dhcp_client.c: 900: } else
 15798  001DC2  D05F               	goto	l9776
 15799  001DC4                     l9744:
 15800                           
 15801                           ; BSR set to: 0
 15802                           ;dhcp_client.c: 905: lbDone = 1;
 15803  001DC4  0E01               	movlw	1
 15804  001DC6  6F64               	movwf	__DHCPReceive@lbDone& (0+255),b
 15805                           
 15806                           ;dhcp_client.c: 906: break;
 15807  001DC8  D05C               	goto	l9776
 15808  001DCA                     l9746:
 15809                           
 15810                           ; BSR set to: 0
 15811                           ;dhcp_client.c: 909: UDPGet(&v);
 15812  001DCA  0E6C               	movlw	__DHCPReceive@v& (0+255)
 15813  001DCC  ECFB  F027         	call	_UDPGet
 15814                           
 15815                           ;dhcp_client.c: 911: if (v == 4u) {
 15816  001DD0  0E04               	movlw	4
 15817  001DD2  0100               	movlb	0	; () banked
 15818  001DD4  196C               	xorwf	__DHCPReceive@v& (0+255),w,b
 15819  001DD6  E179               	bnz	l9792
 15820                           
 15821                           ; BSR set to: 0
 15822                           ;dhcp_client.c: 913: if (DHCPClient.flags.bits.bOfferReceived) {
 15823  001DD8  A5DB               	btfss	(_DHCPClient+2)& (0+255),2,b
 15824  001DDA  D00A               	goto	l9764
 15825                           
 15826                           ; BSR set to: 0
 15827                           ;dhcp_client.c: 915: for (i = 0; i < 4u; i++)
 15828  001DDC  6B6B               	clrf	__DHCPReceive@i& (0+255),b
 15829  001DDE                     l9758:
 15830                           
 15831                           ; BSR set to: 0
 15832                           ;dhcp_client.c: 916: UDPGet(&v);
 15833  001DDE  0E6C               	movlw	__DHCPReceive@v& (0+255)
 15834  001DE0  ECFB  F027         	call	_UDPGet
 15835  001DE4  0100               	movlb	0	; () banked
 15836  001DE6  2B6B               	incf	__DHCPReceive@i& (0+255),f,b
 15837                           
 15838                           ; BSR set to: 0
 15839  001DE8  0E03               	movlw	3
 15840  001DEA  656B               	cpfsgt	__DHCPReceive@i& (0+255),b
 15841  001DEC  D7F8               	goto	l9758
 15842  001DEE  D049               	goto	l9776
 15843  001DF0                     l9764:
 15844                           
 15845                           ; BSR set to: 0
 15846                           ;dhcp_client.c: 918: UDPGet(&(((uint8_t *) (&DHCPClient.dwLeaseTime))[3]));
 15847  001DF0  0ED9               	movlw	_DHCPClient& (0+255)
 15848  001DF2  0F0E               	addlw	14
 15849  001DF4  ECFB  F027         	call	_UDPGet
 15850                           
 15851                           ;dhcp_client.c: 919: UDPGet(&(((uint8_t *) (&DHCPClient.dwLeaseTime))[2]));
 15852  001DF8  0ED9               	movlw	_DHCPClient& (0+255)
 15853  001DFA  0F0D               	addlw	13
 15854  001DFC  ECFB  F027         	call	_UDPGet
 15855                           
 15856                           ;dhcp_client.c: 920: UDPGet(&(((uint8_t *) (&DHCPClient.dwLeaseTime))[1]));
 15857  001E00  0ED9               	movlw	_DHCPClient& (0+255)
 15858  001E02  0F0C               	addlw	12
 15859  001E04  ECFB  F027         	call	_UDPGet
 15860                           
 15861                           ;dhcp_client.c: 921: UDPGet(&(((uint8_t *) (&DHCPClient.dwLeaseTime))[0]));
 15862  001E08  0ED9               	movlw	_DHCPClient& (0+255)
 15863  001E0A  0F0B               	addlw	11
 15864  001E0C  ECFB  F027         	call	_UDPGet
 15865                           
 15866                           ;dhcp_client.c: 926: DHCPClient.dwLeaseTime -= DHCPClient.dwLeaseTime >> 5;
 15867  001E10  C0E4  F060         	movff	_DHCPClient+11,??__DHCPReceive
 15868  001E14  C0E5  F061         	movff	_DHCPClient+12,??__DHCPReceive+1
 15869  001E18  C0E6  F062         	movff	_DHCPClient+13,??__DHCPReceive+2
 15870  001E1C  C0E7  F063         	movff	_DHCPClient+14,??__DHCPReceive+3
 15871  001E20  0E06               	movlw	6
 15872  001E22  D006               	goto	u8490
 15873  001E24                     u8495:
 15874  001E24  0100               	movlb	0	; () banked
 15875  001E26  90D8               	bcf	status,0,c
 15876  001E28  3363               	rrcf	(??__DHCPReceive+3)& (0+255),f,b
 15877  001E2A  3362               	rrcf	(??__DHCPReceive+2)& (0+255),f,b
 15878  001E2C  3361               	rrcf	(??__DHCPReceive+1)& (0+255),f,b
 15879  001E2E  3360               	rrcf	??__DHCPReceive& (0+255),f,b
 15880  001E30                     u8490:
 15881  001E30  2EE8               	decfsz	wreg,f,c
 15882  001E32  D7F8               	goto	u8495
 15883  001E34  5160               	movf	??__DHCPReceive& (0+255),w,b
 15884  001E36  5FE4               	subwf	(_DHCPClient+11)& (0+255),f,b
 15885  001E38  5161               	movf	(??__DHCPReceive+1)& (0+255),w,b
 15886  001E3A  5BE5               	subwfb	(_DHCPClient+12)& (0+255),f,b
 15887  001E3C  5162               	movf	(??__DHCPReceive+2)& (0+255),w,b
 15888  001E3E  5BE6               	subwfb	(_DHCPClient+13)& (0+255),f,b
 15889  001E40  5163               	movf	(??__DHCPReceive+3)& (0+255),w,b
 15890  001E42  5BE7               	subwfb	(_DHCPClient+14)& (0+255),f,b
 15891  001E44  D01E               	goto	l9776
 15892  001E46                     l9768:
 15893                           
 15894                           ; BSR set to: 0
 15895                           ;dhcp_client.c: 934: UDPGet(&j);
 15896  001E46  0E66               	movlw	__DHCPReceive@j& (0+255)
 15897  001E48  ECFB  F027         	call	_UDPGet
 15898                           
 15899                           ;dhcp_client.c: 935: while (j--)
 15900  001E4C  D003               	goto	l9772
 15901  001E4E                     l9770:
 15902                           
 15903                           ; BSR set to: 0
 15904                           ;dhcp_client.c: 936: UDPGet(&v);
 15905  001E4E  0E6C               	movlw	__DHCPReceive@v& (0+255)
 15906  001E50  ECFB  F027         	call	_UDPGet
 15907  001E54                     l9772:
 15908  001E54  0100               	movlb	0	; () banked
 15909  001E56  0766               	decf	__DHCPReceive@j& (0+255),f,b
 15910  001E58  2966               	incf	__DHCPReceive@j& (0+255),w,b
 15911  001E5A  E013               	bz	l9776
 15912  001E5C  D7F8               	goto	l9770
 15913  001E5E                     l9774:
 15914  001E5E  0100               	movlb	0	; () banked
 15915  001E60  516C               	movf	__DHCPReceive@v& (0+255),w,b
 15916                           
 15917                           ; Switch size 1, requested type "speed"
 15918                           ; Number of cases is 6, Range of values is 1 to 255
 15919                           ; switch strategies available:
 15920                           ; Name         Instructions Cycles
 15921                           ; simple_byte           19    10 (average)
 15922                           ;	Chosen strategy is simple_byte
 15923  001E62  0A01               	xorlw	1	; case 1
 15924  001E64  E101 D74D          	bz	l9688
 15925  001E68  0A02               	xorlw	2	; case 3
 15926  001E6A  E101 D769          	bz	l9710
 15927  001E6E  0A30               	xorlw	48	; case 51
 15928  001E70  E0AC               	bz	l9746
 15929  001E72  0A06               	xorlw	6	; case 53
 15930  001E74  E101 D733          	bz	l9676
 15931  001E78  0A03               	xorlw	3	; case 54
 15932  001E7A  E08A               	bz	l9738
 15933  001E7C  0AC9               	xorlw	201	; case 255
 15934  001E7E  E0A2               	bz	l9744
 15935  001E80  D7E2               	goto	l9768
 15936  001E82                     l9776:
 15937                           
 15938                           ;dhcp_client.c: 938: } while (!lbDone);
 15939  001E82  0100               	movlb	0	; () banked
 15940  001E84  5164               	movf	__DHCPReceive@lbDone& (0+255),w,b
 15941  001E86  E101 D723          	bz	l1484
 15942  001E8A                     l9778:
 15943                           
 15944                           ;dhcp_client.c: 939: }
 15945                           ;dhcp_client.c: 942: if (type == (2u)) {
 15946  001E8A  0E02               	movlw	2
 15947  001E8C  0100               	movlb	0	; () banked
 15948  001E8E  1965               	xorwf	__DHCPReceive@type& (0+255),w,b
 15949  001E90  E10A               	bnz	l9782
 15950                           
 15951                           ; BSR set to: 0
 15952                           ;dhcp_client.c: 943: DHCPClient.dwServerID = tempServerID;
 15953  001E92  C067  F0E8         	movff	__DHCPReceive@tempServerID,_DHCPClient+15
 15954  001E96  C068  F0E9         	movff	__DHCPReceive@tempServerID+1,_DHCPClient+16
 15955  001E9A  C069  F0EA         	movff	__DHCPReceive@tempServerID+2,_DHCPClient+17
 15956  001E9E  C06A  F0EB         	movff	__DHCPReceive@tempServerID+3,_DHCPClient+18
 15957                           
 15958                           ;dhcp_client.c: 944: DHCPClient.flags.bits.bOfferReceived = 1;
 15959  001EA2  85DB               	bsf	(_DHCPClient+2)& (0+255),2,b
 15960                           
 15961                           ;dhcp_client.c: 945: } else {
 15962  001EA4  D00D               	goto	l9786
 15963  001EA6                     l9782:
 15964                           
 15965                           ; BSR set to: 0
 15966                           ;dhcp_client.c: 948: if (DHCPClient.dwServerID != tempServerID)
 15967  001EA6  5167               	movf	__DHCPReceive@tempServerID& (0+255),w,b
 15968  001EA8  19E8               	xorwf	(_DHCPClient+15)& (0+255),w,b
 15969  001EAA  E109               	bnz	u8530
 15970  001EAC  5168               	movf	(__DHCPReceive@tempServerID+1)& (0+255),w,b
 15971  001EAE  19E9               	xorwf	(_DHCPClient+16)& (0+255),w,b
 15972  001EB0  E106               	bnz	u8530
 15973  001EB2  5169               	movf	(__DHCPReceive@tempServerID+2)& (0+255),w,b
 15974  001EB4  19EA               	xorwf	(_DHCPClient+17)& (0+255),w,b
 15975  001EB6  E103               	bnz	u8530
 15976  001EB8  516A               	movf	(__DHCPReceive@tempServerID+3)& (0+255),w,b
 15977  001EBA  19EB               	xorwf	(_DHCPClient+18)& (0+255),w,b
 15978  001EBC  E001               	bz	l9786
 15979  001EBE                     u8530:
 15980                           
 15981                           ; BSR set to: 0
 15982                           ;dhcp_client.c: 949: type = (0u);
 15983  001EBE  6B65               	clrf	__DHCPReceive@type& (0+255),b
 15984  001EC0                     l9786:
 15985                           
 15986                           ; BSR set to: 0
 15987                           ;dhcp_client.c: 950: }
 15988                           ;dhcp_client.c: 952: UDPDiscard();
 15989  001EC0  EC1C  F02A         	call	_UDPDiscard	;wreg free
 15990                           
 15991                           ;dhcp_client.c: 953: return type;
 15992  001EC4  0100               	movlb	0	; () banked
 15993  001EC6  5165               	movf	__DHCPReceive@type& (0+255),w,b
 15994  001EC8  0012               	return	
 15995  001ECA                     l9792:
 15996                           
 15997                           ; BSR set to: 0
 15998                           ;dhcp_client.c: 956: UDPDiscard();
 15999  001ECA  EC1C  F02A         	call	_UDPDiscard	;wreg free
 16000                           
 16001                           ;dhcp_client.c: 957: return (0u);
 16002  001ECE  0C00               	retlw	0	;funcret
 16003  001ED0                     __end_of__DHCPReceive:
 16004                           	opt stack 0
 16005                           tblptru	equ	0xFF8
 16006                           tblptrh	equ	0xFF7
 16007                           tblptrl	equ	0xFF6
 16008                           tablat	equ	0xFF5
 16009                           prodh	equ	0xFF4
 16010                           prodl	equ	0xFF3
 16011                           intcon	equ	0xFF2
 16012                           intcon2	equ	0xFF1
 16013                           postinc0	equ	0xFEE
 16014                           wreg	equ	0xFE8
 16015                           indf1	equ	0xFE7
 16016                           postinc1	equ	0xFE6
 16017                           postdec1	equ	0xFE5
 16018                           plusw1	equ	0xFE3
 16019                           fsr1h	equ	0xFE2
 16020                           fsr1l	equ	0xFE1
 16021                           indf2	equ	0xFDF
 16022                           postinc2	equ	0xFDE
 16023                           postdec2	equ	0xFDD
 16024                           plusw2	equ	0xFDB
 16025                           fsr2h	equ	0xFDA
 16026                           fsr2l	equ	0xFD9
 16027                           status	equ	0xFD8
 16028                           
 16029 ;; *************** function _UDPGetArray *****************
 16030 ;; Defined at:
 16031 ;;		line 1032 in file "../framework/tcpip/src/udp.c"
 16032 ;; Parameters:    Size  Location     Type
 16033 ;;  cData           2   34[COMRAM] PTR unsigned char 
 16034 ;;		 -> DHCPClient(32), m_messageBuffer(500), 
 16035 ;;  wDataLen        2   36[COMRAM] unsigned int 
 16036 ;; Auto vars:     Size  Location     Type
 16037 ;;  wBytesAvaila    2   38[COMRAM] unsigned int 
 16038 ;; Return value:  Size  Location     Type
 16039 ;;                  2   34[COMRAM] unsigned int 
 16040 ;; Registers used:
 16041 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 16042 ;; Tracked objects:
 16043 ;;		On entry : E/0
 16044 ;;		On exit  : 0/0
 16045 ;;		Unchanged: 0/0
 16046 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16047 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16048 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16049 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16050 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16051 ;;Total ram usage:        6 bytes
 16052 ;; Hardware stack levels used:    1
 16053 ;; Hardware stack levels required when called:    7
 16054 ;; This function calls:
 16055 ;;		_MACGetArray
 16056 ;; This function is called by:
 16057 ;;		_HandleConnectionResponse
 16058 ;;		_HandleConfigData
 16059 ;;		_HandleReceivedBytes
 16060 ;;		__DHCPReceive
 16061 ;; This function uses a non-reentrant model
 16062 ;;
 16063                           
 16064                           	psect	text88
 16065  00431A                     __ptext88:
 16066                           	opt stack 0
 16067  00431A                     _UDPGetArray:
 16068                           	opt stack 20
 16069                           
 16070                           ;udp.c: 1034: uint16_t wBytesAvailable;
 16071                           ;udp.c: 1037: if ((wGetOffset >= UDPRxCount) || (SocketWithRxData != activeUDPSocket))
 16072                           
 16073                           ;incstack = 0
 16074  00431A  5033               	movf	_UDPRxCount,w,c
 16075  00431C  5C37               	subwf	_wGetOffset,w,c
 16076  00431E  5034               	movf	_UDPRxCount+1,w,c
 16077  004320  5838               	subwfb	_wGetOffset+1,w,c
 16078  004322  E204               	bc	l1830
 16079  004324  0100               	movlb	0	; () banked
 16080  004326  51CE               	movf	_activeUDPSocket& (0+255),w,b
 16081  004328  1843               	xorwf	_SocketWithRxData,w,c
 16082  00432A  E003               	bz	l9298
 16083  00432C                     l1830:
 16084                           
 16085                           ;udp.c: 1038: return 0;
 16086  00432C  6A23               	clrf	?_UDPGetArray,c
 16087  00432E  6A24               	clrf	?_UDPGetArray+1,c
 16088  004330  0012               	return	
 16089  004332                     l9298:
 16090                           
 16091                           ; BSR set to: 0
 16092                           ;udp.c: 1041: wBytesAvailable = UDPRxCount - wGetOffset;
 16093  004332  5037               	movf	_wGetOffset,w,c
 16094  004334  5C33               	subwf	_UDPRxCount,w,c
 16095  004336  6E27               	movwf	UDPGetArray@wBytesAvailable,c
 16096  004338  5038               	movf	_wGetOffset+1,w,c
 16097  00433A  5834               	subwfb	_UDPRxCount+1,w,c
 16098  00433C  6E28               	movwf	UDPGetArray@wBytesAvailable+1,c
 16099                           
 16100                           ;udp.c: 1042: if (wBytesAvailable < wDataLen)
 16101  00433E  5025               	movf	UDPGetArray@wDataLen,w,c
 16102  004340  5C27               	subwf	UDPGetArray@wBytesAvailable,w,c
 16103  004342  5026               	movf	UDPGetArray@wDataLen+1,w,c
 16104  004344  5828               	subwfb	UDPGetArray@wBytesAvailable+1,w,c
 16105  004346  E204               	bc	l9302
 16106                           
 16107                           ; BSR set to: 0
 16108                           ;udp.c: 1043: wDataLen = wBytesAvailable;
 16109  004348  C027  F025         	movff	UDPGetArray@wBytesAvailable,UDPGetArray@wDataLen
 16110  00434C  C028  F026         	movff	UDPGetArray@wBytesAvailable+1,UDPGetArray@wDataLen+1
 16111  004350                     l9302:
 16112                           
 16113                           ; BSR set to: 0
 16114                           ;udp.c: 1045: wDataLen = MACGetArray(cData, wDataLen);
 16115  004350  C023  F01C         	movff	UDPGetArray@cData,MACGetArray@val
 16116  004354  C024  F01D         	movff	UDPGetArray@cData+1,MACGetArray@val+1
 16117  004358  C025  F01E         	movff	UDPGetArray@wDataLen,MACGetArray@len
 16118  00435C  C026  F01F         	movff	UDPGetArray@wDataLen+1,MACGetArray@len+1
 16119  004360  EC85  F025         	call	_MACGetArray	;wreg free
 16120  004364  C01C  F025         	movff	?_MACGetArray,UDPGetArray@wDataLen
 16121  004368  C01D  F026         	movff	?_MACGetArray+1,UDPGetArray@wDataLen+1
 16122                           
 16123                           ;udp.c: 1046: wGetOffset += wDataLen;
 16124  00436C  5025               	movf	UDPGetArray@wDataLen,w,c
 16125  00436E  2637               	addwf	_wGetOffset,f,c
 16126  004370  5026               	movf	UDPGetArray@wDataLen+1,w,c
 16127  004372  2238               	addwfc	_wGetOffset+1,f,c
 16128                           
 16129                           ;udp.c: 1048: return wDataLen;
 16130  004374  C025  F023         	movff	UDPGetArray@wDataLen,?_UDPGetArray
 16131  004378  C026  F024         	movff	UDPGetArray@wDataLen+1,?_UDPGetArray+1
 16132  00437C  0012               	return		;funcret
 16133  00437E                     __end_of_UDPGetArray:
 16134                           	opt stack 0
 16135                           tblptru	equ	0xFF8
 16136                           tblptrh	equ	0xFF7
 16137                           tblptrl	equ	0xFF6
 16138                           tablat	equ	0xFF5
 16139                           prodh	equ	0xFF4
 16140                           prodl	equ	0xFF3
 16141                           intcon	equ	0xFF2
 16142                           intcon2	equ	0xFF1
 16143                           postinc0	equ	0xFEE
 16144                           wreg	equ	0xFE8
 16145                           indf1	equ	0xFE7
 16146                           postinc1	equ	0xFE6
 16147                           postdec1	equ	0xFE5
 16148                           plusw1	equ	0xFE3
 16149                           fsr1h	equ	0xFE2
 16150                           fsr1l	equ	0xFE1
 16151                           indf2	equ	0xFDF
 16152                           postinc2	equ	0xFDE
 16153                           postdec2	equ	0xFDD
 16154                           plusw2	equ	0xFDB
 16155                           fsr2h	equ	0xFDA
 16156                           fsr2l	equ	0xFD9
 16157                           status	equ	0xFD8
 16158                           
 16159 ;; *************** function _UDPGet *****************
 16160 ;; Defined at:
 16161 ;;		line 993 in file "../framework/tcpip/src/udp.c"
 16162 ;; Parameters:    Size  Location     Type
 16163 ;;  v               1    wreg     PTR unsigned char 
 16164 ;;		 -> _DHCPReceive@tempServerID(4), _DHCPReceive@j(1), _DHCPReceive@v(1), _DHCPReceive@type(1), 
 16165 ;;		 -> DHCPClient.dwLeaseTime(4), DHCPClient(32), 
 16166 ;; Auto vars:     Size  Location     Type
 16167 ;;  v               1   27[COMRAM] PTR unsigned char 
 16168 ;;		 -> _DHCPReceive@tempServerID(4), _DHCPReceive@j(1), _DHCPReceive@v(1), _DHCPReceive@type(1), 
 16169 ;;		 -> DHCPClient.dwLeaseTime(4), DHCPClient(32), 
 16170 ;; Return value:  Size  Location     Type
 16171 ;;                  1    wreg      unsigned char 
 16172 ;; Registers used:
 16173 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 16174 ;; Tracked objects:
 16175 ;;		On entry : 0/0
 16176 ;;		On exit  : 0/0
 16177 ;;		Unchanged: 0/0
 16178 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16179 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16180 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16181 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16182 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16183 ;;Total ram usage:        1 bytes
 16184 ;; Hardware stack levels used:    1
 16185 ;; Hardware stack levels required when called:    7
 16186 ;; This function calls:
 16187 ;;		_MACGet
 16188 ;; This function is called by:
 16189 ;;		__DHCPReceive
 16190 ;; This function uses a non-reentrant model
 16191 ;;
 16192                           
 16193                           	psect	text89
 16194  004FF6                     __ptext89:
 16195                           	opt stack 0
 16196  004FF6                     _UDPGet:
 16197                           	opt stack 20
 16198                           
 16199                           ;incstack = 0
 16200                           ;UDPGet@v stored from wreg
 16201  004FF6  6E1C               	movwf	UDPGet@v,c
 16202                           
 16203                           ;udp.c: 996: if ((wGetOffset >= UDPRxCount) || (SocketWithRxData != activeUDPSocket))
 16204  004FF8  5033               	movf	_UDPRxCount,w,c
 16205  004FFA  5C37               	subwf	_wGetOffset,w,c
 16206  004FFC  5034               	movf	_UDPRxCount+1,w,c
 16207  004FFE  5838               	subwfb	_wGetOffset+1,w,c
 16208  005000  B0D8               	btfsc	status,0,c
 16209  005002  0C00               	retlw	0
 16210  005004  0100               	movlb	0	; () banked
 16211  005006  51CE               	movf	_activeUDPSocket& (0+255),w,b
 16212  005008  1843               	xorwf	_SocketWithRxData,w,c
 16213  00500A  E001               	bz	l9358
 16214                           
 16215                           ;udp.c: 997: return 0;
 16216  00500C  0C00               	retlw	0
 16217  00500E                     l9358:
 16218                           
 16219                           ; BSR set to: 0
 16220                           ;udp.c: 999: *v = MACGet();
 16221  00500E  501C               	movf	UDPGet@v,w,c
 16222  005010  6ED9               	movwf	fsr2l,c
 16223  005012  6ADA               	clrf	fsr2h,c
 16224  005014  EC6C  F02A         	call	_MACGet	;wreg free
 16225  005018  6EDF               	movwf	indf2,c
 16226                           
 16227                           ;udp.c: 1000: wGetOffset++;
 16228  00501A  4A37               	infsnz	_wGetOffset,f,c
 16229  00501C  2A38               	incf	_wGetOffset+1,f,c
 16230                           
 16231                           ;udp.c: 1002: return 1;
 16232  00501E  0C01               	retlw	1	;funcret
 16233  005020                     __end_of_UDPGet:
 16234                           	opt stack 0
 16235                           tblptru	equ	0xFF8
 16236                           tblptrh	equ	0xFF7
 16237                           tblptrl	equ	0xFF6
 16238                           tablat	equ	0xFF5
 16239                           prodh	equ	0xFF4
 16240                           prodl	equ	0xFF3
 16241                           intcon	equ	0xFF2
 16242                           intcon2	equ	0xFF1
 16243                           postinc0	equ	0xFEE
 16244                           wreg	equ	0xFE8
 16245                           indf1	equ	0xFE7
 16246                           postinc1	equ	0xFE6
 16247                           postdec1	equ	0xFE5
 16248                           plusw1	equ	0xFE3
 16249                           fsr1h	equ	0xFE2
 16250                           fsr1l	equ	0xFE1
 16251                           indf2	equ	0xFDF
 16252                           postinc2	equ	0xFDE
 16253                           postdec2	equ	0xFDD
 16254                           plusw2	equ	0xFDB
 16255                           fsr2h	equ	0xFDA
 16256                           fsr2l	equ	0xFD9
 16257                           status	equ	0xFD8
 16258                           
 16259 ;; *************** function _MACGet *****************
 16260 ;; Defined at:
 16261 ;;		line 984 in file "../framework/tcpip/src/eth97j60.c"
 16262 ;; Parameters:    Size  Location     Type
 16263 ;;		None
 16264 ;; Auto vars:     Size  Location     Type
 16265 ;;		None
 16266 ;; Return value:  Size  Location     Type
 16267 ;;                  1    wreg      unsigned char 
 16268 ;; Registers used:
 16269 ;;		wreg
 16270 ;; Tracked objects:
 16271 ;;		On entry : 0/0
 16272 ;;		On exit  : 0/0
 16273 ;;		Unchanged: 0/0
 16274 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16275 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16276 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16277 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16278 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16279 ;;Total ram usage:        0 bytes
 16280 ;; Hardware stack levels used:    1
 16281 ;; Hardware stack levels required when called:    6
 16282 ;; This function calls:
 16283 ;;		Nothing
 16284 ;; This function is called by:
 16285 ;;		_UDPGet
 16286 ;;		_MACMemCopyAsync
 16287 ;; This function uses a non-reentrant model
 16288 ;;
 16289                           
 16290                           	psect	text90
 16291  0054D8                     __ptext90:
 16292                           	opt stack 0
 16293  0054D8                     _MACGet:
 16294                           	opt stack 21
 16295                           
 16296                           ;eth97j60.c: 986: return 13;
 16297                           
 16298                           ;incstack = 0
 16299  0054D8  0C0D               	retlw	13	;funcret
 16300  0054DA                     __end_of_MACGet:
 16301                           	opt stack 0
 16302                           tblptru	equ	0xFF8
 16303                           tblptrh	equ	0xFF7
 16304                           tblptrl	equ	0xFF6
 16305                           tablat	equ	0xFF5
 16306                           prodh	equ	0xFF4
 16307                           prodl	equ	0xFF3
 16308                           intcon	equ	0xFF2
 16309                           intcon2	equ	0xFF1
 16310                           postinc0	equ	0xFEE
 16311                           wreg	equ	0xFE8
 16312                           indf1	equ	0xFE7
 16313                           postinc1	equ	0xFE6
 16314                           postdec1	equ	0xFE5
 16315                           plusw1	equ	0xFE3
 16316                           fsr1h	equ	0xFE2
 16317                           fsr1l	equ	0xFE1
 16318                           indf2	equ	0xFDF
 16319                           postinc2	equ	0xFDE
 16320                           postdec2	equ	0xFDD
 16321                           plusw2	equ	0xFDB
 16322                           fsr2h	equ	0xFDA
 16323                           fsr2l	equ	0xFD9
 16324                           status	equ	0xFD8
 16325                           
 16326 ;; *************** function _UDPDiscard *****************
 16327 ;; Defined at:
 16328 ;;		line 1076 in file "../framework/tcpip/src/udp.c"
 16329 ;; Parameters:    Size  Location     Type
 16330 ;;		None
 16331 ;; Auto vars:     Size  Location     Type
 16332 ;;		None
 16333 ;; Return value:  Size  Location     Type
 16334 ;;		None               void
 16335 ;; Registers used:
 16336 ;;		wreg, status,2, status,0, cstack
 16337 ;; Tracked objects:
 16338 ;;		On entry : 0/0
 16339 ;;		On exit  : 0/0
 16340 ;;		Unchanged: 0/0
 16341 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16342 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16343 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16344 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16345 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16346 ;;Total ram usage:        0 bytes
 16347 ;; Hardware stack levels used:    1
 16348 ;; Hardware stack levels required when called:    7
 16349 ;; This function calls:
 16350 ;;		_MACDiscardRx
 16351 ;; This function is called by:
 16352 ;;		_StackTask
 16353 ;;		__DHCPReceive
 16354 ;; This function uses a non-reentrant model
 16355 ;;
 16356                           
 16357                           	psect	text91
 16358  005438                     __ptext91:
 16359                           	opt stack 0
 16360  005438                     _UDPDiscard:
 16361                           	opt stack 22
 16362                           
 16363                           ;udp.c: 1078: if (!Flags.bWasDiscarded) {
 16364                           
 16365                           ;incstack = 0
 16366  005438  B23B               	btfsc	_Flags,1,c
 16367  00543A  0012               	return	
 16368                           
 16369                           ;udp.c: 1079: MACDiscardRx();
 16370  00543C  ECD8  F026         	call	_MACDiscardRx	;wreg free
 16371                           
 16372                           ;udp.c: 1080: UDPRxCount = 0;
 16373  005440  6A33               	clrf	_UDPRxCount,c
 16374  005442  6A34               	clrf	_UDPRxCount+1,c
 16375                           
 16376                           ;udp.c: 1081: SocketWithRxData = (0xffu);
 16377  005444  6843               	setf	_SocketWithRxData,c
 16378                           
 16379                           ;udp.c: 1082: Flags.bWasDiscarded = 1;
 16380  005446  823B               	bsf	_Flags,1,c
 16381  005448  0012               	return		;funcret
 16382  00544A                     __end_of_UDPDiscard:
 16383                           	opt stack 0
 16384                           tblptru	equ	0xFF8
 16385                           tblptrh	equ	0xFF7
 16386                           tblptrl	equ	0xFF6
 16387                           tablat	equ	0xFF5
 16388                           prodh	equ	0xFF4
 16389                           prodl	equ	0xFF3
 16390                           intcon	equ	0xFF2
 16391                           intcon2	equ	0xFF1
 16392                           postinc0	equ	0xFEE
 16393                           wreg	equ	0xFE8
 16394                           indf1	equ	0xFE7
 16395                           postinc1	equ	0xFE6
 16396                           postdec1	equ	0xFE5
 16397                           plusw1	equ	0xFE3
 16398                           fsr1h	equ	0xFE2
 16399                           fsr1l	equ	0xFE1
 16400                           indf2	equ	0xFDF
 16401                           postinc2	equ	0xFDE
 16402                           postdec2	equ	0xFDD
 16403                           plusw2	equ	0xFDB
 16404                           fsr2h	equ	0xFDA
 16405                           fsr2l	equ	0xFD9
 16406                           status	equ	0xFD8
 16407                           
 16408 ;; *************** function _UDPOpenEx *****************
 16409 ;; Defined at:
 16410 ;;		line 179 in file "../framework/tcpip/src/udp.c"
 16411 ;; Parameters:    Size  Location     Type
 16412 ;;  remoteHost      4    0[BANK0 ] unsigned long 
 16413 ;;  remoteHostTy    1    4[BANK0 ] unsigned char 
 16414 ;;  localPort       2    5[BANK0 ] unsigned int 
 16415 ;;  remotePort      2    7[BANK0 ] unsigned int 
 16416 ;; Auto vars:     Size  Location     Type
 16417 ;;  p               2   10[BANK0 ] PTR struct .
 16418 ;;		 -> UDPSocketInfo(230), 
 16419 ;;  s               1    9[BANK0 ] unsigned char 
 16420 ;; Return value:  Size  Location     Type
 16421 ;;                  1    wreg      unsigned char 
 16422 ;; Registers used:
 16423 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 16424 ;; Tracked objects:
 16425 ;;		On entry : F/0
 16426 ;;		On exit  : F/0
 16427 ;;		Unchanged: 0/0
 16428 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16429 ;;      Params:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16430 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16431 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16432 ;;      Totals:         2      12       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16433 ;;Total ram usage:       14 bytes
 16434 ;; Hardware stack levels used:    1
 16435 ;; Hardware stack levels required when called:    7
 16436 ;; This function calls:
 16437 ;;		_memcpy
 16438 ;;		_memset
 16439 ;; This function is called by:
 16440 ;;		_OpenUDPsocket
 16441 ;;		_DHCPTask
 16442 ;; This function uses a non-reentrant model
 16443 ;;
 16444                           
 16445                           	psect	text92
 16446  002710                     __ptext92:
 16447                           	opt stack 0
 16448  002710                     _UDPOpenEx:
 16449                           	opt stack 21
 16450                           
 16451                           ; BSR set to: 0
 16452                           ;udp.c: 182: UDP_SOCKET s;
 16453                           ;udp.c: 183: UDP_SOCKET_INFO *p;
 16454                           ;udp.c: 186: static uint16_t NextPort ;
 16455                           ;udp.c: 188: p = UDPSocketInfo;
 16456                           
 16457                           ;incstack = 0
 16458  002710  0E00               	movlw	low _UDPSocketInfo
 16459  002712  6F6A               	movwf	UDPOpenEx@p& (0+255),b
 16460  002714  0E02               	movlw	high _UDPSocketInfo
 16461  002716  6F6B               	movwf	(UDPOpenEx@p+1)& (0+255),b
 16462                           
 16463                           ; BSR set to: 0
 16464                           ;udp.c: 189: for (s = 0; s < (10u); s++) {
 16465  002718  6B69               	clrf	UDPOpenEx@s& (0+255),b
 16466  00271A                     l9400:
 16467                           
 16468                           ; BSR set to: 0
 16469                           ;udp.c: 190: if (p->localPort == (0ul)) {
 16470  00271A  EE20 F00C          	lfsr	2,12
 16471  00271E  516A               	movf	UDPOpenEx@p& (0+255),w,b
 16472  002720  26D9               	addwf	fsr2l,f,c
 16473  002722  516B               	movf	(UDPOpenEx@p+1)& (0+255),w,b
 16474  002724  22DA               	addwfc	fsr2h,f,c
 16475  002726  50DE               	movf	postinc2,w,c
 16476  002728  10DE               	iorwf	postinc2,w,c
 16477  00272A  E001 D08A          	bnz	l9448
 16478                           
 16479                           ; BSR set to: 0
 16480                           ;udp.c: 191: p->localPort = localPort;
 16481  00272E  EE20 F00C          	lfsr	2,12
 16482  002732  516A               	movf	UDPOpenEx@p& (0+255),w,b
 16483  002734  26D9               	addwf	fsr2l,f,c
 16484  002736  516B               	movf	(UDPOpenEx@p+1)& (0+255),w,b
 16485  002738  22DA               	addwfc	fsr2h,f,c
 16486  00273A  C065  FFDE         	movff	UDPOpenEx@localPort,postinc2
 16487  00273E  C066  FFDD         	movff	UDPOpenEx@localPort+1,postdec2
 16488                           
 16489                           ; BSR set to: 0
 16490                           ;udp.c: 192: if (localPort == 0x0000u) {
 16491  002742  5165               	movf	UDPOpenEx@localPort& (0+255),w,b
 16492  002744  1166               	iorwf	(UDPOpenEx@localPort+1)& (0+255),w,b
 16493  002746  E119               	bnz	l9416
 16494                           
 16495                           ; BSR set to: 0
 16496                           ;udp.c: 193: if (NextPort > (8192u) || NextPort < (4096u))
 16497  002748  0101               	movlb	1	; () banked
 16498  00274A  0564               	decf	UDPOpenEx@NextPort& (0+255),w,b
 16499  00274C  0E20               	movlw	32
 16500  00274E  5965               	subwfb	(UDPOpenEx@NextPort+1)& (0+255),w,b
 16501  002750  E203               	bc	l9410
 16502                           
 16503                           ; BSR set to: 1
 16504  002752  0E10               	movlw	16
 16505  002754  5D65               	subwf	(UDPOpenEx@NextPort+1)& (0+255),w,b
 16506  002756  E203               	bc	l9412
 16507  002758                     l9410:
 16508                           
 16509                           ; BSR set to: 1
 16510                           ;udp.c: 194: NextPort = (4096u);
 16511  002758  0E10               	movlw	16
 16512  00275A  6F65               	movwf	(UDPOpenEx@NextPort+1)& (0+255),b
 16513  00275C  6B64               	clrf	UDPOpenEx@NextPort& (0+255),b
 16514  00275E                     l9412:
 16515                           
 16516                           ; BSR set to: 1
 16517                           ;udp.c: 196: p->localPort = NextPort++;
 16518  00275E  0100               	movlb	0	; () banked
 16519  002760  EE20 F00C          	lfsr	2,12
 16520  002764  516A               	movf	UDPOpenEx@p& (0+255),w,b
 16521  002766  26D9               	addwf	fsr2l,f,c
 16522  002768  516B               	movf	(UDPOpenEx@p+1)& (0+255),w,b
 16523  00276A  22DA               	addwfc	fsr2h,f,c
 16524  00276C  C164  FFDE         	movff	UDPOpenEx@NextPort,postinc2
 16525  002770  C165  FFDD         	movff	UDPOpenEx@NextPort+1,postdec2
 16526                           
 16527                           ; BSR set to: 0
 16528  002774  0101               	movlb	1	; () banked
 16529  002776  4B64               	infsnz	UDPOpenEx@NextPort& (0+255),f,b
 16530  002778  2B65               	incf	(UDPOpenEx@NextPort+1)& (0+255),f,b
 16531  00277A                     l9416:
 16532                           
 16533                           ;udp.c: 197: }
 16534                           ;udp.c: 198: if ((remoteHostType == 0u) || (remoteHost == 0)) {
 16535  00277A  0100               	movlb	0	; () banked
 16536  00277C  5164               	movf	UDPOpenEx@remoteHostType& (0+255),w,b
 16537  00277E  E005               	bz	l9420
 16538                           
 16539                           ; BSR set to: 0
 16540  002780  5160               	movf	UDPOpenEx@remoteHost& (0+255),w,b
 16541  002782  1161               	iorwf	(UDPOpenEx@remoteHost+1)& (0+255),w,b
 16542  002784  1162               	iorwf	(UDPOpenEx@remoteHost+2)& (0+255),w,b
 16543  002786  1163               	iorwf	(UDPOpenEx@remoteHost+3)& (0+255),w,b
 16544  002788  E149               	bnz	l9438
 16545  00278A                     l9420:
 16546                           
 16547                           ; BSR set to: 0
 16548                           ;udp.c: 201: memset((void *) &p->remote.remoteNode, 0xFF, sizeof (p->remote));
 16549  00278A  C06A  F01C         	movff	UDPOpenEx@p,memset@p1
 16550  00278E  C06B  F01D         	movff	UDPOpenEx@p+1,memset@p1+1
 16551  002792  6A1F               	clrf	memset@c+1,c
 16552  002794  681E               	setf	memset@c,c
 16553  002796  6A21               	clrf	memset@n+1,c
 16554  002798  0E0A               	movlw	10
 16555  00279A  6E20               	movwf	memset@n,c
 16556  00279C  EC10  F028         	call	_memset	;wreg free
 16557  0027A0  D034               	goto	L11
 16558  0027A2                     l9424:
 16559                           
 16560                           ; BSR set to: 0
 16561                           ;udp.c: 218: p->remote.remoteNode.IPAddr.Val = remoteHost;
 16562  0027A2  C06A  FFD9         	movff	UDPOpenEx@p,fsr2l
 16563  0027A6  C06B  FFDA         	movff	UDPOpenEx@p+1,fsr2h
 16564  0027AA  C060  FFDE         	movff	UDPOpenEx@remoteHost,postinc2
 16565  0027AE  C061  FFDE         	movff	UDPOpenEx@remoteHost+1,postinc2
 16566  0027B2  C062  FFDE         	movff	UDPOpenEx@remoteHost+2,postinc2
 16567  0027B6  C063  FFDE         	movff	UDPOpenEx@remoteHost+3,postinc2
 16568                           
 16569                           ; BSR set to: 0
 16570                           ;udp.c: 219: p->retryCount = 0;
 16571  0027BA  EE20 F013          	lfsr	2,19
 16572  0027BE  516A               	movf	UDPOpenEx@p& (0+255),w,b
 16573  0027C0  26D9               	addwf	fsr2l,f,c
 16574  0027C2  516B               	movf	(UDPOpenEx@p+1)& (0+255),w,b
 16575  0027C4  22DA               	addwfc	fsr2h,f,c
 16576  0027C6  6ADF               	clrf	indf2,c
 16577                           
 16578                           ; BSR set to: 0
 16579                           ;udp.c: 220: p->retryInterval = ((((((40000000ul) / 4)+128ull)/256ull)) / 4) / 256;
 16580  0027C8  EE20 F00F          	lfsr	2,15
 16581  0027CC  516A               	movf	UDPOpenEx@p& (0+255),w,b
 16582  0027CE  26D9               	addwf	fsr2l,f,c
 16583  0027D0  516B               	movf	(UDPOpenEx@p+1)& (0+255),w,b
 16584  0027D2  22DA               	addwfc	fsr2h,f,c
 16585  0027D4  0E26               	movlw	38
 16586  0027D6  6EDE               	movwf	postinc2,c
 16587  0027D8  6ADE               	clrf	postinc2,c
 16588  0027DA  6ADE               	clrf	postinc2,c
 16589  0027DC  6ADD               	clrf	postdec2,c
 16590                           
 16591                           ; BSR set to: 0
 16592                           ;udp.c: 221: p->smState = UDP_GATEWAY_SEND_ARP;
 16593  0027DE  EE20 F00E          	lfsr	2,14
 16594  0027E2  516A               	movf	UDPOpenEx@p& (0+255),w,b
 16595  0027E4  26D9               	addwf	fsr2l,f,c
 16596  0027E6  516B               	movf	(UDPOpenEx@p+1)& (0+255),w,b
 16597  0027E8  22DA               	addwfc	fsr2h,f,c
 16598  0027EA  0E02               	movlw	2
 16599  0027EC  D015               	goto	L10
 16600  0027EE                     l9432:
 16601                           
 16602                           ; BSR set to: 0
 16603                           ;udp.c: 226: memcpy((void *) (uint8_t *) & p->remote, (void *) (uint8_t *) (unsigned sho
      +                          rt) remoteHost, sizeof (p->remote));
 16604  0027EE  C06A  F01C         	movff	UDPOpenEx@p,memcpy@d1
 16605  0027F2  C06B  F01D         	movff	UDPOpenEx@p+1,memcpy@d1+1
 16606  0027F6  C060  F01E         	movff	UDPOpenEx@remoteHost,memcpy@s1
 16607  0027FA  C061  F01F         	movff	UDPOpenEx@remoteHost+1,memcpy@s1+1
 16608  0027FE  6A21               	clrf	memcpy@n+1,c
 16609  002800  0E0A               	movlw	10
 16610  002802  6E20               	movwf	memcpy@n,c
 16611  002804  ECEE  F023         	call	_memcpy	;wreg free
 16612                           
 16613                           ;udp.c: 227: p->smState = UDP_OPENED;
 16614  002808  0100               	movlb	0	; () banked
 16615  00280A                     L11:
 16616  00280A  EE20 F00E          	lfsr	2,14
 16617  00280E  516A               	movf	UDPOpenEx@p& (0+255),w,b
 16618  002810  26D9               	addwf	fsr2l,f,c
 16619  002812  516B               	movf	(UDPOpenEx@p+1)& (0+255),w,b
 16620  002814  22DA               	addwfc	fsr2h,f,c
 16621  002816  0E05               	movlw	5
 16622  002818                     L10:
 16623  002818  6EDF               	movwf	indf2,c
 16624                           
 16625                           ;udp.c: 229: break;
 16626  00281A  D005               	goto	l9440
 16627  00281C                     l9438:
 16628                           
 16629                           ; BSR set to: 0
 16630  00281C  5164               	movf	UDPOpenEx@remoteHostType& (0+255),w,b
 16631                           
 16632                           ; Switch size 1, requested type "speed"
 16633                           ; Number of cases is 2, Range of values is 3 to 4
 16634                           ; switch strategies available:
 16635                           ; Name         Instructions Cycles
 16636                           ; simple_byte            7     4 (average)
 16637                           ;	Chosen strategy is simple_byte
 16638  00281E  0A03               	xorlw	3	; case 3
 16639  002820  E0C0               	bz	l9424
 16640  002822  0A07               	xorlw	7	; case 4
 16641  002824  E0E4               	bz	l9432
 16642  002826                     l9440:
 16643                           
 16644                           ; BSR set to: 0
 16645                           ;udp.c: 233: }
 16646                           ;udp.c: 234: p->remotePort = remotePort;
 16647  002826  EE20 F00A          	lfsr	2,10
 16648  00282A  516A               	movf	UDPOpenEx@p& (0+255),w,b
 16649  00282C  26D9               	addwf	fsr2l,f,c
 16650  00282E  516B               	movf	(UDPOpenEx@p+1)& (0+255),w,b
 16651  002830  22DA               	addwfc	fsr2h,f,c
 16652  002832  C067  FFDE         	movff	UDPOpenEx@remotePort,postinc2
 16653  002836  C068  FFDD         	movff	UDPOpenEx@remotePort+1,postdec2
 16654                           
 16655                           ; BSR set to: 0
 16656                           ;udp.c: 239: activeUDPSocket = s;
 16657  00283A  C069  F0CE         	movff	UDPOpenEx@s,_activeUDPSocket
 16658                           
 16659                           ; BSR set to: 0
 16660                           ;udp.c: 240: return s;
 16661  00283E  5169               	movf	UDPOpenEx@s& (0+255),w,b
 16662  002840  0012               	return	
 16663  002842                     l9448:
 16664                           
 16665                           ; BSR set to: 0
 16666                           ;udp.c: 241: }
 16667                           ;udp.c: 242: p++;
 16668  002842  0E17               	movlw	23
 16669  002844  276A               	addwf	UDPOpenEx@p& (0+255),f,b
 16670  002846  0E00               	movlw	0
 16671  002848  236B               	addwfc	(UDPOpenEx@p+1)& (0+255),f,b
 16672                           
 16673                           ; BSR set to: 0
 16674  00284A  2B69               	incf	UDPOpenEx@s& (0+255),f,b
 16675                           
 16676                           ; BSR set to: 0
 16677  00284C  0E09               	movlw	9
 16678  00284E  6569               	cpfsgt	UDPOpenEx@s& (0+255),b
 16679  002850  D764               	goto	l9400
 16680  002852  0CFF               	retlw	255
 16681  002854                     __end_of_UDPOpenEx:
 16682                           	opt stack 0
 16683                           tblptru	equ	0xFF8
 16684                           tblptrh	equ	0xFF7
 16685                           tblptrl	equ	0xFF6
 16686                           tablat	equ	0xFF5
 16687                           prodh	equ	0xFF4
 16688                           prodl	equ	0xFF3
 16689                           intcon	equ	0xFF2
 16690                           intcon2	equ	0xFF1
 16691                           postinc0	equ	0xFEE
 16692                           wreg	equ	0xFE8
 16693                           indf1	equ	0xFE7
 16694                           postinc1	equ	0xFE6
 16695                           postdec1	equ	0xFE5
 16696                           plusw1	equ	0xFE3
 16697                           fsr1h	equ	0xFE2
 16698                           fsr1l	equ	0xFE1
 16699                           indf2	equ	0xFDF
 16700                           postinc2	equ	0xFDE
 16701                           postdec2	equ	0xFDD
 16702                           plusw2	equ	0xFDB
 16703                           fsr2h	equ	0xFDA
 16704                           fsr2l	equ	0xFD9
 16705                           status	equ	0xFD8
 16706                           
 16707 ;; *************** function _memset *****************
 16708 ;; Defined at:
 16709 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\memset.c"
 16710 ;; Parameters:    Size  Location     Type
 16711 ;;  p1              2   27[COMRAM] PTR void 
 16712 ;;		 -> UDPSocketInfo.remote(10), UDPSocketInfo(230), LCDText(33), CheckKeypad@buff(8), 
 16713 ;;		 -> m_NBSNodeInfo(10), 
 16714 ;;  c               2   29[COMRAM] int 
 16715 ;;  n               2   31[COMRAM] unsigned int 
 16716 ;; Auto vars:     Size  Location     Type
 16717 ;;  p               2   33[COMRAM] PTR unsigned char 
 16718 ;;		 -> UDPSocketInfo.remote(10), UDPSocketInfo(230), LCDText(33), CheckKeypad@buff(8), 
 16719 ;;		 -> m_NBSNodeInfo(10), 
 16720 ;; Return value:  Size  Location     Type
 16721 ;;                  2   27[COMRAM] PTR void 
 16722 ;; Registers used:
 16723 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 16724 ;; Tracked objects:
 16725 ;;		On entry : F/0
 16726 ;;		On exit  : F/0
 16727 ;;		Unchanged: F/0
 16728 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16729 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16730 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16731 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16732 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16733 ;;Total ram usage:        8 bytes
 16734 ;; Hardware stack levels used:    1
 16735 ;; Hardware stack levels required when called:    6
 16736 ;; This function calls:
 16737 ;;		Nothing
 16738 ;; This function is called by:
 16739 ;;		_OpenUDPsocket
 16740 ;;		_CheckKeypad
 16741 ;;		_DHCPTask
 16742 ;;		_UDPOpenEx
 16743 ;; This function uses a non-reentrant model
 16744 ;;
 16745                           
 16746                           	psect	text93
 16747  005020                     __ptext93:
 16748                           	opt stack 0
 16749  005020                     _memset:
 16750                           	opt stack 22
 16751                           
 16752                           ; BSR set to: 0
 16753                           
 16754                           ; BSR set to: 0
 16755                           ;incstack = 0
 16756  005020  C01C  F022         	movff	memset@p1,memset@p
 16757  005024  C01D  F023         	movff	memset@p1+1,memset@p+1
 16758  005028  D008               	goto	l9226
 16759  00502A                     l9222:
 16760                           
 16761                           ; BSR set to: 0
 16762  00502A  C022  FFD9         	movff	memset@p,fsr2l
 16763  00502E  C023  FFDA         	movff	memset@p+1,fsr2h
 16764  005032  C01E  FFDF         	movff	memset@c,indf2
 16765                           
 16766                           ; BSR set to: 0
 16767  005036  4A22               	infsnz	memset@p,f,c
 16768  005038  2A23               	incf	memset@p+1,f,c
 16769  00503A                     l9226:
 16770                           
 16771                           ; BSR set to: 0
 16772  00503A  0620               	decf	memset@n,f,c
 16773  00503C  A0D8               	btfss	status,0,c
 16774  00503E  0621               	decf	memset@n+1,f,c
 16775  005040  2820               	incf	memset@n,w,c
 16776  005042  E1F3               	bnz	l9222
 16777  005044  2821               	incf	memset@n+1,w,c
 16778  005046  E1F1               	bnz	l9222
 16779                           
 16780                           ; BSR set to: 0
 16781  005048  0012               	return		;funcret
 16782  00504A                     __end_of_memset:
 16783                           	opt stack 0
 16784                           tblptru	equ	0xFF8
 16785                           tblptrh	equ	0xFF7
 16786                           tblptrl	equ	0xFF6
 16787                           tablat	equ	0xFF5
 16788                           prodh	equ	0xFF4
 16789                           prodl	equ	0xFF3
 16790                           intcon	equ	0xFF2
 16791                           intcon2	equ	0xFF1
 16792                           postinc0	equ	0xFEE
 16793                           wreg	equ	0xFE8
 16794                           indf1	equ	0xFE7
 16795                           postinc1	equ	0xFE6
 16796                           postdec1	equ	0xFE5
 16797                           plusw1	equ	0xFE3
 16798                           fsr1h	equ	0xFE2
 16799                           fsr1l	equ	0xFE1
 16800                           indf2	equ	0xFDF
 16801                           postinc2	equ	0xFDE
 16802                           postdec2	equ	0xFDD
 16803                           plusw2	equ	0xFDB
 16804                           fsr2h	equ	0xFDA
 16805                           fsr2l	equ	0xFD9
 16806                           status	equ	0xFD8
 16807                           
 16808 ;; *************** function _UDPIsPutReady *****************
 16809 ;; Defined at:
 16810 ;;		line 624 in file "../framework/tcpip/src/udp.c"
 16811 ;; Parameters:    Size  Location     Type
 16812 ;;  s               1    wreg     unsigned char 
 16813 ;; Auto vars:     Size  Location     Type
 16814 ;;  s               1   38[COMRAM] unsigned char 
 16815 ;; Return value:  Size  Location     Type
 16816 ;;                  2   36[COMRAM] unsigned int 
 16817 ;; Registers used:
 16818 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 16819 ;; Tracked objects:
 16820 ;;		On entry : 0/0
 16821 ;;		On exit  : 0/0
 16822 ;;		Unchanged: 0/0
 16823 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16824 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16825 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16826 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16827 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16828 ;;Total ram usage:        3 bytes
 16829 ;; Hardware stack levels used:    1
 16830 ;; Hardware stack levels required when called:   10
 16831 ;; This function calls:
 16832 ;;		_MACIsTxReady
 16833 ;;		_UDPSetTxBuffer
 16834 ;; This function is called by:
 16835 ;;		_SendUDPMessage
 16836 ;;		_NDCFSM
 16837 ;;		_DHCPTask
 16838 ;; This function uses a non-reentrant model
 16839 ;;
 16840                           
 16841                           	psect	text94
 16842  004C7A                     __ptext94:
 16843                           	opt stack 0
 16844  004C7A                     _UDPIsPutReady:
 16845                           	opt stack 18
 16846                           
 16847                           ; BSR set to: 0
 16848                           ;incstack = 0
 16849                           ;UDPIsPutReady@s stored from wreg
 16850  004C7A  6E27               	movwf	UDPIsPutReady@s,c
 16851                           
 16852                           ;udp.c: 626: if (!MACIsTxReady())
 16853  004C7C  ECC2  F028         	call	_MACIsTxReady	;wreg free
 16854  004C80  0900               	iorlw	0
 16855  004C82  E103               	bnz	l9468
 16856                           
 16857                           ;udp.c: 627: return 0;
 16858  004C84  6A25               	clrf	?_UDPIsPutReady,c
 16859  004C86  6A26               	clrf	?_UDPIsPutReady+1,c
 16860  004C88  0012               	return	
 16861  004C8A                     l9468:
 16862                           
 16863                           ;udp.c: 629: if (LastPutSocket != s) {
 16864  004C8A  5027               	movf	UDPIsPutReady@s,w,c
 16865  004C8C  0101               	movlb	1	; () banked
 16866  004C8E  19E6               	xorwf	_LastPutSocket& (0+255),w,b
 16867  004C90  E009               	bz	l9474
 16868                           
 16869                           ; BSR set to: 1
 16870                           ;udp.c: 630: LastPutSocket = s;
 16871  004C92  C027  F1E6         	movff	UDPIsPutReady@s,_LastPutSocket
 16872                           
 16873                           ;udp.c: 631: UDPTxCount = 0;
 16874  004C96  0100               	movlb	0	; () banked
 16875  004C98  6BC7               	clrf	_UDPTxCount& (0+255),b
 16876  004C9A  6BC8               	clrf	(_UDPTxCount+1)& (0+255),b
 16877                           
 16878                           ; BSR set to: 0
 16879                           ;udp.c: 632: UDPSetTxBuffer(0);
 16880  004C9C  6A21               	clrf	UDPSetTxBuffer@wOffset+1,c
 16881  004C9E  6A20               	clrf	UDPSetTxBuffer@wOffset,c
 16882  004CA0  EC95  F029         	call	_UDPSetTxBuffer	;wreg free
 16883  004CA4                     l9474:
 16884                           
 16885                           ;udp.c: 633: }
 16886                           ;udp.c: 635: activeUDPSocket = s;
 16887  004CA4  C027  F0CE         	movff	UDPIsPutReady@s,_activeUDPSocket
 16888                           
 16889                           ;udp.c: 637: return (1500ul) - sizeof (IP_HEADER) - sizeof (UDP_HEADER) - UDPTxCount;
 16890  004CA8  0100               	movlb	0	; () banked
 16891  004CAA  51C7               	movf	_UDPTxCount& (0+255),w,b
 16892  004CAC  08C0               	sublw	192
 16893  004CAE  6E25               	movwf	?_UDPIsPutReady,c
 16894  004CB0  51C8               	movf	(_UDPTxCount+1)& (0+255),w,b
 16895  004CB2  A0D8               	btfss	status,0,c
 16896  004CB4  2AE8               	incf	wreg,f,c
 16897  004CB6  0805               	sublw	5
 16898  004CB8  6E26               	movwf	?_UDPIsPutReady+1,c
 16899  004CBA  0012               	return		;funcret
 16900  004CBC                     __end_of_UDPIsPutReady:
 16901                           	opt stack 0
 16902                           tblptru	equ	0xFF8
 16903                           tblptrh	equ	0xFF7
 16904                           tblptrl	equ	0xFF6
 16905                           tablat	equ	0xFF5
 16906                           prodh	equ	0xFF4
 16907                           prodl	equ	0xFF3
 16908                           intcon	equ	0xFF2
 16909                           intcon2	equ	0xFF1
 16910                           postinc0	equ	0xFEE
 16911                           wreg	equ	0xFE8
 16912                           indf1	equ	0xFE7
 16913                           postinc1	equ	0xFE6
 16914                           postdec1	equ	0xFE5
 16915                           plusw1	equ	0xFE3
 16916                           fsr1h	equ	0xFE2
 16917                           fsr1l	equ	0xFE1
 16918                           indf2	equ	0xFDF
 16919                           postinc2	equ	0xFDE
 16920                           postdec2	equ	0xFDD
 16921                           plusw2	equ	0xFDB
 16922                           fsr2h	equ	0xFDA
 16923                           fsr2l	equ	0xFD9
 16924                           status	equ	0xFD8
 16925                           
 16926 ;; *************** function _UDPSetTxBuffer *****************
 16927 ;; Defined at:
 16928 ;;		line 563 in file "../framework/tcpip/src/udp.c"
 16929 ;; Parameters:    Size  Location     Type
 16930 ;;  wOffset         2   31[COMRAM] unsigned int 
 16931 ;; Auto vars:     Size  Location     Type
 16932 ;;		None
 16933 ;; Return value:  Size  Location     Type
 16934 ;;		None               void
 16935 ;; Registers used:
 16936 ;;		wreg, status,2, status,0, cstack
 16937 ;; Tracked objects:
 16938 ;;		On entry : F/0
 16939 ;;		On exit  : 0/0
 16940 ;;		Unchanged: 0/0
 16941 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16942 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16943 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16944 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16945 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16946 ;;Total ram usage:        2 bytes
 16947 ;; Hardware stack levels used:    1
 16948 ;; Hardware stack levels required when called:    7
 16949 ;; This function calls:
 16950 ;;		_MACSetWritePtr
 16951 ;; This function is called by:
 16952 ;;		_UDPIsPutReady
 16953 ;; This function uses a non-reentrant model
 16954 ;;
 16955                           
 16956                           	psect	text95
 16957  00532A                     __ptext95:
 16958                           	opt stack 0
 16959  00532A                     _UDPSetTxBuffer:
 16960                           	opt stack 20
 16961                           
 16962                           ; BSR set to: 0
 16963                           ;udp.c: 565: MACSetWritePtr(wOffset + sizeof (UDP_HEADER) + (((8*1024ul) - (1ul+1518ul+7
      +                          ul) - 0u - 0ul - 0ul) + 1ul) + sizeof(ETHER_HEADER) + sizeof(IP_HEADER));
 16964                           
 16965                           ;incstack = 0
 16966  00532A  0E35               	movlw	53
 16967  00532C  2420               	addwf	UDPSetTxBuffer@wOffset,w,c
 16968  00532E  6E1C               	movwf	MACSetWritePtr@address,c
 16969  005330  0E1A               	movlw	26
 16970  005332  2021               	addwfc	UDPSetTxBuffer@wOffset+1,w,c
 16971  005334  6E1D               	movwf	MACSetWritePtr@address+1,c
 16972  005336  EC56  F02A         	call	_MACSetWritePtr	;wreg free
 16973                           
 16974                           ;udp.c: 566: wPutOffset = wOffset;
 16975  00533A  C020  F039         	movff	UDPSetTxBuffer@wOffset,_wPutOffset
 16976  00533E  C021  F03A         	movff	UDPSetTxBuffer@wOffset+1,_wPutOffset+1
 16977  005342  0012               	return		;funcret
 16978  005344                     __end_of_UDPSetTxBuffer:
 16979                           	opt stack 0
 16980                           tblptru	equ	0xFF8
 16981                           tblptrh	equ	0xFF7
 16982                           tblptrl	equ	0xFF6
 16983                           tablat	equ	0xFF5
 16984                           prodh	equ	0xFF4
 16985                           prodl	equ	0xFF3
 16986                           intcon	equ	0xFF2
 16987                           intcon2	equ	0xFF1
 16988                           postinc0	equ	0xFEE
 16989                           wreg	equ	0xFE8
 16990                           indf1	equ	0xFE7
 16991                           postinc1	equ	0xFE6
 16992                           postdec1	equ	0xFE5
 16993                           plusw1	equ	0xFE3
 16994                           fsr1h	equ	0xFE2
 16995                           fsr1l	equ	0xFE1
 16996                           indf2	equ	0xFDF
 16997                           postinc2	equ	0xFDE
 16998                           postdec2	equ	0xFDD
 16999                           plusw2	equ	0xFDB
 17000                           fsr2h	equ	0xFDA
 17001                           fsr2l	equ	0xFD9
 17002                           status	equ	0xFD8
 17003                           
 17004 ;; *************** function _UDPIsGetReady *****************
 17005 ;; Defined at:
 17006 ;;		line 955 in file "../framework/tcpip/src/udp.c"
 17007 ;; Parameters:    Size  Location     Type
 17008 ;;  s               1    wreg     unsigned char 
 17009 ;; Auto vars:     Size  Location     Type
 17010 ;;  s               1   39[COMRAM] unsigned char 
 17011 ;; Return value:  Size  Location     Type
 17012 ;;                  2   37[COMRAM] unsigned int 
 17013 ;; Registers used:
 17014 ;;		wreg, status,2, status,0, cstack
 17015 ;; Tracked objects:
 17016 ;;		On entry : 0/0
 17017 ;;		On exit  : 0/0
 17018 ;;		Unchanged: 0/0
 17019 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17020 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17021 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17022 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17023 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17024 ;;Total ram usage:        3 bytes
 17025 ;; Hardware stack levels used:    1
 17026 ;; Hardware stack levels required when called:    9
 17027 ;; This function calls:
 17028 ;;		_UDPSetRxBuffer
 17029 ;; This function is called by:
 17030 ;;		_NDCFSM
 17031 ;;		_DHCPTask
 17032 ;; This function uses a non-reentrant model
 17033 ;;
 17034                           
 17035                           	psect	text96
 17036  004F18                     __ptext96:
 17037                           	opt stack 0
 17038  004F18                     _UDPIsGetReady:
 17039                           	opt stack 19
 17040                           
 17041                           ;incstack = 0
 17042                           ;UDPIsGetReady@s stored from wreg
 17043  004F18  6E28               	movwf	UDPIsGetReady@s,c
 17044                           
 17045                           ;udp.c: 957: activeUDPSocket = s;
 17046  004F1A  C028  F0CE         	movff	UDPIsGetReady@s,_activeUDPSocket
 17047                           
 17048                           ;udp.c: 958: if (SocketWithRxData != s)
 17049  004F1E  5028               	movf	UDPIsGetReady@s,w,c
 17050  004F20  1843               	xorwf	_SocketWithRxData,w,c
 17051  004F22  E003               	bz	l1817
 17052                           
 17053                           ;udp.c: 959: return 0;
 17054  004F24  6A26               	clrf	?_UDPIsGetReady,c
 17055  004F26  6A27               	clrf	?_UDPIsGetReady+1,c
 17056  004F28  0012               	return	
 17057  004F2A                     l1817:
 17058                           
 17059                           ;udp.c: 963: if (Flags.bFirstRead) {
 17060  004F2A  A03B               	btfss	_Flags,0,c
 17061  004F2C  D005               	goto	l9490
 17062                           
 17063                           ;udp.c: 964: Flags.bFirstRead = 0;
 17064  004F2E  903B               	bcf	_Flags,0,c
 17065                           
 17066                           ;udp.c: 965: UDPSetRxBuffer(0);
 17067  004F30  6A25               	clrf	UDPSetRxBuffer@wOffset+1,c
 17068  004F32  6A24               	clrf	UDPSetRxBuffer@wOffset,c
 17069  004F34  ECA2  F029         	call	_UDPSetRxBuffer	;wreg free
 17070  004F38                     l9490:
 17071                           
 17072                           ;udp.c: 966: }
 17073                           ;udp.c: 968: return UDPRxCount - wGetOffset;
 17074  004F38  5037               	movf	_wGetOffset,w,c
 17075  004F3A  5C33               	subwf	_UDPRxCount,w,c
 17076  004F3C  6E26               	movwf	?_UDPIsGetReady,c
 17077  004F3E  5038               	movf	_wGetOffset+1,w,c
 17078  004F40  5834               	subwfb	_UDPRxCount+1,w,c
 17079  004F42  6E27               	movwf	?_UDPIsGetReady+1,c
 17080  004F44  0012               	return		;funcret
 17081  004F46                     __end_of_UDPIsGetReady:
 17082                           	opt stack 0
 17083                           tblptru	equ	0xFF8
 17084                           tblptrh	equ	0xFF7
 17085                           tblptrl	equ	0xFF6
 17086                           tablat	equ	0xFF5
 17087                           prodh	equ	0xFF4
 17088                           prodl	equ	0xFF3
 17089                           intcon	equ	0xFF2
 17090                           intcon2	equ	0xFF1
 17091                           postinc0	equ	0xFEE
 17092                           wreg	equ	0xFE8
 17093                           indf1	equ	0xFE7
 17094                           postinc1	equ	0xFE6
 17095                           postdec1	equ	0xFE5
 17096                           plusw1	equ	0xFE3
 17097                           fsr1h	equ	0xFE2
 17098                           fsr1l	equ	0xFE1
 17099                           indf2	equ	0xFDF
 17100                           postinc2	equ	0xFDE
 17101                           postdec2	equ	0xFDD
 17102                           plusw2	equ	0xFDB
 17103                           fsr2h	equ	0xFDA
 17104                           fsr2l	equ	0xFD9
 17105                           status	equ	0xFD8
 17106                           
 17107 ;; *************** function _UDPSetRxBuffer *****************
 17108 ;; Defined at:
 17109 ;;		line 592 in file "../framework/tcpip/src/udp.c"
 17110 ;; Parameters:    Size  Location     Type
 17111 ;;  wOffset         2   35[COMRAM] unsigned int 
 17112 ;; Auto vars:     Size  Location     Type
 17113 ;;		None
 17114 ;; Return value:  Size  Location     Type
 17115 ;;		None               void
 17116 ;; Registers used:
 17117 ;;		wreg, status,2, status,0, cstack
 17118 ;; Tracked objects:
 17119 ;;		On entry : 0/0
 17120 ;;		On exit  : F/1
 17121 ;;		Unchanged: 0/0
 17122 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17123 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17124 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17125 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17126 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17127 ;;Total ram usage:        2 bytes
 17128 ;; Hardware stack levels used:    1
 17129 ;; Hardware stack levels required when called:    8
 17130 ;; This function calls:
 17131 ;;		_IPSetRxBuffer
 17132 ;; This function is called by:
 17133 ;;		__DHCPReceive
 17134 ;;		_UDPIsGetReady
 17135 ;; This function uses a non-reentrant model
 17136 ;;
 17137                           
 17138                           	psect	text97
 17139  005344                     __ptext97:
 17140                           	opt stack 0
 17141  005344                     _UDPSetRxBuffer:
 17142                           	opt stack 19
 17143                           
 17144                           ;udp.c: 594: IPSetRxBuffer(wOffset + sizeof (UDP_HEADER));
 17145                           
 17146                           ;incstack = 0
 17147  005344  0E08               	movlw	8
 17148  005346  2424               	addwf	UDPSetRxBuffer@wOffset,w,c
 17149  005348  6E22               	movwf	IPSetRxBuffer@Offset,c
 17150  00534A  0E00               	movlw	0
 17151  00534C  2025               	addwfc	UDPSetRxBuffer@wOffset+1,w,c
 17152  00534E  6E23               	movwf	IPSetRxBuffer@Offset+1,c
 17153  005350  EC25  F02A         	call	_IPSetRxBuffer	;wreg free
 17154                           
 17155                           ; BSR set to: 1
 17156                           ;udp.c: 595: wGetOffset = wOffset;
 17157  005354  C024  F037         	movff	UDPSetRxBuffer@wOffset,_wGetOffset
 17158  005358  C025  F038         	movff	UDPSetRxBuffer@wOffset+1,_wGetOffset+1
 17159                           
 17160                           ; BSR set to: 1
 17161  00535C  0012               	return		;funcret
 17162  00535E                     __end_of_UDPSetRxBuffer:
 17163                           	opt stack 0
 17164                           tblptru	equ	0xFF8
 17165                           tblptrh	equ	0xFF7
 17166                           tblptrl	equ	0xFF6
 17167                           tablat	equ	0xFF5
 17168                           prodh	equ	0xFF4
 17169                           prodl	equ	0xFF3
 17170                           intcon	equ	0xFF2
 17171                           intcon2	equ	0xFF1
 17172                           postinc0	equ	0xFEE
 17173                           wreg	equ	0xFE8
 17174                           indf1	equ	0xFE7
 17175                           postinc1	equ	0xFE6
 17176                           postdec1	equ	0xFE5
 17177                           plusw1	equ	0xFE3
 17178                           fsr1h	equ	0xFE2
 17179                           fsr1l	equ	0xFE1
 17180                           indf2	equ	0xFDF
 17181                           postinc2	equ	0xFDE
 17182                           postdec2	equ	0xFDD
 17183                           plusw2	equ	0xFDB
 17184                           fsr2h	equ	0xFDA
 17185                           fsr2l	equ	0xFD9
 17186                           status	equ	0xFD8
 17187                           
 17188 ;; *************** function _IPSetRxBuffer *****************
 17189 ;; Defined at:
 17190 ;;		line 255 in file "../framework/tcpip/src/ip.c"
 17191 ;; Parameters:    Size  Location     Type
 17192 ;;  Offset          2   33[COMRAM] unsigned int 
 17193 ;; Auto vars:     Size  Location     Type
 17194 ;;		None
 17195 ;; Return value:  Size  Location     Type
 17196 ;;		None               void
 17197 ;; Registers used:
 17198 ;;		wreg, status,2, status,0, cstack
 17199 ;; Tracked objects:
 17200 ;;		On entry : 0/0
 17201 ;;		On exit  : F/1
 17202 ;;		Unchanged: 0/0
 17203 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17204 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17205 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17206 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17207 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17208 ;;Total ram usage:        2 bytes
 17209 ;; Hardware stack levels used:    1
 17210 ;; Hardware stack levels required when called:    7
 17211 ;; This function calls:
 17212 ;;		_MACSetReadPtrInRx
 17213 ;; This function is called by:
 17214 ;;		_UDPSetRxBuffer
 17215 ;;		_UDPProcess
 17216 ;; This function uses a non-reentrant model
 17217 ;;
 17218                           
 17219                           	psect	text98
 17220  00544A                     __ptext98:
 17221                           	opt stack 0
 17222  00544A                     _IPSetRxBuffer:
 17223                           	opt stack 21
 17224                           
 17225                           ;ip.c: 257: MACSetReadPtrInRx(Offset + IPHeaderLen);
 17226                           
 17227                           ; BSR set to: 1
 17228                           ;incstack = 0
 17229  00544A  0100               	movlb	0	; () banked
 17230  00544C  51CD               	movf	_IPHeaderLen& (0+255),w,b
 17231  00544E  2422               	addwf	IPSetRxBuffer@Offset,w,c
 17232  005450  6E1C               	movwf	MACSetReadPtrInRx@offset,c
 17233  005452  0E00               	movlw	0
 17234  005454  2023               	addwfc	IPSetRxBuffer@Offset+1,w,c
 17235  005456  6E1D               	movwf	MACSetReadPtrInRx@offset+1,c
 17236  005458  EF11  F027         	goto	_MACSetReadPtrInRx	;wreg free
 17237  00545C                     __end_of_IPSetRxBuffer:
 17238                           	opt stack 0
 17239                           tblptru	equ	0xFF8
 17240                           tblptrh	equ	0xFF7
 17241                           tblptrl	equ	0xFF6
 17242                           tablat	equ	0xFF5
 17243                           prodh	equ	0xFF4
 17244                           prodl	equ	0xFF3
 17245                           intcon	equ	0xFF2
 17246                           intcon2	equ	0xFF1
 17247                           postinc0	equ	0xFEE
 17248                           wreg	equ	0xFE8
 17249                           indf1	equ	0xFE7
 17250                           postinc1	equ	0xFE6
 17251                           postdec1	equ	0xFE5
 17252                           plusw1	equ	0xFE3
 17253                           fsr1h	equ	0xFE2
 17254                           fsr1l	equ	0xFE1
 17255                           indf2	equ	0xFDF
 17256                           postinc2	equ	0xFDE
 17257                           postdec2	equ	0xFDD
 17258                           plusw2	equ	0xFDB
 17259                           fsr2h	equ	0xFDA
 17260                           fsr2l	equ	0xFD9
 17261                           status	equ	0xFD8
 17262                           
 17263 ;; *************** function _MACSetReadPtrInRx *****************
 17264 ;; Defined at:
 17265 ;;		line 576 in file "../framework/tcpip/src/eth97j60.c"
 17266 ;; Parameters:    Size  Location     Type
 17267 ;;  offset          2   27[COMRAM] unsigned int 
 17268 ;; Auto vars:     Size  Location     Type
 17269 ;;  ReadPT          2   31[COMRAM] struct .
 17270 ;; Return value:  Size  Location     Type
 17271 ;;		None               void
 17272 ;; Registers used:
 17273 ;;		wreg, status,2, status,0
 17274 ;; Tracked objects:
 17275 ;;		On entry : F/0
 17276 ;;		On exit  : F/1
 17277 ;;		Unchanged: 0/0
 17278 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17279 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17280 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17281 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17282 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17283 ;;Total ram usage:        6 bytes
 17284 ;; Hardware stack levels used:    1
 17285 ;; Hardware stack levels required when called:    6
 17286 ;; This function calls:
 17287 ;;		Nothing
 17288 ;; This function is called by:
 17289 ;;		_IPGetHeader
 17290 ;;		_IPSetRxBuffer
 17291 ;; This function uses a non-reentrant model
 17292 ;;
 17293                           
 17294                           	psect	text99
 17295  004E22                     __ptext99:
 17296                           	opt stack 0
 17297  004E22                     _MACSetReadPtrInRx:
 17298                           	opt stack 21
 17299                           
 17300                           ; BSR set to: 0
 17301                           ;eth97j60.c: 578: TCPIP_UINT16_VAL ReadPT;
 17302                           ;eth97j60.c: 582: ReadPT.Val = CurrentPacketLocation.Val + sizeof(ENC_PREAMBLE) + offset
      +                          ;
 17303                           
 17304                           ; BSR set to: 1
 17305                           ;incstack = 0
 17306  004E22  501C               	movf	MACSetReadPtrInRx@offset,w,c
 17307  004E24  0101               	movlb	1	; () banked
 17308  004E26  2566               	addwf	_CurrentPacketLocation& (0+255),w,b
 17309  004E28  6E1E               	movwf	??_MACSetReadPtrInRx& (0+255),c
 17310  004E2A  501D               	movf	MACSetReadPtrInRx@offset+1,w,c
 17311  004E2C  2167               	addwfc	(_CurrentPacketLocation+1)& (0+255),w,b
 17312  004E2E  6E1F               	movwf	(??_MACSetReadPtrInRx+1)& (0+255),c
 17313  004E30  0E14               	movlw	20
 17314  004E32  241E               	addwf	??_MACSetReadPtrInRx,w,c
 17315  004E34  6E20               	movwf	MACSetReadPtrInRx@ReadPT,c
 17316  004E36  0E00               	movlw	0
 17317  004E38  201F               	addwfc	??_MACSetReadPtrInRx+1,w,c
 17318  004E3A  6E21               	movwf	MACSetReadPtrInRx@ReadPT+1,c
 17319                           
 17320                           ;eth97j60.c: 585: if(ReadPT.Val > ((((8*1024ul) - (1ul+1518ul+7ul) - 0u - 0ul - 0ul)-2ul
      +                          ) | 0x0001ul))
 17321  004E3C  0E0A               	movlw	10
 17322  004E3E  5C20               	subwf	MACSetReadPtrInRx@ReadPT,w,c
 17323  004E40  0E1A               	movlw	26
 17324  004E42  5821               	subwfb	MACSetReadPtrInRx@ReadPT+1,w,c
 17325  004E44  E304               	bnc	l9084
 17326                           
 17327                           ; BSR set to: 1
 17328                           ;eth97j60.c: 586: ReadPT.Val -= (((((8*1024ul) - (1ul+1518ul+7ul) - 0u - 0ul - 0ul)-2ul)
      +                           | 0x0001ul)-(0ul)+1ul);
 17329  004E46  0E0A               	movlw	10
 17330  004E48  5E20               	subwf	MACSetReadPtrInRx@ReadPT,f,c
 17331  004E4A  0E1A               	movlw	26
 17332  004E4C  5A21               	subwfb	MACSetReadPtrInRx@ReadPT+1,f,c
 17333  004E4E                     l9084:
 17334                           
 17335                           ; BSR set to: 1
 17336                           ;eth97j60.c: 589: ERDPTL = ReadPT.v[0];
 17337  004E4E  C020  FF7A         	movff	MACSetReadPtrInRx@ReadPT,3962	;volatile
 17338                           
 17339                           ; BSR set to: 1
 17340                           ;eth97j60.c: 590: ERDPTH = ReadPT.v[1];
 17341  004E52  C021  FF7B         	movff	MACSetReadPtrInRx@ReadPT+1,3963	;volatile
 17342                           
 17343                           ; BSR set to: 1
 17344  004E56  0012               	return		;funcret
 17345  004E58                     __end_of_MACSetReadPtrInRx:
 17346                           	opt stack 0
 17347                           tblptru	equ	0xFF8
 17348                           tblptrh	equ	0xFF7
 17349                           tblptrl	equ	0xFF6
 17350                           tablat	equ	0xFF5
 17351                           prodh	equ	0xFF4
 17352                           prodl	equ	0xFF3
 17353                           intcon	equ	0xFF2
 17354                           intcon2	equ	0xFF1
 17355                           postinc0	equ	0xFEE
 17356                           wreg	equ	0xFE8
 17357                           indf1	equ	0xFE7
 17358                           postinc1	equ	0xFE6
 17359                           postdec1	equ	0xFE5
 17360                           plusw1	equ	0xFE3
 17361                           fsr1h	equ	0xFE2
 17362                           fsr1l	equ	0xFE1
 17363                           indf2	equ	0xFDF
 17364                           postinc2	equ	0xFDE
 17365                           postdec2	equ	0xFDD
 17366                           plusw2	equ	0xFDB
 17367                           fsr2h	equ	0xFDA
 17368                           fsr2l	equ	0xFD9
 17369                           status	equ	0xFD8
 17370                           
 17371 ;; *************** function _MACIsLinked *****************
 17372 ;; Defined at:
 17373 ;;		line 220 in file "../framework/tcpip/src/eth97j60.c"
 17374 ;; Parameters:    Size  Location     Type
 17375 ;;		None
 17376 ;; Auto vars:     Size  Location     Type
 17377 ;;		None
 17378 ;; Return value:  Size  Location     Type
 17379 ;;                  1    wreg      unsigned char 
 17380 ;; Registers used:
 17381 ;;		wreg, fsr2l, fsr2h, status,2, cstack
 17382 ;; Tracked objects:
 17383 ;;		On entry : 0/1
 17384 ;;		On exit  : 0/0
 17385 ;;		Unchanged: 0/0
 17386 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17387 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17388 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17389 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17390 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17391 ;;Total ram usage:        0 bytes
 17392 ;; Hardware stack levels used:    1
 17393 ;; Hardware stack levels required when called:    7
 17394 ;; This function calls:
 17395 ;;		_ReadPHYReg
 17396 ;; This function is called by:
 17397 ;;		_StackTask
 17398 ;;		_DHCPTask
 17399 ;;		_main
 17400 ;; This function uses a non-reentrant model
 17401 ;;
 17402                           
 17403                           	psect	text100
 17404  0053FE                     __ptext100:
 17405                           	opt stack 0
 17406  0053FE                     _MACIsLinked:
 17407                           	opt stack 22
 17408                           
 17409                           ;eth97j60.c: 227: return ReadPHYReg(0x01).PHSTAT1bits.LLSTAT;
 17410                           
 17411                           ; BSR set to: 1
 17412                           ;incstack = 0
 17413  0053FE  0E01               	movlw	1
 17414  005400  ECA3  F027         	call	_ReadPHYReg
 17415  005404  0E1C               	movlw	low ?_ReadPHYReg
 17416  005406  6ED9               	movwf	fsr2l,c
 17417  005408  0E00               	movlw	high ?_ReadPHYReg
 17418  00540A  6EDA               	movwf	fsr2h,c
 17419  00540C  B4DF               	btfsc	indf2,2,c
 17420  00540E  0C01               	retlw	1
 17421  005410  0C00               	retlw	0	;funcret
 17422  005412                     __end_of_MACIsLinked:
 17423                           	opt stack 0
 17424                           tblptru	equ	0xFF8
 17425                           tblptrh	equ	0xFF7
 17426                           tblptrl	equ	0xFF6
 17427                           tablat	equ	0xFF5
 17428                           prodh	equ	0xFF4
 17429                           prodl	equ	0xFF3
 17430                           intcon	equ	0xFF2
 17431                           intcon2	equ	0xFF1
 17432                           postinc0	equ	0xFEE
 17433                           wreg	equ	0xFE8
 17434                           indf1	equ	0xFE7
 17435                           postinc1	equ	0xFE6
 17436                           postdec1	equ	0xFE5
 17437                           plusw1	equ	0xFE3
 17438                           fsr1h	equ	0xFE2
 17439                           fsr1l	equ	0xFE1
 17440                           indf2	equ	0xFDF
 17441                           postinc2	equ	0xFDE
 17442                           postdec2	equ	0xFDD
 17443                           plusw2	equ	0xFDB
 17444                           fsr2h	equ	0xFDA
 17445                           fsr2l	equ	0xFD9
 17446                           status	equ	0xFD8
 17447                           
 17448 ;; *************** function _ReadPHYReg *****************
 17449 ;; Defined at:
 17450 ;;		line 1146 in file "../framework/tcpip/src/eth97j60.c"
 17451 ;; Parameters:    Size  Location     Type
 17452 ;;  Register        1    wreg     unsigned char 
 17453 ;; Auto vars:     Size  Location     Type
 17454 ;;  Register        1   29[COMRAM] unsigned char 
 17455 ;;  Result          2   30[COMRAM] struct .
 17456 ;; Return value:  Size  Location     Type
 17457 ;;                  2   27[COMRAM] struct .
 17458 ;; Registers used:
 17459 ;;		wreg, status,2
 17460 ;; Tracked objects:
 17461 ;;		On entry : 0/1
 17462 ;;		On exit  : 0/0
 17463 ;;		Unchanged: 0/0
 17464 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17465 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17466 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17467 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17468 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17469 ;;Total ram usage:        5 bytes
 17470 ;; Hardware stack levels used:    1
 17471 ;; Hardware stack levels required when called:    6
 17472 ;; This function calls:
 17473 ;;		Nothing
 17474 ;; This function is called by:
 17475 ;;		_MACIsLinked
 17476 ;; This function uses a non-reentrant model
 17477 ;;
 17478                           
 17479                           	psect	text101
 17480  004F46                     __ptext101:
 17481                           	opt stack 0
 17482  004F46                     _ReadPHYReg:
 17483                           	opt stack 22
 17484                           
 17485                           ;incstack = 0
 17486                           ;ReadPHYReg@Register stored from wreg
 17487  004F46  6E1E               	movwf	ReadPHYReg@Register,c
 17488                           
 17489                           ;eth97j60.c: 1148: PHYREG Result;
 17490                           ;eth97j60.c: 1151: MIREGADR = Register; __nop();
 17491  004F48  C01E  FEB4         	movff	ReadPHYReg@Register,3764	;volatile
 17492  004F4C  F000               	nop	
 17493                           
 17494                           ;eth97j60.c: 1152: MICMD = (1); __nop();
 17495  004F4E  0E01               	movlw	1
 17496  004F50  010E               	movlb	14	; () banked
 17497  004F52  6FB2               	movwf	178,b	;volatile
 17498                           
 17499                           ; BSR set to: 14
 17500  004F54  F000               	nop	
 17501  004F56                     l2124:
 17502  004F56  010E               	movlb	14	; () banked
 17503  004F58  B18A               	btfsc	138,0,b	;volatile
 17504  004F5A  D7FD               	goto	l2124
 17505                           
 17506                           ; BSR set to: 14
 17507                           ;eth97j60.c: 1159: MICMD = 0x00; __nop();
 17508  004F5C  6BB2               	clrf	178,b	;volatile
 17509  004F5E  F000               	nop	
 17510                           
 17511                           ;eth97j60.c: 1162: Result.VAL.v[0] = MIRDL;
 17512  004F60  CEB8 F01F          	movff	3768,ReadPHYReg@Result	;volatile
 17513                           
 17514                           ;eth97j60.c: 1163: __nop();
 17515  004F64  F000               	nop	
 17516                           
 17517                           ;eth97j60.c: 1164: Result.VAL.v[1] = MIRDH;
 17518  004F66  CEB9 F020          	movff	3769,ReadPHYReg@Result+1	;volatile
 17519                           
 17520                           ;eth97j60.c: 1166: return Result;
 17521  004F6A  C01F  F01C         	movff	ReadPHYReg@Result,?_ReadPHYReg
 17522  004F6E  C020  F01D         	movff	ReadPHYReg@Result+1,?_ReadPHYReg+1
 17523  004F72  0012               	return		;funcret
 17524  004F74                     __end_of_ReadPHYReg:
 17525                           	opt stack 0
 17526                           tblptru	equ	0xFF8
 17527                           tblptrh	equ	0xFF7
 17528                           tblptrl	equ	0xFF6
 17529                           tablat	equ	0xFF5
 17530                           prodh	equ	0xFF4
 17531                           prodl	equ	0xFF3
 17532                           intcon	equ	0xFF2
 17533                           intcon2	equ	0xFF1
 17534                           postinc0	equ	0xFEE
 17535                           wreg	equ	0xFE8
 17536                           indf1	equ	0xFE7
 17537                           postinc1	equ	0xFE6
 17538                           postdec1	equ	0xFE5
 17539                           plusw1	equ	0xFE3
 17540                           fsr1h	equ	0xFE2
 17541                           fsr1l	equ	0xFE1
 17542                           indf2	equ	0xFDF
 17543                           postinc2	equ	0xFDE
 17544                           postdec2	equ	0xFDD
 17545                           plusw2	equ	0xFDB
 17546                           fsr2h	equ	0xFDA
 17547                           fsr2l	equ	0xFD9
 17548                           status	equ	0xFD8
 17549                           
 17550 ;; *************** function _LFSRRand *****************
 17551 ;; Defined at:
 17552 ;;		line 144 in file "../framework/tcpip/src/common/helpers.c"
 17553 ;; Parameters:    Size  Location     Type
 17554 ;;		None
 17555 ;; Auto vars:     Size  Location     Type
 17556 ;;  i               1   29[COMRAM] unsigned char 
 17557 ;; Return value:  Size  Location     Type
 17558 ;;                  2   27[COMRAM] unsigned int 
 17559 ;; Registers used:
 17560 ;;		wreg, status,2, status,0
 17561 ;; Tracked objects:
 17562 ;;		On entry : 0/0
 17563 ;;		On exit  : F/1
 17564 ;;		Unchanged: 0/0
 17565 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17566 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17567 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17568 ;;      Temps:          0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17569 ;;      Totals:         3      16       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17570 ;;Total ram usage:       19 bytes
 17571 ;; Hardware stack levels used:    1
 17572 ;; Hardware stack levels required when called:    6
 17573 ;; This function calls:
 17574 ;;		Nothing
 17575 ;; This function is called by:
 17576 ;;		_LFSRSeedRand
 17577 ;;		_GenerateRandomDWORD
 17578 ;;		_DHCPTask
 17579 ;; This function uses a non-reentrant model
 17580 ;;
 17581                           
 17582                           	psect	text102
 17583  003E58                     __ptext102:
 17584                           	opt stack 0
 17585  003E58                     _LFSRRand:
 17586                           	opt stack 22
 17587                           
 17588                           ;helpers.c: 146: uint8_t i;
 17589                           ;helpers.c: 151: for (i = 0; i < 15; i++)
 17590                           
 17591                           ;incstack = 0
 17592  003E58  6A1E               	clrf	LFSRRand@i,c
 17593  003E5A                     l9500:
 17594                           
 17595                           ;helpers.c: 152: dwLFSRRandSeed = (dwLFSRRandSeed >> 1) ^ ((0ul - (dwLFSRRandSeed & 1ul)
      +                          ) & 0xD0000001ul);
 17596  003E5A  0E01               	movlw	1
 17597  003E5C  0101               	movlb	1	; () banked
 17598  003E5E  15DA               	andwf	_dwLFSRRandSeed& (0+255),w,b
 17599  003E60  0100               	movlb	0	; () banked
 17600  003E62  6F60               	movwf	??_LFSRRand& (0+255),b
 17601  003E64  6B61               	clrf	(??_LFSRRand+1)& (0+255),b
 17602  003E66  6B62               	clrf	(??_LFSRRand+2)& (0+255),b
 17603  003E68  6B63               	clrf	(??_LFSRRand+3)& (0+255),b
 17604  003E6A  5160               	movf	??_LFSRRand& (0+255),w,b
 17605  003E6C  0800               	sublw	0
 17606  003E6E  6F64               	movwf	(??_LFSRRand+4)& (0+255),b
 17607  003E70  0E00               	movlw	0
 17608  003E72  5561               	subfwb	(??_LFSRRand+1)& (0+255),w,b
 17609  003E74  6F65               	movwf	(??_LFSRRand+5)& (0+255),b
 17610  003E76  0E00               	movlw	0
 17611  003E78  5562               	subfwb	(??_LFSRRand+2)& (0+255),w,b
 17612  003E7A  6F66               	movwf	(??_LFSRRand+6)& (0+255),b
 17613  003E7C  0E00               	movlw	0
 17614  003E7E  5563               	subfwb	(??_LFSRRand+3)& (0+255),w,b
 17615  003E80  6F67               	movwf	(??_LFSRRand+7)& (0+255),b
 17616  003E82  0E01               	movlw	1
 17617  003E84  1564               	andwf	(??_LFSRRand+4)& (0+255),w,b
 17618  003E86  6F68               	movwf	(??_LFSRRand+8)& (0+255),b
 17619  003E88  6B69               	clrf	(??_LFSRRand+9)& (0+255),b
 17620  003E8A  6B6A               	clrf	(??_LFSRRand+10)& (0+255),b
 17621  003E8C  0ED0               	movlw	208
 17622  003E8E  1567               	andwf	(??_LFSRRand+7)& (0+255),w,b
 17623  003E90  6F6B               	movwf	(??_LFSRRand+11)& (0+255),b
 17624  003E92  C1DA  F06C         	movff	_dwLFSRRandSeed,??_LFSRRand+12
 17625  003E96  C1DB  F06D         	movff	_dwLFSRRandSeed+1,??_LFSRRand+13
 17626  003E9A  C1DC  F06E         	movff	_dwLFSRRandSeed+2,??_LFSRRand+14
 17627  003E9E  C1DD  F06F         	movff	_dwLFSRRandSeed+3,??_LFSRRand+15
 17628  003EA2  90D8               	bcf	status,0,c
 17629  003EA4  336F               	rrcf	(??_LFSRRand+15)& (0+255),f,b
 17630  003EA6  336E               	rrcf	(??_LFSRRand+14)& (0+255),f,b
 17631  003EA8  336D               	rrcf	(??_LFSRRand+13)& (0+255),f,b
 17632  003EAA  336C               	rrcf	(??_LFSRRand+12)& (0+255),f,b
 17633  003EAC  5168               	movf	(??_LFSRRand+8)& (0+255),w,b
 17634  003EAE  196C               	xorwf	(??_LFSRRand+12)& (0+255),w,b
 17635  003EB0  0101               	movlb	1	; () banked
 17636  003EB2  6FDA               	movwf	_dwLFSRRandSeed& (0+255),b
 17637  003EB4  0100               	movlb	0	; () banked
 17638  003EB6  5169               	movf	(??_LFSRRand+9)& (0+255),w,b
 17639  003EB8  196D               	xorwf	(??_LFSRRand+13)& (0+255),w,b
 17640  003EBA  0101               	movlb	1	; () banked
 17641  003EBC  6FDB               	movwf	(_dwLFSRRandSeed+1)& (0+255),b
 17642  003EBE  0100               	movlb	0	; () banked
 17643  003EC0  516A               	movf	(??_LFSRRand+10)& (0+255),w,b
 17644  003EC2  196E               	xorwf	(??_LFSRRand+14)& (0+255),w,b
 17645  003EC4  0101               	movlb	1	; () banked
 17646  003EC6  6FDC               	movwf	(_dwLFSRRandSeed+2)& (0+255),b
 17647  003EC8  0100               	movlb	0	; () banked
 17648  003ECA  516B               	movf	(??_LFSRRand+11)& (0+255),w,b
 17649  003ECC  196F               	xorwf	(??_LFSRRand+15)& (0+255),w,b
 17650  003ECE  0101               	movlb	1	; () banked
 17651  003ED0  6FDD               	movwf	(_dwLFSRRandSeed+3)& (0+255),b
 17652                           
 17653                           ; BSR set to: 1
 17654  003ED2  2A1E               	incf	LFSRRand@i,f,c
 17655                           
 17656                           ; BSR set to: 1
 17657  003ED4  0E0E               	movlw	14
 17658  003ED6  641E               	cpfsgt	LFSRRand@i,c
 17659  003ED8  D7C0               	goto	l9500
 17660                           
 17661                           ; BSR set to: 1
 17662                           ;helpers.c: 155: return (uint16_t) dwLFSRRandSeed;
 17663  003EDA  C1DA  F01C         	movff	_dwLFSRRandSeed,?_LFSRRand
 17664  003EDE  C1DB  F01D         	movff	_dwLFSRRandSeed+1,?_LFSRRand+1
 17665                           
 17666                           ; BSR set to: 1
 17667  003EE2  0C0E               	retlw	14	;funcret
 17668  003EE4                     __end_of_LFSRRand:
 17669                           	opt stack 0
 17670                           tblptru	equ	0xFF8
 17671                           tblptrh	equ	0xFF7
 17672                           tblptrl	equ	0xFF6
 17673                           tablat	equ	0xFF5
 17674                           prodh	equ	0xFF4
 17675                           prodl	equ	0xFF3
 17676                           intcon	equ	0xFF2
 17677                           intcon2	equ	0xFF1
 17678                           postinc0	equ	0xFEE
 17679                           wreg	equ	0xFE8
 17680                           indf1	equ	0xFE7
 17681                           postinc1	equ	0xFE6
 17682                           postdec1	equ	0xFE5
 17683                           plusw1	equ	0xFE3
 17684                           fsr1h	equ	0xFE2
 17685                           fsr1l	equ	0xFE1
 17686                           indf2	equ	0xFDF
 17687                           postinc2	equ	0xFDE
 17688                           postdec2	equ	0xFDD
 17689                           plusw2	equ	0xFDB
 17690                           fsr2h	equ	0xFDA
 17691                           fsr2l	equ	0xFD9
 17692                           status	equ	0xFD8
 17693                           
 17694 ;; *************** function _DHCPIsBound *****************
 17695 ;; Defined at:
 17696 ;;		line 308 in file "../framework/tcpip/src/dhcp_client.c"
 17697 ;; Parameters:    Size  Location     Type
 17698 ;;  vInterface      1    wreg     unsigned char 
 17699 ;; Auto vars:     Size  Location     Type
 17700 ;;  vInterface      1    0[COMRAM] unsigned char 
 17701 ;; Return value:  Size  Location     Type
 17702 ;;                  1    wreg      unsigned char 
 17703 ;; Registers used:
 17704 ;;		wreg
 17705 ;; Tracked objects:
 17706 ;;		On entry : 0/1
 17707 ;;		On exit  : F/0
 17708 ;;		Unchanged: 0/0
 17709 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17710 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17711 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17712 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17713 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17714 ;;Total ram usage:        0 bytes
 17715 ;; Hardware stack levels used:    1
 17716 ;; Hardware stack levels required when called:    6
 17717 ;; This function calls:
 17718 ;;		Nothing
 17719 ;; This function is called by:
 17720 ;;		_StackTask
 17721 ;;		_main
 17722 ;; This function uses a non-reentrant model
 17723 ;;
 17724                           
 17725                           	psect	text103
 17726  0054BE                     __ptext103:
 17727                           	opt stack 0
 17728  0054BE                     _DHCPIsBound:
 17729                           	opt stack 23
 17730                           
 17731                           ;dhcp_client.c: 310: ;
 17732                           ;dhcp_client.c: 311: return DHCPClient.flags.bits.bIsBound;
 17733                           
 17734                           ; BSR set to: 1
 17735                           ;incstack = 0
 17736  0054BE  0100               	movlb	0	; () banked
 17737  0054C0  B1DB               	btfsc	(_DHCPClient+2)& (0+255),0,b
 17738  0054C2  0C01               	retlw	1
 17739                           
 17740                           ; BSR set to: 0
 17741  0054C4  0C00               	retlw	0	;funcret
 17742  0054C6                     __end_of_DHCPIsBound:
 17743                           	opt stack 0
 17744                           tblptru	equ	0xFF8
 17745                           tblptrh	equ	0xFF7
 17746                           tblptrl	equ	0xFF6
 17747                           tablat	equ	0xFF5
 17748                           prodh	equ	0xFF4
 17749                           prodl	equ	0xFF3
 17750                           intcon	equ	0xFF2
 17751                           intcon2	equ	0xFF1
 17752                           postinc0	equ	0xFEE
 17753                           wreg	equ	0xFE8
 17754                           indf1	equ	0xFE7
 17755                           postinc1	equ	0xFE6
 17756                           postdec1	equ	0xFE5
 17757                           plusw1	equ	0xFE3
 17758                           fsr1h	equ	0xFE2
 17759                           fsr1l	equ	0xFE1
 17760                           indf2	equ	0xFDF
 17761                           postinc2	equ	0xFDE
 17762                           postdec2	equ	0xFDD
 17763                           plusw2	equ	0xFDB
 17764                           fsr2h	equ	0xFDA
 17765                           fsr2l	equ	0xFD9
 17766                           status	equ	0xFD8
 17767                           
 17768 ;; *************** function _DHCPInit *****************
 17769 ;; Defined at:
 17770 ;;		line 156 in file "../framework/tcpip/src/dhcp_client.c"
 17771 ;; Parameters:    Size  Location     Type
 17772 ;;  vInterface      1    wreg     unsigned char 
 17773 ;; Auto vars:     Size  Location     Type
 17774 ;;  vInterface      1    0[COMRAM] unsigned char 
 17775 ;;  i               1   28[COMRAM] unsigned char 
 17776 ;; Return value:  Size  Location     Type
 17777 ;;		None               void
 17778 ;; Registers used:
 17779 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 17780 ;; Tracked objects:
 17781 ;;		On entry : 0/1
 17782 ;;		On exit  : F/0
 17783 ;;		Unchanged: 0/0
 17784 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17785 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17786 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17787 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17788 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17789 ;;Total ram usage:        1 bytes
 17790 ;; Hardware stack levels used:    1
 17791 ;; Hardware stack levels required when called:    7
 17792 ;; This function calls:
 17793 ;;		_UDPClose
 17794 ;; This function is called by:
 17795 ;;		_StackInit
 17796 ;;		_StackTask
 17797 ;; This function uses a non-reentrant model
 17798 ;;
 17799                           
 17800                           	psect	text104
 17801  004D3A                     __ptext104:
 17802                           	opt stack 0
 17803  004D3A                     _DHCPInit:
 17804                           	opt stack 22
 17805                           
 17806                           ;dhcp_client.c: 158: uint8_t i;
 17807                           ;dhcp_client.c: 162: if (!DHCPClientInitializedOnce) {
 17808                           
 17809                           ; BSR set to: 0
 17810                           ;incstack = 0
 17811  004D3A  0101               	movlb	1	; () banked
 17812  004D3C  5175               	movf	_DHCPClientInitializedOnce& (0+255),w,b
 17813  004D3E  E108               	bnz	l9946
 17814                           
 17815                           ; BSR set to: 1
 17816                           ;dhcp_client.c: 163: DHCPClientInitializedOnce = 1;
 17817  004D40  0E01               	movlw	1
 17818  004D42  6F75               	movwf	_DHCPClientInitializedOnce& (0+255),b
 17819                           
 17820                           ; BSR set to: 1
 17821                           ;dhcp_client.c: 164: for (i = 0; i < (1u); i++) {
 17822  004D44  6A1D               	clrf	DHCPInit@i,c
 17823  004D46                     l1399:
 17824                           
 17825                           ;dhcp_client.c: 165: ;
 17826                           ;dhcp_client.c: 166: DHCPClient.hDHCPSocket = (0xffu);
 17827  004D46  0100               	movlb	0	; () banked
 17828  004D48  69D9               	setf	_DHCPClient& (0+255),b
 17829                           
 17830                           ; BSR set to: 0
 17831  004D4A  2A1D               	incf	DHCPInit@i,f,c
 17832                           
 17833                           ; BSR set to: 0
 17834  004D4C  501D               	movf	DHCPInit@i,w,c
 17835  004D4E  E0FB               	bz	l1399
 17836  004D50                     l9946:
 17837                           
 17838                           ;dhcp_client.c: 167: }
 17839                           ;dhcp_client.c: 168: }
 17840                           ;dhcp_client.c: 170: ;
 17841                           ;dhcp_client.c: 172: if (DHCPClient.hDHCPSocket != (0xffu)) {
 17842  004D50  0100               	movlb	0	; () banked
 17843  004D52  29D9               	incf	_DHCPClient& (0+255),w,b
 17844  004D54  E005               	bz	l9952
 17845                           
 17846                           ; BSR set to: 0
 17847                           ;dhcp_client.c: 173: UDPClose(DHCPClient.hDHCPSocket);
 17848  004D56  51D9               	movf	_DHCPClient& (0+255),w,b
 17849  004D58  ECAB  F025         	call	_UDPClose
 17850                           
 17851                           ;dhcp_client.c: 174: DHCPClient.hDHCPSocket = (0xffu);
 17852  004D5C  0100               	movlb	0	; () banked
 17853  004D5E  69D9               	setf	_DHCPClient& (0+255),b
 17854  004D60                     l9952:
 17855                           
 17856                           ; BSR set to: 0
 17857                           ;dhcp_client.c: 175: }
 17858                           ;dhcp_client.c: 178: DHCPClient.dwBaseTime = (4ul);
 17859  004D60  0E04               	movlw	4
 17860  004D62  6FE0               	movwf	(_DHCPClient+7)& (0+255),b
 17861  004D64  6BE1               	clrf	(_DHCPClient+8)& (0+255),b
 17862  004D66  6BE2               	clrf	(_DHCPClient+9)& (0+255),b
 17863  004D68  6BE3               	clrf	(_DHCPClient+10)& (0+255),b
 17864                           
 17865                           ; BSR set to: 0
 17866                           ;dhcp_client.c: 179: DHCPClient.smState = SM_DHCP_GET_SOCKET;
 17867  004D6A  0E01               	movlw	1
 17868  004D6C  6FDA               	movwf	(_DHCPClient+1)& (0+255),b
 17869                           
 17870                           ; BSR set to: 0
 17871                           ;dhcp_client.c: 180: DHCPClient.flags.val = 0;
 17872  004D6E  6BDB               	clrf	(_DHCPClient+2)& (0+255),b
 17873                           
 17874                           ; BSR set to: 0
 17875                           ;dhcp_client.c: 181: DHCPClient.flags.bits.bUseUnicastMode = 1;
 17876  004D70  89DB               	bsf	(_DHCPClient+2)& (0+255),4,b
 17877                           
 17878                           ; BSR set to: 0
 17879                           ;dhcp_client.c: 182: DHCPClient.flags.bits.bEvent = 1;
 17880  004D72  83DB               	bsf	(_DHCPClient+2)& (0+255),1,b
 17881                           
 17882                           ; BSR set to: 0
 17883  004D74  0012               	return		;funcret
 17884  004D76                     __end_of_DHCPInit:
 17885                           	opt stack 0
 17886                           tblptru	equ	0xFF8
 17887                           tblptrh	equ	0xFF7
 17888                           tblptrl	equ	0xFF6
 17889                           tablat	equ	0xFF5
 17890                           prodh	equ	0xFF4
 17891                           prodl	equ	0xFF3
 17892                           intcon	equ	0xFF2
 17893                           intcon2	equ	0xFF1
 17894                           postinc0	equ	0xFEE
 17895                           wreg	equ	0xFE8
 17896                           indf1	equ	0xFE7
 17897                           postinc1	equ	0xFE6
 17898                           postdec1	equ	0xFE5
 17899                           plusw1	equ	0xFE3
 17900                           fsr1h	equ	0xFE2
 17901                           fsr1l	equ	0xFE1
 17902                           indf2	equ	0xFDF
 17903                           postinc2	equ	0xFDE
 17904                           postdec2	equ	0xFDD
 17905                           plusw2	equ	0xFDB
 17906                           fsr2h	equ	0xFDA
 17907                           fsr2l	equ	0xFD9
 17908                           status	equ	0xFD8
 17909                           
 17910 ;; *************** function _ARPProcess *****************
 17911 ;; Defined at:
 17912 ;;		line 384 in file "../framework/tcpip/src/arp.c"
 17913 ;; Parameters:    Size  Location     Type
 17914 ;;		None
 17915 ;; Auto vars:     Size  Location     Type
 17916 ;;  packet         28    0[BANK0 ] struct .
 17917 ;; Return value:  Size  Location     Type
 17918 ;;                  1    wreg      unsigned char 
 17919 ;; Registers used:
 17920 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 17921 ;; Tracked objects:
 17922 ;;		On entry : 0/0
 17923 ;;		On exit  : 0/0
 17924 ;;		Unchanged: 0/0
 17925 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17926 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17927 ;;      Locals:         0      28       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17928 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17929 ;;      Totals:         0      28       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17930 ;;Total ram usage:       28 bytes
 17931 ;; Hardware stack levels used:    1
 17932 ;; Hardware stack levels required when called:   11
 17933 ;; This function calls:
 17934 ;;		_ARPPut
 17935 ;;		_MACDiscardRx
 17936 ;;		_MACGetArray
 17937 ;;		_SwapARPPacket
 17938 ;; This function is called by:
 17939 ;;		_StackTask
 17940 ;; This function uses a non-reentrant model
 17941 ;;
 17942                           
 17943                           	psect	text105
 17944  002BBE                     __ptext105:
 17945                           	opt stack 0
 17946  002BBE                     _ARPProcess:
 17947                           	opt stack 18
 17948                           
 17949                           ;arp.c: 386: ARP_PACKET packet;
 17950                           ;arp.c: 387: static NODE_INFO Target;
 17951                           ;arp.c: 392: static enum {
 17952                           ;arp.c: 393: SM_ARP_IDLE = 0,
 17953                           ;arp.c: 394: SM_ARP_REPLY
 17954                           ;arp.c: 395: } smARP = SM_ARP_IDLE;
 17955                           ;arp.c: 397: switch (smARP) {
 17956                           
 17957                           ; BSR set to: 0
 17958                           ;incstack = 0
 17959  002BBE  D07A               	goto	l10244
 17960  002BC0                     l10204:
 17961                           
 17962                           ; BSR set to: 1
 17963                           ;arp.c: 400: MACGetArray((uint8_t *) & packet, sizeof (packet));
 17964  002BC0  0E60               	movlw	low ARPProcess@packet
 17965  002BC2  6E1C               	movwf	MACGetArray@val,c
 17966  002BC4  6A1D               	clrf	MACGetArray@val+1,c
 17967  002BC6  6A1F               	clrf	MACGetArray@len+1,c
 17968  002BC8  0E1C               	movlw	28
 17969  002BCA  6E1E               	movwf	MACGetArray@len,c
 17970  002BCC  EC85  F025         	call	_MACGetArray	;wreg free
 17971                           
 17972                           ;arp.c: 401: MACDiscardRx();
 17973  002BD0  ECD8  F026         	call	_MACDiscardRx	;wreg free
 17974                           
 17975                           ;arp.c: 402: SwapARPPacket(&packet);
 17976  002BD4  0E60               	movlw	ARPProcess@packet& (0+255)
 17977  002BD6  ECE9  F020         	call	_SwapARPPacket
 17978                           
 17979                           ;arp.c: 405: if (packet.HardwareType != (0x0001u) ||
 17980                           ;arp.c: 406: packet.MACAddrLen != sizeof (MAC_ADDR) ||
 17981                           ;arp.c: 407: packet.ProtocolLen != sizeof (TCPIP_UINT32_VAL)) {
 17982  002BDA  0100               	movlb	0	; () banked
 17983  002BDC  0560               	decf	ARPProcess@packet& (0+255),w,b
 17984  002BDE  1161               	iorwf	(ARPProcess@packet+1)& (0+255),w,b
 17985  002BE0  A4D8               	btfss	status,2,c
 17986  002BE2  0012               	return	
 17987                           
 17988                           ; BSR set to: 0
 17989  002BE4  0E06               	movlw	6
 17990  002BE6  1964               	xorwf	(ARPProcess@packet+4)& (0+255),w,b
 17991  002BE8  A4D8               	btfss	status,2,c
 17992  002BEA  0012               	return	
 17993                           
 17994                           ; BSR set to: 0
 17995  002BEC  0E04               	movlw	4
 17996  002BEE  1965               	xorwf	(ARPProcess@packet+5)& (0+255),w,b
 17997  002BF0  E001               	bz	l10216
 17998  002BF2  0012               	return	
 17999  002BF4                     l10216:
 18000                           
 18001                           ; BSR set to: 0
 18002                           ;arp.c: 409: }
 18003                           ;arp.c: 423: if (packet.Operation == 0x0002u) {
 18004  002BF4  0E02               	movlw	2
 18005  002BF6  1966               	xorwf	(ARPProcess@packet+6)& (0+255),w,b
 18006  002BF8  1167               	iorwf	(ARPProcess@packet+7)& (0+255),w,b
 18007  002BFA  E112               	bnz	l10224
 18008                           
 18009                           ; BSR set to: 0
 18010                           ;arp.c: 431: Cache.MACAddr = packet.SenderMACAddr;
 18011  002BFC  EE20  F068         	lfsr	2,ARPProcess@packet+8
 18012  002C00  EE11  F00E         	lfsr	1,_Cache+4
 18013  002C04  0E05               	movlw	5
 18014  002C06                     u9271:
 18015  002C06  CFDB FFE3          	movff	plusw2,plusw1
 18016  002C0A  06E8               	decf	wreg,f,c
 18017  002C0C  E2FC               	bc	u9271
 18018                           
 18019                           ; BSR set to: 0
 18020                           ;arp.c: 432: Cache.IPAddr = packet.SenderIPAddr;
 18021  002C0E  C06E  F10A         	movff	ARPProcess@packet+14,_Cache
 18022  002C12  C06F  F10B         	movff	ARPProcess@packet+15,_Cache+1
 18023  002C16  C070  F10C         	movff	ARPProcess@packet+16,_Cache+2
 18024  002C1A  C071  F10D         	movff	ARPProcess@packet+17,_Cache+3
 18025  002C1E  0012               	return	
 18026  002C20                     l10224:
 18027                           
 18028                           ; BSR set to: 0
 18029                           ;arp.c: 436: }
 18030                           ;arp.c: 440: if (packet.Operation == 0x0001u) {
 18031  002C20  0566               	decf	(ARPProcess@packet+6)& (0+255),w,b
 18032  002C22  1167               	iorwf	(ARPProcess@packet+7)& (0+255),w,b
 18033  002C24  E129               	bnz	l10234
 18034                           
 18035                           ; BSR set to: 0
 18036                           ;arp.c: 441: if (packet.TargetIPAddr.Val != AppConfig.MyIPAddr.Val) {
 18037  002C26  0101               	movlb	1	; () banked
 18038  002C28  5179               	movf	_AppConfig& (0+255),w,b
 18039  002C2A  0100               	movlb	0	; () banked
 18040  002C2C  1978               	xorwf	(ARPProcess@packet+24)& (0+255),w,b
 18041  002C2E  E149               	bnz	l1321
 18042  002C30  0101               	movlb	1	; () banked
 18043  002C32  517A               	movf	(_AppConfig+1)& (0+255),w,b
 18044  002C34  0100               	movlb	0	; () banked
 18045  002C36  1979               	xorwf	(ARPProcess@packet+25)& (0+255),w,b
 18046  002C38  E144               	bnz	l1321
 18047  002C3A  0101               	movlb	1	; () banked
 18048  002C3C  517B               	movf	(_AppConfig+2)& (0+255),w,b
 18049  002C3E  0100               	movlb	0	; () banked
 18050  002C40  197A               	xorwf	(ARPProcess@packet+26)& (0+255),w,b
 18051  002C42  E13F               	bnz	l1321
 18052  002C44  0101               	movlb	1	; () banked
 18053  002C46  517C               	movf	(_AppConfig+3)& (0+255),w,b
 18054  002C48  0100               	movlb	0	; () banked
 18055  002C4A  197B               	xorwf	(ARPProcess@packet+27)& (0+255),w,b
 18056  002C4C  E001               	bz	l1324
 18057  002C4E  0012               	return	
 18058  002C50                     l1324:
 18059                           
 18060                           ; BSR set to: 0
 18061                           ;arp.c: 443: }
 18062                           ;arp.c: 462: Target.IPAddr = packet.SenderIPAddr;
 18063  002C50  C06E  F100         	movff	ARPProcess@packet+14,ARPProcess@Target
 18064  002C54  C06F  F101         	movff	ARPProcess@packet+15,ARPProcess@Target+1
 18065  002C58  C070  F102         	movff	ARPProcess@packet+16,ARPProcess@Target+2
 18066  002C5C  C071  F103         	movff	ARPProcess@packet+17,ARPProcess@Target+3
 18067                           
 18068                           ; BSR set to: 0
 18069                           ;arp.c: 463: Target.MACAddr = packet.SenderMACAddr;
 18070  002C60  EE20  F068         	lfsr	2,ARPProcess@packet+8
 18071  002C64  EE11  F004         	lfsr	1,ARPProcess@Target+4
 18072  002C68  0E05               	movlw	5
 18073  002C6A                     u9301:
 18074  002C6A  CFDB FFE3          	movff	plusw2,plusw1
 18075  002C6E  06E8               	decf	wreg,f,c
 18076  002C70  E2FC               	bc	u9301
 18077                           
 18078                           ; BSR set to: 0
 18079                           ;arp.c: 467: smARP = SM_ARP_REPLY;
 18080  002C72  0E01               	movlw	1
 18081  002C74  0101               	movlb	1	; () banked
 18082  002C76  6F72               	movwf	ARPProcess@smARP& (0+255),b
 18083  002C78                     l10234:
 18084                           
 18085                           ;arp.c: 472: packet.Operation = 0x0002u;
 18086  002C78  0100               	movlb	0	; () banked
 18087  002C7A  6B67               	clrf	(ARPProcess@packet+7)& (0+255),b
 18088  002C7C  0E02               	movlw	2
 18089  002C7E  6F66               	movwf	(ARPProcess@packet+6)& (0+255),b
 18090                           
 18091                           ;arp.c: 483: packet.TargetMACAddr = Target.MACAddr;
 18092  002C80  EE21  F004         	lfsr	2,ARPProcess@Target+4
 18093  002C84  EE10  F072         	lfsr	1,ARPProcess@packet+18
 18094  002C88  0E05               	movlw	5
 18095  002C8A                     u9311:
 18096  002C8A  CFDB FFE3          	movff	plusw2,plusw1
 18097  002C8E  06E8               	decf	wreg,f,c
 18098  002C90  E2FC               	bc	u9311
 18099                           
 18100                           ; BSR set to: 0
 18101                           ;arp.c: 484: packet.TargetIPAddr = Target.IPAddr;
 18102  002C92  C100  F078         	movff	ARPProcess@Target,ARPProcess@packet+24
 18103  002C96  C101  F079         	movff	ARPProcess@Target+1,ARPProcess@packet+25
 18104  002C9A  C102  F07A         	movff	ARPProcess@Target+2,ARPProcess@packet+26
 18105  002C9E  C103  F07B         	movff	ARPProcess@Target+3,ARPProcess@packet+27
 18106                           
 18107                           ; BSR set to: 0
 18108                           ;arp.c: 491: if (!ARPPut(&packet)) {
 18109  002CA2  0E60               	movlw	ARPProcess@packet& (0+255)
 18110  002CA4  ECD5  F019         	call	_ARPPut
 18111  002CA8  0900               	iorlw	0
 18112  002CAA  E101               	bnz	l1326
 18113  002CAC  0012               	return	
 18114  002CAE                     l1326:
 18115                           
 18116                           ;arp.c: 493: }
 18117                           ;arp.c: 496: smARP = SM_ARP_IDLE;
 18118  002CAE  0101               	movlb	1	; () banked
 18119  002CB0  6B72               	clrf	ARPProcess@smARP& (0+255),b
 18120                           
 18121                           ;arp.c: 497: break;
 18122  002CB2  0012               	return	
 18123  002CB4                     l10244:
 18124  002CB4  0101               	movlb	1	; () banked
 18125  002CB6  5172               	movf	ARPProcess@smARP& (0+255),w,b
 18126                           
 18127                           ; Switch size 1, requested type "speed"
 18128                           ; Number of cases is 2, Range of values is 0 to 1
 18129                           ; switch strategies available:
 18130                           ; Name         Instructions Cycles
 18131                           ; simple_byte            7     4 (average)
 18132                           ;	Chosen strategy is simple_byte
 18133  002CB8  E083               	bz	l10204
 18134  002CBA  0A01               	xorlw	1	; case 1
 18135  002CBC  A4D8               	btfss	status,2,c
 18136  002CBE  0012               	return	
 18137  002CC0  D7DB               	goto	l10234
 18138  002CC2                     l1321:
 18139  002CC2  0012               	return		;funcret
 18140  002CC4                     __end_of_ARPProcess:
 18141                           	opt stack 0
 18142                           tblptru	equ	0xFF8
 18143                           tblptrh	equ	0xFF7
 18144                           tblptrl	equ	0xFF6
 18145                           tablat	equ	0xFF5
 18146                           prodh	equ	0xFF4
 18147                           prodl	equ	0xFF3
 18148                           intcon	equ	0xFF2
 18149                           intcon2	equ	0xFF1
 18150                           postinc0	equ	0xFEE
 18151                           wreg	equ	0xFE8
 18152                           indf1	equ	0xFE7
 18153                           postinc1	equ	0xFE6
 18154                           postdec1	equ	0xFE5
 18155                           plusw1	equ	0xFE3
 18156                           fsr1h	equ	0xFE2
 18157                           fsr1l	equ	0xFE1
 18158                           indf2	equ	0xFDF
 18159                           postinc2	equ	0xFDE
 18160                           postdec2	equ	0xFDD
 18161                           plusw2	equ	0xFDB
 18162                           fsr2h	equ	0xFDA
 18163                           fsr2l	equ	0xFD9
 18164                           status	equ	0xFD8
 18165                           
 18166 ;; *************** function _MACGetArray *****************
 18167 ;; Defined at:
 18168 ;;		line 1008 in file "../framework/tcpip/src/eth97j60.c"
 18169 ;; Parameters:    Size  Location     Type
 18170 ;;  val             2   27[COMRAM] PTR unsigned char 
 18171 ;;		 -> CalcIPBufferChecksum@DataBuffer(20), MACGetHeader@header(20), UDPProcess@h(8), IPGetHeader@header(20), 
 18172 ;;		 -> ICMPProcess@dwVal(4), DHCPClient(32), ARPProcess@packet(28), m_messageBuffer(500), 
 18173 ;;  len             2   29[COMRAM] unsigned int 
 18174 ;; Auto vars:     Size  Location     Type
 18175 ;;  w               2   32[COMRAM] unsigned int 
 18176 ;;  i               1   31[COMRAM] volatile unsigned char 
 18177 ;; Return value:  Size  Location     Type
 18178 ;;                  2   27[COMRAM] unsigned int 
 18179 ;; Registers used:
 18180 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 18181 ;; Tracked objects:
 18182 ;;		On entry : 0/0
 18183 ;;		On exit  : 0/0
 18184 ;;		Unchanged: 0/0
 18185 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18186 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18187 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18188 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18189 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18190 ;;Total ram usage:        7 bytes
 18191 ;; Hardware stack levels used:    1
 18192 ;; Hardware stack levels required when called:    6
 18193 ;; This function calls:
 18194 ;;		Nothing
 18195 ;; This function is called by:
 18196 ;;		_ARPProcess
 18197 ;;		_ICMPProcess
 18198 ;;		_IPGetHeader
 18199 ;;		_UDPGetArray
 18200 ;;		_UDPProcess
 18201 ;;		_MACGetHeader
 18202 ;;		_CalcIPBufferChecksum
 18203 ;; This function uses a non-reentrant model
 18204 ;;
 18205                           
 18206                           	psect	text106
 18207  004B0A                     __ptext106:
 18208                           	opt stack 0
 18209  004B0A                     _MACGetArray:
 18210                           	opt stack 22
 18211                           
 18212                           ;eth97j60.c: 1010: uint16_t w;
 18213                           ;eth97j60.c: 1011: volatile uint8_t i;
 18214                           ;eth97j60.c: 1013: w = len;
 18215                           
 18216                           ;incstack = 0
 18217  004B0A  C01E  F021         	movff	MACGetArray@len,MACGetArray@w
 18218  004B0E  C01F  F022         	movff	MACGetArray@len+1,MACGetArray@w+1
 18219                           
 18220                           ;eth97j60.c: 1014: if(val)
 18221  004B12  501C               	movf	MACGetArray@val,w,c
 18222  004B14  101D               	iorwf	MACGetArray@val+1,w,c
 18223  004B16  E109               	bnz	l9074
 18224  004B18  D012               	goto	l9078
 18225  004B1A                     l9070:
 18226                           
 18227                           ;eth97j60.c: 1017: {
 18228                           ;eth97j60.c: 1018: *val++ = 13;
 18229  004B1A  C01C  FFD9         	movff	MACGetArray@val,fsr2l
 18230  004B1E  C01D  FFDA         	movff	MACGetArray@val+1,fsr2h
 18231  004B22  0E0D               	movlw	13
 18232  004B24  6EDF               	movwf	indf2,c
 18233  004B26  4A1C               	infsnz	MACGetArray@val,f,c
 18234  004B28  2A1D               	incf	MACGetArray@val+1,f,c
 18235  004B2A                     l9074:
 18236  004B2A  0621               	decf	MACGetArray@w,f,c
 18237  004B2C  A0D8               	btfss	status,0,c
 18238  004B2E  0622               	decf	MACGetArray@w+1,f,c
 18239  004B30  2821               	incf	MACGetArray@w,w,c
 18240  004B32  E1F3               	bnz	l9070
 18241  004B34  2822               	incf	MACGetArray@w+1,w,c
 18242  004B36  E00A               	bz	l2102
 18243  004B38  D7F0               	goto	l9070
 18244  004B3A                     l9076:
 18245                           
 18246                           ;eth97j60.c: 1024: {
 18247                           ;eth97j60.c: 1025: i = 13;
 18248  004B3A  0E0D               	movlw	13
 18249  004B3C  6E20               	movwf	MACGetArray@i,c	;volatile
 18250  004B3E                     l9078:
 18251  004B3E  0621               	decf	MACGetArray@w,f,c
 18252  004B40  A0D8               	btfss	status,0,c
 18253  004B42  0622               	decf	MACGetArray@w+1,f,c
 18254  004B44  2821               	incf	MACGetArray@w,w,c
 18255  004B46  E1F9               	bnz	l9076
 18256  004B48  2822               	incf	MACGetArray@w+1,w,c
 18257  004B4A  E1F7               	bnz	l9076
 18258  004B4C                     l2102:
 18259                           
 18260                           ;eth97j60.c: 1026: }
 18261                           ;eth97j60.c: 1027: }
 18262                           ;eth97j60.c: 1029: return len;
 18263  004B4C  C01E  F01C         	movff	MACGetArray@len,?_MACGetArray
 18264  004B50  C01F  F01D         	movff	MACGetArray@len+1,?_MACGetArray+1
 18265  004B54  0012               	return		;funcret
 18266  004B56                     __end_of_MACGetArray:
 18267                           	opt stack 0
 18268                           tblptru	equ	0xFF8
 18269                           tblptrh	equ	0xFF7
 18270                           tblptrl	equ	0xFF6
 18271                           tablat	equ	0xFF5
 18272                           prodh	equ	0xFF4
 18273                           prodl	equ	0xFF3
 18274                           intcon	equ	0xFF2
 18275                           intcon2	equ	0xFF1
 18276                           postinc0	equ	0xFEE
 18277                           wreg	equ	0xFE8
 18278                           indf1	equ	0xFE7
 18279                           postinc1	equ	0xFE6
 18280                           postdec1	equ	0xFE5
 18281                           plusw1	equ	0xFE3
 18282                           fsr1h	equ	0xFE2
 18283                           fsr1l	equ	0xFE1
 18284                           indf2	equ	0xFDF
 18285                           postinc2	equ	0xFDE
 18286                           postdec2	equ	0xFDD
 18287                           plusw2	equ	0xFDB
 18288                           fsr2h	equ	0xFDA
 18289                           fsr2l	equ	0xFD9
 18290                           status	equ	0xFD8
 18291                           
 18292 ;; *************** function _MACDiscardRx *****************
 18293 ;; Defined at:
 18294 ;;		line 286 in file "../framework/tcpip/src/eth97j60.c"
 18295 ;; Parameters:    Size  Location     Type
 18296 ;;		None
 18297 ;; Auto vars:     Size  Location     Type
 18298 ;;  NewRXRDLocat    2   27[COMRAM] struct .
 18299 ;; Return value:  Size  Location     Type
 18300 ;;		None               void
 18301 ;; Registers used:
 18302 ;;		wreg, status,2, status,0
 18303 ;; Tracked objects:
 18304 ;;		On entry : 0/0
 18305 ;;		On exit  : 0/0
 18306 ;;		Unchanged: 0/0
 18307 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18308 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18309 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18310 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18311 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18312 ;;Total ram usage:        2 bytes
 18313 ;; Hardware stack levels used:    1
 18314 ;; Hardware stack levels required when called:    6
 18315 ;; This function calls:
 18316 ;;		Nothing
 18317 ;; This function is called by:
 18318 ;;		_ARPProcess
 18319 ;;		_UDPDiscard
 18320 ;;		_UDPProcess
 18321 ;;		_MACGetHeader
 18322 ;; This function uses a non-reentrant model
 18323 ;;
 18324                           
 18325                           	psect	text107
 18326  004DB0                     __ptext107:
 18327                           	opt stack 0
 18328  004DB0                     _MACDiscardRx:
 18329                           	opt stack 22
 18330                           
 18331                           ;eth97j60.c: 288: TCPIP_UINT16_VAL NewRXRDLocation;
 18332                           ;eth97j60.c: 291: if(WasDiscarded)
 18333                           
 18334                           ;incstack = 0
 18335  004DB0  503C               	movf	_WasDiscarded,w,c
 18336  004DB2  E001               	bz	l9128
 18337  004DB4  0012               	return	
 18338  004DB6                     l9128:
 18339                           
 18340                           ;eth97j60.c: 293: WasDiscarded = 1;
 18341  004DB6  0E01               	movlw	1
 18342  004DB8  6E3C               	movwf	_WasDiscarded,c
 18343                           
 18344                           ;eth97j60.c: 299: NewRXRDLocation.Val = NextPacketLocation.Val - 1;
 18345  004DBA  0EFF               	movlw	255
 18346  004DBC  0101               	movlb	1	; () banked
 18347  004DBE  2568               	addwf	_NextPacketLocation& (0+255),w,b
 18348  004DC0  6E1C               	movwf	MACDiscardRx@NewRXRDLocation,c
 18349  004DC2  0EFF               	movlw	255
 18350  004DC4  2169               	addwfc	(_NextPacketLocation+1)& (0+255),w,b
 18351  004DC6  6E1D               	movwf	MACDiscardRx@NewRXRDLocation+1,c
 18352                           
 18353                           ; BSR set to: 1
 18354                           ;eth97j60.c: 303: if(NewRXRDLocation.Val < (0ul) || NewRXRDLocation.Val > ((((8*1024ul) 
      +                          - (1ul+1518ul+7ul) - 0u - 0ul - 0ul)-2ul) | 0x0001ul))
 18355  004DC8  0E0A               	movlw	10
 18356  004DCA  5C1C               	subwf	MACDiscardRx@NewRXRDLocation,w,c
 18357  004DCC  0E1A               	movlw	26
 18358  004DCE  581D               	subwfb	MACDiscardRx@NewRXRDLocation+1,w,c
 18359  004DD0  E304               	bnc	l9136
 18360                           
 18361                           ; BSR set to: 1
 18362                           ;eth97j60.c: 305: {
 18363                           ;eth97j60.c: 306: NewRXRDLocation.Val = ((((8*1024ul) - (1ul+1518ul+7ul) - 0u - 0ul - 0u
      +                          l)-2ul) | 0x0001ul);
 18364  004DD2  0E1A               	movlw	26
 18365  004DD4  6E1D               	movwf	MACDiscardRx@NewRXRDLocation+1,c
 18366  004DD6  0E09               	movlw	9
 18367  004DD8  6E1C               	movwf	MACDiscardRx@NewRXRDLocation,c
 18368  004DDA                     l9136:
 18369                           
 18370                           ; BSR set to: 1
 18371                           ;eth97j60.c: 307: }
 18372                           ;eth97j60.c: 310: ECON2bits.PKTDEC = 1;
 18373  004DDA  010E               	movlb	14	; () banked
 18374  004DDC  8DFE               	bsf	254,6,b	;volatile
 18375                           
 18376                           ; BSR set to: 14
 18377                           ;eth97j60.c: 315: ERXRDPTL = NewRXRDLocation.v[0];
 18378  004DDE  C01C  FEEC         	movff	MACDiscardRx@NewRXRDLocation,3820	;volatile
 18379                           
 18380                           ; BSR set to: 14
 18381                           ;eth97j60.c: 316: ERXRDPTH = NewRXRDLocation.v[1];
 18382  004DE2  C01D  FEED         	movff	MACDiscardRx@NewRXRDLocation+1,3821	;volatile
 18383                           
 18384                           ; BSR set to: 14
 18385                           ;eth97j60.c: 321: EIRbits.PKTIF = 0;
 18386  004DE6  9C60               	bcf	3936,6,c	;volatile
 18387  004DE8  0012               	return		;funcret
 18388  004DEA                     __end_of_MACDiscardRx:
 18389                           	opt stack 0
 18390                           tblptru	equ	0xFF8
 18391                           tblptrh	equ	0xFF7
 18392                           tblptrl	equ	0xFF6
 18393                           tablat	equ	0xFF5
 18394                           prodh	equ	0xFF4
 18395                           prodl	equ	0xFF3
 18396                           intcon	equ	0xFF2
 18397                           intcon2	equ	0xFF1
 18398                           postinc0	equ	0xFEE
 18399                           wreg	equ	0xFE8
 18400                           indf1	equ	0xFE7
 18401                           postinc1	equ	0xFE6
 18402                           postdec1	equ	0xFE5
 18403                           plusw1	equ	0xFE3
 18404                           fsr1h	equ	0xFE2
 18405                           fsr1l	equ	0xFE1
 18406                           indf2	equ	0xFDF
 18407                           postinc2	equ	0xFDE
 18408                           postdec2	equ	0xFDD
 18409                           plusw2	equ	0xFDB
 18410                           fsr2h	equ	0xFDA
 18411                           fsr2l	equ	0xFD9
 18412                           status	equ	0xFD8
 18413                           
 18414 ;; *************** function _ARPPut *****************
 18415 ;; Defined at:
 18416 ;;		line 296 in file "../framework/tcpip/src/arp.c"
 18417 ;; Parameters:    Size  Location     Type
 18418 ;;  packet          1    wreg     PTR struct .
 18419 ;;		 -> ARPResolve@packet(28), ARPProcess@packet(28), ARPSendPkt@packet(28), 
 18420 ;; Auto vars:     Size  Location     Type
 18421 ;;  packet          1   39[COMRAM] PTR struct .
 18422 ;;		 -> ARPResolve@packet(28), ARPProcess@packet(28), ARPSendPkt@packet(28), 
 18423 ;; Return value:  Size  Location     Type
 18424 ;;                  1    wreg      unsigned char 
 18425 ;; Registers used:
 18426 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 18427 ;; Tracked objects:
 18428 ;;		On entry : F/0
 18429 ;;		On exit  : 0/0
 18430 ;;		Unchanged: 0/0
 18431 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18432 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18433 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18434 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18435 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18436 ;;Total ram usage:        2 bytes
 18437 ;; Hardware stack levels used:    1
 18438 ;; Hardware stack levels required when called:   10
 18439 ;; This function calls:
 18440 ;;		_MACFlush
 18441 ;;		_MACIsTxReady
 18442 ;;		_MACPutArray
 18443 ;;		_MACPutHeader
 18444 ;;		_MACSetWritePtr
 18445 ;;		_SwapARPPacket
 18446 ;;		_memcpy
 18447 ;; This function is called by:
 18448 ;;		_ARPProcess
 18449 ;;		_ARPResolve
 18450 ;; This function uses a non-reentrant model
 18451 ;;
 18452                           
 18453                           	psect	text108
 18454  0033AA                     __ptext108:
 18455                           	opt stack 0
 18456  0033AA                     _ARPPut:
 18457                           	opt stack 17
 18458                           
 18459                           ;incstack = 0
 18460                           ;ARPPut@packet stored from wreg
 18461  0033AA  6E28               	movwf	ARPPut@packet,c
 18462  0033AC                     l9322:
 18463  0033AC  ECC2  F028         	call	_MACIsTxReady	;wreg free
 18464  0033B0  0900               	iorlw	0
 18465  0033B2  E0FC               	bz	l9322
 18466                           
 18467                           ;arp.c: 299: MACSetWritePtr((((8*1024ul) - (1ul+1518ul+7ul) - 0u - 0ul - 0ul) + 1ul));
 18468  0033B4  0E1A               	movlw	26
 18469  0033B6  6E1D               	movwf	MACSetWritePtr@address+1,c
 18470  0033B8  0E0B               	movlw	11
 18471  0033BA  6E1C               	movwf	MACSetWritePtr@address,c
 18472  0033BC  EC56  F02A         	call	_MACSetWritePtr	;wreg free
 18473                           
 18474                           ;arp.c: 301: packet->HardwareType = (0x0001u);
 18475  0033C0  5028               	movf	ARPPut@packet,w,c
 18476  0033C2  6ED9               	movwf	fsr2l,c
 18477  0033C4  6ADA               	clrf	fsr2h,c
 18478  0033C6  0E01               	movlw	1
 18479  0033C8  6EDE               	movwf	postinc2,c
 18480  0033CA  6ADD               	clrf	postdec2,c
 18481                           
 18482                           ;arp.c: 302: packet->Protocol = (0x0800u);
 18483  0033CC  5028               	movf	ARPPut@packet,w,c
 18484  0033CE  6ED9               	movwf	fsr2l,c
 18485  0033D0  6ADA               	clrf	fsr2h,c
 18486  0033D2  0E02               	movlw	2
 18487  0033D4  26D9               	addwf	fsr2l,f,c
 18488  0033D6  6ADE               	clrf	postinc2,c
 18489  0033D8  0E08               	movlw	8
 18490  0033DA  6EDD               	movwf	postdec2,c
 18491                           
 18492                           ;arp.c: 303: packet->MACAddrLen = sizeof (MAC_ADDR);
 18493  0033DC  5028               	movf	ARPPut@packet,w,c
 18494  0033DE  6ED9               	movwf	fsr2l,c
 18495  0033E0  6ADA               	clrf	fsr2h,c
 18496  0033E2  0E04               	movlw	4
 18497  0033E4  26D9               	addwf	fsr2l,f,c
 18498  0033E6  0E06               	movlw	6
 18499  0033E8  6EDF               	movwf	indf2,c
 18500                           
 18501                           ;arp.c: 304: packet->ProtocolLen = sizeof (TCPIP_UINT32_VAL);
 18502  0033EA  5028               	movf	ARPPut@packet,w,c
 18503  0033EC  6ED9               	movwf	fsr2l,c
 18504  0033EE  6ADA               	clrf	fsr2h,c
 18505  0033F0  0E05               	movlw	5
 18506  0033F2  26D9               	addwf	fsr2l,f,c
 18507  0033F4  0E04               	movlw	4
 18508  0033F6  6EDF               	movwf	indf2,c
 18509                           
 18510                           ;arp.c: 306: memcpy(&packet->SenderMACAddr, (void *) &AppConfig.MyMACAddr, sizeof (packe
      +                          t->SenderMACAddr));
 18511  0033F8  C028  F027         	movff	ARPPut@packet,??_ARPPut
 18512  0033FC  0E08               	movlw	8
 18513  0033FE  2627               	addwf	??_ARPPut,f,c
 18514  003400  C027  F01C         	movff	??_ARPPut,memcpy@d1
 18515  003404  6A1D               	clrf	memcpy@d1+1,c
 18516  003406  0EA6               	movlw	low (_AppConfig+45)
 18517  003408  6E1E               	movwf	memcpy@s1,c
 18518  00340A  0E01               	movlw	high (_AppConfig+45)
 18519  00340C  6E1F               	movwf	memcpy@s1+1,c
 18520  00340E  6A21               	clrf	memcpy@n+1,c
 18521  003410  0E06               	movlw	6
 18522  003412  6E20               	movwf	memcpy@n,c
 18523  003414  ECEE  F023         	call	_memcpy	;wreg free
 18524                           
 18525                           ;arp.c: 310: packet->SenderIPAddr = AppConfig.MyIPAddr;
 18526  003418  5028               	movf	ARPPut@packet,w,c
 18527  00341A  6ED9               	movwf	fsr2l,c
 18528  00341C  6ADA               	clrf	fsr2h,c
 18529  00341E  0E0E               	movlw	14
 18530  003420  26D9               	addwf	fsr2l,f,c
 18531  003422  C179  FFDE         	movff	_AppConfig,postinc2
 18532  003426  C17A  FFDE         	movff	_AppConfig+1,postinc2
 18533  00342A  C17B  FFDE         	movff	_AppConfig+2,postinc2
 18534  00342E  C17C  FFDE         	movff	_AppConfig+3,postinc2
 18535                           
 18536                           ;arp.c: 313: SwapARPPacket(packet);
 18537  003432  5028               	movf	ARPPut@packet,w,c
 18538  003434  ECE9  F020         	call	_SwapARPPacket
 18539                           
 18540                           ;arp.c: 315: MACPutHeader(&packet->TargetMACAddr, (0x06u), sizeof (*packet));
 18541  003438  C028  F027         	movff	ARPPut@packet,??_ARPPut
 18542  00343C  0E12               	movlw	18
 18543  00343E  2627               	addwf	??_ARPPut,f,c
 18544  003440  C027  F020         	movff	??_ARPPut,MACPutHeader@remote
 18545  003444  6A21               	clrf	MACPutHeader@remote+1,c
 18546  003446  0E06               	movlw	6
 18547  003448  6E22               	movwf	MACPutHeader@type,c
 18548  00344A  6A24               	clrf	MACPutHeader@dataLen+1,c
 18549  00344C  0E1C               	movlw	28
 18550  00344E  6E23               	movwf	MACPutHeader@dataLen,c
 18551  003450  ECC1  F023         	call	_MACPutHeader	;wreg free
 18552                           
 18553                           ;arp.c: 316: MACPutArray((uint8_t *) packet, sizeof (*packet));
 18554  003454  C028  F01C         	movff	ARPPut@packet,MACPutArray@val
 18555  003458  6A1D               	clrf	MACPutArray@val+1,c
 18556  00345A  6A1F               	clrf	MACPutArray@len+1,c
 18557  00345C  0E1C               	movlw	28
 18558  00345E  6E1E               	movwf	MACPutArray@len,c
 18559  003460  EC76  F028         	call	_MACPutArray	;wreg free
 18560                           
 18561                           ;arp.c: 317: MACFlush();
 18562  003464  EC05  F029         	call	_MACFlush	;wreg free
 18563                           
 18564                           ;arp.c: 319: return 1;
 18565  003468  0C01               	retlw	1	;funcret
 18566  00346A                     __end_of_ARPPut:
 18567                           	opt stack 0
 18568                           tblptru	equ	0xFF8
 18569                           tblptrh	equ	0xFF7
 18570                           tblptrl	equ	0xFF6
 18571                           tablat	equ	0xFF5
 18572                           prodh	equ	0xFF4
 18573                           prodl	equ	0xFF3
 18574                           intcon	equ	0xFF2
 18575                           intcon2	equ	0xFF1
 18576                           postinc0	equ	0xFEE
 18577                           wreg	equ	0xFE8
 18578                           indf1	equ	0xFE7
 18579                           postinc1	equ	0xFE6
 18580                           postdec1	equ	0xFE5
 18581                           plusw1	equ	0xFE3
 18582                           fsr1h	equ	0xFE2
 18583                           fsr1l	equ	0xFE1
 18584                           indf2	equ	0xFDF
 18585                           postinc2	equ	0xFDE
 18586                           postdec2	equ	0xFDD
 18587                           plusw2	equ	0xFDB
 18588                           fsr2h	equ	0xFDA
 18589                           fsr2l	equ	0xFD9
 18590                           status	equ	0xFD8
 18591                           
 18592 ;; *************** function _SwapARPPacket *****************
 18593 ;; Defined at:
 18594 ;;		line 643 in file "../framework/tcpip/src/arp.c"
 18595 ;; Parameters:    Size  Location     Type
 18596 ;;  p               1    wreg     PTR struct .
 18597 ;;		 -> ARPResolve@packet(28), ARPProcess@packet(28), ARPSendPkt@packet(28), 
 18598 ;; Auto vars:     Size  Location     Type
 18599 ;;  p               1   32[COMRAM] PTR struct .
 18600 ;;		 -> ARPResolve@packet(28), ARPProcess@packet(28), ARPSendPkt@packet(28), 
 18601 ;; Return value:  Size  Location     Type
 18602 ;;		None               void
 18603 ;; Registers used:
 18604 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 18605 ;; Tracked objects:
 18606 ;;		On entry : 0/1
 18607 ;;		On exit  : 0/0
 18608 ;;		Unchanged: 0/0
 18609 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18610 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18611 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18612 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18613 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18614 ;;Total ram usage:        1 bytes
 18615 ;; Hardware stack levels used:    1
 18616 ;; Hardware stack levels required when called:    7
 18617 ;; This function calls:
 18618 ;;		_swaps
 18619 ;; This function is called by:
 18620 ;;		_ARPPut
 18621 ;;		_ARPProcess
 18622 ;; This function uses a non-reentrant model
 18623 ;;
 18624                           
 18625                           	psect	text109
 18626  0041D2                     __ptext109:
 18627                           	opt stack 0
 18628  0041D2                     _SwapARPPacket:
 18629                           	opt stack 19
 18630                           
 18631                           ;incstack = 0
 18632                           ;SwapARPPacket@p stored from wreg
 18633  0041D2  6E21               	movwf	SwapARPPacket@p,c
 18634                           
 18635                           ;arp.c: 645: p->HardwareType = swaps(p->HardwareType);
 18636  0041D4  5021               	movf	SwapARPPacket@p,w,c
 18637  0041D6  6ED9               	movwf	fsr2l,c
 18638  0041D8  6ADA               	clrf	fsr2h,c
 18639  0041DA  CFDE F01C          	movff	postinc2,swaps@v
 18640  0041DE  CFDD F01D          	movff	postdec2,swaps@v+1
 18641  0041E2  EC42  F029         	call	_swaps	;wreg free
 18642  0041E6  5021               	movf	SwapARPPacket@p,w,c
 18643  0041E8  6ED9               	movwf	fsr2l,c
 18644  0041EA  6ADA               	clrf	fsr2h,c
 18645  0041EC  C01C  FFDE         	movff	?_swaps,postinc2
 18646  0041F0  C01D  FFDD         	movff	?_swaps+1,postdec2
 18647                           
 18648                           ;arp.c: 646: p->Protocol = swaps(p->Protocol);
 18649  0041F4  5021               	movf	SwapARPPacket@p,w,c
 18650  0041F6  6ED9               	movwf	fsr2l,c
 18651  0041F8  6ADA               	clrf	fsr2h,c
 18652  0041FA  0E02               	movlw	2
 18653  0041FC  26D9               	addwf	fsr2l,f,c
 18654  0041FE  CFDE F01C          	movff	postinc2,swaps@v
 18655  004202  CFDD F01D          	movff	postdec2,swaps@v+1
 18656  004206  EC42  F029         	call	_swaps	;wreg free
 18657  00420A  5021               	movf	SwapARPPacket@p,w,c
 18658  00420C  6ED9               	movwf	fsr2l,c
 18659  00420E  6ADA               	clrf	fsr2h,c
 18660  004210  0E02               	movlw	2
 18661  004212  26D9               	addwf	fsr2l,f,c
 18662  004214  C01C  FFDE         	movff	?_swaps,postinc2
 18663  004218  C01D  FFDD         	movff	?_swaps+1,postdec2
 18664                           
 18665                           ;arp.c: 647: p->Operation = swaps(p->Operation);
 18666  00421C  5021               	movf	SwapARPPacket@p,w,c
 18667  00421E  6ED9               	movwf	fsr2l,c
 18668  004220  6ADA               	clrf	fsr2h,c
 18669  004222  0E06               	movlw	6
 18670  004224  26D9               	addwf	fsr2l,f,c
 18671  004226  CFDE F01C          	movff	postinc2,swaps@v
 18672  00422A  CFDD F01D          	movff	postdec2,swaps@v+1
 18673  00422E  EC42  F029         	call	_swaps	;wreg free
 18674  004232  5021               	movf	SwapARPPacket@p,w,c
 18675  004234  6ED9               	movwf	fsr2l,c
 18676  004236  6ADA               	clrf	fsr2h,c
 18677  004238  0E06               	movlw	6
 18678  00423A  26D9               	addwf	fsr2l,f,c
 18679  00423C  C01C  FFDE         	movff	?_swaps,postinc2
 18680  004240  C01D  FFDD         	movff	?_swaps+1,postdec2
 18681  004244  0C06               	retlw	6	;funcret
 18682  004246                     __end_of_SwapARPPacket:
 18683                           	opt stack 0
 18684                           tblptru	equ	0xFF8
 18685                           tblptrh	equ	0xFF7
 18686                           tblptrl	equ	0xFF6
 18687                           tablat	equ	0xFF5
 18688                           prodh	equ	0xFF4
 18689                           prodl	equ	0xFF3
 18690                           intcon	equ	0xFF2
 18691                           intcon2	equ	0xFF1
 18692                           postinc0	equ	0xFEE
 18693                           wreg	equ	0xFE8
 18694                           indf1	equ	0xFE7
 18695                           postinc1	equ	0xFE6
 18696                           postdec1	equ	0xFE5
 18697                           plusw1	equ	0xFE3
 18698                           fsr1h	equ	0xFE2
 18699                           fsr1l	equ	0xFE1
 18700                           indf2	equ	0xFDF
 18701                           postinc2	equ	0xFDE
 18702                           postdec2	equ	0xFDD
 18703                           plusw2	equ	0xFDB
 18704                           fsr2h	equ	0xFDA
 18705                           fsr2l	equ	0xFD9
 18706                           status	equ	0xFD8
 18707                           
 18708 ;; *************** function _swaps *****************
 18709 ;; Defined at:
 18710 ;;		line 1025 in file "../framework/tcpip/src/common/helpers.c"
 18711 ;; Parameters:    Size  Location     Type
 18712 ;;  v               2   27[COMRAM] unsigned int 
 18713 ;; Auto vars:     Size  Location     Type
 18714 ;;  t               2   30[COMRAM] struct .
 18715 ;;  b               1   29[COMRAM] unsigned char 
 18716 ;; Return value:  Size  Location     Type
 18717 ;;                  2   27[COMRAM] unsigned int 
 18718 ;; Registers used:
 18719 ;;		None
 18720 ;; Tracked objects:
 18721 ;;		On entry : 0/0
 18722 ;;		On exit  : 0/0
 18723 ;;		Unchanged: 0/0
 18724 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18725 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18726 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18727 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18728 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18729 ;;Total ram usage:        5 bytes
 18730 ;; Hardware stack levels used:    1
 18731 ;; Hardware stack levels required when called:    6
 18732 ;; This function calls:
 18733 ;;		Nothing
 18734 ;; This function is called by:
 18735 ;;		_SwapARPPacket
 18736 ;;		_SwapIPHeader
 18737 ;;		_UDPFlush
 18738 ;;		_UDPProcess
 18739 ;;		_MACGetHeader
 18740 ;; This function uses a non-reentrant model
 18741 ;;
 18742                           
 18743                           	psect	text110
 18744  005284                     __ptext110:
 18745                           	opt stack 0
 18746  005284                     _swaps:
 18747                           	opt stack 19
 18748                           
 18749                           ;helpers.c: 1027: TCPIP_UINT16_VAL t;
 18750                           ;helpers.c: 1028: uint8_t b;
 18751                           ;helpers.c: 1030: t.Val = v;
 18752                           
 18753                           ;incstack = 0
 18754  005284  C01C  F01F         	movff	swaps@v,swaps@t
 18755  005288  C01D  F020         	movff	swaps@v+1,swaps@t+1
 18756                           
 18757                           ;helpers.c: 1031: b = t.v[1];
 18758  00528C  C020  F01E         	movff	swaps@t+1,swaps@b
 18759                           
 18760                           ;helpers.c: 1032: t.v[1] = t.v[0];
 18761  005290  C01F  F020         	movff	swaps@t,swaps@t+1
 18762                           
 18763                           ;helpers.c: 1033: t.v[0] = b;
 18764  005294  C01E  F01F         	movff	swaps@b,swaps@t
 18765                           
 18766                           ;helpers.c: 1035: return t.Val;
 18767  005298  C01F  F01C         	movff	swaps@t,?_swaps
 18768  00529C  C020  F01D         	movff	swaps@t+1,?_swaps+1
 18769  0052A0  0012               	return		;funcret
 18770  0052A2                     __end_of_swaps:
 18771                           	opt stack 0
 18772                           tblptru	equ	0xFF8
 18773                           tblptrh	equ	0xFF7
 18774                           tblptrl	equ	0xFF6
 18775                           tablat	equ	0xFF5
 18776                           prodh	equ	0xFF4
 18777                           prodl	equ	0xFF3
 18778                           intcon	equ	0xFF2
 18779                           intcon2	equ	0xFF1
 18780                           postinc0	equ	0xFEE
 18781                           wreg	equ	0xFE8
 18782                           indf1	equ	0xFE7
 18783                           postinc1	equ	0xFE6
 18784                           postdec1	equ	0xFE5
 18785                           plusw1	equ	0xFE3
 18786                           fsr1h	equ	0xFE2
 18787                           fsr1l	equ	0xFE1
 18788                           indf2	equ	0xFDF
 18789                           postinc2	equ	0xFDE
 18790                           postdec2	equ	0xFDD
 18791                           plusw2	equ	0xFDB
 18792                           fsr2h	equ	0xFDA
 18793                           fsr2l	equ	0xFD9
 18794                           status	equ	0xFD8
 18795                           
 18796 ;; *************** function _MACSetWritePtr *****************
 18797 ;; Defined at:
 18798 ;;		line 610 in file "../framework/tcpip/src/eth97j60.c"
 18799 ;; Parameters:    Size  Location     Type
 18800 ;;  address         2   27[COMRAM] unsigned short 
 18801 ;; Auto vars:     Size  Location     Type
 18802 ;;  oldVal          2    0        unsigned int 
 18803 ;; Return value:  Size  Location     Type
 18804 ;;                  2   27[COMRAM] unsigned short 
 18805 ;; Registers used:
 18806 ;;		None
 18807 ;; Tracked objects:
 18808 ;;		On entry : 0/0
 18809 ;;		On exit  : 0/0
 18810 ;;		Unchanged: 0/0
 18811 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18812 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18813 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18814 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18815 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18816 ;;Total ram usage:        4 bytes
 18817 ;; Hardware stack levels used:    1
 18818 ;; Hardware stack levels required when called:    6
 18819 ;; This function calls:
 18820 ;;		Nothing
 18821 ;; This function is called by:
 18822 ;;		_ARPPut
 18823 ;;		_ICMPProcess
 18824 ;;		_UDPSetTxBuffer
 18825 ;;		_UDPFlush
 18826 ;; This function uses a non-reentrant model
 18827 ;;
 18828                           
 18829                           	psect	text111
 18830  0054AC                     __ptext111:
 18831                           	opt stack 0
 18832  0054AC                     _MACSetWritePtr:
 18833                           	opt stack 20
 18834                           
 18835                           ;eth97j60.c: 615: EWRPT = address;
 18836                           
 18837                           ;incstack = 0
 18838  0054AC  C01C  FEE2         	movff	MACSetWritePtr@address,3810	;volatile
 18839  0054B0  C01D  FEE3         	movff	MACSetWritePtr@address+1,3811	;volatile
 18840                           
 18841                           ;eth97j60.c: 616: return oldVal;
 18842                           ;	Return value of _MACSetWritePtr is never used
 18843  0054B4  0012               	return		;funcret
 18844  0054B6                     __end_of_MACSetWritePtr:
 18845                           	opt stack 0
 18846                           tblptru	equ	0xFF8
 18847                           tblptrh	equ	0xFF7
 18848                           tblptrl	equ	0xFF6
 18849                           tablat	equ	0xFF5
 18850                           prodh	equ	0xFF4
 18851                           prodl	equ	0xFF3
 18852                           intcon	equ	0xFF2
 18853                           intcon2	equ	0xFF1
 18854                           postinc0	equ	0xFEE
 18855                           wreg	equ	0xFE8
 18856                           indf1	equ	0xFE7
 18857                           postinc1	equ	0xFE6
 18858                           postdec1	equ	0xFE5
 18859                           plusw1	equ	0xFE3
 18860                           fsr1h	equ	0xFE2
 18861                           fsr1l	equ	0xFE1
 18862                           indf2	equ	0xFDF
 18863                           postinc2	equ	0xFDE
 18864                           postdec2	equ	0xFDD
 18865                           plusw2	equ	0xFDB
 18866                           fsr2h	equ	0xFDA
 18867                           fsr2l	equ	0xFD9
 18868                           status	equ	0xFD8
 18869                           
 18870 ;; *************** function _MACPutHeader *****************
 18871 ;; Defined at:
 18872 ;;		line 485 in file "../framework/tcpip/src/eth97j60.c"
 18873 ;; Parameters:    Size  Location     Type
 18874 ;;  remote          2   31[COMRAM] PTR struct .
 18875 ;;		 -> UDPSocketInfo.remote(10), UDPSocketInfo(230), ARPResolve@packet(28), ARPProcess@packet(28), 
 18876 ;;		 -> ARPSendPkt@packet(28), remoteNode(10), 
 18877 ;;  type            1   33[COMRAM] unsigned char 
 18878 ;;  dataLen         2   34[COMRAM] unsigned int 
 18879 ;; Auto vars:     Size  Location     Type
 18880 ;;		None
 18881 ;; Return value:  Size  Location     Type
 18882 ;;		None               void
 18883 ;; Registers used:
 18884 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 18885 ;; Tracked objects:
 18886 ;;		On entry : 0/0
 18887 ;;		On exit  : 0/0
 18888 ;;		Unchanged: 0/0
 18889 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18890 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18891 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18892 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18893 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18894 ;;Total ram usage:        7 bytes
 18895 ;; Hardware stack levels used:    1
 18896 ;; Hardware stack levels required when called:    7
 18897 ;; This function calls:
 18898 ;;		_MACPut
 18899 ;;		_MACPutArray
 18900 ;; This function is called by:
 18901 ;;		_ARPPut
 18902 ;;		_IPPutHeader
 18903 ;; This function uses a non-reentrant model
 18904 ;;
 18905                           
 18906                           	psect	text112
 18907  004782                     __ptext112:
 18908                           	opt stack 0
 18909  004782                     _MACPutHeader:
 18910                           	opt stack 19
 18911                           
 18912                           ;eth97j60.c: 488: EWRPT = ((8*1024ul) - (1ul+1518ul+7ul) - 0u - 0ul - 0ul) + 1;
 18913                           
 18914                           ;incstack = 0
 18915  004782  0E1A               	movlw	26
 18916  004784  010E               	movlb	14	; () banked
 18917  004786  6FE3               	movwf	227,b	;volatile
 18918  004788  0E0B               	movlw	11
 18919  00478A  6FE2               	movwf	226,b	;volatile
 18920                           
 18921                           ; BSR set to: 14
 18922                           ;eth97j60.c: 491: dataLen += (uint16_t)sizeof(ETHER_HEADER) + ((8*1024ul) - (1ul+1518ul+
      +                          7ul) - 0u - 0ul - 0ul);
 18923  00478C  0E18               	movlw	24
 18924  00478E  2623               	addwf	MACPutHeader@dataLen,f,c
 18925  004790  0E1A               	movlw	26
 18926  004792  2224               	addwfc	MACPutHeader@dataLen+1,f,c
 18927                           
 18928                           ; BSR set to: 14
 18929                           ;eth97j60.c: 494: ETXND = dataLen;
 18930  004794  C023  FEE6         	movff	MACPutHeader@dataLen,3814	;volatile
 18931  004798  C024  FEE7         	movff	MACPutHeader@dataLen+1,3815	;volatile
 18932                           
 18933                           ; BSR set to: 14
 18934                           ;eth97j60.c: 498: MACPutArray((uint8_t*)remote, sizeof(*remote));
 18935  00479C  C020  F01C         	movff	MACPutHeader@remote,MACPutArray@val
 18936  0047A0  C021  F01D         	movff	MACPutHeader@remote+1,MACPutArray@val+1
 18937  0047A4  6A1F               	clrf	MACPutArray@len+1,c
 18938  0047A6  0E06               	movlw	6
 18939  0047A8  6E1E               	movwf	MACPutArray@len,c
 18940  0047AA  EC76  F028         	call	_MACPutArray	;wreg free
 18941                           
 18942                           ;eth97j60.c: 501: MACPutArray((uint8_t*)&AppConfig.MyMACAddr, sizeof(AppConfig.MyMACAddr
      +                          ));
 18943  0047AE  0EA6               	movlw	low (_AppConfig+45)
 18944  0047B0  6E1C               	movwf	MACPutArray@val,c
 18945  0047B2  0E01               	movlw	high (_AppConfig+45)
 18946  0047B4  6E1D               	movwf	MACPutArray@val+1,c
 18947  0047B6  6A1F               	clrf	MACPutArray@len+1,c
 18948  0047B8  0E06               	movlw	6
 18949  0047BA  6E1E               	movwf	MACPutArray@len,c
 18950  0047BC  EC76  F028         	call	_MACPutArray	;wreg free
 18951                           
 18952                           ;eth97j60.c: 504: MACPut(0x08);
 18953  0047C0  0E08               	movlw	8
 18954  0047C2  EC46  F02A         	call	_MACPut
 18955                           
 18956                           ;eth97j60.c: 505: MACPut((type == (0x00u)) ? (0x00u) : (0x06u));
 18957  0047C6  5022               	movf	MACPutHeader@type,w,c
 18958  0047C8  E004               	bz	l2028
 18959  0047CA  6A26               	clrf	_MACPutHeader$10599+1,c
 18960  0047CC  0E06               	movlw	6
 18961  0047CE  6E25               	movwf	_MACPutHeader$10599,c
 18962  0047D0  D002               	goto	l9054
 18963  0047D2                     l2028:
 18964  0047D2  6A25               	clrf	_MACPutHeader$10599,c
 18965  0047D4  6A26               	clrf	_MACPutHeader$10599+1,c
 18966  0047D6                     l9054:
 18967  0047D6  5025               	movf	_MACPutHeader$10599,w,c
 18968  0047D8  EF46  F02A         	goto	_MACPut
 18969  0047DC                     __end_of_MACPutHeader:
 18970                           	opt stack 0
 18971                           tblptru	equ	0xFF8
 18972                           tblptrh	equ	0xFF7
 18973                           tblptrl	equ	0xFF6
 18974                           tablat	equ	0xFF5
 18975                           prodh	equ	0xFF4
 18976                           prodl	equ	0xFF3
 18977                           intcon	equ	0xFF2
 18978                           intcon2	equ	0xFF1
 18979                           postinc0	equ	0xFEE
 18980                           wreg	equ	0xFE8
 18981                           indf1	equ	0xFE7
 18982                           postinc1	equ	0xFE6
 18983                           postdec1	equ	0xFE5
 18984                           plusw1	equ	0xFE3
 18985                           fsr1h	equ	0xFE2
 18986                           fsr1l	equ	0xFE1
 18987                           indf2	equ	0xFDF
 18988                           postinc2	equ	0xFDE
 18989                           postdec2	equ	0xFDD
 18990                           plusw2	equ	0xFDB
 18991                           fsr2h	equ	0xFDA
 18992                           fsr2l	equ	0xFD9
 18993                           status	equ	0xFD8
 18994                           
 18995 ;; *************** function _MACPutArray *****************
 18996 ;; Defined at:
 18997 ;;		line 1087 in file "../framework/tcpip/src/eth97j60.c"
 18998 ;; Parameters:    Size  Location     Type
 18999 ;;  val             2   27[COMRAM] PTR unsigned char 
 19000 ;;		 -> UDPFlush@wChecksum(2), UDPFlush@h(8), IPPutHeader@header(20), ICMPProcess@dwVal(4), 
 19001 ;;		 -> UDPSocketInfo.remote(10), UDPSocketInfo(230), DHCPClient(32), ARPResolve@packet(28), 
 19002 ;;		 -> ARPProcess@packet(28), ARPSendPkt@packet(28), remoteNode(10), AppConfig(51), 
 19003 ;;		 -> m_messageBuffer(500), 
 19004 ;;  len             2   29[COMRAM] unsigned int 
 19005 ;; Auto vars:     Size  Location     Type
 19006 ;;		None
 19007 ;; Return value:  Size  Location     Type
 19008 ;;		None               void
 19009 ;; Registers used:
 19010 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 19011 ;; Tracked objects:
 19012 ;;		On entry : 0/0
 19013 ;;		On exit  : 0/0
 19014 ;;		Unchanged: 0/0
 19015 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19016 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19017 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19018 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19019 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19020 ;;Total ram usage:        4 bytes
 19021 ;; Hardware stack levels used:    1
 19022 ;; Hardware stack levels required when called:    6
 19023 ;; This function calls:
 19024 ;;		Nothing
 19025 ;; This function is called by:
 19026 ;;		_ARPPut
 19027 ;;		_ICMPProcess
 19028 ;;		_IPPutHeader
 19029 ;;		_UDPPutArray
 19030 ;;		_UDPFlush
 19031 ;;		_MACPutHeader
 19032 ;; This function uses a non-reentrant model
 19033 ;;
 19034                           
 19035                           	psect	text113
 19036  0050EC                     __ptext113:
 19037                           	opt stack 0
 19038  0050EC                     _MACPutArray:
 19039                           	opt stack 19
 19040                           
 19041                           ;eth97j60.c: 1089: while(len--)
 19042                           
 19043                           ;incstack = 0
 19044  0050EC  D00A               	goto	l9014
 19045  0050EE                     l9010:
 19046                           
 19047                           ;eth97j60.c: 1090: {
 19048                           ;eth97j60.c: 1094: PRODL = *val++;
 19049  0050EE  C01C  FFD9         	movff	MACPutArray@val,fsr2l
 19050  0050F2  C01D  FFDA         	movff	MACPutArray@val+1,fsr2h
 19051  0050F6  50DF               	movf	indf2,w,c
 19052  0050F8  6EF3               	movwf	prodl,c	;volatile
 19053  0050FA  4A1C               	infsnz	MACPutArray@val,f,c
 19054  0050FC  2A1D               	incf	MACPutArray@val+1,f,c
 19055  0050FE  CFF3 FF61          	movff	prodl,3937	;# 
 19056  005102                     l9014:
 19057  005102  061E               	decf	MACPutArray@len,f,c
 19058  005104  A0D8               	btfss	status,0,c
 19059  005106  061F               	decf	MACPutArray@len+1,f,c
 19060  005108  281E               	incf	MACPutArray@len,w,c
 19061  00510A  E1F1               	bnz	l9010
 19062  00510C  281F               	incf	MACPutArray@len+1,w,c
 19063  00510E  E1EF               	bnz	l9010
 19064  005110  0012               	return		;funcret
 19065  005112                     __end_of_MACPutArray:
 19066                           	opt stack 0
 19067                           tblptru	equ	0xFF8
 19068                           tblptrh	equ	0xFF7
 19069                           tblptrl	equ	0xFF6
 19070                           tablat	equ	0xFF5
 19071                           prodh	equ	0xFF4
 19072                           prodl	equ	0xFF3
 19073                           intcon	equ	0xFF2
 19074                           intcon2	equ	0xFF1
 19075                           postinc0	equ	0xFEE
 19076                           wreg	equ	0xFE8
 19077                           indf1	equ	0xFE7
 19078                           postinc1	equ	0xFE6
 19079                           postdec1	equ	0xFE5
 19080                           plusw1	equ	0xFE3
 19081                           fsr1h	equ	0xFE2
 19082                           fsr1l	equ	0xFE1
 19083                           indf2	equ	0xFDF
 19084                           postinc2	equ	0xFDE
 19085                           postdec2	equ	0xFDD
 19086                           plusw2	equ	0xFDB
 19087                           fsr2h	equ	0xFDA
 19088                           fsr2l	equ	0xFD9
 19089                           status	equ	0xFD8
 19090                           
 19091 ;; *************** function _MACPut *****************
 19092 ;; Defined at:
 19093 ;;		line 1049 in file "../framework/tcpip/src/eth97j60.c"
 19094 ;; Parameters:    Size  Location     Type
 19095 ;;  val             1    wreg     unsigned char 
 19096 ;; Auto vars:     Size  Location     Type
 19097 ;;  val             1   27[COMRAM] unsigned char 
 19098 ;; Return value:  Size  Location     Type
 19099 ;;		None               void
 19100 ;; Registers used:
 19101 ;;		wreg
 19102 ;; Tracked objects:
 19103 ;;		On entry : 0/E
 19104 ;;		On exit  : 0/0
 19105 ;;		Unchanged: 0/0
 19106 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19107 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19108 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19109 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19110 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19111 ;;Total ram usage:        1 bytes
 19112 ;; Hardware stack levels used:    1
 19113 ;; Hardware stack levels required when called:    6
 19114 ;; This function calls:
 19115 ;;		Nothing
 19116 ;; This function is called by:
 19117 ;;		_UDPPut
 19118 ;;		_MACInit
 19119 ;;		_MACPutHeader
 19120 ;;		_MACMemCopyAsync
 19121 ;; This function uses a non-reentrant model
 19122 ;;
 19123                           
 19124                           	psect	text114
 19125  00548C                     __ptext114:
 19126                           	opt stack 0
 19127  00548C                     _MACPut:
 19128                           	opt stack 19
 19129                           
 19130                           ;incstack = 0
 19131                           ;MACPut@val stored from wreg
 19132  00548C  6E1C               	movwf	MACPut@val,c
 19133                           
 19134                           ;eth97j60.c: 1054: PRODL = val;
 19135  00548E  C01C  FFF3         	movff	MACPut@val,prodl	;volatile
 19136  005492  CFF3 FF61          	movff	prodl,3937	;# 
 19137  005496  0012               	return		;funcret
 19138  005498                     __end_of_MACPut:
 19139                           	opt stack 0
 19140                           tblptru	equ	0xFF8
 19141                           tblptrh	equ	0xFF7
 19142                           tblptrl	equ	0xFF6
 19143                           tablat	equ	0xFF5
 19144                           prodh	equ	0xFF4
 19145                           prodl	equ	0xFF3
 19146                           intcon	equ	0xFF2
 19147                           intcon2	equ	0xFF1
 19148                           postinc0	equ	0xFEE
 19149                           wreg	equ	0xFE8
 19150                           indf1	equ	0xFE7
 19151                           postinc1	equ	0xFE6
 19152                           postdec1	equ	0xFE5
 19153                           plusw1	equ	0xFE3
 19154                           fsr1h	equ	0xFE2
 19155                           fsr1l	equ	0xFE1
 19156                           indf2	equ	0xFDF
 19157                           postinc2	equ	0xFDE
 19158                           postdec2	equ	0xFDD
 19159                           plusw2	equ	0xFDB
 19160                           fsr2h	equ	0xFDA
 19161                           fsr2l	equ	0xFD9
 19162                           status	equ	0xFD8
 19163                           
 19164 ;; *************** function _MACIsTxReady *****************
 19165 ;; Defined at:
 19166 ;;		line 250 in file "../framework/tcpip/src/eth97j60.c"
 19167 ;; Parameters:    Size  Location     Type
 19168 ;;		None
 19169 ;; Auto vars:     Size  Location     Type
 19170 ;;		None
 19171 ;; Return value:  Size  Location     Type
 19172 ;;                  1    wreg      unsigned char 
 19173 ;; Registers used:
 19174 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 19175 ;; Tracked objects:
 19176 ;;		On entry : 0/0
 19177 ;;		On exit  : 0/0
 19178 ;;		Unchanged: 0/0
 19179 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19180 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19181 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19182 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19183 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19184 ;;Total ram usage:        0 bytes
 19185 ;; Hardware stack levels used:    1
 19186 ;; Hardware stack levels required when called:    9
 19187 ;; This function calls:
 19188 ;;		_MACFlush
 19189 ;;		_TickGet
 19190 ;; This function is called by:
 19191 ;;		_ARPPut
 19192 ;;		_ICMPProcess
 19193 ;;		_UDPIsPutReady
 19194 ;; This function uses a non-reentrant model
 19195 ;;
 19196                           
 19197                           	psect	text115
 19198  005184                     __ptext115:
 19199                           	opt stack 0
 19200  005184                     _MACIsTxReady:
 19201                           	opt stack 17
 19202                           
 19203                           ;eth97j60.c: 252: if(!ECON1bits.TXRTS)
 19204                           
 19205                           ;incstack = 0
 19206  005184  A6D2               	btfss	4050,3,c	;volatile
 19207                           
 19208                           ;eth97j60.c: 253: return 1;
 19209  005186  0C01               	retlw	1
 19210                           
 19211                           ;eth97j60.c: 257: if((uint16_t)TickGet() - wTXWatchdog >= (3ull*(((((40000000ul) / 4)+12
      +                          8ull)/256ull))/1000ull))
 19212  005188  EC9C  F028         	call	_TickGet	;wreg free
 19213  00518C  0101               	movlb	1	; () banked
 19214  00518E  5170               	movf	_wTXWatchdog& (0+255),w,b
 19215  005190  5E1C               	subwf	?_TickGet,f,c
 19216  005192  5171               	movf	(_wTXWatchdog+1)& (0+255),w,b
 19217  005194  5A1D               	subwfb	?_TickGet+1,f,c
 19218  005196  501D               	movf	?_TickGet+1,w,c
 19219  005198  E103               	bnz	u7760
 19220  00519A  0E75               	movlw	117
 19221  00519C  5C1C               	subwf	?_TickGet,w,c
 19222  00519E  E303               	bnc	l9112
 19223  0051A0                     u7760:
 19224                           
 19225                           ; BSR set to: 1
 19226                           ;eth97j60.c: 258: {
 19227                           ;eth97j60.c: 259: ECON1bits.TXRTS = 0;
 19228  0051A0  96D2               	bcf	4050,3,c	;volatile
 19229                           
 19230                           ; BSR set to: 1
 19231                           ;eth97j60.c: 260: MACFlush();
 19232  0051A2  EC05  F029         	call	_MACFlush	;wreg free
 19233  0051A6                     l9112:
 19234                           
 19235                           ;eth97j60.c: 261: }
 19236                           ;eth97j60.c: 263: return 0;
 19237  0051A6  0C00               	retlw	0	;funcret
 19238  0051A8                     __end_of_MACIsTxReady:
 19239                           	opt stack 0
 19240                           tblptru	equ	0xFF8
 19241                           tblptrh	equ	0xFF7
 19242                           tblptrl	equ	0xFF6
 19243                           tablat	equ	0xFF5
 19244                           prodh	equ	0xFF4
 19245                           prodl	equ	0xFF3
 19246                           intcon	equ	0xFF2
 19247                           intcon2	equ	0xFF1
 19248                           postinc0	equ	0xFEE
 19249                           wreg	equ	0xFE8
 19250                           indf1	equ	0xFE7
 19251                           postinc1	equ	0xFE6
 19252                           postdec1	equ	0xFE5
 19253                           plusw1	equ	0xFE3
 19254                           fsr1h	equ	0xFE2
 19255                           fsr1l	equ	0xFE1
 19256                           indf2	equ	0xFDF
 19257                           postinc2	equ	0xFDE
 19258                           postdec2	equ	0xFDD
 19259                           plusw2	equ	0xFDB
 19260                           fsr2h	equ	0xFDA
 19261                           fsr2l	equ	0xFD9
 19262                           status	equ	0xFD8
 19263                           
 19264 ;; *************** function _MACFlush *****************
 19265 ;; Defined at:
 19266 ;;		line 531 in file "../framework/tcpip/src/eth97j60.c"
 19267 ;; Parameters:    Size  Location     Type
 19268 ;;		None
 19269 ;; Auto vars:     Size  Location     Type
 19270 ;;  i               1   35[COMRAM] volatile unsigned char 
 19271 ;; Return value:  Size  Location     Type
 19272 ;;		None               void
 19273 ;; Registers used:
 19274 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 19275 ;; Tracked objects:
 19276 ;;		On entry : 0/0
 19277 ;;		On exit  : 0/0
 19278 ;;		Unchanged: 0/0
 19279 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19280 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19281 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19282 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19283 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19284 ;;Total ram usage:        1 bytes
 19285 ;; Hardware stack levels used:    1
 19286 ;; Hardware stack levels required when called:    8
 19287 ;; This function calls:
 19288 ;;		_TickGet
 19289 ;; This function is called by:
 19290 ;;		_ARPPut
 19291 ;;		_ICMPProcess
 19292 ;;		_UDPFlush
 19293 ;;		_MACIsTxReady
 19294 ;; This function uses a non-reentrant model
 19295 ;;
 19296                           
 19297                           	psect	text116
 19298  00520A                     __ptext116:
 19299                           	opt stack 0
 19300  00520A                     _MACFlush:
 19301                           	opt stack 17
 19302                           
 19303                           ;eth97j60.c: 536: ECON1bits.TXRST = 1;
 19304                           
 19305                           ;incstack = 0
 19306  00520A  8ED2               	bsf	4050,7,c	;volatile
 19307                           
 19308                           ;eth97j60.c: 537: ECON1bits.TXRST = 0;
 19309  00520C  9ED2               	bcf	4050,7,c	;volatile
 19310                           
 19311                           ;eth97j60.c: 541: {volatile uint8_t i = 8; while(i--);}
 19312  00520E  0E08               	movlw	8
 19313  005210  6E24               	movwf	MACFlush@i,c	;volatile
 19314  005212                     l9060:
 19315  005212  0624               	decf	MACFlush@i,f,c	;volatile
 19316  005214  2824               	incf	MACFlush@i,w,c	;volatile
 19317  005216  E1FD               	bnz	l9060
 19318                           
 19319                           ;eth97j60.c: 542: EIRbits.TXERIF = 0;
 19320  005218  9260               	bcf	3936,1,c	;volatile
 19321                           
 19322                           ;eth97j60.c: 549: ECON1bits.TXRTS = 1;
 19323  00521A  86D2               	bsf	4050,3,c	;volatile
 19324                           
 19325                           ;eth97j60.c: 550: wTXWatchdog = TickGet();
 19326  00521C  EC9C  F028         	call	_TickGet	;wreg free
 19327  005220  C01C  F170         	movff	?_TickGet,_wTXWatchdog
 19328  005224  C01D  F171         	movff	?_TickGet+1,_wTXWatchdog+1
 19329  005228  0012               	return		;funcret
 19330  00522A                     __end_of_MACFlush:
 19331                           	opt stack 0
 19332                           tblptru	equ	0xFF8
 19333                           tblptrh	equ	0xFF7
 19334                           tblptrl	equ	0xFF6
 19335                           tablat	equ	0xFF5
 19336                           prodh	equ	0xFF4
 19337                           prodl	equ	0xFF3
 19338                           intcon	equ	0xFF2
 19339                           intcon2	equ	0xFF1
 19340                           postinc0	equ	0xFEE
 19341                           wreg	equ	0xFE8
 19342                           indf1	equ	0xFE7
 19343                           postinc1	equ	0xFE6
 19344                           postdec1	equ	0xFE5
 19345                           plusw1	equ	0xFE3
 19346                           fsr1h	equ	0xFE2
 19347                           fsr1l	equ	0xFE1
 19348                           indf2	equ	0xFDF
 19349                           postinc2	equ	0xFDE
 19350                           postdec2	equ	0xFDD
 19351                           plusw2	equ	0xFDB
 19352                           fsr2h	equ	0xFDA
 19353                           fsr2l	equ	0xFD9
 19354                           status	equ	0xFD8
 19355                           
 19356 ;; *************** function _DelayMs *****************
 19357 ;; Defined at:
 19358 ;;		line 46 in file "../framework/tcpip/src/common/delay.c"
 19359 ;; Parameters:    Size  Location     Type
 19360 ;;  ms              2   27[COMRAM] unsigned int 
 19361 ;; Auto vars:     Size  Location     Type
 19362 ;;  _dcnt           4   29[COMRAM] unsigned long 
 19363 ;;  i               1   33[COMRAM] unsigned char 
 19364 ;; Return value:  Size  Location     Type
 19365 ;;		None               void
 19366 ;; Registers used:
 19367 ;;		wreg, status,2, status,0
 19368 ;; Tracked objects:
 19369 ;;		On entry : 0/0
 19370 ;;		On exit  : 0/0
 19371 ;;		Unchanged: 0/0
 19372 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19373 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19374 ;;      Locals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19375 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19376 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19377 ;;Total ram usage:        7 bytes
 19378 ;; Hardware stack levels used:    1
 19379 ;; Hardware stack levels required when called:    6
 19380 ;; This function calls:
 19381 ;;		Nothing
 19382 ;; This function is called by:
 19383 ;;		_SendUDPMessage
 19384 ;; This function uses a non-reentrant model
 19385 ;;
 19386                           
 19387                           	psect	text117
 19388  004C36                     __ptext117:
 19389                           	opt stack 0
 19390  004C36                     _DelayMs:
 19391                           	opt stack 20
 19392                           
 19393                           ;delay.c: 48: unsigned char i;
 19394                           ;delay.c: 49: while (ms--) {
 19395                           
 19396                           ;incstack = 0
 19397  004C36  D019               	goto	l10434
 19398  004C38                     l10426:
 19399                           
 19400                           ;delay.c: 50: i = 4;
 19401  004C38  0E04               	movlw	4
 19402  004C3A  6E22               	movwf	DelayMs@i,c
 19403                           
 19404                           ;delay.c: 51: while (i--) {
 19405  004C3C  D013               	goto	l10432
 19406  004C3E                     l10428:
 19407  004C3E  0E90               	movlw	144
 19408  004C40  6E1E               	movwf	DelayMs@_dcnt,c
 19409  004C42  0E01               	movlw	1
 19410  004C44  6E1F               	movwf	DelayMs@_dcnt+1,c
 19411  004C46  6A20               	clrf	DelayMs@_dcnt+2,c
 19412  004C48  6A21               	clrf	DelayMs@_dcnt+3,c
 19413  004C4A                     l10430:
 19414  004C4A  061E               	decf	DelayMs@_dcnt,f,c
 19415  004C4C  0E00               	movlw	0
 19416  004C4E  5A1F               	subwfb	DelayMs@_dcnt+1,f,c
 19417  004C50  5A20               	subwfb	DelayMs@_dcnt+2,f,c
 19418  004C52  5A21               	subwfb	DelayMs@_dcnt+3,f,c
 19419  004C54  281E               	incf	DelayMs@_dcnt,w,c
 19420  004C56  E1F9               	bnz	l10430
 19421  004C58  281F               	incf	DelayMs@_dcnt+1,w,c
 19422  004C5A  E1F7               	bnz	l10430
 19423  004C5C  2820               	incf	DelayMs@_dcnt+2,w,c
 19424  004C5E  E1F5               	bnz	l10430
 19425  004C60  2821               	incf	DelayMs@_dcnt+3,w,c
 19426  004C62  E1F3               	bnz	l10430
 19427  004C64                     l10432:
 19428  004C64  0622               	decf	DelayMs@i,f,c
 19429  004C66  2822               	incf	DelayMs@i,w,c
 19430  004C68  E1EA               	bnz	l10428
 19431  004C6A                     l10434:
 19432  004C6A  061C               	decf	DelayMs@ms,f,c
 19433  004C6C  A0D8               	btfss	status,0,c
 19434  004C6E  061D               	decf	DelayMs@ms+1,f,c
 19435  004C70  281C               	incf	DelayMs@ms,w,c
 19436  004C72  E1E2               	bnz	l10426
 19437  004C74  281D               	incf	DelayMs@ms+1,w,c
 19438  004C76  E1E0               	bnz	l10426
 19439  004C78  0012               	return		;funcret
 19440  004C7A                     __end_of_DelayMs:
 19441                           	opt stack 0
 19442                           tblptru	equ	0xFF8
 19443                           tblptrh	equ	0xFF7
 19444                           tblptrl	equ	0xFF6
 19445                           tablat	equ	0xFF5
 19446                           prodh	equ	0xFF4
 19447                           prodl	equ	0xFF3
 19448                           intcon	equ	0xFF2
 19449                           intcon2	equ	0xFF1
 19450                           postinc0	equ	0xFEE
 19451                           wreg	equ	0xFE8
 19452                           indf1	equ	0xFE7
 19453                           postinc1	equ	0xFE6
 19454                           postdec1	equ	0xFE5
 19455                           plusw1	equ	0xFE3
 19456                           fsr1h	equ	0xFE2
 19457                           fsr1l	equ	0xFE1
 19458                           indf2	equ	0xFDF
 19459                           postinc2	equ	0xFDE
 19460                           postdec2	equ	0xFDD
 19461                           plusw2	equ	0xFDB
 19462                           fsr2h	equ	0xFDA
 19463                           fsr2l	equ	0xFD9
 19464                           status	equ	0xFD8
 19465                           
 19466 ;; *************** function _GetWiegandCode *****************
 19467 ;; Defined at:
 19468 ;;		line 107 in file "../src/InitRutines.c"
 19469 ;; Parameters:    Size  Location     Type
 19470 ;;		None
 19471 ;; Auto vars:     Size  Location     Type
 19472 ;;  tmp             4   31[COMRAM] unsigned long 
 19473 ;; Return value:  Size  Location     Type
 19474 ;;                  4   27[COMRAM] unsigned long 
 19475 ;; Registers used:
 19476 ;;		wreg, status,2, status,0
 19477 ;; Tracked objects:
 19478 ;;		On entry : F/0
 19479 ;;		On exit  : F/0
 19480 ;;		Unchanged: 0/0
 19481 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19482 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19483 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19484 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19485 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19486 ;;Total ram usage:        8 bytes
 19487 ;; Hardware stack levels used:    1
 19488 ;; Hardware stack levels required when called:    6
 19489 ;; This function calls:
 19490 ;;		Nothing
 19491 ;; This function is called by:
 19492 ;;		_CheckKeypad
 19493 ;;		_HandleConfigData
 19494 ;; This function uses a non-reentrant model
 19495 ;;
 19496                           
 19497                           	psect	text118
 19498  004A6E                     __ptext118:
 19499                           	opt stack 0
 19500  004A6E                     _GetWiegandCode:
 19501                           	opt stack 21
 19502                           
 19503                           ; BSR set to: 0
 19504                           ;InitRutines.c: 108: uint32_t tmp;
 19505                           ;InitRutines.c: 110: tmp = m_wiegandCode;
 19506                           
 19507                           ;incstack = 0
 19508  004A6E  C158  F020         	movff	_m_wiegandCode,GetWiegandCode@tmp
 19509  004A72  C159  F021         	movff	_m_wiegandCode+1,GetWiegandCode@tmp+1
 19510  004A76  C15A  F022         	movff	_m_wiegandCode+2,GetWiegandCode@tmp+2
 19511  004A7A  C15B  F023         	movff	_m_wiegandCode+3,GetWiegandCode@tmp+3
 19512                           
 19513                           ;InitRutines.c: 111: m_wiegandCode = 0;
 19514  004A7E  0101               	movlb	1	; () banked
 19515  004A80  6B58               	clrf	_m_wiegandCode& (0+255),b
 19516  004A82  6B59               	clrf	(_m_wiegandCode+1)& (0+255),b
 19517  004A84  6B5A               	clrf	(_m_wiegandCode+2)& (0+255),b
 19518  004A86  6B5B               	clrf	(_m_wiegandCode+3)& (0+255),b
 19519                           
 19520                           ;InitRutines.c: 112: g_wiegandFlag = 0;
 19521  004A88  0100               	movlb	0	; () banked
 19522  004A8A  6BD0               	clrf	_g_wiegandFlag& (0+255),b
 19523                           
 19524                           ; BSR set to: 0
 19525                           ;InitRutines.c: 114: if (tmp < 12)
 19526  004A8C  5023               	movf	GetWiegandCode@tmp+3,w,c
 19527  004A8E  1022               	iorwf	GetWiegandCode@tmp+2,w,c
 19528  004A90  1021               	iorwf	GetWiegandCode@tmp+1,w,c
 19529  004A92  E10C               	bnz	l10602
 19530  004A94  0E0C               	movlw	12
 19531  004A96  5C20               	subwf	GetWiegandCode@tmp,w,c
 19532  004A98  E209               	bc	l10602
 19533  004A9A                     l10600:
 19534                           
 19535                           ; BSR set to: 0
 19536                           ;InitRutines.c: 115: return tmp;
 19537  004A9A  C020  F01C         	movff	GetWiegandCode@tmp,?_GetWiegandCode
 19538  004A9E  C021  F01D         	movff	GetWiegandCode@tmp+1,?_GetWiegandCode+1
 19539  004AA2  C022  F01E         	movff	GetWiegandCode@tmp+2,?_GetWiegandCode+2
 19540  004AA6  C023  F01F         	movff	GetWiegandCode@tmp+3,?_GetWiegandCode+3
 19541  004AAA  0012               	return	
 19542  004AAC                     l10602:
 19543                           
 19544                           ; BSR set to: 0
 19545                           ;InitRutines.c: 117: tmp >>= 1;
 19546  004AAC  90D8               	bcf	status,0,c
 19547  004AAE  3223               	rrcf	GetWiegandCode@tmp+3,f,c
 19548  004AB0  3222               	rrcf	GetWiegandCode@tmp+2,f,c
 19549  004AB2  3221               	rrcf	GetWiegandCode@tmp+1,f,c
 19550  004AB4  3220               	rrcf	GetWiegandCode@tmp,f,c
 19551                           
 19552                           ; BSR set to: 0
 19553                           ;InitRutines.c: 118: tmp &= 0xFFFFFF;
 19554  004AB6  0E00               	movlw	0
 19555  004AB8  6A23               	clrf	GetWiegandCode@tmp+3,c
 19556  004ABA  D7EF               	goto	l10600
 19557  004ABC                     __end_of_GetWiegandCode:
 19558                           	opt stack 0
 19559                           tblptru	equ	0xFF8
 19560                           tblptrh	equ	0xFF7
 19561                           tblptrl	equ	0xFF6
 19562                           tablat	equ	0xFF5
 19563                           prodh	equ	0xFF4
 19564                           prodl	equ	0xFF3
 19565                           intcon	equ	0xFF2
 19566                           intcon2	equ	0xFF1
 19567                           postinc0	equ	0xFEE
 19568                           wreg	equ	0xFE8
 19569                           indf1	equ	0xFE7
 19570                           postinc1	equ	0xFE6
 19571                           postdec1	equ	0xFE5
 19572                           plusw1	equ	0xFE3
 19573                           fsr1h	equ	0xFE2
 19574                           fsr1l	equ	0xFE1
 19575                           indf2	equ	0xFDF
 19576                           postinc2	equ	0xFDE
 19577                           postdec2	equ	0xFDD
 19578                           plusw2	equ	0xFDB
 19579                           fsr2h	equ	0xFDA
 19580                           fsr2l	equ	0xFD9
 19581                           status	equ	0xFD8
 19582                           
 19583 ;; *************** function _CheckHeartBeatTimer *****************
 19584 ;; Defined at:
 19585 ;;		line 249 in file "../src/NDC.c"
 19586 ;; Parameters:    Size  Location     Type
 19587 ;;		None
 19588 ;; Auto vars:     Size  Location     Type
 19589 ;;		None
 19590 ;; Return value:  Size  Location     Type
 19591 ;;		None               void
 19592 ;; Registers used:
 19593 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 19594 ;; Tracked objects:
 19595 ;;		On entry : 0/0
 19596 ;;		On exit  : 0/0
 19597 ;;		Unchanged: 0/0
 19598 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19599 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19600 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19601 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19602 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19603 ;;Total ram usage:        4 bytes
 19604 ;; Hardware stack levels used:    1
 19605 ;; Hardware stack levels required when called:    8
 19606 ;; This function calls:
 19607 ;;		_TickGet
 19608 ;;		_UDPClose
 19609 ;; This function is called by:
 19610 ;;		_NDCFSM
 19611 ;; This function uses a non-reentrant model
 19612 ;;
 19613                           
 19614                           	psect	text119
 19615  004930                     __ptext119:
 19616                           	opt stack 0
 19617  004930                     _CheckHeartBeatTimer:
 19618                           	opt stack 21
 19619                           
 19620                           ;NDC.c: 250: if (TickGet() - m_timerReceiveHeartbeat > (((((40000000ul) / 4)+128ull)/256
      +                          ull)) * 8) {
 19621                           
 19622                           ; BSR set to: 0
 19623                           ;incstack = 0
 19624  004930  EC9C  F028         	call	_TickGet	;wreg free
 19625  004934  0101               	movlb	1	; () banked
 19626  004936  5148               	movf	_m_timerReceiveHeartbeat& (0+255),w,b
 19627  004938  5C1C               	subwf	?_TickGet,w,c
 19628  00493A  6E24               	movwf	??_CheckHeartBeatTimer& (0+255),c
 19629  00493C  5149               	movf	(_m_timerReceiveHeartbeat+1)& (0+255),w,b
 19630  00493E  581D               	subwfb	?_TickGet+1,w,c
 19631  004940  6E25               	movwf	(??_CheckHeartBeatTimer+1)& (0+255),c
 19632  004942  514A               	movf	(_m_timerReceiveHeartbeat+2)& (0+255),w,b
 19633  004944  581E               	subwfb	?_TickGet+2,w,c
 19634  004946  6E26               	movwf	(??_CheckHeartBeatTimer+2)& (0+255),c
 19635  004948  514B               	movf	(_m_timerReceiveHeartbeat+3)& (0+255),w,b
 19636  00494A  581F               	subwfb	?_TickGet+3,w,c
 19637  00494C  6E27               	movwf	(??_CheckHeartBeatTimer+3)& (0+255),c
 19638  00494E  5027               	movf	??_CheckHeartBeatTimer+3,w,c
 19639  004950  E108               	bnz	u10330
 19640  004952  0EB9               	movlw	185
 19641  004954  5C24               	subwf	??_CheckHeartBeatTimer,w,c
 19642  004956  0EC4               	movlw	196
 19643  004958  5825               	subwfb	??_CheckHeartBeatTimer+1,w,c
 19644  00495A  0E04               	movlw	4
 19645  00495C  5826               	subwfb	??_CheckHeartBeatTimer+2,w,c
 19646  00495E  A0D8               	btfss	status,0,c
 19647  004960  0012               	return	
 19648  004962                     u10330:
 19649                           
 19650                           ; BSR set to: 1
 19651                           ;NDC.c: 251: UDPClose(m_udpSocket);
 19652  004962  5041               	movf	_m_udpSocket,w,c
 19653  004964  ECAB  F025         	call	_UDPClose
 19654                           
 19655                           ;NDC.c: 252: m_state = STATE_START;
 19656  004968  0100               	movlb	0	; () banked
 19657  00496A  6BD8               	clrf	_m_state& (0+255),b
 19658                           
 19659                           ; BSR set to: 0
 19660                           ;NDC.c: 253: m_timerState = TickGet();
 19661  00496C  EC9C  F028         	call	_TickGet	;wreg free
 19662  004970  C01C  F150         	movff	?_TickGet,_m_timerState
 19663  004974  C01D  F151         	movff	?_TickGet+1,_m_timerState+1
 19664  004978  C01E  F152         	movff	?_TickGet+2,_m_timerState+2
 19665  00497C  C01F  F153         	movff	?_TickGet+3,_m_timerState+3
 19666  004980  0012               	return		;funcret
 19667  004982                     __end_of_CheckHeartBeatTimer:
 19668                           	opt stack 0
 19669                           tblptru	equ	0xFF8
 19670                           tblptrh	equ	0xFF7
 19671                           tblptrl	equ	0xFF6
 19672                           tablat	equ	0xFF5
 19673                           prodh	equ	0xFF4
 19674                           prodl	equ	0xFF3
 19675                           intcon	equ	0xFF2
 19676                           intcon2	equ	0xFF1
 19677                           postinc0	equ	0xFEE
 19678                           wreg	equ	0xFE8
 19679                           indf1	equ	0xFE7
 19680                           postinc1	equ	0xFE6
 19681                           postdec1	equ	0xFE5
 19682                           plusw1	equ	0xFE3
 19683                           fsr1h	equ	0xFE2
 19684                           fsr1l	equ	0xFE1
 19685                           indf2	equ	0xFDF
 19686                           postinc2	equ	0xFDE
 19687                           postdec2	equ	0xFDD
 19688                           plusw2	equ	0xFDB
 19689                           fsr2h	equ	0xFDA
 19690                           fsr2l	equ	0xFD9
 19691                           status	equ	0xFD8
 19692                           
 19693 ;; *************** function _UDPClose *****************
 19694 ;; Defined at:
 19695 ;;		line 530 in file "../framework/tcpip/src/udp.c"
 19696 ;; Parameters:    Size  Location     Type
 19697 ;;  s               1    wreg     unsigned char 
 19698 ;; Auto vars:     Size  Location     Type
 19699 ;;  s               1   27[COMRAM] unsigned char 
 19700 ;; Return value:  Size  Location     Type
 19701 ;;		None               void
 19702 ;; Registers used:
 19703 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 19704 ;; Tracked objects:
 19705 ;;		On entry : 0/1
 19706 ;;		On exit  : 0/0
 19707 ;;		Unchanged: 0/0
 19708 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19709 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19710 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19711 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19712 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19713 ;;Total ram usage:        1 bytes
 19714 ;; Hardware stack levels used:    1
 19715 ;; Hardware stack levels required when called:    6
 19716 ;; This function calls:
 19717 ;;		Nothing
 19718 ;; This function is called by:
 19719 ;;		_NDCResetState
 19720 ;;		_CheckHeartBeatTimer
 19721 ;;		_HandleReceivedBytes
 19722 ;;		_DHCPInit
 19723 ;;		_DHCPDisable
 19724 ;;		_DHCPTask
 19725 ;;		_UDPInit
 19726 ;; This function uses a non-reentrant model
 19727 ;;
 19728                           
 19729                           	psect	text120
 19730  004B56                     __ptext120:
 19731                           	opt stack 0
 19732  004B56                     _UDPClose:
 19733                           	opt stack 22
 19734                           
 19735                           ;incstack = 0
 19736                           ;UDPClose@s stored from wreg
 19737  004B56  6E1C               	movwf	UDPClose@s,c
 19738                           
 19739                           ;udp.c: 532: if (s >= (10u))
 19740  004B58  0E09               	movlw	9
 19741  004B5A  641C               	cpfsgt	UDPClose@s,c
 19742  004B5C  D001               	goto	l9462
 19743  004B5E  0C09               	retlw	9
 19744  004B60                     l9462:
 19745                           
 19746                           ;udp.c: 535: UDPSocketInfo[s].localPort = (0ul);
 19747  004B60  501C               	movf	UDPClose@s,w,c
 19748  004B62  0D17               	mullw	23
 19749  004B64  0E0C               	movlw	low (_UDPSocketInfo+12)
 19750  004B66  24F3               	addwf	prodl,w,c
 19751  004B68  6ED9               	movwf	fsr2l,c
 19752  004B6A  0E02               	movlw	high (_UDPSocketInfo+12)
 19753  004B6C  20F4               	addwfc	prodh,w,c
 19754  004B6E  6EDA               	movwf	fsr2h,c
 19755  004B70  6ADE               	clrf	postinc2,c
 19756  004B72  6ADD               	clrf	postdec2,c
 19757                           
 19758                           ;udp.c: 536: UDPSocketInfo[s].remote.remoteNode.IPAddr.Val = 0x00000000;
 19759  004B74  501C               	movf	UDPClose@s,w,c
 19760  004B76  0D17               	mullw	23
 19761  004B78  0E00               	movlw	low _UDPSocketInfo
 19762  004B7A  24F3               	addwf	prodl,w,c
 19763  004B7C  6ED9               	movwf	fsr2l,c
 19764  004B7E  0E02               	movlw	high _UDPSocketInfo
 19765  004B80  20F4               	addwfc	prodh,w,c
 19766  004B82  6EDA               	movwf	fsr2h,c
 19767  004B84  6ADE               	clrf	postinc2,c
 19768  004B86  6ADE               	clrf	postinc2,c
 19769  004B88  6ADE               	clrf	postinc2,c
 19770  004B8A  6ADD               	clrf	postdec2,c
 19771                           
 19772                           ;udp.c: 537: UDPSocketInfo[s].smState = UDP_CLOSED;
 19773  004B8C  501C               	movf	UDPClose@s,w,c
 19774  004B8E  0D17               	mullw	23
 19775  004B90  0E0E               	movlw	low (_UDPSocketInfo+14)
 19776  004B92  24F3               	addwf	prodl,w,c
 19777  004B94  6ED9               	movwf	fsr2l,c
 19778  004B96  0E02               	movlw	high (_UDPSocketInfo+14)
 19779  004B98  20F4               	addwfc	prodh,w,c
 19780  004B9A  6EDA               	movwf	fsr2h,c
 19781  004B9C  0E04               	movlw	4
 19782  004B9E  6EDF               	movwf	indf2,c
 19783  004BA0  0C04               	retlw	4	;funcret
 19784  004BA2                     __end_of_UDPClose:
 19785                           	opt stack 0
 19786                           tblptru	equ	0xFF8
 19787                           tblptrh	equ	0xFF7
 19788                           tblptrl	equ	0xFF6
 19789                           tablat	equ	0xFF5
 19790                           prodh	equ	0xFF4
 19791                           prodl	equ	0xFF3
 19792                           intcon	equ	0xFF2
 19793                           intcon2	equ	0xFF1
 19794                           postinc0	equ	0xFEE
 19795                           wreg	equ	0xFE8
 19796                           indf1	equ	0xFE7
 19797                           postinc1	equ	0xFE6
 19798                           postdec1	equ	0xFE5
 19799                           plusw1	equ	0xFE3
 19800                           fsr1h	equ	0xFE2
 19801                           fsr1l	equ	0xFE1
 19802                           indf2	equ	0xFDF
 19803                           postinc2	equ	0xFDE
 19804                           postdec2	equ	0xFDD
 19805                           plusw2	equ	0xFDB
 19806                           fsr2h	equ	0xFDA
 19807                           fsr2l	equ	0xFD9
 19808                           status	equ	0xFD8
 19809                           
 19810 ;; *************** function _CheckFlashingLEDTimer *****************
 19811 ;; Defined at:
 19812 ;;		line 205 in file "../src/NDC.c"
 19813 ;; Parameters:    Size  Location     Type
 19814 ;;		None
 19815 ;; Auto vars:     Size  Location     Type
 19816 ;;		None
 19817 ;; Return value:  Size  Location     Type
 19818 ;;		None               void
 19819 ;; Registers used:
 19820 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 19821 ;; Tracked objects:
 19822 ;;		On entry : 0/1
 19823 ;;		On exit  : 0/0
 19824 ;;		Unchanged: 0/0
 19825 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19826 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19827 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19828 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19829 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19830 ;;Total ram usage:        4 bytes
 19831 ;; Hardware stack levels used:    1
 19832 ;; Hardware stack levels required when called:    8
 19833 ;; This function calls:
 19834 ;;		_TickGet
 19835 ;; This function is called by:
 19836 ;;		_NDCFSM
 19837 ;; This function uses a non-reentrant model
 19838 ;;
 19839                           
 19840                           	psect	text121
 19841  004246                     __ptext121:
 19842                           	opt stack 0
 19843  004246                     _CheckFlashingLEDTimer:
 19844                           	opt stack 21
 19845                           
 19846                           ;NDC.c: 207: if (m_timerWaitForPinCode == 0 || m_flashDiodeEnable == 0)
 19847                           
 19848                           ;incstack = 0
 19849  004246  0101               	movlb	1	; () banked
 19850  004248  5154               	movf	_m_timerWaitForPinCode& (0+255),w,b
 19851  00424A  1155               	iorwf	(_m_timerWaitForPinCode+1)& (0+255),w,b
 19852  00424C  1156               	iorwf	(_m_timerWaitForPinCode+2)& (0+255),w,b
 19853  00424E  1157               	iorwf	(_m_timerWaitForPinCode+3)& (0+255),w,b
 19854  004250  B4D8               	btfsc	status,2,c
 19855  004252  0012               	return	
 19856                           
 19857                           ; BSR set to: 1
 19858  004254  5040               	movf	_m_flashDiodeEnable,w,c
 19859  004256  E101               	bnz	l10984
 19860  004258  0012               	return	
 19861  00425A                     l10984:
 19862                           
 19863                           ; BSR set to: 1
 19864                           ;NDC.c: 210: if ((TickGet() - m_timerFlashDiod) > (((((40000000ul) / 4)+128ull)/256ull))
      +                           / 5) {
 19865  00425A  EC9C  F028         	call	_TickGet	;wreg free
 19866  00425E  0101               	movlb	1	; () banked
 19867  004260  5140               	movf	_m_timerFlashDiod& (0+255),w,b
 19868  004262  5C1C               	subwf	?_TickGet,w,c
 19869  004264  6E24               	movwf	??_CheckFlashingLEDTimer& (0+255),c
 19870  004266  5141               	movf	(_m_timerFlashDiod+1)& (0+255),w,b
 19871  004268  581D               	subwfb	?_TickGet+1,w,c
 19872  00426A  6E25               	movwf	(??_CheckFlashingLEDTimer+1)& (0+255),c
 19873  00426C  5142               	movf	(_m_timerFlashDiod+2)& (0+255),w,b
 19874  00426E  581E               	subwfb	?_TickGet+2,w,c
 19875  004270  6E26               	movwf	(??_CheckFlashingLEDTimer+2)& (0+255),c
 19876  004272  5143               	movf	(_m_timerFlashDiod+3)& (0+255),w,b
 19877  004274  581F               	subwfb	?_TickGet+3,w,c
 19878  004276  6E27               	movwf	(??_CheckFlashingLEDTimer+3)& (0+255),c
 19879  004278  5027               	movf	??_CheckFlashingLEDTimer+3,w,c
 19880  00427A  1026               	iorwf	??_CheckFlashingLEDTimer+2,w,c
 19881  00427C  E106               	bnz	u10290
 19882  00427E  0E85               	movlw	133
 19883  004280  5C24               	subwf	??_CheckFlashingLEDTimer,w,c
 19884  004282  0E1E               	movlw	30
 19885  004284  5825               	subwfb	??_CheckFlashingLEDTimer+1,w,c
 19886  004286  A0D8               	btfss	status,0,c
 19887  004288  0012               	return	
 19888  00428A                     u10290:
 19889                           
 19890                           ; BSR set to: 1
 19891                           ;NDC.c: 213: if (m_flashDiodeState) {
 19892  00428A  0100               	movlb	0	; () banked
 19893  00428C  51D5               	movf	_m_flashDiodeState& (0+255),w,b
 19894  00428E  E003               	bz	l10990
 19895                           
 19896                           ; BSR set to: 0
 19897                           ;NDC.c: 214: m_flashDiodeState = 0;
 19898  004290  6BD5               	clrf	_m_flashDiodeState& (0+255),b
 19899                           
 19900                           ;NDC.c: 215: (LATDbits.LATD2) = 1;
 19901  004292  848C               	bsf	3980,2,c	;volatile
 19902                           
 19903                           ;NDC.c: 216: } else {
 19904  004294  D003               	goto	l10994
 19905  004296                     l10990:
 19906                           
 19907                           ; BSR set to: 0
 19908                           ;NDC.c: 217: m_flashDiodeState = 1;
 19909  004296  0E01               	movlw	1
 19910  004298  6FD5               	movwf	_m_flashDiodeState& (0+255),b
 19911                           
 19912                           ; BSR set to: 0
 19913                           ;NDC.c: 218: (LATDbits.LATD2) = 0;
 19914  00429A  948C               	bcf	3980,2,c	;volatile
 19915  00429C                     l10994:
 19916                           
 19917                           ; BSR set to: 0
 19918                           ;NDC.c: 219: }
 19919                           ;NDC.c: 221: m_timerFlashDiod = TickGet();
 19920  00429C  EC9C  F028         	call	_TickGet	;wreg free
 19921  0042A0  C01C  F140         	movff	?_TickGet,_m_timerFlashDiod
 19922  0042A4  C01D  F141         	movff	?_TickGet+1,_m_timerFlashDiod+1
 19923  0042A8  C01E  F142         	movff	?_TickGet+2,_m_timerFlashDiod+2
 19924  0042AC  C01F  F143         	movff	?_TickGet+3,_m_timerFlashDiod+3
 19925  0042B0  0012               	return		;funcret
 19926  0042B2                     __end_of_CheckFlashingLEDTimer:
 19927                           	opt stack 0
 19928                           tblptru	equ	0xFF8
 19929                           tblptrh	equ	0xFF7
 19930                           tblptrl	equ	0xFF6
 19931                           tablat	equ	0xFF5
 19932                           prodh	equ	0xFF4
 19933                           prodl	equ	0xFF3
 19934                           intcon	equ	0xFF2
 19935                           intcon2	equ	0xFF1
 19936                           postinc0	equ	0xFEE
 19937                           wreg	equ	0xFE8
 19938                           indf1	equ	0xFE7
 19939                           postinc1	equ	0xFE6
 19940                           postdec1	equ	0xFE5
 19941                           plusw1	equ	0xFE3
 19942                           fsr1h	equ	0xFE2
 19943                           fsr1l	equ	0xFE1
 19944                           indf2	equ	0xFDF
 19945                           postinc2	equ	0xFDE
 19946                           postdec2	equ	0xFDD
 19947                           plusw2	equ	0xFDB
 19948                           fsr2h	equ	0xFDA
 19949                           fsr2l	equ	0xFD9
 19950                           status	equ	0xFD8
 19951                           
 19952 ;; *************** function _CheckDoorTimer *****************
 19953 ;; Defined at:
 19954 ;;		line 181 in file "../src/NDC.c"
 19955 ;; Parameters:    Size  Location     Type
 19956 ;;		None
 19957 ;; Auto vars:     Size  Location     Type
 19958 ;;		None
 19959 ;; Return value:  Size  Location     Type
 19960 ;;                  1    wreg      unsigned char 
 19961 ;; Registers used:
 19962 ;;		wreg, status,2, status,0
 19963 ;; Tracked objects:
 19964 ;;		On entry : E/1
 19965 ;;		On exit  : E/0
 19966 ;;		Unchanged: 0/0
 19967 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19968 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19969 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19970 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19971 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19972 ;;Total ram usage:        0 bytes
 19973 ;; Hardware stack levels used:    1
 19974 ;; Hardware stack levels required when called:    6
 19975 ;; This function calls:
 19976 ;;		Nothing
 19977 ;; This function is called by:
 19978 ;;		_NDCFSM
 19979 ;; This function uses a non-reentrant model
 19980 ;;
 19981                           
 19982                           	psect	text122
 19983  005112                     __ptext122:
 19984                           	opt stack 0
 19985  005112                     _CheckDoorTimer:
 19986                           	opt stack 23
 19987                           
 19988                           ;NDC.c: 182: if (m_openDoorFlag == 1) {
 19989                           
 19990                           ;incstack = 0
 19991  005112  0100               	movlb	0	; () banked
 19992  005114  05D7               	decf	_m_openDoorFlag& (0+255),w,b
 19993  005116  E10F               	bnz	l8052
 19994                           
 19995                           ; BSR set to: 0
 19996                           ;NDC.c: 185: if (m_flashDiodeEnable == 0)
 19997  005118  5040               	movf	_m_flashDiodeEnable,w,c
 19998  00511A  E101               	bnz	l8044
 19999                           
 20000                           ; BSR set to: 0
 20001                           ;NDC.c: 186: (LATDbits.LATD2) = 1;
 20002  00511C  848C               	bsf	3980,2,c	;volatile
 20003  00511E                     l8044:
 20004                           
 20005                           ; BSR set to: 0
 20006                           ;NDC.c: 188: if (m_openDoorTime <= 0) {
 20007  00511E  0101               	movlb	1	; () banked
 20008  005120  5138               	movf	_m_openDoorTime& (0+255),w,b
 20009  005122  1139               	iorwf	(_m_openDoorTime+1)& (0+255),w,b
 20010  005124  113A               	iorwf	(_m_openDoorTime+2)& (0+255),w,b
 20011  005126  113B               	iorwf	(_m_openDoorTime+3)& (0+255),w,b
 20012  005128  E106               	bnz	l8052
 20013                           
 20014                           ; BSR set to: 1
 20015                           ;NDC.c: 189: m_openDoorFlag = 0;
 20016  00512A  0100               	movlb	0	; () banked
 20017  00512C  6BD7               	clrf	_m_openDoorFlag& (0+255),b
 20018                           
 20019                           ;NDC.c: 192: (LATFbits.LATF2) = 1;
 20020  00512E  848E               	bsf	3982,2,c	;volatile
 20021                           
 20022                           ;NDC.c: 193: (LATFbits.LATF3) = 0;
 20023  005130  968E               	bcf	3982,3,c	;volatile
 20024                           
 20025                           ;NDC.c: 196: (LATDbits.LATD2) = 0;
 20026  005132  948C               	bcf	3980,2,c	;volatile
 20027                           
 20028                           ; BSR set to: 0
 20029                           ;NDC.c: 198: return 1;
 20030  005134  0C01               	retlw	1
 20031  005136                     l8052:
 20032                           
 20033                           ;NDC.c: 199: }
 20034                           ;NDC.c: 200: }
 20035                           ;NDC.c: 202: return 0;
 20036  005136  0C00               	retlw	0	;funcret
 20037  005138                     __end_of_CheckDoorTimer:
 20038                           	opt stack 0
 20039                           tblptru	equ	0xFF8
 20040                           tblptrh	equ	0xFF7
 20041                           tblptrl	equ	0xFF6
 20042                           tablat	equ	0xFF5
 20043                           prodh	equ	0xFF4
 20044                           prodl	equ	0xFF3
 20045                           intcon	equ	0xFF2
 20046                           intcon2	equ	0xFF1
 20047                           postinc0	equ	0xFEE
 20048                           wreg	equ	0xFE8
 20049                           indf1	equ	0xFE7
 20050                           postinc1	equ	0xFE6
 20051                           postdec1	equ	0xFE5
 20052                           plusw1	equ	0xFE3
 20053                           fsr1h	equ	0xFE2
 20054                           fsr1l	equ	0xFE1
 20055                           indf2	equ	0xFDF
 20056                           postinc2	equ	0xFDE
 20057                           postdec2	equ	0xFDD
 20058                           plusw2	equ	0xFDB
 20059                           fsr2h	equ	0xFDA
 20060                           fsr2l	equ	0xFD9
 20061                           status	equ	0xFD8
 20062                           
 20063 ;; *************** function _CheckConnectionResponseWaitTimer *****************
 20064 ;; Defined at:
 20065 ;;		line 375 in file "../src/NDC.c"
 20066 ;; Parameters:    Size  Location     Type
 20067 ;;		None
 20068 ;; Auto vars:     Size  Location     Type
 20069 ;;		None
 20070 ;; Return value:  Size  Location     Type
 20071 ;;		None               void
 20072 ;; Registers used:
 20073 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 20074 ;; Tracked objects:
 20075 ;;		On entry : 0/0
 20076 ;;		On exit  : E/0
 20077 ;;		Unchanged: 0/0
 20078 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20079 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20080 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20081 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20082 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20083 ;;Total ram usage:        4 bytes
 20084 ;; Hardware stack levels used:    1
 20085 ;; Hardware stack levels required when called:    8
 20086 ;; This function calls:
 20087 ;;		_TickGet
 20088 ;; This function is called by:
 20089 ;;		_NDCFSM
 20090 ;; This function uses a non-reentrant model
 20091 ;;
 20092                           
 20093                           	psect	text123
 20094  004ABC                     __ptext123:
 20095                           	opt stack 0
 20096  004ABC                     _CheckConnectionResponseWaitTimer:
 20097                           	opt stack 21
 20098                           
 20099                           ;NDC.c: 376: if (TickGet() - m_timerState > (((((40000000ul) / 4)+128ull)/256ull)) * 4) 
      +                          {
 20100                           
 20101                           ;incstack = 0
 20102  004ABC  EC9C  F028         	call	_TickGet	;wreg free
 20103  004AC0  0101               	movlb	1	; () banked
 20104  004AC2  5150               	movf	_m_timerState& (0+255),w,b
 20105  004AC4  5C1C               	subwf	?_TickGet,w,c
 20106  004AC6  6E24               	movwf	??_CheckConnectionResponseWaitTimer& (0+255),c
 20107  004AC8  5151               	movf	(_m_timerState+1)& (0+255),w,b
 20108  004ACA  581D               	subwfb	?_TickGet+1,w,c
 20109  004ACC  6E25               	movwf	(??_CheckConnectionResponseWaitTimer+1)& (0+255),c
 20110  004ACE  5152               	movf	(_m_timerState+2)& (0+255),w,b
 20111  004AD0  581E               	subwfb	?_TickGet+2,w,c
 20112  004AD2  6E26               	movwf	(??_CheckConnectionResponseWaitTimer+2)& (0+255),c
 20113  004AD4  5153               	movf	(_m_timerState+3)& (0+255),w,b
 20114  004AD6  581F               	subwfb	?_TickGet+3,w,c
 20115  004AD8  6E27               	movwf	(??_CheckConnectionResponseWaitTimer+3)& (0+255),c
 20116  004ADA  5027               	movf	??_CheckConnectionResponseWaitTimer+3,w,c
 20117  004ADC  E108               	bnz	u10480
 20118  004ADE  0E5D               	movlw	93
 20119  004AE0  5C24               	subwf	??_CheckConnectionResponseWaitTimer,w,c
 20120  004AE2  0E62               	movlw	98
 20121  004AE4  5825               	subwfb	??_CheckConnectionResponseWaitTimer+1,w,c
 20122  004AE6  0E02               	movlw	2
 20123  004AE8  5826               	subwfb	??_CheckConnectionResponseWaitTimer+2,w,c
 20124  004AEA  A0D8               	btfss	status,0,c
 20125  004AEC  0012               	return	
 20126  004AEE                     u10480:
 20127                           
 20128                           ; BSR set to: 1
 20129                           ;NDC.c: 377: m_timerState = TickGet();
 20130  004AEE  EC9C  F028         	call	_TickGet	;wreg free
 20131  004AF2  C01C  F150         	movff	?_TickGet,_m_timerState
 20132  004AF6  C01D  F151         	movff	?_TickGet+1,_m_timerState+1
 20133  004AFA  C01E  F152         	movff	?_TickGet+2,_m_timerState+2
 20134  004AFE  C01F  F153         	movff	?_TickGet+3,_m_timerState+3
 20135                           
 20136                           ;NDC.c: 378: m_state = STATE_SEND_CONNECTION_REQUEST;
 20137  004B02  0E01               	movlw	1
 20138  004B04  0100               	movlb	0	; () banked
 20139  004B06  6FD8               	movwf	_m_state& (0+255),b
 20140  004B08  0C01               	retlw	1	;funcret
 20141  004B0A                     __end_of_CheckConnectionResponseWaitTimer:
 20142                           	opt stack 0
 20143                           tblptru	equ	0xFF8
 20144                           tblptrh	equ	0xFF7
 20145                           tblptrl	equ	0xFF6
 20146                           tablat	equ	0xFF5
 20147                           prodh	equ	0xFF4
 20148                           prodl	equ	0xFF3
 20149                           intcon	equ	0xFF2
 20150                           intcon2	equ	0xFF1
 20151                           postinc0	equ	0xFEE
 20152                           wreg	equ	0xFE8
 20153                           indf1	equ	0xFE7
 20154                           postinc1	equ	0xFE6
 20155                           postdec1	equ	0xFE5
 20156                           plusw1	equ	0xFE3
 20157                           fsr1h	equ	0xFE2
 20158                           fsr1l	equ	0xFE1
 20159                           indf2	equ	0xFDF
 20160                           postinc2	equ	0xFDE
 20161                           postdec2	equ	0xFDD
 20162                           plusw2	equ	0xFDB
 20163                           fsr2h	equ	0xFDA
 20164                           fsr2l	equ	0xFD9
 20165                           status	equ	0xFD8
 20166                           
 20167 ;; *************** function _CheckConfigDataWaitTimer *****************
 20168 ;; Defined at:
 20169 ;;		line 382 in file "../src/NDC.c"
 20170 ;; Parameters:    Size  Location     Type
 20171 ;;		None
 20172 ;; Auto vars:     Size  Location     Type
 20173 ;;		None
 20174 ;; Return value:  Size  Location     Type
 20175 ;;		None               void
 20176 ;; Registers used:
 20177 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 20178 ;; Tracked objects:
 20179 ;;		On entry : 0/0
 20180 ;;		On exit  : E/0
 20181 ;;		Unchanged: 0/0
 20182 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20183 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20184 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20185 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20186 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20187 ;;Total ram usage:        4 bytes
 20188 ;; Hardware stack levels used:    1
 20189 ;; Hardware stack levels required when called:    8
 20190 ;; This function calls:
 20191 ;;		_TickGet
 20192 ;; This function is called by:
 20193 ;;		_NDCFSM
 20194 ;; This function uses a non-reentrant model
 20195 ;;
 20196                           
 20197                           	psect	text124
 20198  004BA2                     __ptext124:
 20199                           	opt stack 0
 20200  004BA2                     _CheckConfigDataWaitTimer:
 20201                           	opt stack 21
 20202                           
 20203                           ;NDC.c: 383: if (TickGet() - m_timerState > (((((40000000ul) / 4)+128ull)/256ull)) * 10)
      +                           {
 20204                           
 20205                           ;incstack = 0
 20206  004BA2  EC9C  F028         	call	_TickGet	;wreg free
 20207  004BA6  0101               	movlb	1	; () banked
 20208  004BA8  5150               	movf	_m_timerState& (0+255),w,b
 20209  004BAA  5C1C               	subwf	?_TickGet,w,c
 20210  004BAC  6E24               	movwf	??_CheckConfigDataWaitTimer& (0+255),c
 20211  004BAE  5151               	movf	(_m_timerState+1)& (0+255),w,b
 20212  004BB0  581D               	subwfb	?_TickGet+1,w,c
 20213  004BB2  6E25               	movwf	(??_CheckConfigDataWaitTimer+1)& (0+255),c
 20214  004BB4  5152               	movf	(_m_timerState+2)& (0+255),w,b
 20215  004BB6  581E               	subwfb	?_TickGet+2,w,c
 20216  004BB8  6E26               	movwf	(??_CheckConfigDataWaitTimer+2)& (0+255),c
 20217  004BBA  5153               	movf	(_m_timerState+3)& (0+255),w,b
 20218  004BBC  581F               	subwfb	?_TickGet+3,w,c
 20219  004BBE  6E27               	movwf	(??_CheckConfigDataWaitTimer+3)& (0+255),c
 20220  004BC0  5027               	movf	??_CheckConfigDataWaitTimer+3,w,c
 20221  004BC2  E108               	bnz	u10490
 20222  004BC4  0EE7               	movlw	231
 20223  004BC6  5C24               	subwf	??_CheckConfigDataWaitTimer,w,c
 20224  004BC8  0EF5               	movlw	245
 20225  004BCA  5825               	subwfb	??_CheckConfigDataWaitTimer+1,w,c
 20226  004BCC  0E05               	movlw	5
 20227  004BCE  5826               	subwfb	??_CheckConfigDataWaitTimer+2,w,c
 20228  004BD0  A0D8               	btfss	status,0,c
 20229  004BD2  0012               	return	
 20230  004BD4                     u10490:
 20231                           
 20232                           ; BSR set to: 1
 20233                           ;NDC.c: 384: m_timerState = TickGet();
 20234  004BD4  EC9C  F028         	call	_TickGet	;wreg free
 20235  004BD8  C01C  F150         	movff	?_TickGet,_m_timerState
 20236  004BDC  C01D  F151         	movff	?_TickGet+1,_m_timerState+1
 20237  004BE0  C01E  F152         	movff	?_TickGet+2,_m_timerState+2
 20238  004BE4  C01F  F153         	movff	?_TickGet+3,_m_timerState+3
 20239                           
 20240                           ;NDC.c: 385: m_state = STATE_START;
 20241  004BE8  0100               	movlb	0	; () banked
 20242  004BEA  6BD8               	clrf	_m_state& (0+255),b
 20243  004BEC  0012               	return		;funcret
 20244  004BEE                     __end_of_CheckConfigDataWaitTimer:
 20245                           	opt stack 0
 20246                           tblptru	equ	0xFF8
 20247                           tblptrh	equ	0xFF7
 20248                           tblptrl	equ	0xFF6
 20249                           tablat	equ	0xFF5
 20250                           prodh	equ	0xFF4
 20251                           prodl	equ	0xFF3
 20252                           intcon	equ	0xFF2
 20253                           intcon2	equ	0xFF1
 20254                           postinc0	equ	0xFEE
 20255                           wreg	equ	0xFE8
 20256                           indf1	equ	0xFE7
 20257                           postinc1	equ	0xFE6
 20258                           postdec1	equ	0xFE5
 20259                           plusw1	equ	0xFE3
 20260                           fsr1h	equ	0xFE2
 20261                           fsr1l	equ	0xFE1
 20262                           indf2	equ	0xFDF
 20263                           postinc2	equ	0xFDE
 20264                           postdec2	equ	0xFDD
 20265                           plusw2	equ	0xFDB
 20266                           fsr2h	equ	0xFDA
 20267                           fsr2l	equ	0xFD9
 20268                           status	equ	0xFD8
 20269                           
 20270 ;; *************** function _TickGet *****************
 20271 ;; Defined at:
 20272 ;;		line 249 in file "../framework/tcpip/src/common/tick.c"
 20273 ;; Parameters:    Size  Location     Type
 20274 ;;		None
 20275 ;; Auto vars:     Size  Location     Type
 20276 ;;  dw              4   31[COMRAM] unsigned long 
 20277 ;; Return value:  Size  Location     Type
 20278 ;;                  4   27[COMRAM] unsigned long 
 20279 ;; Registers used:
 20280 ;;		fsr2l, fsr2h, cstack
 20281 ;; Tracked objects:
 20282 ;;		On entry : 0/1
 20283 ;;		On exit  : 0/0
 20284 ;;		Unchanged: 0/0
 20285 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20286 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20287 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20288 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20289 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20290 ;;Total ram usage:        8 bytes
 20291 ;; Hardware stack levels used:    1
 20292 ;; Hardware stack levels required when called:    7
 20293 ;; This function calls:
 20294 ;;		_GetTickCopy
 20295 ;; This function is called by:
 20296 ;;		_OpenUDPsocket
 20297 ;;		_KeyPressedResetIdleTimer
 20298 ;;		_NDCResetState
 20299 ;;		_CheckFlashingLEDTimer
 20300 ;;		_CheckWaitForCodeTimer
 20301 ;;		_CheckHeartBeatTimer
 20302 ;;		_CheckKeypad
 20303 ;;		_CheckConnectionResponseWaitTimer
 20304 ;;		_CheckConfigDataWaitTimer
 20305 ;;		_SendConnectionRequest
 20306 ;;		_SendHeartBeat
 20307 ;;		_HandleConnectionResponse
 20308 ;;		_HandleConfigData
 20309 ;;		_HandleReceivedBytes
 20310 ;;		_Beep
 20311 ;;		_DHCPTask
 20312 ;;		_MACIsTxReady
 20313 ;;		_MACFlush
 20314 ;;		_main
 20315 ;; This function uses a non-reentrant model
 20316 ;;
 20317                           
 20318                           	psect	text125
 20319  005138                     __ptext125:
 20320                           	opt stack 0
 20321  005138                     _TickGet:
 20322                           	opt stack 23
 20323                           
 20324                           ;tick.c: 251: uint32_t dw;
 20325                           ;tick.c: 253: GetTickCopy();
 20326                           
 20327                           ;incstack = 0
 20328  005138  EC25  F028         	call	_GetTickCopy	;wreg free
 20329                           
 20330                           ;tick.c: 254: ((uint8_t *) & dw)[0] = vTickReading[0];
 20331  00513C  C029  F020         	movff	_vTickReading,TickGet@dw	;volatile
 20332                           
 20333                           ;tick.c: 255: ((uint8_t *) & dw)[1] = vTickReading[1];
 20334  005140  C02A  F021         	movff	_vTickReading+1,TickGet@dw+1	;volatile
 20335                           
 20336                           ;tick.c: 256: ((uint8_t *) & dw)[2] = vTickReading[2];
 20337  005144  C02B  F022         	movff	_vTickReading+2,TickGet@dw+2	;volatile
 20338                           
 20339                           ;tick.c: 257: ((uint8_t *) & dw)[3] = vTickReading[3];
 20340  005148  C02C  F023         	movff	_vTickReading+3,TickGet@dw+3	;volatile
 20341                           
 20342                           ;tick.c: 259: return dw;
 20343  00514C  C020  F01C         	movff	TickGet@dw,?_TickGet
 20344  005150  C021  F01D         	movff	TickGet@dw+1,?_TickGet+1
 20345  005154  C022  F01E         	movff	TickGet@dw+2,?_TickGet+2
 20346  005158  C023  F01F         	movff	TickGet@dw+3,?_TickGet+3
 20347  00515C  0012               	return		;funcret
 20348  00515E                     __end_of_TickGet:
 20349                           	opt stack 0
 20350                           tblptru	equ	0xFF8
 20351                           tblptrh	equ	0xFF7
 20352                           tblptrl	equ	0xFF6
 20353                           tablat	equ	0xFF5
 20354                           prodh	equ	0xFF4
 20355                           prodl	equ	0xFF3
 20356                           intcon	equ	0xFF2
 20357                           intcon2	equ	0xFF1
 20358                           postinc0	equ	0xFEE
 20359                           wreg	equ	0xFE8
 20360                           indf1	equ	0xFE7
 20361                           postinc1	equ	0xFE6
 20362                           postdec1	equ	0xFE5
 20363                           plusw1	equ	0xFE3
 20364                           fsr1h	equ	0xFE2
 20365                           fsr1l	equ	0xFE1
 20366                           indf2	equ	0xFDF
 20367                           postinc2	equ	0xFDE
 20368                           postdec2	equ	0xFDD
 20369                           plusw2	equ	0xFDB
 20370                           fsr2h	equ	0xFDA
 20371                           fsr2l	equ	0xFD9
 20372                           status	equ	0xFD8
 20373                           
 20374 ;; *************** function _GetTickCopy *****************
 20375 ;; Defined at:
 20376 ;;		line 139 in file "../framework/tcpip/src/common/tick.c"
 20377 ;; Parameters:    Size  Location     Type
 20378 ;;		None
 20379 ;; Auto vars:     Size  Location     Type
 20380 ;;		None
 20381 ;; Return value:  Size  Location     Type
 20382 ;;		None               void
 20383 ;; Registers used:
 20384 ;;		fsr2l, fsr2h
 20385 ;; Tracked objects:
 20386 ;;		On entry : 0/0
 20387 ;;		On exit  : 0/0
 20388 ;;		Unchanged: 0/0
 20389 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20390 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20391 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20392 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20393 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20394 ;;Total ram usage:        0 bytes
 20395 ;; Hardware stack levels used:    1
 20396 ;; Hardware stack levels required when called:    6
 20397 ;; This function calls:
 20398 ;;		Nothing
 20399 ;; This function is called by:
 20400 ;;		_TickGet
 20401 ;;		_TickGetDiv256
 20402 ;; This function uses a non-reentrant model
 20403 ;;
 20404                           
 20405                           	psect	text126
 20406  00504A                     __ptext126:
 20407                           	opt stack 0
 20408  00504A                     _GetTickCopy:
 20409                           	opt stack 23
 20410  00504A                     l1247:
 20411                           
 20412                           ;tick.c: 145: INTCONbits.TMR0IE = 1;
 20413  00504A  8AF2               	bsf	intcon,5,c	;volatile
 20414                           
 20415                           ;tick.c: 146: __nop();
 20416  00504C  F000               	nop	
 20417                           
 20418                           ;tick.c: 147: INTCONbits.TMR0IE = 0;
 20419  00504E  9AF2               	bcf	intcon,5,c	;volatile
 20420                           
 20421                           ;tick.c: 148: vTickReading[0] = TMR0L;
 20422  005050  CFD6 F029          	movff	4054,_vTickReading	;volatile
 20423                           
 20424                           ;tick.c: 149: vTickReading[1] = TMR0H;
 20425  005054  CFD7 F02A          	movff	4055,_vTickReading+1	;volatile
 20426                           
 20427                           ;tick.c: 150: *((uint32_t *) & vTickReading[2]) = dwInternalTicks;
 20428  005058  EE20  F02B         	lfsr	2,_vTickReading+2
 20429  00505C  C120  FFDE         	movff	_dwInternalTicks,postinc2	;volatile
 20430  005060  C121  FFDE         	movff	_dwInternalTicks+1,postinc2	;volatile
 20431  005064  C122  FFDE         	movff	_dwInternalTicks+2,postinc2	;volatile
 20432  005068  C123  FFDE         	movff	_dwInternalTicks+3,postinc2	;volatile
 20433                           
 20434                           ;tick.c: 151: } while (INTCONbits.TMR0IF);
 20435  00506C  B4F2               	btfsc	intcon,2,c	;volatile
 20436  00506E  D7ED               	goto	l1247
 20437                           
 20438                           ;tick.c: 152: INTCONbits.TMR0IE = 1;
 20439  005070  8AF2               	bsf	intcon,5,c	;volatile
 20440  005072  0012               	return		;funcret
 20441  005074                     __end_of_GetTickCopy:
 20442                           	opt stack 0
 20443                           tblptru	equ	0xFF8
 20444                           tblptrh	equ	0xFF7
 20445                           tblptrl	equ	0xFF6
 20446                           tablat	equ	0xFF5
 20447                           prodh	equ	0xFF4
 20448                           prodl	equ	0xFF3
 20449                           intcon	equ	0xFF2
 20450                           intcon2	equ	0xFF1
 20451                           postinc0	equ	0xFEE
 20452                           wreg	equ	0xFE8
 20453                           indf1	equ	0xFE7
 20454                           postinc1	equ	0xFE6
 20455                           postdec1	equ	0xFE5
 20456                           plusw1	equ	0xFE3
 20457                           fsr1h	equ	0xFE2
 20458                           fsr1l	equ	0xFE1
 20459                           indf2	equ	0xFDF
 20460                           postinc2	equ	0xFDE
 20461                           postdec2	equ	0xFDD
 20462                           plusw2	equ	0xFDB
 20463                           fsr2h	equ	0xFDA
 20464                           fsr2l	equ	0xFD9
 20465                           status	equ	0xFD8
 20466                           
 20467 ;; *************** function _InitializeBoard *****************
 20468 ;; Defined at:
 20469 ;;		line 142 in file "../src/InitRutines.c"
 20470 ;; Parameters:    Size  Location     Type
 20471 ;;  a               2   30[COMRAM] int 
 20472 ;; Auto vars:     Size  Location     Type
 20473 ;;  macArray       18    0[BANK0 ] unsigned char [18]
 20474 ;;  macStringInd    2   20[BANK0 ] int 
 20475 ;;  arrayindex      2   18[BANK0 ] int 
 20476 ;; Return value:  Size  Location     Type
 20477 ;;		None               void
 20478 ;; Registers used:
 20479 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 20480 ;; Tracked objects:
 20481 ;;		On entry : 0/0
 20482 ;;		On exit  : F/0
 20483 ;;		Unchanged: 0/0
 20484 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20485 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20486 ;;      Locals:         0      22       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20487 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20488 ;;      Totals:         3      22       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20489 ;;Total ram usage:       25 bytes
 20490 ;; Hardware stack levels used:    1
 20491 ;; Hardware stack levels required when called:    7
 20492 ;; This function calls:
 20493 ;;		_MiscHexStringToByte
 20494 ;; This function is called by:
 20495 ;;		_main
 20496 ;; This function uses a non-reentrant model
 20497 ;;
 20498                           
 20499                           	psect	text127
 20500  003762                     __ptext127:
 20501                           	opt stack 0
 20502  003762                     _InitializeBoard:
 20503                           	opt stack 23
 20504                           
 20505                           ;InitRutines.c: 143: int macStringIndex, arrayindex;
 20506                           ;InitRutines.c: 144: uint8_t macArray[18] = "00-01-2B-00-00-11";
 20507                           
 20508                           ;incstack = 0
 20509  003762  EE21  F0C8         	lfsr	2,InitializeBoard@F7567
 20510  003766  EE10  F060         	lfsr	1,InitializeBoard@macArray
 20511  00376A  0E11               	movlw	17
 20512  00376C                     u10971:
 20513  00376C  CFDB FFE3          	movff	plusw2,plusw1
 20514  003770  06E8               	decf	wreg,f,c
 20515  003772  E2FC               	bc	u10971
 20516                           
 20517                           ;InitRutines.c: 149: TRISG = 0;
 20518  003774  6A98               	clrf	3992,c	;volatile
 20519                           
 20520                           ;InitRutines.c: 151: TRISF = 0;
 20521  003776  6A97               	clrf	3991,c	;volatile
 20522                           
 20523                           ;InitRutines.c: 154: (TRISCbits.TRISC0) = 0;
 20524  003778  9094               	bcf	3988,0,c	;volatile
 20525                           
 20526                           ;InitRutines.c: 155: (TRISCbits.TRISC1) = 0;
 20527  00377A  9294               	bcf	3988,1,c	;volatile
 20528                           
 20529                           ;InitRutines.c: 156: (TRISCbits.TRISC2) = 0;
 20530  00377C  9494               	bcf	3988,2,c	;volatile
 20531                           
 20532                           ;InitRutines.c: 157: (TRISCbits.TRISC7) = 0;
 20533  00377E  9E94               	bcf	3988,7,c	;volatile
 20534                           
 20535                           ;InitRutines.c: 158: (TRISCbits.TRISC6) = 0;
 20536  003780  9C94               	bcf	3988,6,c	;volatile
 20537                           
 20538                           ;InitRutines.c: 161: TRISD = 0;
 20539  003782  6A95               	clrf	3989,c	;volatile
 20540                           
 20541                           ;InitRutines.c: 162: (LATDbits.LATD1) = 0;
 20542  003784  928C               	bcf	3980,1,c	;volatile
 20543                           
 20544                           ;InitRutines.c: 163: (LATDbits.LATD2) = 0;
 20545  003786  948C               	bcf	3980,2,c	;volatile
 20546                           
 20547                           ;InitRutines.c: 166: TRISH = 0;
 20548  003788  6A99               	clrf	3993,c	;volatile
 20549                           
 20550                           ;InitRutines.c: 168: (TRISBbits.TRISB0) = 1;
 20551  00378A  8093               	bsf	3987,0,c	;volatile
 20552                           
 20553                           ;InitRutines.c: 169: (TRISBbits.TRISB1) = 1;
 20554  00378C  8293               	bsf	3987,1,c	;volatile
 20555                           
 20556                           ;InitRutines.c: 170: (TRISBbits.TRISB2) = 1;
 20557  00378E  8493               	bsf	3987,2,c	;volatile
 20558                           
 20559                           ;InitRutines.c: 171: (TRISBbits.TRISB3) = 1;
 20560  003790  8693               	bsf	3987,3,c	;volatile
 20561                           
 20562                           ;InitRutines.c: 176: (TRISHbits.TRISH0) = 1;
 20563  003792  8099               	bsf	3993,0,c	;volatile
 20564                           
 20565                           ;InitRutines.c: 177: (TRISHbits.TRISH1) = 1;
 20566  003794  8299               	bsf	3993,1,c	;volatile
 20567                           
 20568                           ;InitRutines.c: 180: (LATCbits.LATC0) = 0;
 20569  003796  908B               	bcf	3979,0,c	;volatile
 20570                           
 20571                           ;InitRutines.c: 181: (LATCbits.LATC1) = 0;
 20572  003798  928B               	bcf	3979,1,c	;volatile
 20573                           
 20574                           ;InitRutines.c: 182: (LATCbits.LATC2) = 0;
 20575  00379A  948B               	bcf	3979,2,c	;volatile
 20576                           
 20577                           ;InitRutines.c: 183: (LATCbits.LATC7) = 0;
 20578  00379C  9E8B               	bcf	3979,7,c	;volatile
 20579                           
 20580                           ;InitRutines.c: 185: (LATCbits.LATC6) = 1;
 20581  00379E  8C8B               	bsf	3979,6,c	;volatile
 20582                           
 20583                           ;InitRutines.c: 188: OSCTUNE = 0x40;
 20584  0037A0  0E40               	movlw	64
 20585  0037A2  6E9B               	movwf	3995,c	;volatile
 20586                           
 20587                           ;InitRutines.c: 200: ADCON0 = 0x01;
 20588  0037A4  0E01               	movlw	1
 20589  0037A6  6EC2               	movwf	4034,c	;volatile
 20590                           
 20591                           ;InitRutines.c: 201: ADCON1 = 0x0E;
 20592  0037A8  0E0E               	movlw	14
 20593  0037AA  6EC1               	movwf	4033,c	;volatile
 20594                           
 20595                           ;InitRutines.c: 206: ADCON2 = 0xBE;
 20596  0037AC  0EBE               	movlw	190
 20597  0037AE  6EC0               	movwf	4032,c	;volatile
 20598                           
 20599                           ;InitRutines.c: 210: INTCON2bits.RBPU = 0;
 20600  0037B0  9EF1               	bcf	intcon2,7,c	;volatile
 20601                           
 20602                           ;InitRutines.c: 213: RCONbits.IPEN = 1;
 20603  0037B2  8ED0               	bsf	4048,7,c	;volatile
 20604                           
 20605                           ;InitRutines.c: 214: INTCONbits.GIEH = 1;
 20606  0037B4  8EF2               	bsf	intcon,7,c	;volatile
 20607                           
 20608                           ;InitRutines.c: 215: INTCONbits.GIEL = 1;
 20609  0037B6  8CF2               	bsf	intcon,6,c	;volatile
 20610                           
 20611                           ;InitRutines.c: 218: INTCON2bits.INTEDG0 = 0;
 20612  0037B8  9CF1               	bcf	intcon2,6,c	;volatile
 20613                           
 20614                           ;InitRutines.c: 219: INTCON2bits.INTEDG1 = 0;
 20615  0037BA  9AF1               	bcf	intcon2,5,c	;volatile
 20616                           
 20617                           ;InitRutines.c: 221: INTCONbits.INT0IE = 1;
 20618  0037BC  88F2               	bsf	intcon,4,c	;volatile
 20619                           
 20620                           ;InitRutines.c: 222: INTCON3bits.INT1IE = 1;
 20621  0037BE  86F0               	bsf	intcon3,3,c	;volatile
 20622                           
 20623                           ;InitRutines.c: 224: INTCONbits.INT0IF = 0;
 20624  0037C0  92F2               	bcf	intcon,1,c	;volatile
 20625                           
 20626                           ;InitRutines.c: 225: INTCON3bits.INT1IF = 0;
 20627  0037C2  90F0               	bcf	intcon3,0,c	;volatile
 20628                           
 20629                           ;InitRutines.c: 227: INTCON3bits.INT1IP = 1;
 20630  0037C4  8CF0               	bsf	intcon3,6,c	;volatile
 20631                           
 20632                           ;InitRutines.c: 233: ADCON0bits.ADCAL = 1;
 20633  0037C6  8EC2               	bsf	4034,7,c	;volatile
 20634                           
 20635                           ;InitRutines.c: 234: ADCON0bits.GO = 1;
 20636  0037C8  82C2               	bsf	4034,1,c	;volatile
 20637  0037CA                     l697:
 20638  0037CA  B2C2               	btfsc	4034,1,c	;volatile
 20639  0037CC  D7FE               	goto	l697
 20640                           
 20641                           ;InitRutines.c: 236: ADCON0bits.ADCAL = 0;
 20642  0037CE  9EC2               	bcf	4034,7,c	;volatile
 20643                           
 20644                           ;InitRutines.c: 255: T1CON = 0b00110101;
 20645  0037D0  0E35               	movlw	53
 20646  0037D2  6ECD               	movwf	4045,c	;volatile
 20647                           
 20648                           ;InitRutines.c: 256: PIE1bits.TMR1IE = 1;
 20649  0037D4  809D               	bsf	3997,0,c	;volatile
 20650                           
 20651                           ;InitRutines.c: 257: IPR1bits.TMR1IP = 0;
 20652  0037D6  909F               	bcf	3999,0,c	;volatile
 20653                           
 20654                           ;InitRutines.c: 258: PIR1bits.TMR1IF = 0;
 20655  0037D8  909E               	bcf	3998,0,c	;volatile
 20656                           
 20657                           ;InitRutines.c: 261: T2CON = 0b01111111;
 20658  0037DA  0E7F               	movlw	127
 20659  0037DC  6ECA               	movwf	4042,c	;volatile
 20660                           
 20661                           ;InitRutines.c: 262: PIE1bits.TMR2IE = 0;
 20662  0037DE  929D               	bcf	3997,1,c	;volatile
 20663                           
 20664                           ;InitRutines.c: 263: IPR1bits.TMR2IP = 1;
 20665  0037E0  829F               	bsf	3999,1,c	;volatile
 20666                           
 20667                           ;InitRutines.c: 264: PIR1bits.TMR2IF = 0;
 20668  0037E2  929E               	bcf	3998,1,c	;volatile
 20669                           
 20670                           ;InitRutines.c: 266: PR2 = 255;
 20671  0037E4  68CB               	setf	4043,c	;volatile
 20672                           
 20673                           ;InitRutines.c: 270: while (macStringIndex < 17) {
 20674  0037E6  D012               	goto	l11698
 20675  0037E8                     l11692:
 20676                           
 20677                           ; BSR set to: 0
 20678                           ;InitRutines.c: 271: g_serializedMACAddress[arrayindex++] = MiscHexStringToByte((uint8_t
      +                          *) (macArray + macStringIndex));
 20679  0037E8  5174               	movf	InitializeBoard@macStringIndex& (0+255),w,b
 20680  0037EA  0F60               	addlw	low InitializeBoard@macArray
 20681  0037EC  ECC1  F024         	call	_MiscHexStringToByte
 20682  0037F0  6E21               	movwf	??_InitializeBoard& (0+255),c
 20683  0037F2  0100               	movlb	0	; () banked
 20684  0037F4  5172               	movf	InitializeBoard@arrayindex& (0+255),w,b
 20685  0037F6  0FF9               	addlw	low _g_serializedMACAddress
 20686  0037F8  6ED9               	movwf	fsr2l,c
 20687  0037FA  6ADA               	clrf	fsr2h,c
 20688  0037FC  C021  FFDF         	movff	??_InitializeBoard,indf2
 20689                           
 20690                           ; BSR set to: 0
 20691  003800  4B72               	infsnz	InitializeBoard@arrayindex& (0+255),f,b
 20692  003802  2B73               	incf	(InitializeBoard@arrayindex+1)& (0+255),f,b
 20693                           
 20694                           ; BSR set to: 0
 20695                           ;InitRutines.c: 272: macStringIndex += 3;
 20696  003804  0E03               	movlw	3
 20697  003806  2774               	addwf	InitializeBoard@macStringIndex& (0+255),f,b
 20698  003808  0E00               	movlw	0
 20699  00380A  2375               	addwfc	(InitializeBoard@macStringIndex+1)& (0+255),f,b
 20700  00380C                     l11698:
 20701  00380C  0100               	movlb	0	; () banked
 20702  00380E  BF75               	btfsc	(InitializeBoard@macStringIndex+1)& (0+255),7,b
 20703  003810  D7EB               	goto	l11692
 20704  003812  5175               	movf	(InitializeBoard@macStringIndex+1)& (0+255),w,b
 20705  003814  E103               	bnz	u10990
 20706  003816  0E11               	movlw	17
 20707  003818  5D74               	subwf	InitializeBoard@macStringIndex& (0+255),w,b
 20708  00381A  E3E6               	bnc	l11692
 20709  00381C                     u10990:
 20710                           
 20711                           ; BSR set to: 0
 20712  00381C  0012               	return		;funcret
 20713  00381E                     __end_of_InitializeBoard:
 20714                           	opt stack 0
 20715                           tblptru	equ	0xFF8
 20716                           tblptrh	equ	0xFF7
 20717                           tblptrl	equ	0xFF6
 20718                           tablat	equ	0xFF5
 20719                           prodh	equ	0xFF4
 20720                           prodl	equ	0xFF3
 20721                           intcon	equ	0xFF2
 20722                           intcon2	equ	0xFF1
 20723                           intcon3	equ	0xFF0
 20724                           postinc0	equ	0xFEE
 20725                           wreg	equ	0xFE8
 20726                           indf1	equ	0xFE7
 20727                           postinc1	equ	0xFE6
 20728                           postdec1	equ	0xFE5
 20729                           plusw1	equ	0xFE3
 20730                           fsr1h	equ	0xFE2
 20731                           fsr1l	equ	0xFE1
 20732                           indf2	equ	0xFDF
 20733                           postinc2	equ	0xFDE
 20734                           postdec2	equ	0xFDD
 20735                           plusw2	equ	0xFDB
 20736                           fsr2h	equ	0xFDA
 20737                           fsr2l	equ	0xFD9
 20738                           status	equ	0xFD8
 20739                           
 20740 ;; *************** function _MiscHexStringToByte *****************
 20741 ;; Defined at:
 20742 ;;		line 63 in file "../src/Misc.c"
 20743 ;; Parameters:    Size  Location     Type
 20744 ;;  value           1    wreg     PTR unsigned char 
 20745 ;;		 -> InitializeBoard@macArray(18), 
 20746 ;; Auto vars:     Size  Location     Type
 20747 ;;  value           1   28[COMRAM] PTR unsigned char 
 20748 ;;		 -> InitializeBoard@macArray(18), 
 20749 ;;  tmpByte         1   29[COMRAM] unsigned char 
 20750 ;;  result          1   27[COMRAM] unsigned char 
 20751 ;; Return value:  Size  Location     Type
 20752 ;;                  1    wreg      unsigned char 
 20753 ;; Registers used:
 20754 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 20755 ;; Tracked objects:
 20756 ;;		On entry : F/0
 20757 ;;		On exit  : 0/0
 20758 ;;		Unchanged: 0/0
 20759 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20760 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20761 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20762 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20763 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20764 ;;Total ram usage:        3 bytes
 20765 ;; Hardware stack levels used:    1
 20766 ;; Hardware stack levels required when called:    6
 20767 ;; This function calls:
 20768 ;;		Nothing
 20769 ;; This function is called by:
 20770 ;;		_InitializeBoard
 20771 ;; This function uses a non-reentrant model
 20772 ;;
 20773                           
 20774                           	psect	text128
 20775  004982                     __ptext128:
 20776                           	opt stack 0
 20777  004982                     _MiscHexStringToByte:
 20778                           	opt stack 23
 20779                           
 20780                           ; BSR set to: 0
 20781                           ;incstack = 0
 20782                           ;MiscHexStringToByte@value stored from wreg
 20783  004982  6E1D               	movwf	MiscHexStringToByte@value,c
 20784                           
 20785                           ;Misc.c: 65: uint8_t result;
 20786                           ;Misc.c: 66: uint8_t tmpByte;
 20787                           ;Misc.c: 68: tmpByte = value[0];
 20788  004984  501D               	movf	MiscHexStringToByte@value,w,c
 20789  004986  6ED9               	movwf	fsr2l,c
 20790  004988  6ADA               	clrf	fsr2h,c
 20791  00498A  50DF               	movf	indf2,w,c
 20792  00498C  6E1E               	movwf	MiscHexStringToByte@tmpByte,c
 20793                           
 20794                           ;Misc.c: 70: if( tmpByte >= 'A' && tmpByte <= 'F' )
 20795  00498E  0E40               	movlw	64
 20796  004990  641E               	cpfsgt	MiscHexStringToByte@tmpByte,c
 20797  004992  D008               	goto	l10946
 20798  004994  0E47               	movlw	71
 20799  004996  601E               	cpfslt	MiscHexStringToByte@tmpByte,c
 20800  004998  D005               	goto	l10946
 20801                           
 20802                           ;Misc.c: 71: result = (((tmpByte-'A')+10) << 4);
 20803  00499A  501E               	movf	MiscHexStringToByte@tmpByte,w,c
 20804  00499C  0D10               	mullw	16
 20805  00499E  50F3               	movf	prodl,w,c
 20806  0049A0  0F90               	addlw	144
 20807  0049A2  D002               	goto	L12
 20808  0049A4                     l10946:
 20809                           
 20810                           ;Misc.c: 72: else
 20811                           ;Misc.c: 73: result = ((tmpByte-0x30) << 4);
 20812  0049A4  381E               	swapf	MiscHexStringToByte@tmpByte,w,c
 20813  0049A6  0BF0               	andlw	240
 20814  0049A8                     L12:
 20815  0049A8  6E1C               	movwf	MiscHexStringToByte@result,c
 20816                           
 20817                           ;Misc.c: 75: tmpByte = value[1];
 20818  0049AA  501D               	movf	MiscHexStringToByte@value,w,c
 20819  0049AC  6ED9               	movwf	fsr2l,c
 20820  0049AE  6ADA               	clrf	fsr2h,c
 20821  0049B0  2AD9               	incf	fsr2l,f,c
 20822  0049B2  50DF               	movf	indf2,w,c
 20823  0049B4  6E1E               	movwf	MiscHexStringToByte@tmpByte,c
 20824                           
 20825                           ;Misc.c: 77: if( tmpByte >= 'A' && tmpByte <= 'F' )
 20826  0049B6  0E40               	movlw	64
 20827  0049B8  641E               	cpfsgt	MiscHexStringToByte@tmpByte,c
 20828  0049BA  D006               	goto	l10956
 20829  0049BC  0E47               	movlw	71
 20830  0049BE  601E               	cpfslt	MiscHexStringToByte@tmpByte,c
 20831  0049C0  D003               	goto	l10956
 20832                           
 20833                           ;Misc.c: 78: result += ((tmpByte-'A')+10);
 20834  0049C2  501E               	movf	MiscHexStringToByte@tmpByte,w,c
 20835  0049C4  0FC9               	addlw	201
 20836  0049C6  D002               	goto	L13
 20837  0049C8                     l10956:
 20838                           
 20839                           ;Misc.c: 79: else
 20840                           ;Misc.c: 80: result += (tmpByte-0x30);
 20841  0049C8  501E               	movf	MiscHexStringToByte@tmpByte,w,c
 20842  0049CA  0FD0               	addlw	208
 20843  0049CC                     L13:
 20844  0049CC  261C               	addwf	MiscHexStringToByte@result,f,c
 20845                           
 20846                           ;Misc.c: 82: return result;
 20847  0049CE  501C               	movf	MiscHexStringToByte@result,w,c
 20848  0049D0  0012               	return		;funcret
 20849  0049D2                     __end_of_MiscHexStringToByte:
 20850                           	opt stack 0
 20851                           tblptru	equ	0xFF8
 20852                           tblptrh	equ	0xFF7
 20853                           tblptrl	equ	0xFF6
 20854                           tablat	equ	0xFF5
 20855                           prodh	equ	0xFF4
 20856                           prodl	equ	0xFF3
 20857                           intcon	equ	0xFF2
 20858                           intcon2	equ	0xFF1
 20859                           intcon3	equ	0xFF0
 20860                           postinc0	equ	0xFEE
 20861                           wreg	equ	0xFE8
 20862                           indf1	equ	0xFE7
 20863                           postinc1	equ	0xFE6
 20864                           postdec1	equ	0xFE5
 20865                           plusw1	equ	0xFE3
 20866                           fsr1h	equ	0xFE2
 20867                           fsr1l	equ	0xFE1
 20868                           indf2	equ	0xFDF
 20869                           postinc2	equ	0xFDE
 20870                           postdec2	equ	0xFDD
 20871                           plusw2	equ	0xFDB
 20872                           fsr2h	equ	0xFDA
 20873                           fsr2l	equ	0xFD9
 20874                           status	equ	0xFD8
 20875                           
 20876 ;; *************** function _InitAppConfig *****************
 20877 ;; Defined at:
 20878 ;;		line 292 in file "../src/InitRutines.c"
 20879 ;; Parameters:    Size  Location     Type
 20880 ;;		None
 20881 ;; Auto vars:     Size  Location     Type
 20882 ;;		None
 20883 ;; Return value:  Size  Location     Type
 20884 ;;		None               void
 20885 ;; Registers used:
 20886 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 20887 ;; Tracked objects:
 20888 ;;		On entry : F/0
 20889 ;;		On exit  : 0/0
 20890 ;;		Unchanged: 0/0
 20891 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20892 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20893 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20894 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20895 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20896 ;;Total ram usage:        0 bytes
 20897 ;; Hardware stack levels used:    1
 20898 ;; Hardware stack levels required when called:    8
 20899 ;; This function calls:
 20900 ;;		_FormatNetBIOSName
 20901 ;;		_memcpy
 20902 ;; This function is called by:
 20903 ;;		_main
 20904 ;; This function uses a non-reentrant model
 20905 ;;
 20906                           
 20907                           	psect	text129
 20908  003B78                     __ptext129:
 20909                           	opt stack 0
 20910  003B78                     _InitAppConfig:
 20911                           	opt stack 22
 20912                           
 20913                           ; BSR set to: 0
 20914                           ;InitRutines.c: 299: AppConfig.Flags.bInConfigMode = 1;
 20915                           
 20916                           ;incstack = 0
 20917  003B78  0101               	movlb	1	; () banked
 20918  003B7A  8FA5               	bsf	(_AppConfig+44)& (0+255),7,b
 20919                           
 20920                           ; BSR set to: 1
 20921                           ;InitRutines.c: 300: memcpy(AppConfig.MyMACAddr.v, (const void*) &g_serializedMACAddress
      +                          [0], sizeof (AppConfig.MyMACAddr));
 20922  003B7C  0EA6               	movlw	low (_AppConfig+45)
 20923  003B7E  6E1C               	movwf	memcpy@d1,c
 20924  003B80  0E01               	movlw	high (_AppConfig+45)
 20925  003B82  6E1D               	movwf	memcpy@d1+1,c
 20926  003B84  0EF9               	movlw	low _g_serializedMACAddress
 20927  003B86  6E1E               	movwf	memcpy@s1,c
 20928  003B88  6A1F               	clrf	memcpy@s1+1,c
 20929  003B8A  6A21               	clrf	memcpy@n+1,c
 20930  003B8C  0E06               	movlw	6
 20931  003B8E  6E20               	movwf	memcpy@n,c
 20932  003B90  ECEE  F023         	call	_memcpy	;wreg free
 20933                           
 20934                           ;InitRutines.c: 302: AppConfig.MyIPAddr.Val = (192ul) | (168ul) << 8ul | (0ul) << 16ul |
      +                           (30ul) << 24ul;
 20935  003B94  0EC0               	movlw	192
 20936  003B96  0101               	movlb	1	; () banked
 20937  003B98  6F79               	movwf	_AppConfig& (0+255),b
 20938  003B9A  0EA8               	movlw	168
 20939  003B9C  6F7A               	movwf	(_AppConfig+1)& (0+255),b
 20940  003B9E  6B7B               	clrf	(_AppConfig+2)& (0+255),b
 20941  003BA0  0E1E               	movlw	30
 20942  003BA2  6F7C               	movwf	(_AppConfig+3)& (0+255),b
 20943                           
 20944                           ; BSR set to: 1
 20945                           ;InitRutines.c: 303: AppConfig.DefaultIPAddr.Val = AppConfig.MyIPAddr.Val;
 20946  003BA4  C179  F18D         	movff	_AppConfig,_AppConfig+20
 20947  003BA8  C17A  F18E         	movff	_AppConfig+1,_AppConfig+21
 20948  003BAC  C17B  F18F         	movff	_AppConfig+2,_AppConfig+22
 20949  003BB0  C17C  F190         	movff	_AppConfig+3,_AppConfig+23
 20950                           
 20951                           ; BSR set to: 1
 20952                           ;InitRutines.c: 304: AppConfig.MyMask.Val = (255ul) | (255ul) << 8ul | (255ul) << 16ul |
      +                           (0ul) << 24ul;
 20953  003BB4  697D               	setf	(_AppConfig+4)& (0+255),b
 20954  003BB6  697E               	setf	(_AppConfig+5)& (0+255),b
 20955  003BB8  697F               	setf	(_AppConfig+6)& (0+255),b
 20956  003BBA  6B80               	clrf	(_AppConfig+7)& (0+255),b
 20957                           
 20958                           ; BSR set to: 1
 20959                           ;InitRutines.c: 305: AppConfig.DefaultMask.Val = AppConfig.MyMask.Val;
 20960  003BBC  C17D  F191         	movff	_AppConfig+4,_AppConfig+24
 20961  003BC0  C17E  F192         	movff	_AppConfig+5,_AppConfig+25
 20962  003BC4  C17F  F193         	movff	_AppConfig+6,_AppConfig+26
 20963  003BC8  C180  F194         	movff	_AppConfig+7,_AppConfig+27
 20964                           
 20965                           ; BSR set to: 1
 20966                           ;InitRutines.c: 306: AppConfig.MyGateway.Val = (192ul) | (168ul) << 8ul | (0ul) << 16ul 
      +                          | (1ul) << 24ul;
 20967  003BCC  0EC0               	movlw	192
 20968  003BCE  6F81               	movwf	(_AppConfig+8)& (0+255),b
 20969  003BD0  0EA8               	movlw	168
 20970  003BD2  6F82               	movwf	(_AppConfig+9)& (0+255),b
 20971  003BD4  6B83               	clrf	(_AppConfig+10)& (0+255),b
 20972  003BD6  0E01               	movlw	1
 20973  003BD8  6F84               	movwf	(_AppConfig+11)& (0+255),b
 20974                           
 20975                           ; BSR set to: 1
 20976                           ;InitRutines.c: 307: AppConfig.PrimaryDNSServer.Val = (192ul) | (168ul) << 8ul | (0ul) <
      +                          < 16ul | (1ul) << 24ul;
 20977  003BDA  0EC0               	movlw	192
 20978  003BDC  6F85               	movwf	(_AppConfig+12)& (0+255),b
 20979  003BDE  0EA8               	movlw	168
 20980  003BE0  6F86               	movwf	(_AppConfig+13)& (0+255),b
 20981  003BE2  6B87               	clrf	(_AppConfig+14)& (0+255),b
 20982  003BE4  0E01               	movlw	1
 20983  003BE6  6F88               	movwf	(_AppConfig+15)& (0+255),b
 20984                           
 20985                           ; BSR set to: 1
 20986                           ;InitRutines.c: 308: AppConfig.SecondaryDNSServer.Val = (0ul) | (0ul) << 8ul | (0ul) << 
      +                          16ul | (0ul) << 24ul;
 20987  003BE8  6B89               	clrf	(_AppConfig+16)& (0+255),b
 20988  003BEA  6B8A               	clrf	(_AppConfig+17)& (0+255),b
 20989  003BEC  6B8B               	clrf	(_AppConfig+18)& (0+255),b
 20990  003BEE  6B8C               	clrf	(_AppConfig+19)& (0+255),b
 20991                           
 20992                           ;InitRutines.c: 312: memcpy(AppConfig.NetBIOSName,(const void*) "NDS",16);
 20993  003BF0  0E95               	movlw	low (_AppConfig+28)
 20994  003BF2  6E1C               	movwf	memcpy@d1,c
 20995  003BF4  0E01               	movlw	high (_AppConfig+28)
 20996  003BF6  6E1D               	movwf	memcpy@d1+1,c
 20997  003BF8  0E06               	movlw	low STR_3
 20998  003BFA  6E1E               	movwf	memcpy@s1,c
 20999  003BFC  501E               	movf	memcpy@s1,w,c
 21000  003BFE  A4D8               	btfss	status,2,c
 21001  003C00  0E10               	movlw	high __smallconst
 21002  003C02  6E1F               	movwf	memcpy@s1+1,c
 21003  003C04  6A21               	clrf	memcpy@n+1,c
 21004  003C06  0E10               	movlw	16
 21005  003C08  6E20               	movwf	memcpy@n,c
 21006  003C0A  ECEE  F023         	call	_memcpy	;wreg free
 21007                           
 21008                           ;InitRutines.c: 313: FormatNetBIOSName(AppConfig.NetBIOSName);
 21009  003C0E  0E95               	movlw	low (_AppConfig+28)
 21010  003C10  6E21               	movwf	FormatNetBIOSName@Name,c
 21011  003C12  0E01               	movlw	high (_AppConfig+28)
 21012  003C14  6E22               	movwf	FormatNetBIOSName@Name+1,c
 21013  003C16  EF19  F024         	goto	_FormatNetBIOSName	;wreg free
 21014  003C1A                     __end_of_InitAppConfig:
 21015                           	opt stack 0
 21016                           tblptru	equ	0xFF8
 21017                           tblptrh	equ	0xFF7
 21018                           tblptrl	equ	0xFF6
 21019                           tablat	equ	0xFF5
 21020                           prodh	equ	0xFF4
 21021                           prodl	equ	0xFF3
 21022                           intcon	equ	0xFF2
 21023                           intcon2	equ	0xFF1
 21024                           intcon3	equ	0xFF0
 21025                           postinc0	equ	0xFEE
 21026                           wreg	equ	0xFE8
 21027                           indf1	equ	0xFE7
 21028                           postinc1	equ	0xFE6
 21029                           postdec1	equ	0xFE5
 21030                           plusw1	equ	0xFE3
 21031                           fsr1h	equ	0xFE2
 21032                           fsr1l	equ	0xFE1
 21033                           indf2	equ	0xFDF
 21034                           postinc2	equ	0xFDE
 21035                           postdec2	equ	0xFDD
 21036                           plusw2	equ	0xFDB
 21037                           fsr2h	equ	0xFDA
 21038                           fsr2l	equ	0xFD9
 21039                           status	equ	0xFD8
 21040                           
 21041 ;; *************** function _memcpy *****************
 21042 ;; Defined at:
 21043 ;;		line 11 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\memcpy.c"
 21044 ;; Parameters:    Size  Location     Type
 21045 ;;  d1              2   27[COMRAM] PTR void 
 21046 ;;		 -> UDPSocketInfo.remote(10), UDPSocketInfo(230), ARPResolve@packet(28), ARPProcess@packet(28), 
 21047 ;;		 -> ARPSendPkt@packet(28), remoteNode(10), AppConfig.MyMACAddr(6), AppConfig(51), 
 21048 ;;  s1              2   29[COMRAM] PTR const void 
 21049 ;;		 -> header.SourceMACAddr.v(6), header.SourceMACAddr(6), remoteNode(10), STR_3(4), 
 21050 ;;		 -> AppConfig.MyMACAddr(6), AppConfig(51), g_serializedMACAddress(6), RAM(3935), 
 21051 ;;		 -> m_NBSNodeInfo(10), 
 21052 ;;  n               2   31[COMRAM] unsigned int 
 21053 ;; Auto vars:     Size  Location     Type
 21054 ;;  s               2   35[COMRAM] PTR const unsigned char 
 21055 ;;		 -> header.SourceMACAddr.v(6), header.SourceMACAddr(6), remoteNode(10), STR_3(4), 
 21056 ;;		 -> AppConfig.MyMACAddr(6), AppConfig(51), g_serializedMACAddress(6), RAM(3935), 
 21057 ;;		 -> m_NBSNodeInfo(10), 
 21058 ;;  d               2   33[COMRAM] PTR unsigned char 
 21059 ;;		 -> UDPSocketInfo.remote(10), UDPSocketInfo(230), ARPResolve@packet(28), ARPProcess@packet(28), 
 21060 ;;		 -> ARPSendPkt@packet(28), remoteNode(10), AppConfig.MyMACAddr(6), AppConfig(51), 
 21061 ;; Return value:  Size  Location     Type
 21062 ;;                  2   27[COMRAM] PTR void 
 21063 ;; Registers used:
 21064 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru
 21065 ;; Tracked objects:
 21066 ;;		On entry : 0/0
 21067 ;;		On exit  : 0/0
 21068 ;;		Unchanged: 0/0
 21069 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 21070 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21071 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21072 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21073 ;;      Totals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21074 ;;Total ram usage:       10 bytes
 21075 ;; Hardware stack levels used:    1
 21076 ;; Hardware stack levels required when called:    6
 21077 ;; This function calls:
 21078 ;;		Nothing
 21079 ;; This function is called by:
 21080 ;;		_InitAppConfig
 21081 ;;		_ARPPut
 21082 ;;		_UDPOpenEx
 21083 ;;		_FindMatchingSocket
 21084 ;;		_MACGetHeader
 21085 ;; This function uses a non-reentrant model
 21086 ;;
 21087                           
 21088                           	psect	text130
 21089  0047DC                     __ptext130:
 21090                           	opt stack 0
 21091  0047DC                     _memcpy:
 21092                           	opt stack 20
 21093                           
 21094                           ;incstack = 0
 21095  0047DC  C01E  F024         	movff	memcpy@s1,memcpy@s
 21096  0047E0  C01F  F025         	movff	memcpy@s1+1,memcpy@s+1
 21097  0047E4  C01C  F022         	movff	memcpy@d1,memcpy@d
 21098  0047E8  C01D  F023         	movff	memcpy@d1+1,memcpy@d+1
 21099  0047EC  D01A               	goto	l9098
 21100  0047EE                     l9092:
 21101  0047EE  C024  FFF6         	movff	memcpy@s,tblptrl
 21102  0047F2  C025  FFF7         	movff	memcpy@s+1,tblptrh
 21103  0047F6  0E00               	movlw	low (__smallconst shr (0+16))
 21104  0047F8  6EF8               	movwf	tblptru,c
 21105  0047FA  C022  FFD9         	movff	memcpy@d,fsr2l
 21106  0047FE  C023  FFDA         	movff	memcpy@d+1,fsr2h
 21107  004802  0E0F               	movlw	(high __ramtop+-1)
 21108  004804  64F7               	cpfsgt	tblptrh,c
 21109  004806  D003               	bra	u7737
 21110  004808  0008               	tblrd		*
 21111  00480A  50F5               	movf	tablat,w,c
 21112  00480C  D005               	bra	u7730
 21113  00480E                     u7737:
 21114  00480E  CFF6 FFE1          	movff	tblptrl,fsr1l
 21115  004812  CFF7 FFE2          	movff	tblptrh,fsr1h
 21116  004816  50E7               	movf	indf1,w,c
 21117  004818                     u7730:
 21118  004818  6EDF               	movwf	indf2,c
 21119  00481A  4A24               	infsnz	memcpy@s,f,c
 21120  00481C  2A25               	incf	memcpy@s+1,f,c
 21121  00481E  4A22               	infsnz	memcpy@d,f,c
 21122  004820  2A23               	incf	memcpy@d+1,f,c
 21123  004822                     l9098:
 21124  004822  0620               	decf	memcpy@n,f,c
 21125  004824  A0D8               	btfss	status,0,c
 21126  004826  0621               	decf	memcpy@n+1,f,c
 21127  004828  2820               	incf	memcpy@n,w,c
 21128  00482A  E1E1               	bnz	l9092
 21129  00482C  2821               	incf	memcpy@n+1,w,c
 21130  00482E  E1DF               	bnz	l9092
 21131  004830  0012               	return		;funcret
 21132  004832                     __end_of_memcpy:
 21133                           	opt stack 0
 21134                           tblptru	equ	0xFF8
 21135                           tblptrh	equ	0xFF7
 21136                           tblptrl	equ	0xFF6
 21137                           tablat	equ	0xFF5
 21138                           prodh	equ	0xFF4
 21139                           prodl	equ	0xFF3
 21140                           intcon	equ	0xFF2
 21141                           intcon2	equ	0xFF1
 21142                           intcon3	equ	0xFF0
 21143                           postinc0	equ	0xFEE
 21144                           wreg	equ	0xFE8
 21145                           indf1	equ	0xFE7
 21146                           postinc1	equ	0xFE6
 21147                           postdec1	equ	0xFE5
 21148                           plusw1	equ	0xFE3
 21149                           fsr1h	equ	0xFE2
 21150                           fsr1l	equ	0xFE1
 21151                           indf2	equ	0xFDF
 21152                           postinc2	equ	0xFDE
 21153                           postdec2	equ	0xFDD
 21154                           plusw2	equ	0xFDB
 21155                           fsr2h	equ	0xFDA
 21156                           fsr2l	equ	0xFD9
 21157                           status	equ	0xFD8
 21158                           
 21159 ;; *************** function _FormatNetBIOSName *****************
 21160 ;; Defined at:
 21161 ;;		line 1272 in file "../framework/tcpip/src/common/helpers.c"
 21162 ;; Parameters:    Size  Location     Type
 21163 ;;  Name            2   32[COMRAM] PTR unsigned char 
 21164 ;;		 -> AppConfig(51), 
 21165 ;; Auto vars:     Size  Location     Type
 21166 ;;  i               1   34[COMRAM] unsigned char 
 21167 ;; Return value:  Size  Location     Type
 21168 ;;		None               void
 21169 ;; Registers used:
 21170 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 21171 ;; Tracked objects:
 21172 ;;		On entry : 0/1
 21173 ;;		On exit  : 0/0
 21174 ;;		Unchanged: 0/0
 21175 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 21176 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21177 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21178 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21179 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21180 ;;Total ram usage:        3 bytes
 21181 ;; Hardware stack levels used:    1
 21182 ;; Hardware stack levels required when called:    7
 21183 ;; This function calls:
 21184 ;;		_strupr
 21185 ;; This function is called by:
 21186 ;;		_InitAppConfig
 21187 ;; This function uses a non-reentrant model
 21188 ;;
 21189                           
 21190                           	psect	text131
 21191  004832                     __ptext131:
 21192                           	opt stack 0
 21193  004832                     _FormatNetBIOSName:
 21194                           	opt stack 22
 21195                           
 21196                           ;helpers.c: 1274: uint8_t i;
 21197                           ;helpers.c: 1276: Name[15] = '\0';
 21198                           
 21199                           ;incstack = 0
 21200  004832  EE20 F00F          	lfsr	2,15
 21201  004836  5021               	movf	FormatNetBIOSName@Name,w,c
 21202  004838  26D9               	addwf	fsr2l,f,c
 21203  00483A  5022               	movf	FormatNetBIOSName@Name+1,w,c
 21204  00483C  22DA               	addwfc	fsr2h,f,c
 21205  00483E  0E00               	movlw	0
 21206  004840  6EDF               	movwf	indf2,c
 21207                           
 21208                           ;helpers.c: 1277: strupr((char *) Name);
 21209  004842  C021  F01C         	movff	FormatNetBIOSName@Name,strupr@s
 21210  004846  C022  F01D         	movff	FormatNetBIOSName@Name+1,strupr@s+1
 21211  00484A  ECF5  F026         	call	_strupr	;wreg free
 21212                           
 21213                           ;helpers.c: 1278: i = 0;
 21214  00484E  6A23               	clrf	FormatNetBIOSName@i,c
 21215                           
 21216                           ;helpers.c: 1279: while (i < 15u) {
 21217  004850  D017               	goto	l11370
 21218  004852                     l11358:
 21219                           
 21220                           ;helpers.c: 1280: if (Name[i] == '\0') {
 21221  004852  5023               	movf	FormatNetBIOSName@i,w,c
 21222  004854  2421               	addwf	FormatNetBIOSName@Name,w,c
 21223  004856  6ED9               	movwf	fsr2l,c
 21224  004858  0E00               	movlw	0
 21225  00485A  2022               	addwfc	FormatNetBIOSName@Name+1,w,c
 21226  00485C  6EDA               	movwf	fsr2h,c
 21227  00485E  50DF               	movf	indf2,w,c
 21228  004860  E00A               	bz	l11366
 21229  004862  D00D               	goto	l11368
 21230  004864                     l11362:
 21231                           
 21232                           ;helpers.c: 1282: Name[i++] = ' ';
 21233  004864  5023               	movf	FormatNetBIOSName@i,w,c
 21234  004866  2421               	addwf	FormatNetBIOSName@Name,w,c
 21235  004868  6ED9               	movwf	fsr2l,c
 21236  00486A  0E00               	movlw	0
 21237  00486C  2022               	addwfc	FormatNetBIOSName@Name+1,w,c
 21238  00486E  6EDA               	movwf	fsr2h,c
 21239  004870  0E20               	movlw	32
 21240  004872  6EDF               	movwf	indf2,c
 21241  004874  2A23               	incf	FormatNetBIOSName@i,f,c
 21242  004876                     l11366:
 21243  004876  0E0E               	movlw	14
 21244  004878  6423               	cpfsgt	FormatNetBIOSName@i,c
 21245  00487A  D7F4               	goto	l11362
 21246  00487C  0C0E               	retlw	14
 21247  00487E                     l11368:
 21248                           
 21249                           ;helpers.c: 1285: }
 21250                           ;helpers.c: 1286: i++;
 21251  00487E  2A23               	incf	FormatNetBIOSName@i,f,c
 21252  004880                     l11370:
 21253  004880  0E0E               	movlw	14
 21254  004882  6423               	cpfsgt	FormatNetBIOSName@i,c
 21255  004884  D7E6               	goto	l11358
 21256  004886  0C0E               	retlw	14
 21257  004888                     __end_of_FormatNetBIOSName:
 21258                           	opt stack 0
 21259                           tblptru	equ	0xFF8
 21260                           tblptrh	equ	0xFF7
 21261                           tblptrl	equ	0xFF6
 21262                           tablat	equ	0xFF5
 21263                           prodh	equ	0xFF4
 21264                           prodl	equ	0xFF3
 21265                           intcon	equ	0xFF2
 21266                           intcon2	equ	0xFF1
 21267                           intcon3	equ	0xFF0
 21268                           postinc0	equ	0xFEE
 21269                           wreg	equ	0xFE8
 21270                           indf1	equ	0xFE7
 21271                           postinc1	equ	0xFE6
 21272                           postdec1	equ	0xFE5
 21273                           plusw1	equ	0xFE3
 21274                           fsr1h	equ	0xFE2
 21275                           fsr1l	equ	0xFE1
 21276                           indf2	equ	0xFDF
 21277                           postinc2	equ	0xFDE
 21278                           postdec2	equ	0xFDD
 21279                           plusw2	equ	0xFDB
 21280                           fsr2h	equ	0xFDA
 21281                           fsr2l	equ	0xFD9
 21282                           status	equ	0xFD8
 21283                           
 21284 ;; *************** function _strupr *****************
 21285 ;; Defined at:
 21286 ;;		line 1154 in file "../framework/tcpip/src/common/helpers.c"
 21287 ;; Parameters:    Size  Location     Type
 21288 ;;  s               2   27[COMRAM] PTR unsigned char 
 21289 ;;		 -> AppConfig(51), 
 21290 ;; Auto vars:     Size  Location     Type
 21291 ;;  t               2   30[COMRAM] PTR unsigned char 
 21292 ;;		 -> AppConfig(51), 
 21293 ;;  c               1   29[COMRAM] unsigned char 
 21294 ;; Return value:  Size  Location     Type
 21295 ;;                  2   27[COMRAM] PTR unsigned char 
 21296 ;; Registers used:
 21297 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 21298 ;; Tracked objects:
 21299 ;;		On entry : 0/1
 21300 ;;		On exit  : 0/0
 21301 ;;		Unchanged: 0/0
 21302 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 21303 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21304 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21305 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21306 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21307 ;;Total ram usage:        5 bytes
 21308 ;; Hardware stack levels used:    1
 21309 ;; Hardware stack levels required when called:    6
 21310 ;; This function calls:
 21311 ;;		Nothing
 21312 ;; This function is called by:
 21313 ;;		_FormatNetBIOSName
 21314 ;; This function uses a non-reentrant model
 21315 ;;
 21316                           
 21317                           	psect	text132
 21318  004DEA                     __ptext132:
 21319                           	opt stack 0
 21320  004DEA                     _strupr:
 21321                           	opt stack 22
 21322                           
 21323                           ;helpers.c: 1156: char c;
 21324                           ;helpers.c: 1157: char *t;
 21325                           ;helpers.c: 1159: t = s;
 21326                           
 21327                           ;incstack = 0
 21328  004DEA  C01C  F01F         	movff	strupr@s,strupr@t
 21329  004DEE  C01D  F020         	movff	strupr@s+1,strupr@t+1
 21330                           
 21331                           ;helpers.c: 1160: while ((c = *t)) {
 21332  004DF2  D00E               	goto	l10868
 21333  004DF4                     l10860:
 21334                           
 21335                           ;helpers.c: 1161: if (c >= 'a' && c <= 'z') {
 21336  004DF4  0E60               	movlw	96
 21337  004DF6  641E               	cpfsgt	strupr@c,c
 21338  004DF8  D009               	goto	l10866
 21339  004DFA  0E7B               	movlw	123
 21340  004DFC  601E               	cpfslt	strupr@c,c
 21341  004DFE  D006               	goto	l10866
 21342                           
 21343                           ;helpers.c: 1162: *t -= ('a' - 'A');
 21344  004E00  C01F  FFD9         	movff	strupr@t,fsr2l
 21345  004E04  C020  FFDA         	movff	strupr@t+1,fsr2h
 21346  004E08  0E20               	movlw	32
 21347  004E0A  5EDF               	subwf	indf2,f,c
 21348  004E0C                     l10866:
 21349                           
 21350                           ;helpers.c: 1163: }
 21351                           ;helpers.c: 1164: t++;
 21352  004E0C  4A1F               	infsnz	strupr@t,f,c
 21353  004E0E  2A20               	incf	strupr@t+1,f,c
 21354  004E10                     l10868:
 21355  004E10  C01F  FFD9         	movff	strupr@t,fsr2l
 21356  004E14  C020  FFDA         	movff	strupr@t+1,fsr2h
 21357  004E18  50DF               	movf	indf2,w,c
 21358  004E1A  6E1E               	movwf	strupr@c,c
 21359  004E1C  501E               	movf	strupr@c,w,c
 21360  004E1E  E1EA               	bnz	l10860
 21361  004E20  0012               	return		;funcret
 21362  004E22                     __end_of_strupr:
 21363                           	opt stack 0
 21364                           tblptru	equ	0xFF8
 21365                           tblptrh	equ	0xFF7
 21366                           tblptrl	equ	0xFF6
 21367                           tablat	equ	0xFF5
 21368                           prodh	equ	0xFF4
 21369                           prodl	equ	0xFF3
 21370                           intcon	equ	0xFF2
 21371                           intcon2	equ	0xFF1
 21372                           intcon3	equ	0xFF0
 21373                           postinc0	equ	0xFEE
 21374                           wreg	equ	0xFE8
 21375                           indf1	equ	0xFE7
 21376                           postinc1	equ	0xFE6
 21377                           postdec1	equ	0xFE5
 21378                           plusw1	equ	0xFE3
 21379                           fsr1h	equ	0xFE2
 21380                           fsr1l	equ	0xFE1
 21381                           indf2	equ	0xFDF
 21382                           postinc2	equ	0xFDE
 21383                           postdec2	equ	0xFDD
 21384                           plusw2	equ	0xFDB
 21385                           fsr2h	equ	0xFDA
 21386                           fsr2l	equ	0xFD9
 21387                           status	equ	0xFD8
 21388                           
 21389 ;; *************** function _DHCPEnable *****************
 21390 ;; Defined at:
 21391 ;;		line 247 in file "../framework/tcpip/src/dhcp_client.c"
 21392 ;; Parameters:    Size  Location     Type
 21393 ;;  vInterface      1    wreg     unsigned char 
 21394 ;; Auto vars:     Size  Location     Type
 21395 ;;  vInterface      1    0[COMRAM] unsigned char 
 21396 ;; Return value:  Size  Location     Type
 21397 ;;		None               void
 21398 ;; Registers used:
 21399 ;;		wreg, status,2
 21400 ;; Tracked objects:
 21401 ;;		On entry : F/1
 21402 ;;		On exit  : F/0
 21403 ;;		Unchanged: 0/0
 21404 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 21405 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21406 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21407 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21408 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21409 ;;Total ram usage:        0 bytes
 21410 ;; Hardware stack levels used:    1
 21411 ;; Hardware stack levels required when called:    6
 21412 ;; This function calls:
 21413 ;;		Nothing
 21414 ;; This function is called by:
 21415 ;;		_main
 21416 ;; This function uses a non-reentrant model
 21417 ;;
 21418                           
 21419                           	psect	text133
 21420  00535E                     __ptext133:
 21421                           	opt stack 0
 21422  00535E                     _DHCPEnable:
 21423                           	opt stack 24
 21424                           
 21425                           ; BSR set to: 1
 21426                           ;dhcp_client.c: 249: ;
 21427                           ;dhcp_client.c: 251: if (DHCPClient.smState == SM_DHCP_DISABLED) {
 21428                           
 21429                           ;incstack = 0
 21430  00535E  0100               	movlb	0	; () banked
 21431  005360  51DA               	movf	(_DHCPClient+1)& (0+255),w,b
 21432  005362  A4D8               	btfss	status,2,c
 21433  005364  0012               	return	
 21434                           
 21435                           ; BSR set to: 0
 21436                           ;dhcp_client.c: 252: DHCPClient.dwBaseTime = (4ul);
 21437  005366  0E04               	movlw	4
 21438  005368  6FE0               	movwf	(_DHCPClient+7)& (0+255),b
 21439  00536A  6BE1               	clrf	(_DHCPClient+8)& (0+255),b
 21440  00536C  6BE2               	clrf	(_DHCPClient+9)& (0+255),b
 21441  00536E  6BE3               	clrf	(_DHCPClient+10)& (0+255),b
 21442                           
 21443                           ;dhcp_client.c: 253: DHCPClient.smState = SM_DHCP_GET_SOCKET;
 21444  005370  0E01               	movlw	1
 21445  005372  6FDA               	movwf	(_DHCPClient+1)& (0+255),b
 21446                           
 21447                           ; BSR set to: 0
 21448                           ;dhcp_client.c: 254: DHCPClient.flags.bits.bIsBound = 0;
 21449  005374  91DB               	bcf	(_DHCPClient+2)& (0+255),0,b
 21450                           
 21451                           ; BSR set to: 0
 21452  005376  0C01               	retlw	1	;funcret
 21453  005378                     __end_of_DHCPEnable:
 21454                           	opt stack 0
 21455                           tblptru	equ	0xFF8
 21456                           tblptrh	equ	0xFF7
 21457                           tblptrl	equ	0xFF6
 21458                           tablat	equ	0xFF5
 21459                           prodh	equ	0xFF4
 21460                           prodl	equ	0xFF3
 21461                           intcon	equ	0xFF2
 21462                           intcon2	equ	0xFF1
 21463                           intcon3	equ	0xFF0
 21464                           postinc0	equ	0xFEE
 21465                           wreg	equ	0xFE8
 21466                           indf1	equ	0xFE7
 21467                           postinc1	equ	0xFE6
 21468                           postdec1	equ	0xFE5
 21469                           plusw1	equ	0xFE3
 21470                           fsr1h	equ	0xFE2
 21471                           fsr1l	equ	0xFE1
 21472                           indf2	equ	0xFDF
 21473                           postinc2	equ	0xFDE
 21474                           postdec2	equ	0xFDD
 21475                           plusw2	equ	0xFDB
 21476                           fsr2h	equ	0xFDA
 21477                           fsr2l	equ	0xFD9
 21478                           status	equ	0xFD8
 21479                           
 21480 ;; *************** function _LowISR *****************
 21481 ;; Defined at:
 21482 ;;		line 44 in file "../src/InitRutines.c"
 21483 ;; Parameters:    Size  Location     Type
 21484 ;;		None
 21485 ;; Auto vars:     Size  Location     Type
 21486 ;;		None
 21487 ;; Return value:  Size  Location     Type
 21488 ;;		None               void
 21489 ;; Registers used:
 21490 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 21491 ;; Tracked objects:
 21492 ;;		On entry : 0/0
 21493 ;;		On exit  : 0/0
 21494 ;;		Unchanged: 0/0
 21495 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 21496 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21497 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21498 ;;      Temps:          7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21499 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21500 ;;Total ram usage:        7 bytes
 21501 ;; Hardware stack levels used:    1
 21502 ;; Hardware stack levels required when called:    5
 21503 ;; This function calls:
 21504 ;;		_RTC
 21505 ;;		_TickUpdate
 21506 ;; This function is called by:
 21507 ;;		Interrupt level 1
 21508 ;; This function uses a non-reentrant model
 21509 ;;
 21510                           
 21511                           	psect	intcodelo
 21512  000018                     __pintcodelo:
 21513                           	opt stack 0
 21514  000018                     _LowISR:
 21515                           	opt stack 12
 21516                           
 21517                           ; BSR set to: 0
 21518                           ;incstack = 0
 21519  000018  8044               	bsf	btemp,0,c	;set compiler interrupt flag (level 1)
 21520  00001A  CFD8 F015          	movff	status,??_LowISR
 21521  00001E  CFE8 F016          	movff	wreg,??_LowISR+1
 21522  000022  CFE0 F017          	movff	bsr,??_LowISR+2
 21523  000026  CFD9 F018          	movff	fsr2l,??_LowISR+3
 21524  00002A  CFDA F019          	movff	fsr2h,??_LowISR+4
 21525  00002E  CFF3 F01A          	movff	prodl,??_LowISR+5
 21526  000032  CFF4 F01B          	movff	prodh,??_LowISR+6
 21527                           
 21528                           ;InitRutines.c: 46: RTC();
 21529  000036  EC51  F029         	call	_RTC	;wreg free
 21530                           
 21531                           ;InitRutines.c: 47: TickUpdate();
 21532  00003A  EC09  F02A         	call	_TickUpdate	;wreg free
 21533  00003E  C01B  FFF4         	movff	??_LowISR+6,prodh
 21534  000042  C01A  FFF3         	movff	??_LowISR+5,prodl
 21535  000046  C019  FFDA         	movff	??_LowISR+4,fsr2h
 21536  00004A  C018  FFD9         	movff	??_LowISR+3,fsr2l
 21537  00004E  C017  FFE0         	movff	??_LowISR+2,bsr
 21538  000052  C016  FFE8         	movff	??_LowISR+1,wreg
 21539  000056  C015  FFD8         	movff	??_LowISR,status
 21540  00005A  9044               	bcf	btemp,0,c	;clear compiler interrupt flag (level 1)
 21541  00005C  0010               	retfie	
 21542  00005E                     __end_of_LowISR:
 21543                           	opt stack 0
 21544                           tblptru	equ	0xFF8
 21545                           tblptrh	equ	0xFF7
 21546                           tblptrl	equ	0xFF6
 21547                           tablat	equ	0xFF5
 21548                           prodh	equ	0xFF4
 21549                           prodl	equ	0xFF3
 21550                           intcon	equ	0xFF2
 21551                           intcon2	equ	0xFF1
 21552                           intcon3	equ	0xFF0
 21553                           postinc0	equ	0xFEE
 21554                           wreg	equ	0xFE8
 21555                           indf1	equ	0xFE7
 21556                           postinc1	equ	0xFE6
 21557                           postdec1	equ	0xFE5
 21558                           plusw1	equ	0xFE3
 21559                           fsr1h	equ	0xFE2
 21560                           fsr1l	equ	0xFE1
 21561                           bsr	equ	0xFE0
 21562                           indf2	equ	0xFDF
 21563                           postinc2	equ	0xFDE
 21564                           postdec2	equ	0xFDD
 21565                           plusw2	equ	0xFDB
 21566                           fsr2h	equ	0xFDA
 21567                           fsr2l	equ	0xFD9
 21568                           status	equ	0xFD8
 21569                           
 21570 ;; *************** function _TickUpdate *****************
 21571 ;; Defined at:
 21572 ;;		line 385 in file "../framework/tcpip/src/common/tick.c"
 21573 ;; Parameters:    Size  Location     Type
 21574 ;;		None
 21575 ;; Auto vars:     Size  Location     Type
 21576 ;;		None
 21577 ;; Return value:  Size  Location     Type
 21578 ;;		None               void
 21579 ;; Registers used:
 21580 ;;		wreg, status,2, status,0
 21581 ;; Tracked objects:
 21582 ;;		On entry : 0/0
 21583 ;;		On exit  : 0/0
 21584 ;;		Unchanged: 0/0
 21585 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 21586 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21587 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21588 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21589 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21590 ;;Total ram usage:        0 bytes
 21591 ;; Hardware stack levels used:    1
 21592 ;; Hardware stack levels required when called:    1
 21593 ;; This function calls:
 21594 ;;		Nothing
 21595 ;; This function is called by:
 21596 ;;		_LowISR
 21597 ;; This function uses a non-reentrant model
 21598 ;;
 21599                           
 21600                           	psect	text135
 21601  005412                     __ptext135:
 21602                           	opt stack 0
 21603  005412                     _TickUpdate:
 21604                           	opt stack 15
 21605                           
 21606                           ;tick.c: 387: if (INTCONbits.TMR0IF) {
 21607                           
 21608                           ;incstack = 0
 21609  005412  A4F2               	btfss	intcon,2,c	;volatile
 21610  005414  0012               	return	
 21611                           
 21612                           ;tick.c: 389: dwInternalTicks++;
 21613  005416  0101               	movlb	1	; () banked
 21614  005418  2B20               	incf	_dwInternalTicks& (0+255),f,b	;volatile
 21615  00541A  0E00               	movlw	0
 21616  00541C  2321               	addwfc	(_dwInternalTicks+1)& (0+255),f,b	;volatile
 21617  00541E  2322               	addwfc	(_dwInternalTicks+2)& (0+255),f,b	;volatile
 21618  005420  2323               	addwfc	(_dwInternalTicks+3)& (0+255),f,b	;volatile
 21619                           
 21620                           ; BSR set to: 1
 21621                           ;tick.c: 392: INTCONbits.TMR0IF = 0;
 21622  005422  94F2               	bcf	intcon,2,c	;volatile
 21623  005424  0C00               	retlw	0	;funcret
 21624  005426                     __end_of_TickUpdate:
 21625                           	opt stack 0
 21626                           tblptru	equ	0xFF8
 21627                           tblptrh	equ	0xFF7
 21628                           tblptrl	equ	0xFF6
 21629                           tablat	equ	0xFF5
 21630                           prodh	equ	0xFF4
 21631                           prodl	equ	0xFF3
 21632                           intcon	equ	0xFF2
 21633                           intcon2	equ	0xFF1
 21634                           intcon3	equ	0xFF0
 21635                           postinc0	equ	0xFEE
 21636                           wreg	equ	0xFE8
 21637                           indf1	equ	0xFE7
 21638                           postinc1	equ	0xFE6
 21639                           postdec1	equ	0xFE5
 21640                           plusw1	equ	0xFE3
 21641                           fsr1h	equ	0xFE2
 21642                           fsr1l	equ	0xFE1
 21643                           bsr	equ	0xFE0
 21644                           indf2	equ	0xFDF
 21645                           postinc2	equ	0xFDE
 21646                           postdec2	equ	0xFDD
 21647                           plusw2	equ	0xFDB
 21648                           fsr2h	equ	0xFDA
 21649                           fsr2l	equ	0xFD9
 21650                           status	equ	0xFD8
 21651                           
 21652 ;; *************** function _RTC *****************
 21653 ;; Defined at:
 21654 ;;		line 191 in file "../src/main.c"
 21655 ;; Parameters:    Size  Location     Type
 21656 ;;		None
 21657 ;; Auto vars:     Size  Location     Type
 21658 ;;		None
 21659 ;; Return value:  Size  Location     Type
 21660 ;;		None               void
 21661 ;; Registers used:
 21662 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 21663 ;; Tracked objects:
 21664 ;;		On entry : 0/0
 21665 ;;		On exit  : 0/0
 21666 ;;		Unchanged: 0/0
 21667 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 21668 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21669 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21670 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21671 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21672 ;;Total ram usage:        0 bytes
 21673 ;; Hardware stack levels used:    1
 21674 ;; Hardware stack levels required when called:    4
 21675 ;; This function calls:
 21676 ;;		_BeepTimerUpdate
 21677 ;;		_DoorIndicatorTimerUpdate
 21678 ;;		_DoorSwitchTimerUpdate
 21679 ;;		_NDCTick
 21680 ;; This function is called by:
 21681 ;;		_LowISR
 21682 ;; This function uses a non-reentrant model
 21683 ;;
 21684                           
 21685                           	psect	text136
 21686  0052A2                     __ptext136:
 21687                           	opt stack 0
 21688  0052A2                     _RTC:
 21689                           	opt stack 12
 21690                           
 21691                           ;main.c: 192: if (PIR1bits.TMR1IF)
 21692                           
 21693                           ;incstack = 0
 21694  0052A2  A09E               	btfss	3998,0,c	;volatile
 21695  0052A4  0012               	return	
 21696                           
 21697                           ;main.c: 193: {
 21698                           ;main.c: 194: PIR1bits.TMR1IF = 0;
 21699  0052A6  909E               	bcf	3998,0,c	;volatile
 21700                           
 21701                           ;main.c: 195: TMR1L = 0xD4;
 21702  0052A8  0ED4               	movlw	212
 21703  0052AA  6ECE               	movwf	4046,c	;volatile
 21704                           
 21705                           ;main.c: 196: TMR1H = 0x01;
 21706  0052AC  0E01               	movlw	1
 21707  0052AE  6ECF               	movwf	4047,c	;volatile
 21708                           
 21709                           ;main.c: 199: BeepTimerUpdate();
 21710  0052B0  EC35  F01A         	call	_BeepTimerUpdate	;wreg free
 21711                           
 21712                           ; BSR set to: 1
 21713                           ;main.c: 201: DoorSwitchTimerUpdate();
 21714  0052B4  ECD4  F029         	call	_DoorSwitchTimerUpdate	;wreg free
 21715                           
 21716                           ; BSR set to: 1
 21717                           ;main.c: 202: DoorIndicatorTimerUpdate();
 21718  0052B8  ECD0  F027         	call	_DoorIndicatorTimerUpdate	;wreg free
 21719                           
 21720                           ; BSR set to: 1
 21721                           ;main.c: 204: NDCTick();
 21722  0052BC  EFC8  F029         	goto	_NDCTick	;wreg free
 21723  0052C0                     __end_of_RTC:
 21724                           	opt stack 0
 21725                           tblptru	equ	0xFF8
 21726                           tblptrh	equ	0xFF7
 21727                           tblptrl	equ	0xFF6
 21728                           tablat	equ	0xFF5
 21729                           prodh	equ	0xFF4
 21730                           prodl	equ	0xFF3
 21731                           intcon	equ	0xFF2
 21732                           intcon2	equ	0xFF1
 21733                           intcon3	equ	0xFF0
 21734                           postinc0	equ	0xFEE
 21735                           wreg	equ	0xFE8
 21736                           indf1	equ	0xFE7
 21737                           postinc1	equ	0xFE6
 21738                           postdec1	equ	0xFE5
 21739                           plusw1	equ	0xFE3
 21740                           fsr1h	equ	0xFE2
 21741                           fsr1l	equ	0xFE1
 21742                           bsr	equ	0xFE0
 21743                           indf2	equ	0xFDF
 21744                           postinc2	equ	0xFDE
 21745                           postdec2	equ	0xFDD
 21746                           plusw2	equ	0xFDB
 21747                           fsr2h	equ	0xFDA
 21748                           fsr2l	equ	0xFD9
 21749                           status	equ	0xFD8
 21750                           
 21751 ;; *************** function _NDCTick *****************
 21752 ;; Defined at:
 21753 ;;		line 124 in file "../src/NDC.c"
 21754 ;; Parameters:    Size  Location     Type
 21755 ;;		None
 21756 ;; Auto vars:     Size  Location     Type
 21757 ;;		None
 21758 ;; Return value:  Size  Location     Type
 21759 ;;		None               void
 21760 ;; Registers used:
 21761 ;;		wreg, status,2, status,0
 21762 ;; Tracked objects:
 21763 ;;		On entry : F/1
 21764 ;;		On exit  : E/0
 21765 ;;		Unchanged: 0/0
 21766 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 21767 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21768 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21769 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21770 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21771 ;;Total ram usage:        0 bytes
 21772 ;; Hardware stack levels used:    1
 21773 ;; Hardware stack levels required when called:    1
 21774 ;; This function calls:
 21775 ;;		Nothing
 21776 ;; This function is called by:
 21777 ;;		_RTC
 21778 ;; This function uses a non-reentrant model
 21779 ;;
 21780                           
 21781                           	psect	text137
 21782  005390                     __ptext137:
 21783                           	opt stack 0
 21784  005390                     _NDCTick:
 21785                           	opt stack 14
 21786                           
 21787                           ; BSR set to: 1
 21788                           ;NDC.c: 125: if (m_openDoorFlag == 1)
 21789                           
 21790                           ;incstack = 0
 21791  005390  0100               	movlb	0	; () banked
 21792  005392  05D7               	decf	_m_openDoorFlag& (0+255),w,b
 21793  005394  A4D8               	btfss	status,2,c
 21794  005396  0012               	return	
 21795                           
 21796                           ; BSR set to: 0
 21797                           ;NDC.c: 126: m_openDoorTime -= 50;
 21798  005398  0E32               	movlw	50
 21799  00539A  0101               	movlb	1	; () banked
 21800  00539C  5F38               	subwf	_m_openDoorTime& (0+255),f,b
 21801  00539E  0E00               	movlw	0
 21802  0053A0  5B39               	subwfb	(_m_openDoorTime+1)& (0+255),f,b
 21803  0053A2  5B3A               	subwfb	(_m_openDoorTime+2)& (0+255),f,b
 21804  0053A4  5B3B               	subwfb	(_m_openDoorTime+3)& (0+255),f,b
 21805  0053A6  0C00               	retlw	0	;funcret
 21806  0053A8                     __end_of_NDCTick:
 21807                           	opt stack 0
 21808                           tblptru	equ	0xFF8
 21809                           tblptrh	equ	0xFF7
 21810                           tblptrl	equ	0xFF6
 21811                           tablat	equ	0xFF5
 21812                           prodh	equ	0xFF4
 21813                           prodl	equ	0xFF3
 21814                           intcon	equ	0xFF2
 21815                           intcon2	equ	0xFF1
 21816                           intcon3	equ	0xFF0
 21817                           postinc0	equ	0xFEE
 21818                           wreg	equ	0xFE8
 21819                           indf1	equ	0xFE7
 21820                           postinc1	equ	0xFE6
 21821                           postdec1	equ	0xFE5
 21822                           plusw1	equ	0xFE3
 21823                           fsr1h	equ	0xFE2
 21824                           fsr1l	equ	0xFE1
 21825                           bsr	equ	0xFE0
 21826                           indf2	equ	0xFDF
 21827                           postinc2	equ	0xFDE
 21828                           postdec2	equ	0xFDD
 21829                           plusw2	equ	0xFDB
 21830                           fsr2h	equ	0xFDA
 21831                           fsr2l	equ	0xFD9
 21832                           status	equ	0xFD8
 21833                           
 21834 ;; *************** function _DoorSwitchTimerUpdate *****************
 21835 ;; Defined at:
 21836 ;;		line 150 in file "../src/DoorSwitch.c"
 21837 ;; Parameters:    Size  Location     Type
 21838 ;;		None
 21839 ;; Auto vars:     Size  Location     Type
 21840 ;;		None
 21841 ;; Return value:  Size  Location     Type
 21842 ;;		None               void
 21843 ;; Registers used:
 21844 ;;		wreg, status,2, status,0
 21845 ;; Tracked objects:
 21846 ;;		On entry : F/1
 21847 ;;		On exit  : F/1
 21848 ;;		Unchanged: 0/0
 21849 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 21850 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21851 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21852 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21853 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21854 ;;Total ram usage:        0 bytes
 21855 ;; Hardware stack levels used:    1
 21856 ;; Hardware stack levels required when called:    1
 21857 ;; This function calls:
 21858 ;;		Nothing
 21859 ;; This function is called by:
 21860 ;;		_RTC
 21861 ;; This function uses a non-reentrant model
 21862 ;;
 21863                           
 21864                           	psect	text138
 21865  0053A8                     __ptext138:
 21866                           	opt stack 0
 21867  0053A8                     _DoorSwitchTimerUpdate:
 21868                           	opt stack 14
 21869                           
 21870                           ; BSR set to: 1
 21871                           ;DoorSwitch.c: 151: if (m_doorSwitchPressedTooLongTimer > 0) {
 21872                           
 21873                           ;incstack = 0
 21874  0053A8  5134               	movf	_m_doorSwitchPressedTooLongTimer& (0+255),w,b
 21875  0053AA  1135               	iorwf	(_m_doorSwitchPressedTooLongTimer+1)& (0+255),w,b
 21876  0053AC  1136               	iorwf	(_m_doorSwitchPressedTooLongTimer+2)& (0+255),w,b
 21877  0053AE  1137               	iorwf	(_m_doorSwitchPressedTooLongTimer+3)& (0+255),w,b
 21878  0053B0  B4D8               	btfsc	status,2,c
 21879  0053B2  0012               	return	
 21880                           
 21881                           ; BSR set to: 1
 21882                           ;DoorSwitch.c: 152: m_doorSwitchPressedTooLongTimer--;
 21883  0053B4  0734               	decf	_m_doorSwitchPressedTooLongTimer& (0+255),f,b
 21884  0053B6  0E00               	movlw	0
 21885  0053B8  5B35               	subwfb	(_m_doorSwitchPressedTooLongTimer+1)& (0+255),f,b
 21886  0053BA  5B36               	subwfb	(_m_doorSwitchPressedTooLongTimer+2)& (0+255),f,b
 21887  0053BC  5B37               	subwfb	(_m_doorSwitchPressedTooLongTimer+3)& (0+255),f,b
 21888                           
 21889                           ; BSR set to: 1
 21890  0053BE  0C00               	retlw	0	;funcret
 21891  0053C0                     __end_of_DoorSwitchTimerUpdate:
 21892                           	opt stack 0
 21893                           tblptru	equ	0xFF8
 21894                           tblptrh	equ	0xFF7
 21895                           tblptrl	equ	0xFF6
 21896                           tablat	equ	0xFF5
 21897                           prodh	equ	0xFF4
 21898                           prodl	equ	0xFF3
 21899                           intcon	equ	0xFF2
 21900                           intcon2	equ	0xFF1
 21901                           intcon3	equ	0xFF0
 21902                           postinc0	equ	0xFEE
 21903                           wreg	equ	0xFE8
 21904                           indf1	equ	0xFE7
 21905                           postinc1	equ	0xFE6
 21906                           postdec1	equ	0xFE5
 21907                           plusw1	equ	0xFE3
 21908                           fsr1h	equ	0xFE2
 21909                           fsr1l	equ	0xFE1
 21910                           bsr	equ	0xFE0
 21911                           indf2	equ	0xFDF
 21912                           postinc2	equ	0xFDE
 21913                           postdec2	equ	0xFDD
 21914                           plusw2	equ	0xFDB
 21915                           fsr2h	equ	0xFDA
 21916                           fsr2l	equ	0xFD9
 21917                           status	equ	0xFD8
 21918                           
 21919 ;; *************** function _DoorIndicatorTimerUpdate *****************
 21920 ;; Defined at:
 21921 ;;		line 182 in file "../src/DoorIndicator.c"
 21922 ;; Parameters:    Size  Location     Type
 21923 ;;		None
 21924 ;; Auto vars:     Size  Location     Type
 21925 ;;		None
 21926 ;; Return value:  Size  Location     Type
 21927 ;;		None               void
 21928 ;; Registers used:
 21929 ;;		wreg, status,2, status,0
 21930 ;; Tracked objects:
 21931 ;;		On entry : F/1
 21932 ;;		On exit  : F/1
 21933 ;;		Unchanged: 0/0
 21934 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 21935 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21936 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21937 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21938 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21939 ;;Total ram usage:        0 bytes
 21940 ;; Hardware stack levels used:    1
 21941 ;; Hardware stack levels required when called:    1
 21942 ;; This function calls:
 21943 ;;		Nothing
 21944 ;; This function is called by:
 21945 ;;		_RTC
 21946 ;; This function uses a non-reentrant model
 21947 ;;
 21948                           
 21949                           	psect	text139
 21950  004FA0                     __ptext139:
 21951                           	opt stack 0
 21952  004FA0                     _DoorIndicatorTimerUpdate:
 21953                           	opt stack 14
 21954                           
 21955                           ; BSR set to: 1
 21956                           ;DoorIndicator.c: 183: if (m_doorIndicatorOpenTooLongTimer > 0) {
 21957                           
 21958                           ; BSR set to: 1
 21959                           ;incstack = 0
 21960  004FA0  512C               	movf	_m_doorIndicatorOpenTooLongTimer& (0+255),w,b
 21961  004FA2  112D               	iorwf	(_m_doorIndicatorOpenTooLongTimer+1)& (0+255),w,b
 21962  004FA4  112E               	iorwf	(_m_doorIndicatorOpenTooLongTimer+2)& (0+255),w,b
 21963  004FA6  112F               	iorwf	(_m_doorIndicatorOpenTooLongTimer+3)& (0+255),w,b
 21964  004FA8  E005               	bz	i1l89
 21965                           
 21966                           ; BSR set to: 1
 21967                           ;DoorIndicator.c: 184: m_doorIndicatorOpenTooLongTimer--;
 21968  004FAA  072C               	decf	_m_doorIndicatorOpenTooLongTimer& (0+255),f,b
 21969  004FAC  0E00               	movlw	0
 21970  004FAE  5B2D               	subwfb	(_m_doorIndicatorOpenTooLongTimer+1)& (0+255),f,b
 21971  004FB0  5B2E               	subwfb	(_m_doorIndicatorOpenTooLongTimer+2)& (0+255),f,b
 21972  004FB2  5B2F               	subwfb	(_m_doorIndicatorOpenTooLongTimer+3)& (0+255),f,b
 21973  004FB4                     i1l89:
 21974                           
 21975                           ; BSR set to: 1
 21976                           ;DoorIndicator.c: 185: }
 21977                           ;DoorIndicator.c: 187: if (m_doorIndicatorProcessDelayTimer > 0) {
 21978  004FB4  5130               	movf	_m_doorIndicatorProcessDelayTimer& (0+255),w,b
 21979  004FB6  1131               	iorwf	(_m_doorIndicatorProcessDelayTimer+1)& (0+255),w,b
 21980  004FB8  1132               	iorwf	(_m_doorIndicatorProcessDelayTimer+2)& (0+255),w,b
 21981  004FBA  1133               	iorwf	(_m_doorIndicatorProcessDelayTimer+3)& (0+255),w,b
 21982  004FBC  B4D8               	btfsc	status,2,c
 21983  004FBE  0012               	return	
 21984                           
 21985                           ; BSR set to: 1
 21986                           ;DoorIndicator.c: 188: m_doorIndicatorProcessDelayTimer--;
 21987  004FC0  0730               	decf	_m_doorIndicatorProcessDelayTimer& (0+255),f,b
 21988  004FC2  0E00               	movlw	0
 21989  004FC4  5B31               	subwfb	(_m_doorIndicatorProcessDelayTimer+1)& (0+255),f,b
 21990  004FC6  5B32               	subwfb	(_m_doorIndicatorProcessDelayTimer+2)& (0+255),f,b
 21991  004FC8  5B33               	subwfb	(_m_doorIndicatorProcessDelayTimer+3)& (0+255),f,b
 21992                           
 21993                           ; BSR set to: 1
 21994  004FCA  0C00               	retlw	0	;funcret
 21995  004FCC                     __end_of_DoorIndicatorTimerUpdate:
 21996                           	opt stack 0
 21997                           tblptru	equ	0xFF8
 21998                           tblptrh	equ	0xFF7
 21999                           tblptrl	equ	0xFF6
 22000                           tablat	equ	0xFF5
 22001                           prodh	equ	0xFF4
 22002                           prodl	equ	0xFF3
 22003                           intcon	equ	0xFF2
 22004                           intcon2	equ	0xFF1
 22005                           intcon3	equ	0xFF0
 22006                           postinc0	equ	0xFEE
 22007                           wreg	equ	0xFE8
 22008                           indf1	equ	0xFE7
 22009                           postinc1	equ	0xFE6
 22010                           postdec1	equ	0xFE5
 22011                           plusw1	equ	0xFE3
 22012                           fsr1h	equ	0xFE2
 22013                           fsr1l	equ	0xFE1
 22014                           bsr	equ	0xFE0
 22015                           indf2	equ	0xFDF
 22016                           postinc2	equ	0xFDE
 22017                           postdec2	equ	0xFDD
 22018                           plusw2	equ	0xFDB
 22019                           fsr2h	equ	0xFDA
 22020                           fsr2l	equ	0xFD9
 22021                           status	equ	0xFD8
 22022                           
 22023 ;; *************** function _BeepTimerUpdate *****************
 22024 ;; Defined at:
 22025 ;;		line 47 in file "../src/Beep.c"
 22026 ;; Parameters:    Size  Location     Type
 22027 ;;		None
 22028 ;; Auto vars:     Size  Location     Type
 22029 ;;		None
 22030 ;; Return value:  Size  Location     Type
 22031 ;;		None               void
 22032 ;; Registers used:
 22033 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 22034 ;; Tracked objects:
 22035 ;;		On entry : 0/0
 22036 ;;		On exit  : F/1
 22037 ;;		Unchanged: 0/0
 22038 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 22039 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22040 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22041 ;;      Temps:         12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22042 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22043 ;;Total ram usage:       12 bytes
 22044 ;; Hardware stack levels used:    1
 22045 ;; Hardware stack levels required when called:    3
 22046 ;; This function calls:
 22047 ;;		i1_TickGet
 22048 ;; This function is called by:
 22049 ;;		_RTC
 22050 ;; This function uses a non-reentrant model
 22051 ;;
 22052                           
 22053                           	psect	text140
 22054  00346A                     __ptext140:
 22055                           	opt stack 0
 22056  00346A                     _BeepTimerUpdate:
 22057                           	opt stack 12
 22058                           
 22059                           ;Beep.c: 49: if( m_beepFlag == 1)
 22060                           
 22061                           ; BSR set to: 1
 22062                           ;incstack = 0
 22063  00346A  0101               	movlb	1	; () banked
 22064  00346C  0576               	decf	_m_beepFlag& (0+255),w,b
 22065  00346E  A4D8               	btfss	status,2,c
 22066  003470  0012               	return	
 22067                           
 22068                           ; BSR set to: 1
 22069                           ;Beep.c: 50: {
 22070                           ;Beep.c: 51: if( TickGet() - m_beepTimer > ((((((40000000ul) / 4)+128ull)/256ull))/1000)
      +                          *m_beepValue )
 22071  003472  ECAF  F028         	call	i1_TickGet	;wreg free
 22072  003476  0101               	movlb	1	; () banked
 22073  003478  5124               	movf	_m_beepTimer& (0+255),w,b
 22074  00347A  5C01               	subwf	?i1_TickGet,w,c
 22075  00347C  6E09               	movwf	??_BeepTimerUpdate& (0+255),c
 22076  00347E  5125               	movf	(_m_beepTimer+1)& (0+255),w,b
 22077  003480  5802               	subwfb	?i1_TickGet+1,w,c
 22078  003482  6E0A               	movwf	(??_BeepTimerUpdate+1)& (0+255),c
 22079  003484  5126               	movf	(_m_beepTimer+2)& (0+255),w,b
 22080  003486  5803               	subwfb	?i1_TickGet+2,w,c
 22081  003488  6E0B               	movwf	(??_BeepTimerUpdate+2)& (0+255),c
 22082  00348A  5127               	movf	(_m_beepTimer+3)& (0+255),w,b
 22083  00348C  5804               	subwfb	?i1_TickGet+3,w,c
 22084  00348E  6E0C               	movwf	(??_BeepTimerUpdate+3)& (0+255),c
 22085  003490  C128  F00D         	movff	_m_beepValue,??_BeepTimerUpdate+4
 22086  003494  C129  F00E         	movff	_m_beepValue+1,??_BeepTimerUpdate+5
 22087  003498  C12A  F00F         	movff	_m_beepValue+2,??_BeepTimerUpdate+6
 22088  00349C  C12B  F010         	movff	_m_beepValue+3,??_BeepTimerUpdate+7
 22089  0034A0  0E27               	movlw	39
 22090  0034A2  020D               	mulwf	(??_BeepTimerUpdate+4)& (0+255),c
 22091  0034A4  CFF3 F011          	movff	prodl,??_BeepTimerUpdate+8
 22092  0034A8  CFF4 F012          	movff	prodh,??_BeepTimerUpdate+9
 22093  0034AC  6A13               	clrf	(??_BeepTimerUpdate+10)& (0+255),c
 22094  0034AE  6A14               	clrf	(??_BeepTimerUpdate+11)& (0+255),c
 22095  0034B0  020E               	mulwf	(??_BeepTimerUpdate+5)& (0+255),c
 22096  0034B2  50F3               	movf	prodl,w,c
 22097  0034B4  2612               	addwf	(??_BeepTimerUpdate+9)& (0+255),f,c
 22098  0034B6  50F4               	movf	prodh,w,c
 22099  0034B8  2213               	addwfc	(??_BeepTimerUpdate+10)& (0+255),f,c
 22100  0034BA  0E00               	movlw	0
 22101  0034BC  2214               	addwfc	(??_BeepTimerUpdate+11)& (0+255),f,c
 22102  0034BE  020D               	mulwf	(??_BeepTimerUpdate+4)& (0+255),c
 22103  0034C0  50F3               	movf	prodl,w,c
 22104  0034C2  2612               	addwf	(??_BeepTimerUpdate+9)& (0+255),f,c
 22105  0034C4  50F4               	movf	prodh,w,c
 22106  0034C6  2213               	addwfc	(??_BeepTimerUpdate+10)& (0+255),f,c
 22107  0034C8  0E00               	movlw	0
 22108  0034CA  2214               	addwfc	(??_BeepTimerUpdate+11)& (0+255),f,c
 22109  0034CC  0E27               	movlw	39
 22110  0034CE  020F               	mulwf	(??_BeepTimerUpdate+6)& (0+255),c
 22111  0034D0  50F3               	movf	prodl,w,c
 22112  0034D2  2613               	addwf	(??_BeepTimerUpdate+10)& (0+255),f,c
 22113  0034D4  50F4               	movf	prodh,w,c
 22114  0034D6  2214               	addwfc	(??_BeepTimerUpdate+11)& (0+255),f,c
 22115  0034D8  0E00               	movlw	0
 22116  0034DA  020E               	mulwf	(??_BeepTimerUpdate+5)& (0+255),c
 22117  0034DC  50F3               	movf	prodl,w,c
 22118  0034DE  2613               	addwf	(??_BeepTimerUpdate+10)& (0+255),f,c
 22119  0034E0  50F4               	movf	prodh,w,c
 22120  0034E2  2214               	addwfc	(??_BeepTimerUpdate+11)& (0+255),f,c
 22121  0034E4  0E00               	movlw	0
 22122  0034E6  020D               	mulwf	(??_BeepTimerUpdate+4)& (0+255),c
 22123  0034E8  50F3               	movf	prodl,w,c
 22124  0034EA  2613               	addwf	(??_BeepTimerUpdate+10)& (0+255),f,c
 22125  0034EC  50F4               	movf	prodh,w,c
 22126  0034EE  2214               	addwfc	(??_BeepTimerUpdate+11)& (0+255),f,c
 22127  0034F0  0E27               	movlw	39
 22128  0034F2  0210               	mulwf	(??_BeepTimerUpdate+7)& (0+255),c
 22129  0034F4  50F3               	movf	prodl,w,c
 22130  0034F6  2614               	addwf	(??_BeepTimerUpdate+11)& (0+255),f,c
 22131  0034F8  0E00               	movlw	0
 22132  0034FA  020F               	mulwf	(??_BeepTimerUpdate+6)& (0+255),c
 22133  0034FC  50F3               	movf	prodl,w,c
 22134  0034FE  2614               	addwf	(??_BeepTimerUpdate+11)& (0+255),f,c
 22135  003500  0E00               	movlw	0
 22136  003502  020E               	mulwf	(??_BeepTimerUpdate+5)& (0+255),c
 22137  003504  50F3               	movf	prodl,w,c
 22138  003506  2614               	addwf	(??_BeepTimerUpdate+11)& (0+255),f,c
 22139  003508  0E00               	movlw	0
 22140  00350A  020D               	mulwf	(??_BeepTimerUpdate+4)& (0+255),c
 22141  00350C  50F3               	movf	prodl,w,c
 22142  00350E  2614               	addwf	(??_BeepTimerUpdate+11)& (0+255),f,c
 22143  003510  5009               	movf	??_BeepTimerUpdate,w,c
 22144  003512  5C11               	subwf	??_BeepTimerUpdate+8,w,c
 22145  003514  500A               	movf	??_BeepTimerUpdate+1,w,c
 22146  003516  5812               	subwfb	??_BeepTimerUpdate+9,w,c
 22147  003518  500B               	movf	??_BeepTimerUpdate+2,w,c
 22148  00351A  5813               	subwfb	??_BeepTimerUpdate+10,w,c
 22149  00351C  500C               	movf	??_BeepTimerUpdate+3,w,c
 22150  00351E  5814               	subwfb	??_BeepTimerUpdate+11,w,c
 22151  003520  B0D8               	btfsc	status,0,c
 22152  003522  0012               	return	
 22153                           
 22154                           ; BSR set to: 1
 22155                           ;Beep.c: 52: {
 22156                           ;Beep.c: 53: (LATDbits.LATD1) = 0;
 22157  003524  928C               	bcf	3980,1,c	;volatile
 22158                           
 22159                           ;Beep.c: 54: m_beepFlag = 0;
 22160  003526  6B76               	clrf	_m_beepFlag& (0+255),b
 22161                           
 22162                           ; BSR set to: 1
 22163  003528  0012               	return		;funcret
 22164  00352A                     __end_of_BeepTimerUpdate:
 22165                           	opt stack 0
 22166                           tblptru	equ	0xFF8
 22167                           tblptrh	equ	0xFF7
 22168                           tblptrl	equ	0xFF6
 22169                           tablat	equ	0xFF5
 22170                           prodh	equ	0xFF4
 22171                           prodl	equ	0xFF3
 22172                           intcon	equ	0xFF2
 22173                           intcon2	equ	0xFF1
 22174                           intcon3	equ	0xFF0
 22175                           postinc0	equ	0xFEE
 22176                           wreg	equ	0xFE8
 22177                           indf1	equ	0xFE7
 22178                           postinc1	equ	0xFE6
 22179                           postdec1	equ	0xFE5
 22180                           plusw1	equ	0xFE3
 22181                           fsr1h	equ	0xFE2
 22182                           fsr1l	equ	0xFE1
 22183                           bsr	equ	0xFE0
 22184                           indf2	equ	0xFDF
 22185                           postinc2	equ	0xFDE
 22186                           postdec2	equ	0xFDD
 22187                           plusw2	equ	0xFDB
 22188                           fsr2h	equ	0xFDA
 22189                           fsr2l	equ	0xFD9
 22190                           status	equ	0xFD8
 22191                           
 22192 ;; *************** function i1_TickGet *****************
 22193 ;; Defined at:
 22194 ;;		line 249 in file "../framework/tcpip/src/common/tick.c"
 22195 ;; Parameters:    Size  Location     Type
 22196 ;;		None
 22197 ;; Auto vars:     Size  Location     Type
 22198 ;;  TickGet         4    4[COMRAM] unsigned long 
 22199 ;; Return value:  Size  Location     Type
 22200 ;;                  4    0[COMRAM] unsigned long 
 22201 ;; Registers used:
 22202 ;;		fsr2l, fsr2h, cstack
 22203 ;; Tracked objects:
 22204 ;;		On entry : F/1
 22205 ;;		On exit  : 0/0
 22206 ;;		Unchanged: 0/0
 22207 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 22208 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22209 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22210 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22211 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22212 ;;Total ram usage:        8 bytes
 22213 ;; Hardware stack levels used:    1
 22214 ;; Hardware stack levels required when called:    2
 22215 ;; This function calls:
 22216 ;;		i1_GetTickCopy
 22217 ;; This function is called by:
 22218 ;;		_BeepTimerUpdate
 22219 ;; This function uses a non-reentrant model
 22220 ;;
 22221                           
 22222                           	psect	text141
 22223  00515E                     __ptext141:
 22224                           	opt stack 0
 22225  00515E                     i1_TickGet:
 22226                           	opt stack 12
 22227                           
 22228                           ; BSR set to: 1
 22229                           ;tick.c: 251: uint32_t dw;
 22230                           ;tick.c: 253: GetTickCopy();
 22231                           
 22232                           ; BSR set to: 1
 22233                           ;incstack = 0
 22234  00515E  EC3A  F028         	call	i1_GetTickCopy	;wreg free
 22235                           
 22236                           ;tick.c: 254: ((uint8_t *) & dw)[0] = vTickReading[0];
 22237  005162  C029  F005         	movff	_vTickReading,i1TickGet@dw	;volatile
 22238                           
 22239                           ;tick.c: 255: ((uint8_t *) & dw)[1] = vTickReading[1];
 22240  005166  C02A  F006         	movff	_vTickReading+1,i1TickGet@dw+1	;volatile
 22241                           
 22242                           ;tick.c: 256: ((uint8_t *) & dw)[2] = vTickReading[2];
 22243  00516A  C02B  F007         	movff	_vTickReading+2,i1TickGet@dw+2	;volatile
 22244                           
 22245                           ;tick.c: 257: ((uint8_t *) & dw)[3] = vTickReading[3];
 22246  00516E  C02C  F008         	movff	_vTickReading+3,i1TickGet@dw+3	;volatile
 22247                           
 22248                           ;tick.c: 259: return dw;
 22249  005172  C005  F001         	movff	i1TickGet@dw,?i1_TickGet
 22250  005176  C006  F002         	movff	i1TickGet@dw+1,?i1_TickGet+1
 22251  00517A  C007  F003         	movff	i1TickGet@dw+2,?i1_TickGet+2
 22252  00517E  C008  F004         	movff	i1TickGet@dw+3,?i1_TickGet+3
 22253  005182  0012               	return		;funcret
 22254  005184                     __end_ofi1_TickGet:
 22255                           	opt stack 0
 22256                           tblptru	equ	0xFF8
 22257                           tblptrh	equ	0xFF7
 22258                           tblptrl	equ	0xFF6
 22259                           tablat	equ	0xFF5
 22260                           prodh	equ	0xFF4
 22261                           prodl	equ	0xFF3
 22262                           intcon	equ	0xFF2
 22263                           intcon2	equ	0xFF1
 22264                           intcon3	equ	0xFF0
 22265                           postinc0	equ	0xFEE
 22266                           wreg	equ	0xFE8
 22267                           indf1	equ	0xFE7
 22268                           postinc1	equ	0xFE6
 22269                           postdec1	equ	0xFE5
 22270                           plusw1	equ	0xFE3
 22271                           fsr1h	equ	0xFE2
 22272                           fsr1l	equ	0xFE1
 22273                           bsr	equ	0xFE0
 22274                           indf2	equ	0xFDF
 22275                           postinc2	equ	0xFDE
 22276                           postdec2	equ	0xFDD
 22277                           plusw2	equ	0xFDB
 22278                           fsr2h	equ	0xFDA
 22279                           fsr2l	equ	0xFD9
 22280                           status	equ	0xFD8
 22281                           
 22282 ;; *************** function i1_GetTickCopy *****************
 22283 ;; Defined at:
 22284 ;;		line 139 in file "../framework/tcpip/src/common/tick.c"
 22285 ;; Parameters:    Size  Location     Type
 22286 ;;		None
 22287 ;; Auto vars:     Size  Location     Type
 22288 ;;		None
 22289 ;; Return value:  Size  Location     Type
 22290 ;;		None               void
 22291 ;; Registers used:
 22292 ;;		fsr2l, fsr2h
 22293 ;; Tracked objects:
 22294 ;;		On entry : F/1
 22295 ;;		On exit  : 0/0
 22296 ;;		Unchanged: 0/0
 22297 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 22298 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22299 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22300 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22301 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22302 ;;Total ram usage:        0 bytes
 22303 ;; Hardware stack levels used:    1
 22304 ;; Hardware stack levels required when called:    1
 22305 ;; This function calls:
 22306 ;;		Nothing
 22307 ;; This function is called by:
 22308 ;;		i1_TickGet
 22309 ;; This function uses a non-reentrant model
 22310 ;;
 22311                           
 22312                           	psect	text142
 22313  005074                     __ptext142:
 22314                           	opt stack 0
 22315  005074                     i1_GetTickCopy:
 22316                           	opt stack 12
 22317  005074                     i1l1247:
 22318                           
 22319                           ; BSR set to: 1
 22320                           ;tick.c: 145: INTCONbits.TMR0IE = 1;
 22321  005074  8AF2               	bsf	intcon,5,c	;volatile
 22322                           
 22323                           ;tick.c: 146: __nop();
 22324  005076  F000               	nop	
 22325                           
 22326                           ;tick.c: 147: INTCONbits.TMR0IE = 0;
 22327  005078  9AF2               	bcf	intcon,5,c	;volatile
 22328                           
 22329                           ;tick.c: 148: vTickReading[0] = TMR0L;
 22330  00507A  CFD6 F029          	movff	4054,_vTickReading	;volatile
 22331                           
 22332                           ;tick.c: 149: vTickReading[1] = TMR0H;
 22333  00507E  CFD7 F02A          	movff	4055,_vTickReading+1	;volatile
 22334                           
 22335                           ;tick.c: 150: *((uint32_t *) & vTickReading[2]) = dwInternalTicks;
 22336  005082  EE20  F02B         	lfsr	2,_vTickReading+2
 22337  005086  C120  FFDE         	movff	_dwInternalTicks,postinc2	;volatile
 22338  00508A  C121  FFDE         	movff	_dwInternalTicks+1,postinc2	;volatile
 22339  00508E  C122  FFDE         	movff	_dwInternalTicks+2,postinc2	;volatile
 22340  005092  C123  FFDE         	movff	_dwInternalTicks+3,postinc2	;volatile
 22341                           
 22342                           ;tick.c: 151: } while (INTCONbits.TMR0IF);
 22343  005096  B4F2               	btfsc	intcon,2,c	;volatile
 22344  005098  D7ED               	goto	i1l1247
 22345                           
 22346                           ;tick.c: 152: INTCONbits.TMR0IE = 1;
 22347  00509A  8AF2               	bsf	intcon,5,c	;volatile
 22348  00509C  0012               	return		;funcret
 22349  00509E                     __end_ofi1_GetTickCopy:
 22350                           	opt stack 0
 22351                           tblptru	equ	0xFF8
 22352                           tblptrh	equ	0xFF7
 22353                           tblptrl	equ	0xFF6
 22354                           tablat	equ	0xFF5
 22355                           prodh	equ	0xFF4
 22356                           prodl	equ	0xFF3
 22357                           intcon	equ	0xFF2
 22358                           intcon2	equ	0xFF1
 22359                           intcon3	equ	0xFF0
 22360                           postinc0	equ	0xFEE
 22361                           wreg	equ	0xFE8
 22362                           indf1	equ	0xFE7
 22363                           postinc1	equ	0xFE6
 22364                           postdec1	equ	0xFE5
 22365                           plusw1	equ	0xFE3
 22366                           fsr1h	equ	0xFE2
 22367                           fsr1l	equ	0xFE1
 22368                           bsr	equ	0xFE0
 22369                           indf2	equ	0xFDF
 22370                           postinc2	equ	0xFDE
 22371                           postdec2	equ	0xFDD
 22372                           plusw2	equ	0xFDB
 22373                           fsr2h	equ	0xFDA
 22374                           fsr2l	equ	0xFD9
 22375                           status	equ	0xFD8
 22376                           
 22377 ;; *************** function _HighISR *****************
 22378 ;; Defined at:
 22379 ;;		line 50 in file "../src/InitRutines.c"
 22380 ;; Parameters:    Size  Location     Type
 22381 ;;		None
 22382 ;; Auto vars:     Size  Location     Type
 22383 ;;		None
 22384 ;; Return value:  Size  Location     Type
 22385 ;;		None               void
 22386 ;; Registers used:
 22387 ;;		wreg, status,2, status,0
 22388 ;; Tracked objects:
 22389 ;;		On entry : 0/0
 22390 ;;		On exit  : 0/0
 22391 ;;		Unchanged: 0/0
 22392 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 22393 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22394 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22395 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22396 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22397 ;;Total ram usage:        0 bytes
 22398 ;; Hardware stack levels used:    1
 22399 ;; This function calls:
 22400 ;;		Nothing
 22401 ;; This function is called by:
 22402 ;;		Interrupt level 2
 22403 ;; This function uses a non-reentrant model
 22404 ;;
 22405                           
 22406                           	psect	intcode
 22407  000008                     __pintcode:
 22408                           	opt stack 0
 22409  000008                     _HighISR:
 22410                           	opt stack 12
 22411                           
 22412                           ;incstack = 0
 22413  000008  8244               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
 22414  00000A  EFF5  F01F         	goto	int_func
 22415                           tblptru	equ	0xFF8
 22416                           tblptrh	equ	0xFF7
 22417                           tblptrl	equ	0xFF6
 22418                           tablat	equ	0xFF5
 22419                           prodh	equ	0xFF4
 22420                           prodl	equ	0xFF3
 22421                           intcon	equ	0xFF2
 22422                           intcon2	equ	0xFF1
 22423                           intcon3	equ	0xFF0
 22424                           postinc0	equ	0xFEE
 22425                           wreg	equ	0xFE8
 22426                           indf1	equ	0xFE7
 22427                           postinc1	equ	0xFE6
 22428                           postdec1	equ	0xFE5
 22429                           plusw1	equ	0xFE3
 22430                           fsr1h	equ	0xFE2
 22431                           fsr1l	equ	0xFE1
 22432                           bsr	equ	0xFE0
 22433                           indf2	equ	0xFDF
 22434                           postinc2	equ	0xFDE
 22435                           postdec2	equ	0xFDD
 22436                           plusw2	equ	0xFDB
 22437                           fsr2h	equ	0xFDA
 22438                           fsr2l	equ	0xFD9
 22439                           status	equ	0xFD8
 22440                           
 22441                           	psect	intcode_body
 22442  003FEA                     __pintcode_body:
 22443                           	opt stack 12
 22444  003FEA                     int_func:
 22445                           	opt stack 12
 22446                           
 22447                           ;InitRutines.c: 52: if (INTCON3bits.INT1IF == 1 || INTCONbits.INT0IF == 1) {
 22448  003FEA  B0F0               	btfsc	intcon3,0,c	;volatile
 22449  003FEC  D002               	goto	i2l678
 22450  003FEE  A2F2               	btfss	intcon,1,c	;volatile
 22451  003FF0  D015               	goto	i2l8914
 22452  003FF2                     i2l678:
 22453                           
 22454                           ;InitRutines.c: 53: PIE1bits.TMR2IE = 1;
 22455  003FF2  829D               	bsf	3997,1,c	;volatile
 22456                           
 22457                           ;InitRutines.c: 54: PIR1bits.TMR2IF = 0;
 22458  003FF4  929E               	bcf	3998,1,c	;volatile
 22459                           
 22460                           ;InitRutines.c: 55: TMR2 = 0;
 22461  003FF6  6ACC               	clrf	4044,c	;volatile
 22462                           
 22463                           ;InitRutines.c: 56: m_timer2postscaler = 0;
 22464  003FF8  0101               	movlb	1	; () banked
 22465  003FFA  6B77               	clrf	_m_timer2postscaler& (0+255),b
 22466                           
 22467                           ;InitRutines.c: 57: g_wiegandFlag = 0;
 22468  003FFC  0100               	movlb	0	; () banked
 22469  003FFE  6BD0               	clrf	_g_wiegandFlag& (0+255),b
 22470                           
 22471                           ; BSR set to: 0
 22472                           ;InitRutines.c: 61: m_wiegandCode <<= 1;
 22473  004000  0101               	movlb	1	; () banked
 22474  004002  90D8               	bcf	status,0,c
 22475  004004  3758               	rlcf	_m_wiegandCode& (0+255),f,b
 22476  004006  3759               	rlcf	(_m_wiegandCode+1)& (0+255),f,b
 22477  004008  375A               	rlcf	(_m_wiegandCode+2)& (0+255),f,b
 22478  00400A  375B               	rlcf	(_m_wiegandCode+3)& (0+255),f,b
 22479                           
 22480                           ; BSR set to: 1
 22481                           ;InitRutines.c: 63: if (INTCON3bits.INT1IF == 1)
 22482  00400C  A0F0               	btfss	intcon3,0,c	;volatile
 22483  00400E  D002               	goto	i2l8910
 22484                           
 22485                           ; BSR set to: 1
 22486                           ;InitRutines.c: 64: m_wiegandCode |= 1;
 22487  004010  8158               	bsf	_m_wiegandCode& (0+255),0,b
 22488  004012  D003               	goto	i2l8912
 22489  004014                     i2l8910:
 22490                           
 22491                           ; BSR set to: 1
 22492                           ;InitRutines.c: 65: else
 22493                           ;InitRutines.c: 66: m_wiegandCode &= ~(1);
 22494  004014  0EFE               	movlw	254
 22495  004016  1758               	andwf	_m_wiegandCode& (0+255),f,b
 22496  004018  0EFF               	movlw	255
 22497  00401A                     i2l8912:
 22498                           
 22499                           ; BSR set to: 1
 22500                           ;InitRutines.c: 68: m_wiegandCounter++;
 22501  00401A  2A42               	incf	_m_wiegandCounter,f,c
 22502  00401C                     i2l8914:
 22503                           
 22504                           ;InitRutines.c: 69: }
 22505                           ;InitRutines.c: 71: if (PIR1bits.TMR2IF == 1) {
 22506  00401C  A29E               	btfss	3998,1,c	;volatile
 22507  00401E  D020               	goto	i2l681
 22508                           
 22509                           ;InitRutines.c: 72: if (m_timer2postscaler < 2) {
 22510  004020  0E02               	movlw	2
 22511  004022  0101               	movlb	1	; () banked
 22512  004024  6177               	cpfslt	_m_timer2postscaler& (0+255),b
 22513  004026  D004               	goto	i2l682
 22514                           
 22515                           ; BSR set to: 1
 22516                           ;InitRutines.c: 73: PIR1bits.TMR2IF = 0;
 22517  004028  929E               	bcf	3998,1,c	;volatile
 22518                           
 22519                           ;InitRutines.c: 74: TMR2 = 0;
 22520  00402A  6ACC               	clrf	4044,c	;volatile
 22521                           
 22522                           ; BSR set to: 1
 22523                           ;InitRutines.c: 75: m_timer2postscaler++;
 22524  00402C  2B77               	incf	_m_timer2postscaler& (0+255),f,b
 22525                           
 22526                           ;InitRutines.c: 76: } else {
 22527  00402E  D018               	goto	i2l681
 22528  004030                     i2l682:
 22529                           
 22530                           ; BSR set to: 1
 22531                           ;InitRutines.c: 77: PIE1bits.TMR2IE = 0;
 22532  004030  929D               	bcf	3997,1,c	;volatile
 22533                           
 22534                           ;InitRutines.c: 78: PIR1bits.TMR2IF = 0;
 22535  004032  929E               	bcf	3998,1,c	;volatile
 22536                           
 22537                           ; BSR set to: 1
 22538                           ;InitRutines.c: 80: if (m_wiegandCounter == 4 || m_wiegandCounter == 26
 22539                           ;InitRutines.c: 81: && m_wiegandCode > 0) {
 22540  004034  0E04               	movlw	4
 22541  004036  1842               	xorwf	_m_wiegandCounter,w,c
 22542  004038  E008               	bz	i2l8928
 22543                           
 22544                           ; BSR set to: 1
 22545  00403A  0E1A               	movlw	26
 22546  00403C  1842               	xorwf	_m_wiegandCounter,w,c
 22547  00403E  E109               	bnz	i2l684
 22548                           
 22549                           ; BSR set to: 1
 22550  004040  5158               	movf	_m_wiegandCode& (0+255),w,b
 22551  004042  1159               	iorwf	(_m_wiegandCode+1)& (0+255),w,b
 22552  004044  115A               	iorwf	(_m_wiegandCode+2)& (0+255),w,b
 22553  004046  115B               	iorwf	(_m_wiegandCode+3)& (0+255),w,b
 22554  004048  E004               	bz	i2l684
 22555  00404A                     i2l8928:
 22556                           
 22557                           ; BSR set to: 1
 22558                           ;InitRutines.c: 82: g_wiegandFlag = 1;
 22559  00404A  0E01               	movlw	1
 22560  00404C  0100               	movlb	0	; () banked
 22561  00404E  6FD0               	movwf	_g_wiegandFlag& (0+255),b
 22562                           
 22563                           ;InitRutines.c: 83: } else {
 22564  004050  D006               	goto	i2l687
 22565  004052                     i2l684:
 22566                           
 22567                           ; BSR set to: 1
 22568                           ;InitRutines.c: 84: m_wiegandCode = 0;
 22569  004052  6B58               	clrf	_m_wiegandCode& (0+255),b
 22570  004054  6B59               	clrf	(_m_wiegandCode+1)& (0+255),b
 22571  004056  6B5A               	clrf	(_m_wiegandCode+2)& (0+255),b
 22572  004058  6B5B               	clrf	(_m_wiegandCode+3)& (0+255),b
 22573                           
 22574                           ;InitRutines.c: 85: g_wiegandFlag = 0;
 22575  00405A  0100               	movlb	0	; () banked
 22576  00405C  6BD0               	clrf	_g_wiegandFlag& (0+255),b
 22577  00405E                     i2l687:
 22578                           
 22579                           ; BSR set to: 0
 22580                           ;InitRutines.c: 86: }
 22581                           ;InitRutines.c: 88: m_wiegandCounter = 0;
 22582  00405E  6A42               	clrf	_m_wiegandCounter,c
 22583  004060                     i2l681:
 22584                           
 22585                           ;InitRutines.c: 91: }
 22586                           ;InitRutines.c: 92: }
 22587                           ;InitRutines.c: 94: INTCONbits.INT0IF = 0;
 22588  004060  92F2               	bcf	intcon,1,c	;volatile
 22589                           
 22590                           ;InitRutines.c: 95: INTCON3bits.INT1IF = 0;
 22591  004062  90F0               	bcf	intcon3,0,c	;volatile
 22592  004064  9244               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
 22593  004066  0011               	retfie		f
 22594  004068                     __end_of_HighISR:
 22595                           	opt stack 0
 22596                           tblptru	equ	0xFF8
 22597                           tblptrh	equ	0xFF7
 22598                           tblptrl	equ	0xFF6
 22599                           tablat	equ	0xFF5
 22600                           prodh	equ	0xFF4
 22601                           prodl	equ	0xFF3
 22602                           intcon	equ	0xFF2
 22603                           intcon2	equ	0xFF1
 22604                           intcon3	equ	0xFF0
 22605                           postinc0	equ	0xFEE
 22606                           wreg	equ	0xFE8
 22607                           indf1	equ	0xFE7
 22608                           postinc1	equ	0xFE6
 22609                           postdec1	equ	0xFE5
 22610                           plusw1	equ	0xFE3
 22611                           fsr1h	equ	0xFE2
 22612                           fsr1l	equ	0xFE1
 22613                           bsr	equ	0xFE0
 22614                           indf2	equ	0xFDF
 22615                           postinc2	equ	0xFDE
 22616                           postdec2	equ	0xFDD
 22617                           plusw2	equ	0xFDB
 22618                           fsr2h	equ	0xFDA
 22619                           fsr2l	equ	0xFD9
 22620                           status	equ	0xFD8
 22621                           tblptru	equ	0xFF8
 22622                           tblptrh	equ	0xFF7
 22623                           tblptrl	equ	0xFF6
 22624                           tablat	equ	0xFF5
 22625                           prodh	equ	0xFF4
 22626                           prodl	equ	0xFF3
 22627                           intcon	equ	0xFF2
 22628                           intcon2	equ	0xFF1
 22629                           intcon3	equ	0xFF0
 22630                           postinc0	equ	0xFEE
 22631                           wreg	equ	0xFE8
 22632                           indf1	equ	0xFE7
 22633                           postinc1	equ	0xFE6
 22634                           postdec1	equ	0xFE5
 22635                           plusw1	equ	0xFE3
 22636                           fsr1h	equ	0xFE2
 22637                           fsr1l	equ	0xFE1
 22638                           bsr	equ	0xFE0
 22639                           indf2	equ	0xFDF
 22640                           postinc2	equ	0xFDE
 22641                           postdec2	equ	0xFDD
 22642                           plusw2	equ	0xFDB
 22643                           fsr2h	equ	0xFDA
 22644                           fsr2l	equ	0xFD9
 22645                           status	equ	0xFD8
 22646                           
 22647                           	psect	rparam
 22648  0000                     tblptru	equ	0xFF8
 22649                           tblptrh	equ	0xFF7
 22650                           tblptrl	equ	0xFF6
 22651                           tablat	equ	0xFF5
 22652                           prodh	equ	0xFF4
 22653                           prodl	equ	0xFF3
 22654                           intcon	equ	0xFF2
 22655                           intcon2	equ	0xFF1
 22656                           intcon3	equ	0xFF0
 22657                           postinc0	equ	0xFEE
 22658                           wreg	equ	0xFE8
 22659                           indf1	equ	0xFE7
 22660                           postinc1	equ	0xFE6
 22661                           postdec1	equ	0xFE5
 22662                           plusw1	equ	0xFE3
 22663                           fsr1h	equ	0xFE2
 22664                           fsr1l	equ	0xFE1
 22665                           bsr	equ	0xFE0
 22666                           indf2	equ	0xFDF
 22667                           postinc2	equ	0xFDE
 22668                           postdec2	equ	0xFDD
 22669                           plusw2	equ	0xFDB
 22670                           fsr2h	equ	0xFDA
 22671                           fsr2l	equ	0xFD9
 22672                           status	equ	0xFD8
 22673                           
 22674                           	psect	temp
 22675  000044                     btemp:
 22676                           	opt stack 0
 22677  000044                     	ds	1
 22678  0000                     int$flags	set	btemp
 22679                           tblptru	equ	0xFF8
 22680                           tblptrh	equ	0xFF7
 22681                           tblptrl	equ	0xFF6
 22682                           tablat	equ	0xFF5
 22683                           prodh	equ	0xFF4
 22684                           prodl	equ	0xFF3
 22685                           intcon	equ	0xFF2
 22686                           intcon2	equ	0xFF1
 22687                           intcon3	equ	0xFF0
 22688                           postinc0	equ	0xFEE
 22689                           wreg	equ	0xFE8
 22690                           indf1	equ	0xFE7
 22691                           postinc1	equ	0xFE6
 22692                           postdec1	equ	0xFE5
 22693                           plusw1	equ	0xFE3
 22694                           fsr1h	equ	0xFE2
 22695                           fsr1l	equ	0xFE1
 22696                           bsr	equ	0xFE0
 22697                           indf2	equ	0xFDF
 22698                           postinc2	equ	0xFDE
 22699                           postdec2	equ	0xFDD
 22700                           plusw2	equ	0xFDB
 22701                           fsr2h	equ	0xFDA
 22702                           fsr2l	equ	0xFD9
 22703                           status	equ	0xFD8


Data Sizes:
    Strings     9
    Constant    0
    Data        33
    BSS         1077
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     40      67
    BANK0           160    103     159
    BANK1           256     15     247
    BANK2           256     20     250
    BANK3           256      0      65
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          128      0       0
    BANK15           96      0       0

Pointer List with Targets:

    FindMatchingSocket@localIP	PTR struct . size(1) Largest target is 4
		 -> StackTask@tempLocalIP(BANK0[4]), 

    memset@p1	PTR void  size(2) Largest target is 230
		 -> UDPSocketInfo.remote(BANK2[10]), UDPSocketInfo(BANK2[230]), LCDText(BANK3[33]), CheckKeypad@buff(BANK2[8]), 
		 -> m_NBSNodeInfo(BANK1[10]), 

    memset@p	PTR unsigned char  size(2) Largest target is 230
		 -> UDPSocketInfo.remote(BANK2[10]), UDPSocketInfo(BANK2[230]), LCDText(BANK3[33]), CheckKeypad@buff(BANK2[8]), 
		 -> m_NBSNodeInfo(BANK1[10]), 

    memcpy@d1	PTR void  size(2) Largest target is 230
		 -> UDPSocketInfo.remote(BANK2[10]), UDPSocketInfo(BANK2[230]), ARPResolve@packet(BANK0[28]), ARPProcess@packet(BANK0[28]), 
		 -> ARPSendPkt@packet(COMRAM[28]), remoteNode(BANK1[10]), AppConfig.MyMACAddr(BANK1[6]), AppConfig(BANK1[51]), 

    memcpy@d	PTR unsigned char  size(2) Largest target is 230
		 -> UDPSocketInfo.remote(BANK2[10]), UDPSocketInfo(BANK2[230]), ARPResolve@packet(BANK0[28]), ARPProcess@packet(BANK0[28]), 
		 -> ARPSendPkt@packet(COMRAM[28]), remoteNode(BANK1[10]), AppConfig.MyMACAddr(BANK1[6]), AppConfig(BANK1[51]), 

    memcpy@s1	PTR const void  size(2) Largest target is 3935
		 -> header.SourceMACAddr.v(COMRAM[6]), header.SourceMACAddr(COMRAM[6]), remoteNode(BANK1[10]), STR_3(CODE[4]), 
		 -> AppConfig.MyMACAddr(BANK1[6]), AppConfig(BANK1[51]), g_serializedMACAddress(BANK0[6]), RAM(DATA[3935]), 
		 -> m_NBSNodeInfo(BANK1[10]), 

    memcpy@s	PTR const unsigned char  size(2) Largest target is 3935
		 -> header.SourceMACAddr.v(COMRAM[6]), header.SourceMACAddr(COMRAM[6]), remoteNode(BANK1[10]), STR_3(CODE[4]), 
		 -> AppConfig.MyMACAddr(BANK1[6]), AppConfig(BANK1[51]), g_serializedMACAddress(BANK0[6]), RAM(DATA[3935]), 
		 -> m_NBSNodeInfo(BANK1[10]), 

    ultoa@buf	PTR unsigned char  size(2) Largest target is 3935
		 -> RAM(DATA[3935]), 

    sp__ultoa	PTR unsigned char  size(2) Largest target is 3935
		 -> RAM(DATA[3935]), 

    ltoa@buf	PTR unsigned char  size(2) Largest target is 3935
		 -> RAM(DATA[3935]), 

    ltoa@cp	PTR unsigned char  size(2) Largest target is 3935
		 -> RAM(DATA[3935]), 

    MACPutArray@val	PTR unsigned char  size(2) Largest target is 500
		 -> UDPFlush@wChecksum(BANK0[2]), UDPFlush@h(BANK0[8]), IPPutHeader@header(BANK0[20]), ICMPProcess@dwVal(BANK0[4]), 
		 -> UDPSocketInfo.remote(BANK2[10]), UDPSocketInfo(BANK2[230]), DHCPClient(BANK0[32]), ARPResolve@packet(BANK0[28]), 
		 -> ARPProcess@packet(BANK0[28]), ARPSendPkt@packet(COMRAM[28]), remoteNode(BANK1[10]), AppConfig(BANK1[51]), 
		 -> m_messageBuffer(BIGRAM[500]), 

    MACGetArray@val	PTR unsigned char  size(2) Largest target is 500
		 -> CalcIPBufferChecksum@DataBuffer(BANK0[20]), MACGetHeader@header(BANK0[20]), UDPProcess@h(BANK0[8]), IPGetHeader@header(BANK0[20]), 
		 -> ICMPProcess@dwVal(BANK0[4]), DHCPClient(BANK0[32]), ARPProcess@packet(BANK0[28]), m_messageBuffer(BIGRAM[500]), 

    CalcIPBufferChecksum@DataPtr	PTR unsigned int  size(1) Largest target is 20
		 -> CalcIPBufferChecksum@DataBuffer(BANK0[20]), 

    MACPutHeader@remote	PTR struct . size(2) Largest target is 230
		 -> UDPSocketInfo.remote(BANK2[10]), UDPSocketInfo(BANK2[230]), ARPResolve@packet(BANK0[28]), ARPProcess@packet(BANK0[28]), 
		 -> ARPSendPkt@packet(COMRAM[28]), remoteNode(BANK1[10]), 

    MACGetHeader@type	PTR unsigned char  size(1) Largest target is 1
		 -> StackTask@cFrameType(BANK0[1]), 

    MACGetHeader@remote	PTR struct . size(2) Largest target is 10
		 -> remoteNode(BANK1[10]), 

    FindMatchingSocket@h	PTR struct . size(1) Largest target is 8
		 -> UDPProcess@h(BANK0[8]), 

    FindMatchingSocket@p	PTR struct . size(2) Largest target is 230
		 -> UDPSocketInfo(BANK2[230]), 

    FindMatchingSocket@remoteNode	PTR struct . size(2) Largest target is 10
		 -> remoteNode(BANK1[10]), 

    UDPProcess@localIP	PTR struct . size(1) Largest target is 4
		 -> StackTask@tempLocalIP(BANK0[4]), 

    UDPProcess@remoteNode	PTR struct . size(2) Largest target is 10
		 -> remoteNode(BANK1[10]), 

    UDPGetArray@cData	PTR unsigned char  size(2) Largest target is 500
		 -> DHCPClient(BANK0[32]), m_messageBuffer(BIGRAM[500]), 

    UDPGet@v	PTR unsigned char  size(1) Largest target is 32
		 -> _DHCPReceive@tempServerID(BANK0[4]), _DHCPReceive@j(BANK0[1]), _DHCPReceive@v(BANK0[1]), _DHCPReceive@type(BANK0[1]), 
		 -> DHCPClient.dwLeaseTime(BANK0[4]), DHCPClient(BANK0[32]), 

    UDPFlush@p	PTR struct . size(2) Largest target is 230
		 -> UDPSocketInfo(BANK2[230]), 

    sp__UDPPutROMString	PTR const unsigned char  size(2) Largest target is 0

    sp__UDPPutString	PTR unsigned char  size(2) Largest target is 0

    UDPPutArray@cData	PTR unsigned char  size(2) Largest target is 500
		 -> DHCPClient(BANK0[32]), AppConfig(BANK1[51]), m_messageBuffer(BIGRAM[500]), 

    UDPOpenEx@p	PTR struct . size(2) Largest target is 230
		 -> UDPSocketInfo(BANK2[230]), 

    SwapIPHeader@h	PTR struct _IP_HEADER size(1) Largest target is 20
		 -> IPPutHeader@header(BANK0[20]), IPGetHeader@header(BANK0[20]), 

    IPPutHeader@remote	PTR struct . size(2) Largest target is 230
		 -> UDPSocketInfo.remote(BANK2[10]), UDPSocketInfo(BANK2[230]), remoteNode(BANK1[10]), 

    IPGetHeader@len	PTR unsigned int  size(1) Largest target is 2
		 -> StackTask@dataCount(BANK0[2]), 

    IPGetHeader@protocol	PTR unsigned char  size(1) Largest target is 1
		 -> StackTask@cIPFrameType(BANK0[1]), 

    IPGetHeader@remote	PTR struct . size(2) Largest target is 10
		 -> remoteNode(BANK1[10]), 

    IPGetHeader@localIP	PTR struct . size(1) Largest target is 4
		 -> StackTask@tempLocalIP(BANK0[4]), 

    ICMPProcess@remote	PTR struct . size(2) Largest target is 10
		 -> remoteNode(BANK1[10]), 

    SwapARPPacket@p	PTR struct . size(1) Largest target is 28
		 -> ARPResolve@packet(BANK0[28]), ARPProcess@packet(BANK0[28]), ARPSendPkt@packet(COMRAM[28]), 

    ARPIsResolved@MACAddr	PTR struct . size(2) Largest target is 230
		 -> UDPSocketInfo.remote(BANK2[10]), UDPSocketInfo(BANK2[230]), 

    ARPIsResolved@IPAddr	PTR struct . size(2) Largest target is 230
		 -> UDPSocketInfo.remote(BANK2[10]), UDPSocketInfo(BANK2[230]), 

    ARPResolve@IPAddr	PTR struct . size(2) Largest target is 230
		 -> UDPSocketInfo.remote(BANK2[10]), UDPSocketInfo(BANK2[230]), 

    ARPPut@packet	PTR struct . size(1) Largest target is 28
		 -> ARPResolve@packet(BANK0[28]), ARPProcess@packet(BANK0[28]), ARPSendPkt@packet(COMRAM[28]), 

    sp__strncpy	PTR unsigned char  size(2) Largest target is 0

    sp__strnchr	PTR unsigned char  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    FormatNetBIOSName@Name	PTR unsigned char  size(2) Largest target is 51
		 -> AppConfig(BANK1[51]), 

    sp__strupr	PTR unsigned char  size(2) Largest target is 51
		 -> AppConfig(BANK1[51]), 

    strupr@s	PTR unsigned char  size(2) Largest target is 51
		 -> AppConfig(BANK1[51]), 

    strupr@t	PTR unsigned char  size(2) Largest target is 51
		 -> AppConfig(BANK1[51]), 

    CalcIPChecksum@buffer	PTR unsigned char  size(1) Largest target is 20
		 -> UDPProcess@pseudoHeader(BANK0[12]), UDPFlush@pseudoHeader(BANK0[12]), IPPutHeader@header(BANK0[20]), 

    CalcIPChecksum@val	PTR unsigned int  size(1) Largest target is 20
		 -> UDPProcess@pseudoHeader(BANK0[12]), UDPFlush@pseudoHeader(BANK0[12]), IPPutHeader@header(BANK0[20]), 

    sp__memcpy	PTR void  size(2) Largest target is 230
		 -> UDPSocketInfo.remote(BANK2[10]), UDPSocketInfo(BANK2[230]), ARPResolve@packet(BANK0[28]), ARPProcess@packet(BANK0[28]), 
		 -> ARPSendPkt@packet(COMRAM[28]), remoteNode(BANK1[10]), AppConfig.MyMACAddr(BANK1[6]), AppConfig(BANK1[51]), 

    SendUDPMessage@message	PTR unsigned char  size(2) Largest target is 500
		 -> m_messageBuffer(BIGRAM[500]), 

    sp__ltoa	PTR unsigned char  size(2) Largest target is 3935
		 -> RAM(DATA[3935]), 

    sp__memset	PTR void  size(2) Largest target is 230
		 -> UDPSocketInfo.remote(BANK2[10]), UDPSocketInfo(BANK2[230]), LCDText(BANK3[33]), CheckKeypad@buff(BANK2[8]), 
		 -> m_NBSNodeInfo(BANK1[10]), 

    MiscHexStringToByte@value	PTR unsigned char  size(1) Largest target is 18
		 -> InitializeBoard@macArray(BANK0[18]), 

    DoorSwitchUpdateConfig@configData	PTR struct _CONFIG size(2) Largest target is 8
		 -> m_config(BANK1[8]), 

    DoorIndicatorUpdateConfig@configData	PTR struct _CONFIG size(2) Largest target is 8
		 -> m_config(BANK1[8]), 


Critical Paths under _main in COMRAM

    _StackInit->_LFSRSeedRand
    _UDPInit->_UDPClose
    _MACInit->_WritePHYReg
    _GenerateRandomDWORD->_LFSRSeedRand
    _LFSRSeedRand->_LFSRRand
    _DHCPDisable->_UDPClose
    _ProcessStateDoorSwitchPressedTooLong->_Beep
    _setDoorOpen->_Beep
    _NDCResetState->_TickGet
    _NDCFSM->_UDPIsGetReady
    _OpenUDPsocket->_UDPOpenEx
    _KeyPressedResetIdleTimer->_TickGet
    _HandleReceivedBytes->_UDPGetArray
    _HandleConfigData->_UDPGetArray
    _DoorSwitchUpdateConfig->___awdiv
    _DoorIndicatorUpdateConfig->___awdiv
    _Beep->_TickGet
    _HandleConnectionResponse->_UDPGetArray
    _CheckWaitForCodeTimer->_TickGet
    _ultoa->___lldiv
    _StackTask->_MACGetHeader
    _ARPResolve->_ARPPut
    _UDPProcess->_FindMatchingSocket
    _FindMatchingSocket->_memcpy
    _MACGetHeader->_memcpy
    _IPGetHeader->_MACCalcRxChecksum
    _ICMPProcess->_MACCalcRxChecksum
    _MACMemCopyAsync->_MACPut
    _MACCalcRxChecksum->_CalcIPBufferChecksum
    _DHCPTask->_UDPIsGetReady
    ___lwmod->_LFSRRand
    _UDPPutArray->_MACPutArray
    _UDPPut->_MACPut
    _UDPFlush->_CalcIPChecksum
    _IPPutHeader->_CalcIPChecksum
    _SwapIPHeader->_swaps
    _CalcIPBufferChecksum->_MACGetArray
    __DHCPReceive->_UDPGetArray
    _UDPGetArray->_MACGetArray
    _UDPDiscard->_MACDiscardRx
    _UDPOpenEx->_memcpy
    _UDPSetTxBuffer->_MACSetWritePtr
    _UDPIsGetReady->_UDPSetRxBuffer
    _UDPSetRxBuffer->_IPSetRxBuffer
    _IPSetRxBuffer->_MACSetReadPtrInRx
    _MACIsLinked->_ReadPHYReg
    _DHCPInit->_UDPClose
    _ARPProcess->_ARPPut
    _ARPPut->_MACPutHeader
    _SwapARPPacket->_swaps
    _MACPutHeader->_MACPutArray
    _MACIsTxReady->_MACFlush
    _MACFlush->_TickGet
    _CheckHeartBeatTimer->_TickGet
    _CheckFlashingLEDTimer->_TickGet
    _CheckConnectionResponseWaitTimer->_TickGet
    _CheckConfigDataWaitTimer->_TickGet
    _InitializeBoard->_MiscHexStringToByte
    _InitAppConfig->_memcpy
    _FormatNetBIOSName->_strupr

Critical Paths under _LowISR in COMRAM

    _RTC->_BeepTimerUpdate
    _BeepTimerUpdate->i1_TickGet

Critical Paths under _HighISR in COMRAM

    None.

Critical Paths under _main in BANK0

    _StackInit->_GenerateRandomDWORD
    _GenerateRandomDWORD->_LFSRRand
    _LFSRSeedRand->_LFSRRand
    _SendDoorSwitchPressedTooLongEvent->_SendUDPMessage
    _SendDoorSwitchPressedEvent->_SendUDPMessage
    _SendDoorOpenTooLongEvent->_SendUDPMessage
    _SendDoorClosedEvent->_SendUDPMessage
    _SendDoorOpenEvent->_SendUDPMessage
    _SendHeartBeat->_SendUDPMessage
    _SendFirstConnectionMadeEvent->_SendUDPMessage
    _SendDeviceReadySignal->_SendUDPMessage
    _SendConnectionRequest->_SendUDPMessage
    _OpenUDPsocket->_UDPOpenEx
    _HandleReceivedBytes->_SendVersionString
    _SendVersionString->_SendUDPMessage
    _SendDoorTimerExpiredEvent->_SendUDPMessage
    _SendDoorStatus->_SendUDPMessage
    _HandleConfigData->_DoorIndicatorUpdateConfig
    _HandleConfigData->_DoorSwitchUpdateConfig
    _SendGetConfigData->_SendUDPMessage
    _CheckKeypad->_SendUDPMessage
    _ltoa->_ultoa
    _SendUDPMessage->_StackTask
    _StackTask->_DHCPTask
    _UDPTask->_ARPResolve
    _UDPProcess->_CalcIPBufferChecksum
    _IPGetHeader->_MACCalcRxChecksum
    _ICMPProcess->_MACCalcRxChecksum
    _MACCalcRxChecksum->_CalcIPBufferChecksum
    _DHCPTask->__DHCPSend
    ___lwmod->_LFSRRand
    __DHCPSend->_UDPFlush
    _UDPFlush->_CalcIPBufferChecksum

Critical Paths under _LowISR in BANK0

    None.

Critical Paths under _HighISR in BANK0

    None.

Critical Paths under _main in BANK1

    _SendDoorSwitchPressedTooLongEvent->_SendUDPMessage
    _SendDoorSwitchPressedEvent->_SendUDPMessage
    _SendDoorOpenTooLongEvent->_SendUDPMessage
    _SendDoorClosedEvent->_SendUDPMessage
    _SendDoorOpenEvent->_SendUDPMessage
    _NDCFSM->_HandleReceivedBytes
    _SendHeartBeat->_SendUDPMessage
    _SendFirstConnectionMadeEvent->_SendUDPMessage
    _SendDeviceReadySignal->_SendUDPMessage
    _SendConnectionRequest->_SendUDPMessage
    _HandleReceivedBytes->_SendVersionString
    _SendVersionString->_SendUDPMessage
    _SendDoorTimerExpiredEvent->_SendUDPMessage
    _SendDoorStatus->_SendUDPMessage
    _SendGetConfigData->_SendUDPMessage
    _CheckKeypad->_SendUDPMessage

Critical Paths under _LowISR in BANK1

    None.

Critical Paths under _HighISR in BANK1

    None.

Critical Paths under _main in BANK2

    _NDCFSM->_CheckKeypad

Critical Paths under _LowISR in BANK2

    None.

Critical Paths under _HighISR in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _LowISR in BANK3

    None.

Critical Paths under _HighISR in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _LowISR in BANK4

    None.

Critical Paths under _HighISR in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _LowISR in BANK5

    None.

Critical Paths under _HighISR in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _LowISR in BANK6

    None.

Critical Paths under _HighISR in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _LowISR in BANK7

    None.

Critical Paths under _HighISR in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _LowISR in BANK8

    None.

Critical Paths under _HighISR in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _LowISR in BANK9

    None.

Critical Paths under _HighISR in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _LowISR in BANK10

    None.

Critical Paths under _HighISR in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _LowISR in BANK11

    None.

Critical Paths under _HighISR in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _LowISR in BANK12

    None.

Critical Paths under _HighISR in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _LowISR in BANK13

    None.

Critical Paths under _HighISR in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _LowISR in BANK14

    None.

Critical Paths under _HighISR in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Critical Paths under _LowISR in BANK15

    None.

Critical Paths under _HighISR in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 4     4      0 3024837
                                             11 BANK1      4     4      0
                         _DHCPEnable
                        _DHCPIsBound
                      _InitAppConfig
                    _InitializeBoard
                        _MACIsLinked
                             _NDCFSM
                        _NDCInitData
                      _NDCResetState
               _ProcessDoorIndicator
                  _ProcessDoorSwitch
                          _StackInit
                          _StackTask
                            _TickGet
                           _TickInit
                            _XEEInit
 ---------------------------------------------------------------------------------
 (1) _XEEInit                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _TickInit                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _StackInit                                            4     4      0    2875
                                             42 BANK0      4     4      0
                            _ARPInit
                        _DHCPDisable
                           _DHCPInit
                _GenerateRandomDWORD
                       _LFSRSeedRand
                            _MACInit
                            _UDPInit
 ---------------------------------------------------------------------------------
 (2) _UDPInit                                              1     1      0     223
                                             28 COMRAM     1     1      0
                           _UDPClose
 ---------------------------------------------------------------------------------
 (2) _MACInit                                              1     1      0     617
                             _MACPut
                        _WritePHYReg
 ---------------------------------------------------------------------------------
 (3) _WritePHYReg                                          4     2      2     586
                                             27 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (2) _GenerateRandomDWORD                                 26    22      4    1170
                                             16 BANK0     26    22      4
                           _LFSRRand
                       _LFSRSeedRand
 ---------------------------------------------------------------------------------
 (2) _LFSRSeedRand                                         9     5      4     515
                                             30 COMRAM     9     5      4
                           _LFSRRand
 ---------------------------------------------------------------------------------
 (2) _DHCPDisable                                          1     1      0     124
                           _UDPClose
 ---------------------------------------------------------------------------------
 (2) _ARPInit                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _ProcessDoorSwitch                                    0     0      0  355465
         _ProcessStateDoorSwitchIdle
      _ProcessStateDoorSwitchPressed
_ProcessStateDoorSwitchPressedTooLon
 ---------------------------------------------------------------------------------
 (2) _ProcessStateDoorSwitchPressedTooLong                 0     0      0     802
                               _Beep
                _IsDoorSwitchPressed
 ---------------------------------------------------------------------------------
 (2) _ProcessStateDoorSwitchPressed                        0     0      0  176839
                _IsDoorSwitchPressed
  _SendDoorSwitchPressedTooLongEvent
 ---------------------------------------------------------------------------------
 (3) _SendDoorSwitchPressedTooLongEvent                    0     0      0  176839
                     _SendUDPMessage
 ---------------------------------------------------------------------------------
 (2) _ProcessStateDoorSwitchIdle                           0     0      0  177824
                _IsDoorSwitchPressed
         _ProcessDoorSwitchIsPressed
        _ProcessDoorSwitchIsReleased
 ---------------------------------------------------------------------------------
 (3) _ProcessDoorSwitchIsReleased                          0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _ProcessDoorSwitchIsPressed                           0     0      0  177824
              _NDCGetRelayActiveTime
         _SendDoorSwitchPressedEvent
                     _isOpenDoorFlag
                        _setDoorOpen
 ---------------------------------------------------------------------------------
 (4) _setDoorOpen                                          4     0      4     985
                                              0 BANK0      4     0      4
                               _Beep
              _NDCGetRelayActiveTime (ARG)
 ---------------------------------------------------------------------------------
 (4) _isOpenDoorFlag                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (4) _SendDoorSwitchPressedEvent                           0     0      0  176839
                     _SendUDPMessage
 ---------------------------------------------------------------------------------
 (4) _NDCGetRelayActiveTime                                2     0      2       0
                                             27 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (3) _IsDoorSwitchPressed                                  0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _ProcessDoorIndicator                                 0     0      0  708158
    _ProcessStateDoorIndicatorClosed
      _ProcessStateDoorIndicatorOpen
_ProcessStateDoorIndicatorOpenTooLon
 ---------------------------------------------------------------------------------
 (2) _ProcessStateDoorIndicatorOpenTooLong                 0     0      0  177641
                               _Beep
                _SendDoorClosedEvent
                _isDoorIndicatorOpen
 ---------------------------------------------------------------------------------
 (2) _ProcessStateDoorIndicatorOpen                        0     0      0  353678
                _SendDoorClosedEvent
           _SendDoorOpenTooLongEvent
                _isDoorIndicatorOpen
 ---------------------------------------------------------------------------------
 (3) _SendDoorOpenTooLongEvent                             0     0      0  176839
                     _SendUDPMessage
 ---------------------------------------------------------------------------------
 (3) _SendDoorClosedEvent                                  0     0      0  176839
                     _SendUDPMessage
 ---------------------------------------------------------------------------------
 (2) _ProcessStateDoorIndicatorClosed                      0     0      0  176839
       _ProcessDoorIndicatorIsClosed
         _ProcessDoorIndicatorIsOpen
                _isDoorIndicatorOpen
 ---------------------------------------------------------------------------------
 (3) _isDoorIndicatorOpen                                  0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _ProcessDoorIndicatorIsOpen                           0     0      0  176839
                  _SendDoorOpenEvent
 ---------------------------------------------------------------------------------
 (4) _SendDoorOpenEvent                                    0     0      0  176839
                     _SendUDPMessage
 ---------------------------------------------------------------------------------
 (3) _ProcessDoorIndicatorIsClosed                         0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _NDCResetState                                        0     0      0     287
                     _InitStartState
                            _TickGet
                           _UDPClose
 ---------------------------------------------------------------------------------
 (1) _NDCInitData                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _NDCFSM                                               0     0      0 1813387
           _CheckConfigDataWaitTimer
   _CheckConnectionResponseWaitTimer
                     _CheckDoorTimer
              _CheckFlashingLEDTimer
                _CheckHeartBeatTimer
                        _CheckKeypad
              _CheckWaitForCodeTimer
                   _HandleConfigData
           _HandleConnectionResponse
                _HandleReceivedBytes
                     _InitStartState
           _KeyPressedResetIdleTimer
                      _OpenUDPsocket
              _SendConnectionRequest
              _SendDeviceReadySignal
          _SendDoorTimerExpiredEvent
                      _SendHeartBeat
                      _UDPIsGetReady
                      _UDPIsPutReady
 ---------------------------------------------------------------------------------
 (2) _SendHeartBeat                                        4     4      0  353841
                                              5 BANK1      4     4      0
         _CheckIfFirstTimeConnection
       _SendFirstConnectionMadeEvent
                     _SendUDPMessage
                            _TickGet
 ---------------------------------------------------------------------------------
 (3) _SendFirstConnectionMadeEvent                         0     0      0  176839
                     _SendUDPMessage
 ---------------------------------------------------------------------------------
 (3) _CheckIfFirstTimeConnection                           0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _SendDeviceReadySignal                                0     0      0  176839
                     _SendUDPMessage
 ---------------------------------------------------------------------------------
 (2) _SendConnectionRequest                                4     4      0  177002
                                              5 BANK1      4     4      0
                     _SendUDPMessage
                            _TickGet
 ---------------------------------------------------------------------------------
 (2) _OpenUDPsocket                                        4     4      0   10135
                                             12 BANK0      4     4      0
                            _TickGet
                          _UDPOpenEx
                             _memset
 ---------------------------------------------------------------------------------
 (2) _KeyPressedResetIdleTimer                             4     4      0     163
                                             35 COMRAM     4     4      0
                            _TickGet
 ---------------------------------------------------------------------------------
 (2) _InitStartState                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _HandleReceivedBytes                                  4     4      0  542798
                                              7 BANK1      4     4      0
                               _Beep
                   _HandleConfigData
                     _SendDoorStatus
          _SendDoorTimerExpiredEvent
                  _SendVersionString
                            _TickGet
                           _UDPClose
                        _UDPGetArray
 ---------------------------------------------------------------------------------
 (3) _SendVersionString                                    3     3      0  177096
                                            102 BANK0      1     1      0
                                              5 BANK1      2     2      0
                     _SendUDPMessage
 ---------------------------------------------------------------------------------
 (2) _SendDoorTimerExpiredEvent                            0     0      0  176839
                     _SendUDPMessage
 ---------------------------------------------------------------------------------
 (3) _SendDoorStatus                                       0     0      0  176839
             _DoorIndicatorGetStatus
                     _SendUDPMessage
 ---------------------------------------------------------------------------------
 (4) _DoorIndicatorGetStatus                               0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _HandleConfigData                                    14    14      0    6562
                                              4 BANK0     14    14      0
          _DoorIndicatorUpdateConfig
             _DoorSwitchUpdateConfig
                     _GetWiegandCode
                            _TickGet
                        _UDPGetArray
 ---------------------------------------------------------------------------------
 (4) _DoorSwitchUpdateConfig                               6     4      2     862
                                             35 COMRAM     2     0      2
                                              0 BANK0      4     4      0
                            ___awdiv
 ---------------------------------------------------------------------------------
 (4) _DoorIndicatorUpdateConfig                            6     4      2     862
                                             35 COMRAM     2     0      2
                                              0 BANK0      4     4      0
                            ___awdiv
 ---------------------------------------------------------------------------------
 (5) ___awdiv                                              8     4      4     717
                                             27 COMRAM     8     4      4
 ---------------------------------------------------------------------------------
 (3) _Beep                                                 4     0      4     802
                                             35 COMRAM     4     0      4
                            _TickGet
 ---------------------------------------------------------------------------------
 (2) _HandleConnectionResponse                             0     0      0  181375
                  _SendGetConfigData
                            _TickGet
                        _UDPGetArray
 ---------------------------------------------------------------------------------
 (3) _SendGetConfigData                                    0     0      0  176839
                     _SendUDPMessage
 ---------------------------------------------------------------------------------
 (2) _CheckWaitForCodeTimer                               12    12      0     163
                                              0 BANK0     12    12      0
                            _TickGet
 ---------------------------------------------------------------------------------
 (2) _CheckKeypad                                         27    27      0  183922
                                              5 BANK1      3     3      0
                                              0 BANK2     20    20      0
                     _GetWiegandCode
                     _SendUDPMessage
                            _TickGet
                               _ltoa
                             _memset
 ---------------------------------------------------------------------------------
 (3) _ltoa                                                10     2      8    3231
                                             13 BANK0     10     2      8
                              _ultoa
 ---------------------------------------------------------------------------------
 (4) _ultoa                                               13     5      8    2542
                                              0 BANK0     13     5      8
                            ___lldiv
                            ___llmod
 ---------------------------------------------------------------------------------
 (5) ___llmod                                              9     1      8     536
                                             27 COMRAM     9     1      8
 ---------------------------------------------------------------------------------
 (5) ___lldiv                                             13     5      8    1113
                                             27 COMRAM    13     5      8
 ---------------------------------------------------------------------------------
 (4) _SendUDPMessage                                       7     2      5  176839
                                            100 BANK0      2     2      0
                                              0 BANK1      5     0      5
                            _DelayMs
                          _StackTask
                           _UDPFlush
                      _UDPIsPutReady
                        _UDPPutArray
 ---------------------------------------------------------------------------------
 (1) _StackTask                                           21    21      0  140860
                                             79 BANK0     21    21      0
                         _ARPProcess
                           _DHCPInit
                        _DHCPIsBound
                           _DHCPTask
                        _ICMPProcess
                        _IPGetHeader
                       _MACGetHeader
                        _MACIsLinked
                         _UDPDiscard
                         _UDPProcess
                            _UDPTask
 ---------------------------------------------------------------------------------
 (2) _UDPTask                                              5     5      0   14246
                                             46 BANK0      5     5      0
                      _ARPIsResolved
                         _ARPResolve
                      _TickGetDiv256
 ---------------------------------------------------------------------------------
 (3) _TickGetDiv256                                        8     4      4     145
                                             27 COMRAM     8     4      4
                        _GetTickCopy
 ---------------------------------------------------------------------------------
 (3) _ARPResolve                                          46    44      2   13271
                                              0 BANK0     46    44      2
                             _ARPPut
 ---------------------------------------------------------------------------------
 (3) _ARPIsResolved                                       16    12      4     297
                                             27 COMRAM     4     0      4
                                              0 BANK0     12    12      0
 ---------------------------------------------------------------------------------
 (2) _UDPProcess                                          30    25      5   14517
                                             29 BANK0     30    25      5
               _CalcIPBufferChecksum
                     _CalcIPChecksum
                 _FindMatchingSocket
                      _IPSetRxBuffer
                       _MACDiscardRx
                        _MACGetArray
                              _swaps
 ---------------------------------------------------------------------------------
 (3) _FindMatchingSocket                                  16    13      3    3241
                                             37 COMRAM     3     0      3
                                              0 BANK0     13    13      0
                             _memcpy
 ---------------------------------------------------------------------------------
 (2) _MACGetHeader                                        23    20      3    8020
                                             37 COMRAM     3     0      3
                                              0 BANK0     20    20      0
                       _MACDiscardRx
                        _MACGetArray
                             _memcpy
                              _swaps
 ---------------------------------------------------------------------------------
 (2) _IPGetHeader                                         31    27      4   10715
                                             37 BANK0     31    27      4
                  _MACCalcRxChecksum
                        _MACGetArray
                  _MACSetReadPtrInRx
                       _SwapIPHeader
 ---------------------------------------------------------------------------------
 (2) _ICMPProcess                                          8     4      4   23174
                                             37 BANK0      8     4      4
                        _IPPutHeader
                  _MACCalcRxChecksum
                           _MACFlush
                        _MACGetArray
                   _MACIsMemCopyDone
                       _MACIsTxReady
                    _MACMemCopyAsync
                        _MACPutArray
                     _MACSetWritePtr
 ---------------------------------------------------------------------------------
 (3) _MACMemCopyAsync                                     16    10      6    1270
                                             28 COMRAM    10     4      6
                                              0 BANK0      6     6      0
                             _MACGet
                             _MACPut
 ---------------------------------------------------------------------------------
 (3) _MACIsMemCopyDone                                     0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _MACCalcRxChecksum                                   10     6      4    4169
                                             38 COMRAM     2     2      0
                                             29 BANK0      8     4      4
               _CalcIPBufferChecksum
 ---------------------------------------------------------------------------------
 (2) _DHCPTask                                            13    13      0   50729
                                             66 BANK0     13    13      0
                           _LFSRRand
                        _MACIsLinked
                            _TickGet
                           _UDPClose
                      _UDPIsGetReady
                      _UDPIsPutReady
                          _UDPOpenEx
                       __DHCPReceive
                          __DHCPSend
                            ___lwmod
                             _memset
 ---------------------------------------------------------------------------------
 (3) ___lwmod                                              5     1      4    1144
                                             30 COMRAM     5     1      4
                           _LFSRRand (ARG)
 ---------------------------------------------------------------------------------
 (3) __DHCPSend                                            9     8      1   27634
                                             57 BANK0      9     8      1
                           _UDPFlush
                             _UDPPut
                        _UDPPutArray
 ---------------------------------------------------------------------------------
 (4) _UDPPutArray                                          6     2      4    4200
                                             31 COMRAM     6     2      4
                        _MACPutArray
 ---------------------------------------------------------------------------------
 (4) _UDPPut                                               1     1      0      62
                                             28 COMRAM     1     1      0
                             _MACPut
 ---------------------------------------------------------------------------------
 (4) _UDPFlush                                            28    28      0   22399
                                             29 BANK0     28    28      0
               _CalcIPBufferChecksum
                     _CalcIPChecksum
                        _IPPutHeader
                           _MACFlush
                        _MACPutArray
                      _MACSetReadPtr
                     _MACSetWritePtr
                              _swaps
 ---------------------------------------------------------------------------------
 (5) _MACSetReadPtr                                        4     2      2     369
                                             27 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (3) _IPPutHeader                                         25    20      5   10945
                                              0 BANK0     25    20      5
                     _CalcIPChecksum
                        _MACPutArray
                       _MACPutHeader
                       _SwapIPHeader
 ---------------------------------------------------------------------------------
 (3) _SwapIPHeader                                         1     1      0    2766
                                             32 COMRAM     1     1      0
                              _swaps
 ---------------------------------------------------------------------------------
 (3) _CalcIPChecksum                                      12    10      2     940
                                             27 COMRAM    12    10      2
 ---------------------------------------------------------------------------------
 (3) _CalcIPBufferChecksum                                33    31      2    3363
                                             34 COMRAM     4     2      2
                                              0 BANK0     29    29      0
                        _MACGetArray
 ---------------------------------------------------------------------------------
 (3) __DHCPReceive                                        13    13      0    8482
                                              0 BANK0     13    13      0
                         _UDPDiscard
                             _UDPGet
                        _UDPGetArray
                     _UDPSetRxBuffer
 ---------------------------------------------------------------------------------
 (4) _UDPGetArray                                          6     2      4    4373
                                             34 COMRAM     6     2      4
                        _MACGetArray
 ---------------------------------------------------------------------------------
 (4) _UDPGet                                               1     1      0    1135
                                             27 COMRAM     1     1      0
                             _MACGet
 ---------------------------------------------------------------------------------
 (4) _MACGet                                               0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _UDPDiscard                                           0     0      0     102
                       _MACDiscardRx
 ---------------------------------------------------------------------------------
 (3) _UDPOpenEx                                           14     5      9    7431
                                             37 COMRAM     2     2      0
                                              0 BANK0     12     3      9
                             _memcpy
                             _memset
 ---------------------------------------------------------------------------------
 (3) _memset                                               8     2      6    2541
                                             27 COMRAM     8     2      6
 ---------------------------------------------------------------------------------
 (3) _UDPIsPutReady                                        3     1      2    1468
                                             36 COMRAM     3     1      2
                       _MACIsTxReady
                     _UDPSetTxBuffer
 ---------------------------------------------------------------------------------
 (4) _UDPSetTxBuffer                                       2     0      2    1015
                                             31 COMRAM     2     0      2
                     _MACSetWritePtr
 ---------------------------------------------------------------------------------
 (3) _UDPIsGetReady                                        3     1      2    1504
                                             37 COMRAM     3     1      2
                     _UDPSetRxBuffer
 ---------------------------------------------------------------------------------
 (4) _UDPSetRxBuffer                                       2     0      2    1442
                                             35 COMRAM     2     0      2
                      _IPSetRxBuffer
 ---------------------------------------------------------------------------------
 (3) _IPSetRxBuffer                                        2     0      2     772
                                             33 COMRAM     2     0      2
                  _MACSetReadPtrInRx
 ---------------------------------------------------------------------------------
 (4) _MACSetReadPtrInRx                                    6     4      2     437
                                             27 COMRAM     6     4      2
 ---------------------------------------------------------------------------------
 (2) _MACIsLinked                                          0     0      0     102
                         _ReadPHYReg
 ---------------------------------------------------------------------------------
 (3) _ReadPHYReg                                           5     3      2     102
                                             27 COMRAM     5     3      2
 ---------------------------------------------------------------------------------
 (3) _LFSRRand                                            19    17      2      68
                                             27 COMRAM     3     1      2
                                              0 BANK0     16    16      0
 ---------------------------------------------------------------------------------
 (2) _DHCPIsBound                                          1     1      0       0
 ---------------------------------------------------------------------------------
 (2) _DHCPInit                                             2     2      0     192
                                             28 COMRAM     1     1      0
                           _UDPClose
 ---------------------------------------------------------------------------------
 (2) _ARPProcess                                          28    28      0   18531
                                              0 BANK0     28    28      0
                             _ARPPut
                       _MACDiscardRx
                        _MACGetArray
                      _SwapARPPacket
 ---------------------------------------------------------------------------------
 (3) _MACGetArray                                          7     3      4    2323
                                             27 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (3) _MACDiscardRx                                         2     2      0     102
                                             27 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (4) _ARPPut                                               2     2      0   12727
                                             38 COMRAM     2     2      0
                           _MACFlush
                       _MACIsTxReady
                        _MACPutArray
                       _MACPutHeader
                     _MACSetWritePtr
                      _SwapARPPacket
                             _memcpy
 ---------------------------------------------------------------------------------
 (5) _SwapARPPacket                                        1     1      0    2766
                                             32 COMRAM     1     1      0
                              _swaps
 ---------------------------------------------------------------------------------
 (6) _swaps                                                5     3      2    2484
                                             27 COMRAM     5     3      2
 ---------------------------------------------------------------------------------
 (5) _MACSetWritePtr                                       4     2      2     801
                                             27 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (5) _MACPutHeader                                         7     2      5    3373
                                             31 COMRAM     7     2      5
                             _MACPut
                        _MACPutArray
 ---------------------------------------------------------------------------------
 (6) _MACPutArray                                          4     0      4    2497
                                             27 COMRAM     4     0      4
 ---------------------------------------------------------------------------------
 (6) _MACPut                                               1     1      0      31
                                             27 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (5) _MACIsTxReady                                         0     0      0     360
                           _MACFlush
                            _TickGet
 ---------------------------------------------------------------------------------
 (6) _MACFlush                                             1     1      0     197
                                             35 COMRAM     1     1      0
                            _TickGet
 ---------------------------------------------------------------------------------
 (5) _DelayMs                                              7     5      2     911
                                             27 COMRAM     7     5      2
 ---------------------------------------------------------------------------------
 (4) _GetWiegandCode                                       8     4      4     102
                                             27 COMRAM     8     4      4
 ---------------------------------------------------------------------------------
 (2) _CheckHeartBeatTimer                                  4     4      0     287
                                             35 COMRAM     4     4      0
                            _TickGet
                           _UDPClose
 ---------------------------------------------------------------------------------
 (3) _UDPClose                                             1     1      0     124
                                             27 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _CheckFlashingLEDTimer                                4     4      0     163
                                             35 COMRAM     4     4      0
                            _TickGet
 ---------------------------------------------------------------------------------
 (2) _CheckDoorTimer                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _CheckConnectionResponseWaitTimer                     4     4      0     163
                                             35 COMRAM     4     4      0
                            _TickGet
 ---------------------------------------------------------------------------------
 (2) _CheckConfigDataWaitTimer                             4     4      0     163
                                             35 COMRAM     4     4      0
                            _TickGet
 ---------------------------------------------------------------------------------
 (1) _TickGet                                              8     4      4     163
                                             27 COMRAM     8     4      4
                        _GetTickCopy
 ---------------------------------------------------------------------------------
 (2) _GetTickCopy                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _InitializeBoard                                     25    23      2     698
                                             30 COMRAM     3     1      2
                                              0 BANK0     22    22      0
                _MiscHexStringToByte
 ---------------------------------------------------------------------------------
 (2) _MiscHexStringToByte                                  3     3      0     407
                                             27 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (1) _InitAppConfig                                        0     0      0    2842
                  _FormatNetBIOSName
                             _memcpy
 ---------------------------------------------------------------------------------
 (5) _memcpy                                              10     4      6    2310
                                             27 COMRAM    10     4      6
 ---------------------------------------------------------------------------------
 (2) _FormatNetBIOSName                                    3     1      2     532
                                             32 COMRAM     3     1      2
                             _strupr
 ---------------------------------------------------------------------------------
 (3) _strupr                                               5     3      2     223
                                             27 COMRAM     5     3      2
 ---------------------------------------------------------------------------------
 (1) _DHCPEnable                                           1     1      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (14) _LowISR                                              7     7      0      89
                                             20 COMRAM     7     7      0
                                _RTC
                         _TickUpdate
 ---------------------------------------------------------------------------------
 (15) _TickUpdate                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (15) _RTC                                                 0     0      0      89
                    _BeepTimerUpdate
           _DoorIndicatorTimerUpdate
              _DoorSwitchTimerUpdate
                            _NDCTick
 ---------------------------------------------------------------------------------
 (16) _NDCTick                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (16) _DoorSwitchTimerUpdate                               0     0      0       0
 ---------------------------------------------------------------------------------
 (16) _DoorIndicatorTimerUpdate                            0     0      0       0
 ---------------------------------------------------------------------------------
 (16) _BeepTimerUpdate                                    12    12      0      89
                                              8 COMRAM    12    12      0
                          i1_TickGet
 ---------------------------------------------------------------------------------
 (17) i1_TickGet                                           8     4      4      89
                                              0 COMRAM     8     4      4
                      i1_GetTickCopy
 ---------------------------------------------------------------------------------
 (18) i1_GetTickCopy                                       0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 18
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (19) _HighISR                                             0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 19
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _DHCPEnable
   _DHCPIsBound
   _InitAppConfig
     _FormatNetBIOSName
       _strupr
     _memcpy
   _InitializeBoard
     _MiscHexStringToByte
   _MACIsLinked
     _ReadPHYReg
   _NDCFSM
     _CheckConfigDataWaitTimer
       _TickGet
         _GetTickCopy
     _CheckConnectionResponseWaitTimer
       _TickGet
         _GetTickCopy
     _CheckDoorTimer
     _CheckFlashingLEDTimer
       _TickGet
         _GetTickCopy
     _CheckHeartBeatTimer
       _TickGet
         _GetTickCopy
       _UDPClose
     _CheckKeypad
       _GetWiegandCode
       _SendUDPMessage
         _DelayMs
         _StackTask
           _ARPProcess
             _ARPPut
               _MACFlush
                 _TickGet
                   _GetTickCopy
               _MACIsTxReady
                 _MACFlush
                   _TickGet
                     _GetTickCopy
                 _TickGet
                   _GetTickCopy
               _MACPutArray
               _MACPutHeader
                 _MACPut
                 _MACPutArray
               _MACSetWritePtr
               _SwapARPPacket
                 _swaps
               _memcpy
             _MACDiscardRx
             _MACGetArray
             _SwapARPPacket
               _swaps
           _DHCPInit
             _UDPClose
           _DHCPIsBound
           _DHCPTask
             _LFSRRand
             _MACIsLinked
               _ReadPHYReg
             _TickGet
               _GetTickCopy
             _UDPClose
             _UDPIsGetReady
               _UDPSetRxBuffer
                 _IPSetRxBuffer
                   _MACSetReadPtrInRx
             _UDPIsPutReady
               _MACIsTxReady
                 _MACFlush
                   _TickGet
                     _GetTickCopy
                 _TickGet
                   _GetTickCopy
               _UDPSetTxBuffer
                 _MACSetWritePtr
             _UDPOpenEx
               _memcpy
               _memset
             __DHCPReceive
               _UDPDiscard
                 _MACDiscardRx
               _UDPGet
                 _MACGet
               _UDPGetArray
                 _MACGetArray
               _UDPSetRxBuffer
                 _IPSetRxBuffer
                   _MACSetReadPtrInRx
             __DHCPSend
               _UDPFlush
                 _CalcIPBufferChecksum
                   _MACGetArray
                 _CalcIPChecksum
                 _IPPutHeader
                   _CalcIPChecksum
                   _MACPutArray
                   _MACPutHeader
                     _MACPut
                     _MACPutArray
                   _SwapIPHeader
                     _swaps
                 _MACFlush
                   _TickGet
                     _GetTickCopy
                 _MACPutArray
                 _MACSetReadPtr
                 _MACSetWritePtr
                 _swaps
               _UDPPut
                 _MACPut
               _UDPPutArray
                 _MACPutArray
             ___lwmod
               _LFSRRand (ARG)
             _memset
           _ICMPProcess
             _IPPutHeader
               _CalcIPChecksum
               _MACPutArray
               _MACPutHeader
                 _MACPut
                 _MACPutArray
               _SwapIPHeader
                 _swaps
             _MACCalcRxChecksum
               _CalcIPBufferChecksum
                 _MACGetArray
             _MACFlush
               _TickGet
                 _GetTickCopy
             _MACGetArray
             _MACIsMemCopyDone
             _MACIsTxReady
               _MACFlush
                 _TickGet
                   _GetTickCopy
               _TickGet
                 _GetTickCopy
             _MACMemCopyAsync
               _MACGet
               _MACPut
             _MACPutArray
             _MACSetWritePtr
           _IPGetHeader
             _MACCalcRxChecksum
               _CalcIPBufferChecksum
                 _MACGetArray
             _MACGetArray
             _MACSetReadPtrInRx
             _SwapIPHeader
               _swaps
           _MACGetHeader
             _MACDiscardRx
             _MACGetArray
             _memcpy
             _swaps
           _MACIsLinked
             _ReadPHYReg
           _UDPDiscard
             _MACDiscardRx
           _UDPProcess
             _CalcIPBufferChecksum
               _MACGetArray
             _CalcIPChecksum
             _FindMatchingSocket
               _memcpy
             _IPSetRxBuffer
               _MACSetReadPtrInRx
             _MACDiscardRx
             _MACGetArray
             _swaps
           _UDPTask
             _ARPIsResolved
             _ARPResolve
               _ARPPut
                 _MACFlush
                   _TickGet
                     _GetTickCopy
                 _MACIsTxReady
                   _MACFlush
                     _TickGet
                       _GetTickCopy
                   _TickGet
                     _GetTickCopy
                 _MACPutArray
                 _MACPutHeader
                   _MACPut
                   _MACPutArray
                 _MACSetWritePtr
                 _SwapARPPacket
                   _swaps
                 _memcpy
             _TickGetDiv256
               _GetTickCopy
         _UDPFlush
           _CalcIPBufferChecksum
             _MACGetArray
           _CalcIPChecksum
           _IPPutHeader
             _CalcIPChecksum
             _MACPutArray
             _MACPutHeader
               _MACPut
               _MACPutArray
             _SwapIPHeader
               _swaps
           _MACFlush
             _TickGet
               _GetTickCopy
           _MACPutArray
           _MACSetReadPtr
           _MACSetWritePtr
           _swaps
         _UDPIsPutReady
           _MACIsTxReady
             _MACFlush
               _TickGet
                 _GetTickCopy
             _TickGet
               _GetTickCopy
           _UDPSetTxBuffer
             _MACSetWritePtr
         _UDPPutArray
           _MACPutArray
       _TickGet
         _GetTickCopy
       _ltoa
         _ultoa
           ___lldiv
           ___llmod
       _memset
     _CheckWaitForCodeTimer
       _TickGet
         _GetTickCopy
     _HandleConfigData
       _DoorIndicatorUpdateConfig
         ___awdiv
       _DoorSwitchUpdateConfig
         ___awdiv
       _GetWiegandCode
       _TickGet
         _GetTickCopy
       _UDPGetArray
         _MACGetArray
     _HandleConnectionResponse
       _SendGetConfigData
         _SendUDPMessage
           _DelayMs
           _StackTask
             _ARPProcess
               _ARPPut
                 _MACFlush
                   _TickGet
                     _GetTickCopy
                 _MACIsTxReady
                   _MACFlush
                     _TickGet
                       _GetTickCopy
                   _TickGet
                     _GetTickCopy
                 _MACPutArray
                 _MACPutHeader
                   _MACPut
                   _MACPutArray
                 _MACSetWritePtr
                 _SwapARPPacket
                   _swaps
                 _memcpy
               _MACDiscardRx
               _MACGetArray
               _SwapARPPacket
                 _swaps
             _DHCPInit
               _UDPClose
             _DHCPIsBound
             _DHCPTask
               _LFSRRand
               _MACIsLinked
                 _ReadPHYReg
               _TickGet
                 _GetTickCopy
               _UDPClose
               _UDPIsGetReady
                 _UDPSetRxBuffer
                   _IPSetRxBuffer
                     _MACSetReadPtrInRx
               _UDPIsPutReady
                 _MACIsTxReady
                   _MACFlush
                     _TickGet
                       _GetTickCopy
                   _TickGet
                     _GetTickCopy
                 _UDPSetTxBuffer
                   _MACSetWritePtr
               _UDPOpenEx
                 _memcpy
                 _memset
               __DHCPReceive
                 _UDPDiscard
                   _MACDiscardRx
                 _UDPGet
                   _MACGet
                 _UDPGetArray
                   _MACGetArray
                 _UDPSetRxBuffer
                   _IPSetRxBuffer
                     _MACSetReadPtrInRx
               __DHCPSend
                 _UDPFlush
                   _CalcIPBufferChecksum
                     _MACGetArray
                   _CalcIPChecksum
                   _IPPutHeader
                     _CalcIPChecksum
                     _MACPutArray
                     _MACPutHeader
                       _MACPut
                       _MACPutArray
                     _SwapIPHeader
                       _swaps
                   _MACFlush
                     _TickGet
                       _GetTickCopy
                   _MACPutArray
                   _MACSetReadPtr
                   _MACSetWritePtr
                   _swaps
                 _UDPPut
                   _MACPut
                 _UDPPutArray
                   _MACPutArray
               ___lwmod
                 _LFSRRand (ARG)
               _memset
             _ICMPProcess
               _IPPutHeader
                 _CalcIPChecksum
                 _MACPutArray
                 _MACPutHeader
                   _MACPut
                   _MACPutArray
                 _SwapIPHeader
                   _swaps
               _MACCalcRxChecksum
                 _CalcIPBufferChecksum
                   _MACGetArray
               _MACFlush
                 _TickGet
                   _GetTickCopy
               _MACGetArray
               _MACIsMemCopyDone
               _MACIsTxReady
                 _MACFlush
                   _TickGet
                     _GetTickCopy
                 _TickGet
                   _GetTickCopy
               _MACMemCopyAsync
                 _MACGet
                 _MACPut
               _MACPutArray
               _MACSetWritePtr
             _IPGetHeader
               _MACCalcRxChecksum
                 _CalcIPBufferChecksum
                   _MACGetArray
               _MACGetArray
               _MACSetReadPtrInRx
               _SwapIPHeader
                 _swaps
             _MACGetHeader
               _MACDiscardRx
               _MACGetArray
               _memcpy
               _swaps
             _MACIsLinked
               _ReadPHYReg
             _UDPDiscard
               _MACDiscardRx
             _UDPProcess
               _CalcIPBufferChecksum
                 _MACGetArray
               _CalcIPChecksum
               _FindMatchingSocket
                 _memcpy
               _IPSetRxBuffer
                 _MACSetReadPtrInRx
               _MACDiscardRx
               _MACGetArray
               _swaps
             _UDPTask
               _ARPIsResolved
               _ARPResolve
                 _ARPPut
                   _MACFlush
                     _TickGet
                       _GetTickCopy
                   _MACIsTxReady
                     _MACFlush
                       _TickGet
                         _GetTickCopy
                     _TickGet
                       _GetTickCopy
                   _MACPutArray
                   _MACPutHeader
                     _MACPut
                     _MACPutArray
                   _MACSetWritePtr
                   _SwapARPPacket
                     _swaps
                   _memcpy
               _TickGetDiv256
                 _GetTickCopy
           _UDPFlush
             _CalcIPBufferChecksum
               _MACGetArray
             _CalcIPChecksum
             _IPPutHeader
               _CalcIPChecksum
               _MACPutArray
               _MACPutHeader
                 _MACPut
                 _MACPutArray
               _SwapIPHeader
                 _swaps
             _MACFlush
               _TickGet
                 _GetTickCopy
             _MACPutArray
             _MACSetReadPtr
             _MACSetWritePtr
             _swaps
           _UDPIsPutReady
             _MACIsTxReady
               _MACFlush
                 _TickGet
                   _GetTickCopy
               _TickGet
                 _GetTickCopy
             _UDPSetTxBuffer
               _MACSetWritePtr
           _UDPPutArray
             _MACPutArray
       _TickGet
         _GetTickCopy
       _UDPGetArray
         _MACGetArray
     _HandleReceivedBytes
       _Beep
         _TickGet
           _GetTickCopy
       _HandleConfigData
         _DoorIndicatorUpdateConfig
           ___awdiv
         _DoorSwitchUpdateConfig
           ___awdiv
         _GetWiegandCode
         _TickGet
           _GetTickCopy
         _UDPGetArray
           _MACGetArray
       _SendDoorStatus
         _DoorIndicatorGetStatus
         _SendUDPMessage
           _DelayMs
           _StackTask
             _ARPProcess
               _ARPPut
                 _MACFlush
                   _TickGet
                     _GetTickCopy
                 _MACIsTxReady
                   _MACFlush
                     _TickGet
                       _GetTickCopy
                   _TickGet
                     _GetTickCopy
                 _MACPutArray
                 _MACPutHeader
                   _MACPut
                   _MACPutArray
                 _MACSetWritePtr
                 _SwapARPPacket
                   _swaps
                 _memcpy
               _MACDiscardRx
               _MACGetArray
               _SwapARPPacket
                 _swaps
             _DHCPInit
               _UDPClose
             _DHCPIsBound
             _DHCPTask
               _LFSRRand
               _MACIsLinked
                 _ReadPHYReg
               _TickGet
                 _GetTickCopy
               _UDPClose
               _UDPIsGetReady
                 _UDPSetRxBuffer
                   _IPSetRxBuffer
                     _MACSetReadPtrInRx
               _UDPIsPutReady
                 _MACIsTxReady
                   _MACFlush
                     _TickGet
                       _GetTickCopy
                   _TickGet
                     _GetTickCopy
                 _UDPSetTxBuffer
                   _MACSetWritePtr
               _UDPOpenEx
                 _memcpy
                 _memset
               __DHCPReceive
                 _UDPDiscard
                   _MACDiscardRx
                 _UDPGet
                   _MACGet
                 _UDPGetArray
                   _MACGetArray
                 _UDPSetRxBuffer
                   _IPSetRxBuffer
                     _MACSetReadPtrInRx
               __DHCPSend
                 _UDPFlush
                   _CalcIPBufferChecksum
                     _MACGetArray
                   _CalcIPChecksum
                   _IPPutHeader
                     _CalcIPChecksum
                     _MACPutArray
                     _MACPutHeader
                       _MACPut
                       _MACPutArray
                     _SwapIPHeader
                       _swaps
                   _MACFlush
                     _TickGet
                       _GetTickCopy
                   _MACPutArray
                   _MACSetReadPtr
                   _MACSetWritePtr
                   _swaps
                 _UDPPut
                   _MACPut
                 _UDPPutArray
                   _MACPutArray
               ___lwmod
                 _LFSRRand (ARG)
               _memset
             _ICMPProcess
               _IPPutHeader
                 _CalcIPChecksum
                 _MACPutArray
                 _MACPutHeader
                   _MACPut
                   _MACPutArray
                 _SwapIPHeader
                   _swaps
               _MACCalcRxChecksum
                 _CalcIPBufferChecksum
                   _MACGetArray
               _MACFlush
                 _TickGet
                   _GetTickCopy
               _MACGetArray
               _MACIsMemCopyDone
               _MACIsTxReady
                 _MACFlush
                   _TickGet
                     _GetTickCopy
                 _TickGet
                   _GetTickCopy
               _MACMemCopyAsync
                 _MACGet
                 _MACPut
               _MACPutArray
               _MACSetWritePtr
             _IPGetHeader
               _MACCalcRxChecksum
                 _CalcIPBufferChecksum
                   _MACGetArray
               _MACGetArray
               _MACSetReadPtrInRx
               _SwapIPHeader
                 _swaps
             _MACGetHeader
               _MACDiscardRx
               _MACGetArray
               _memcpy
               _swaps
             _MACIsLinked
               _ReadPHYReg
             _UDPDiscard
               _MACDiscardRx
             _UDPProcess
               _CalcIPBufferChecksum
                 _MACGetArray
               _CalcIPChecksum
               _FindMatchingSocket
                 _memcpy
               _IPSetRxBuffer
                 _MACSetReadPtrInRx
               _MACDiscardRx
               _MACGetArray
               _swaps
             _UDPTask
               _ARPIsResolved
               _ARPResolve
                 _ARPPut
                   _MACFlush
                     _TickGet
                       _GetTickCopy
                   _MACIsTxReady
                     _MACFlush
                       _TickGet
                         _GetTickCopy
                     _TickGet
                       _GetTickCopy
                   _MACPutArray
                   _MACPutHeader
                     _MACPut
                     _MACPutArray
                   _MACSetWritePtr
                   _SwapARPPacket
                     _swaps
                   _memcpy
               _TickGetDiv256
                 _GetTickCopy
           _UDPFlush
             _CalcIPBufferChecksum
               _MACGetArray
             _CalcIPChecksum
             _IPPutHeader
               _CalcIPChecksum
               _MACPutArray
               _MACPutHeader
                 _MACPut
                 _MACPutArray
               _SwapIPHeader
                 _swaps
             _MACFlush
               _TickGet
                 _GetTickCopy
             _MACPutArray
             _MACSetReadPtr
             _MACSetWritePtr
             _swaps
           _UDPIsPutReady
             _MACIsTxReady
               _MACFlush
                 _TickGet
                   _GetTickCopy
               _TickGet
                 _GetTickCopy
             _UDPSetTxBuffer
               _MACSetWritePtr
           _UDPPutArray
             _MACPutArray
       _SendDoorTimerExpiredEvent
         _SendUDPMessage
           _DelayMs
           _StackTask
             _ARPProcess
               _ARPPut
                 _MACFlush
                   _TickGet
                     _GetTickCopy
                 _MACIsTxReady
                   _MACFlush
                     _TickGet
                       _GetTickCopy
                   _TickGet
                     _GetTickCopy
                 _MACPutArray
                 _MACPutHeader
                   _MACPut
                   _MACPutArray
                 _MACSetWritePtr
                 _SwapARPPacket
                   _swaps
                 _memcpy
               _MACDiscardRx
               _MACGetArray
               _SwapARPPacket
                 _swaps
             _DHCPInit
               _UDPClose
             _DHCPIsBound
             _DHCPTask
               _LFSRRand
               _MACIsLinked
                 _ReadPHYReg
               _TickGet
                 _GetTickCopy
               _UDPClose
               _UDPIsGetReady
                 _UDPSetRxBuffer
                   _IPSetRxBuffer
                     _MACSetReadPtrInRx
               _UDPIsPutReady
                 _MACIsTxReady
                   _MACFlush
                     _TickGet
                       _GetTickCopy
                   _TickGet
                     _GetTickCopy
                 _UDPSetTxBuffer
                   _MACSetWritePtr
               _UDPOpenEx
                 _memcpy
                 _memset
               __DHCPReceive
                 _UDPDiscard
                   _MACDiscardRx
                 _UDPGet
                   _MACGet
                 _UDPGetArray
                   _MACGetArray
                 _UDPSetRxBuffer
                   _IPSetRxBuffer
                     _MACSetReadPtrInRx
               __DHCPSend
                 _UDPFlush
                   _CalcIPBufferChecksum
                     _MACGetArray
                   _CalcIPChecksum
                   _IPPutHeader
                     _CalcIPChecksum
                     _MACPutArray
                     _MACPutHeader
                       _MACPut
                       _MACPutArray
                     _SwapIPHeader
                       _swaps
                   _MACFlush
                     _TickGet
                       _GetTickCopy
                   _MACPutArray
                   _MACSetReadPtr
                   _MACSetWritePtr
                   _swaps
                 _UDPPut
                   _MACPut
                 _UDPPutArray
                   _MACPutArray
               ___lwmod
                 _LFSRRand (ARG)
               _memset
             _ICMPProcess
               _IPPutHeader
                 _CalcIPChecksum
                 _MACPutArray
                 _MACPutHeader
                   _MACPut
                   _MACPutArray
                 _SwapIPHeader
                   _swaps
               _MACCalcRxChecksum
                 _CalcIPBufferChecksum
                   _MACGetArray
               _MACFlush
                 _TickGet
                   _GetTickCopy
               _MACGetArray
               _MACIsMemCopyDone
               _MACIsTxReady
                 _MACFlush
                   _TickGet
                     _GetTickCopy
                 _TickGet
                   _GetTickCopy
               _MACMemCopyAsync
                 _MACGet
                 _MACPut
               _MACPutArray
               _MACSetWritePtr
             _IPGetHeader
               _MACCalcRxChecksum
                 _CalcIPBufferChecksum
                   _MACGetArray
               _MACGetArray
               _MACSetReadPtrInRx
               _SwapIPHeader
                 _swaps
             _MACGetHeader
               _MACDiscardRx
               _MACGetArray
               _memcpy
               _swaps
             _MACIsLinked
               _ReadPHYReg
             _UDPDiscard
               _MACDiscardRx
             _UDPProcess
               _CalcIPBufferChecksum
                 _MACGetArray
               _CalcIPChecksum
               _FindMatchingSocket
                 _memcpy
               _IPSetRxBuffer
                 _MACSetReadPtrInRx
               _MACDiscardRx
               _MACGetArray
               _swaps
             _UDPTask
               _ARPIsResolved
               _ARPResolve
                 _ARPPut
                   _MACFlush
                     _TickGet
                       _GetTickCopy
                   _MACIsTxReady
                     _MACFlush
                       _TickGet
                         _GetTickCopy
                     _TickGet
                       _GetTickCopy
                   _MACPutArray
                   _MACPutHeader
                     _MACPut
                     _MACPutArray
                   _MACSetWritePtr
                   _SwapARPPacket
                     _swaps
                   _memcpy
               _TickGetDiv256
                 _GetTickCopy
           _UDPFlush
             _CalcIPBufferChecksum
               _MACGetArray
             _CalcIPChecksum
             _IPPutHeader
               _CalcIPChecksum
               _MACPutArray
               _MACPutHeader
                 _MACPut
                 _MACPutArray
               _SwapIPHeader
                 _swaps
             _MACFlush
               _TickGet
                 _GetTickCopy
             _MACPutArray
             _MACSetReadPtr
             _MACSetWritePtr
             _swaps
           _UDPIsPutReady
             _MACIsTxReady
               _MACFlush
                 _TickGet
                   _GetTickCopy
               _TickGet
                 _GetTickCopy
             _UDPSetTxBuffer
               _MACSetWritePtr
           _UDPPutArray
             _MACPutArray
       _SendVersionString
         _SendUDPMessage
           _DelayMs
           _StackTask
             _ARPProcess
               _ARPPut
                 _MACFlush
                   _TickGet
                     _GetTickCopy
                 _MACIsTxReady
                   _MACFlush
                     _TickGet
                       _GetTickCopy
                   _TickGet
                     _GetTickCopy
                 _MACPutArray
                 _MACPutHeader
                   _MACPut
                   _MACPutArray
                 _MACSetWritePtr
                 _SwapARPPacket
                   _swaps
                 _memcpy
               _MACDiscardRx
               _MACGetArray
               _SwapARPPacket
                 _swaps
             _DHCPInit
               _UDPClose
             _DHCPIsBound
             _DHCPTask
               _LFSRRand
               _MACIsLinked
                 _ReadPHYReg
               _TickGet
                 _GetTickCopy
               _UDPClose
               _UDPIsGetReady
                 _UDPSetRxBuffer
                   _IPSetRxBuffer
                     _MACSetReadPtrInRx
               _UDPIsPutReady
                 _MACIsTxReady
                   _MACFlush
                     _TickGet
                       _GetTickCopy
                   _TickGet
                     _GetTickCopy
                 _UDPSetTxBuffer
                   _MACSetWritePtr
               _UDPOpenEx
                 _memcpy
                 _memset
               __DHCPReceive
                 _UDPDiscard
                   _MACDiscardRx
                 _UDPGet
                   _MACGet
                 _UDPGetArray
                   _MACGetArray
                 _UDPSetRxBuffer
                   _IPSetRxBuffer
                     _MACSetReadPtrInRx
               __DHCPSend
                 _UDPFlush
                   _CalcIPBufferChecksum
                     _MACGetArray
                   _CalcIPChecksum
                   _IPPutHeader
                     _CalcIPChecksum
                     _MACPutArray
                     _MACPutHeader
                       _MACPut
                       _MACPutArray
                     _SwapIPHeader
                       _swaps
                   _MACFlush
                     _TickGet
                       _GetTickCopy
                   _MACPutArray
                   _MACSetReadPtr
                   _MACSetWritePtr
                   _swaps
                 _UDPPut
                   _MACPut
                 _UDPPutArray
                   _MACPutArray
               ___lwmod
                 _LFSRRand (ARG)
               _memset
             _ICMPProcess
               _IPPutHeader
                 _CalcIPChecksum
                 _MACPutArray
                 _MACPutHeader
                   _MACPut
                   _MACPutArray
                 _SwapIPHeader
                   _swaps
               _MACCalcRxChecksum
                 _CalcIPBufferChecksum
                   _MACGetArray
               _MACFlush
                 _TickGet
                   _GetTickCopy
               _MACGetArray
               _MACIsMemCopyDone
               _MACIsTxReady
                 _MACFlush
                   _TickGet
                     _GetTickCopy
                 _TickGet
                   _GetTickCopy
               _MACMemCopyAsync
                 _MACGet
                 _MACPut
               _MACPutArray
               _MACSetWritePtr
             _IPGetHeader
               _MACCalcRxChecksum
                 _CalcIPBufferChecksum
                   _MACGetArray
               _MACGetArray
               _MACSetReadPtrInRx
               _SwapIPHeader
                 _swaps
             _MACGetHeader
               _MACDiscardRx
               _MACGetArray
               _memcpy
               _swaps
             _MACIsLinked
               _ReadPHYReg
             _UDPDiscard
               _MACDiscardRx
             _UDPProcess
               _CalcIPBufferChecksum
                 _MACGetArray
               _CalcIPChecksum
               _FindMatchingSocket
                 _memcpy
               _IPSetRxBuffer
                 _MACSetReadPtrInRx
               _MACDiscardRx
               _MACGetArray
               _swaps
             _UDPTask
               _ARPIsResolved
               _ARPResolve
                 _ARPPut
                   _MACFlush
                     _TickGet
                       _GetTickCopy
                   _MACIsTxReady
                     _MACFlush
                       _TickGet
                         _GetTickCopy
                     _TickGet
                       _GetTickCopy
                   _MACPutArray
                   _MACPutHeader
                     _MACPut
                     _MACPutArray
                   _MACSetWritePtr
                   _SwapARPPacket
                     _swaps
                   _memcpy
               _TickGetDiv256
                 _GetTickCopy
           _UDPFlush
             _CalcIPBufferChecksum
               _MACGetArray
             _CalcIPChecksum
             _IPPutHeader
               _CalcIPChecksum
               _MACPutArray
               _MACPutHeader
                 _MACPut
                 _MACPutArray
               _SwapIPHeader
                 _swaps
             _MACFlush
               _TickGet
                 _GetTickCopy
             _MACPutArray
             _MACSetReadPtr
             _MACSetWritePtr
             _swaps
           _UDPIsPutReady
             _MACIsTxReady
               _MACFlush
                 _TickGet
                   _GetTickCopy
               _TickGet
                 _GetTickCopy
             _UDPSetTxBuffer
               _MACSetWritePtr
           _UDPPutArray
             _MACPutArray
       _TickGet
         _GetTickCopy
       _UDPClose
       _UDPGetArray
         _MACGetArray
     _InitStartState
     _KeyPressedResetIdleTimer
       _TickGet
         _GetTickCopy
     _OpenUDPsocket
       _TickGet
         _GetTickCopy
       _UDPOpenEx
         _memcpy
         _memset
       _memset
     _SendConnectionRequest
       _SendUDPMessage
         _DelayMs
         _StackTask
           _ARPProcess
             _ARPPut
               _MACFlush
                 _TickGet
                   _GetTickCopy
               _MACIsTxReady
                 _MACFlush
                   _TickGet
                     _GetTickCopy
                 _TickGet
                   _GetTickCopy
               _MACPutArray
               _MACPutHeader
                 _MACPut
                 _MACPutArray
               _MACSetWritePtr
               _SwapARPPacket
                 _swaps
               _memcpy
             _MACDiscardRx
             _MACGetArray
             _SwapARPPacket
               _swaps
           _DHCPInit
             _UDPClose
           _DHCPIsBound
           _DHCPTask
             _LFSRRand
             _MACIsLinked
               _ReadPHYReg
             _TickGet
               _GetTickCopy
             _UDPClose
             _UDPIsGetReady
               _UDPSetRxBuffer
                 _IPSetRxBuffer
                   _MACSetReadPtrInRx
             _UDPIsPutReady
               _MACIsTxReady
                 _MACFlush
                   _TickGet
                     _GetTickCopy
                 _TickGet
                   _GetTickCopy
               _UDPSetTxBuffer
                 _MACSetWritePtr
             _UDPOpenEx
               _memcpy
               _memset
             __DHCPReceive
               _UDPDiscard
                 _MACDiscardRx
               _UDPGet
                 _MACGet
               _UDPGetArray
                 _MACGetArray
               _UDPSetRxBuffer
                 _IPSetRxBuffer
                   _MACSetReadPtrInRx
             __DHCPSend
               _UDPFlush
                 _CalcIPBufferChecksum
                   _MACGetArray
                 _CalcIPChecksum
                 _IPPutHeader
                   _CalcIPChecksum
                   _MACPutArray
                   _MACPutHeader
                     _MACPut
                     _MACPutArray
                   _SwapIPHeader
                     _swaps
                 _MACFlush
                   _TickGet
                     _GetTickCopy
                 _MACPutArray
                 _MACSetReadPtr
                 _MACSetWritePtr
                 _swaps
               _UDPPut
                 _MACPut
               _UDPPutArray
                 _MACPutArray
             ___lwmod
               _LFSRRand (ARG)
             _memset
           _ICMPProcess
             _IPPutHeader
               _CalcIPChecksum
               _MACPutArray
               _MACPutHeader
                 _MACPut
                 _MACPutArray
               _SwapIPHeader
                 _swaps
             _MACCalcRxChecksum
               _CalcIPBufferChecksum
                 _MACGetArray
             _MACFlush
               _TickGet
                 _GetTickCopy
             _MACGetArray
             _MACIsMemCopyDone
             _MACIsTxReady
               _MACFlush
                 _TickGet
                   _GetTickCopy
               _TickGet
                 _GetTickCopy
             _MACMemCopyAsync
               _MACGet
               _MACPut
             _MACPutArray
             _MACSetWritePtr
           _IPGetHeader
             _MACCalcRxChecksum
               _CalcIPBufferChecksum
                 _MACGetArray
             _MACGetArray
             _MACSetReadPtrInRx
             _SwapIPHeader
               _swaps
           _MACGetHeader
             _MACDiscardRx
             _MACGetArray
             _memcpy
             _swaps
           _MACIsLinked
             _ReadPHYReg
           _UDPDiscard
             _MACDiscardRx
           _UDPProcess
             _CalcIPBufferChecksum
               _MACGetArray
             _CalcIPChecksum
             _FindMatchingSocket
               _memcpy
             _IPSetRxBuffer
               _MACSetReadPtrInRx
             _MACDiscardRx
             _MACGetArray
             _swaps
           _UDPTask
             _ARPIsResolved
             _ARPResolve
               _ARPPut
                 _MACFlush
                   _TickGet
                     _GetTickCopy
                 _MACIsTxReady
                   _MACFlush
                     _TickGet
                       _GetTickCopy
                   _TickGet
                     _GetTickCopy
                 _MACPutArray
                 _MACPutHeader
                   _MACPut
                   _MACPutArray
                 _MACSetWritePtr
                 _SwapARPPacket
                   _swaps
                 _memcpy
             _TickGetDiv256
               _GetTickCopy
         _UDPFlush
           _CalcIPBufferChecksum
             _MACGetArray
           _CalcIPChecksum
           _IPPutHeader
             _CalcIPChecksum
             _MACPutArray
             _MACPutHeader
               _MACPut
               _MACPutArray
             _SwapIPHeader
               _swaps
           _MACFlush
             _TickGet
               _GetTickCopy
           _MACPutArray
           _MACSetReadPtr
           _MACSetWritePtr
           _swaps
         _UDPIsPutReady
           _MACIsTxReady
             _MACFlush
               _TickGet
                 _GetTickCopy
             _TickGet
               _GetTickCopy
           _UDPSetTxBuffer
             _MACSetWritePtr
         _UDPPutArray
           _MACPutArray
       _TickGet
         _GetTickCopy
     _SendDeviceReadySignal
       _SendUDPMessage
         _DelayMs
         _StackTask
           _ARPProcess
             _ARPPut
               _MACFlush
                 _TickGet
                   _GetTickCopy
               _MACIsTxReady
                 _MACFlush
                   _TickGet
                     _GetTickCopy
                 _TickGet
                   _GetTickCopy
               _MACPutArray
               _MACPutHeader
                 _MACPut
                 _MACPutArray
               _MACSetWritePtr
               _SwapARPPacket
                 _swaps
               _memcpy
             _MACDiscardRx
             _MACGetArray
             _SwapARPPacket
               _swaps
           _DHCPInit
             _UDPClose
           _DHCPIsBound
           _DHCPTask
             _LFSRRand
             _MACIsLinked
               _ReadPHYReg
             _TickGet
               _GetTickCopy
             _UDPClose
             _UDPIsGetReady
               _UDPSetRxBuffer
                 _IPSetRxBuffer
                   _MACSetReadPtrInRx
             _UDPIsPutReady
               _MACIsTxReady
                 _MACFlush
                   _TickGet
                     _GetTickCopy
                 _TickGet
                   _GetTickCopy
               _UDPSetTxBuffer
                 _MACSetWritePtr
             _UDPOpenEx
               _memcpy
               _memset
             __DHCPReceive
               _UDPDiscard
                 _MACDiscardRx
               _UDPGet
                 _MACGet
               _UDPGetArray
                 _MACGetArray
               _UDPSetRxBuffer
                 _IPSetRxBuffer
                   _MACSetReadPtrInRx
             __DHCPSend
               _UDPFlush
                 _CalcIPBufferChecksum
                   _MACGetArray
                 _CalcIPChecksum
                 _IPPutHeader
                   _CalcIPChecksum
                   _MACPutArray
                   _MACPutHeader
                     _MACPut
                     _MACPutArray
                   _SwapIPHeader
                     _swaps
                 _MACFlush
                   _TickGet
                     _GetTickCopy
                 _MACPutArray
                 _MACSetReadPtr
                 _MACSetWritePtr
                 _swaps
               _UDPPut
                 _MACPut
               _UDPPutArray
                 _MACPutArray
             ___lwmod
               _LFSRRand (ARG)
             _memset
           _ICMPProcess
             _IPPutHeader
               _CalcIPChecksum
               _MACPutArray
               _MACPutHeader
                 _MACPut
                 _MACPutArray
               _SwapIPHeader
                 _swaps
             _MACCalcRxChecksum
               _CalcIPBufferChecksum
                 _MACGetArray
             _MACFlush
               _TickGet
                 _GetTickCopy
             _MACGetArray
             _MACIsMemCopyDone
             _MACIsTxReady
               _MACFlush
                 _TickGet
                   _GetTickCopy
               _TickGet
                 _GetTickCopy
             _MACMemCopyAsync
               _MACGet
               _MACPut
             _MACPutArray
             _MACSetWritePtr
           _IPGetHeader
             _MACCalcRxChecksum
               _CalcIPBufferChecksum
                 _MACGetArray
             _MACGetArray
             _MACSetReadPtrInRx
             _SwapIPHeader
               _swaps
           _MACGetHeader
             _MACDiscardRx
             _MACGetArray
             _memcpy
             _swaps
           _MACIsLinked
             _ReadPHYReg
           _UDPDiscard
             _MACDiscardRx
           _UDPProcess
             _CalcIPBufferChecksum
               _MACGetArray
             _CalcIPChecksum
             _FindMatchingSocket
               _memcpy
             _IPSetRxBuffer
               _MACSetReadPtrInRx
             _MACDiscardRx
             _MACGetArray
             _swaps
           _UDPTask
             _ARPIsResolved
             _ARPResolve
               _ARPPut
                 _MACFlush
                   _TickGet
                     _GetTickCopy
                 _MACIsTxReady
                   _MACFlush
                     _TickGet
                       _GetTickCopy
                   _TickGet
                     _GetTickCopy
                 _MACPutArray
                 _MACPutHeader
                   _MACPut
                   _MACPutArray
                 _MACSetWritePtr
                 _SwapARPPacket
                   _swaps
                 _memcpy
             _TickGetDiv256
               _GetTickCopy
         _UDPFlush
           _CalcIPBufferChecksum
             _MACGetArray
           _CalcIPChecksum
           _IPPutHeader
             _CalcIPChecksum
             _MACPutArray
             _MACPutHeader
               _MACPut
               _MACPutArray
             _SwapIPHeader
               _swaps
           _MACFlush
             _TickGet
               _GetTickCopy
           _MACPutArray
           _MACSetReadPtr
           _MACSetWritePtr
           _swaps
         _UDPIsPutReady
           _MACIsTxReady
             _MACFlush
               _TickGet
                 _GetTickCopy
             _TickGet
               _GetTickCopy
           _UDPSetTxBuffer
             _MACSetWritePtr
         _UDPPutArray
           _MACPutArray
     _SendDoorTimerExpiredEvent
       _SendUDPMessage
         _DelayMs
         _StackTask
           _ARPProcess
             _ARPPut
               _MACFlush
                 _TickGet
                   _GetTickCopy
               _MACIsTxReady
                 _MACFlush
                   _TickGet
                     _GetTickCopy
                 _TickGet
                   _GetTickCopy
               _MACPutArray
               _MACPutHeader
                 _MACPut
                 _MACPutArray
               _MACSetWritePtr
               _SwapARPPacket
                 _swaps
               _memcpy
             _MACDiscardRx
             _MACGetArray
             _SwapARPPacket
               _swaps
           _DHCPInit
             _UDPClose
           _DHCPIsBound
           _DHCPTask
             _LFSRRand
             _MACIsLinked
               _ReadPHYReg
             _TickGet
               _GetTickCopy
             _UDPClose
             _UDPIsGetReady
               _UDPSetRxBuffer
                 _IPSetRxBuffer
                   _MACSetReadPtrInRx
             _UDPIsPutReady
               _MACIsTxReady
                 _MACFlush
                   _TickGet
                     _GetTickCopy
                 _TickGet
                   _GetTickCopy
               _UDPSetTxBuffer
                 _MACSetWritePtr
             _UDPOpenEx
               _memcpy
               _memset
             __DHCPReceive
               _UDPDiscard
                 _MACDiscardRx
               _UDPGet
                 _MACGet
               _UDPGetArray
                 _MACGetArray
               _UDPSetRxBuffer
                 _IPSetRxBuffer
                   _MACSetReadPtrInRx
             __DHCPSend
               _UDPFlush
                 _CalcIPBufferChecksum
                   _MACGetArray
                 _CalcIPChecksum
                 _IPPutHeader
                   _CalcIPChecksum
                   _MACPutArray
                   _MACPutHeader
                     _MACPut
                     _MACPutArray
                   _SwapIPHeader
                     _swaps
                 _MACFlush
                   _TickGet
                     _GetTickCopy
                 _MACPutArray
                 _MACSetReadPtr
                 _MACSetWritePtr
                 _swaps
               _UDPPut
                 _MACPut
               _UDPPutArray
                 _MACPutArray
             ___lwmod
               _LFSRRand (ARG)
             _memset
           _ICMPProcess
             _IPPutHeader
               _CalcIPChecksum
               _MACPutArray
               _MACPutHeader
                 _MACPut
                 _MACPutArray
               _SwapIPHeader
                 _swaps
             _MACCalcRxChecksum
               _CalcIPBufferChecksum
                 _MACGetArray
             _MACFlush
               _TickGet
                 _GetTickCopy
             _MACGetArray
             _MACIsMemCopyDone
             _MACIsTxReady
               _MACFlush
                 _TickGet
                   _GetTickCopy
               _TickGet
                 _GetTickCopy
             _MACMemCopyAsync
               _MACGet
               _MACPut
             _MACPutArray
             _MACSetWritePtr
           _IPGetHeader
             _MACCalcRxChecksum
               _CalcIPBufferChecksum
                 _MACGetArray
             _MACGetArray
             _MACSetReadPtrInRx
             _SwapIPHeader
               _swaps
           _MACGetHeader
             _MACDiscardRx
             _MACGetArray
             _memcpy
             _swaps
           _MACIsLinked
             _ReadPHYReg
           _UDPDiscard
             _MACDiscardRx
           _UDPProcess
             _CalcIPBufferChecksum
               _MACGetArray
             _CalcIPChecksum
             _FindMatchingSocket
               _memcpy
             _IPSetRxBuffer
               _MACSetReadPtrInRx
             _MACDiscardRx
             _MACGetArray
             _swaps
           _UDPTask
             _ARPIsResolved
             _ARPResolve
               _ARPPut
                 _MACFlush
                   _TickGet
                     _GetTickCopy
                 _MACIsTxReady
                   _MACFlush
                     _TickGet
                       _GetTickCopy
                   _TickGet
                     _GetTickCopy
                 _MACPutArray
                 _MACPutHeader
                   _MACPut
                   _MACPutArray
                 _MACSetWritePtr
                 _SwapARPPacket
                   _swaps
                 _memcpy
             _TickGetDiv256
               _GetTickCopy
         _UDPFlush
           _CalcIPBufferChecksum
             _MACGetArray
           _CalcIPChecksum
           _IPPutHeader
             _CalcIPChecksum
             _MACPutArray
             _MACPutHeader
               _MACPut
               _MACPutArray
             _SwapIPHeader
               _swaps
           _MACFlush
             _TickGet
               _GetTickCopy
           _MACPutArray
           _MACSetReadPtr
           _MACSetWritePtr
           _swaps
         _UDPIsPutReady
           _MACIsTxReady
             _MACFlush
               _TickGet
                 _GetTickCopy
             _TickGet
               _GetTickCopy
           _UDPSetTxBuffer
             _MACSetWritePtr
         _UDPPutArray
           _MACPutArray
     _SendHeartBeat
       _CheckIfFirstTimeConnection
       _SendFirstConnectionMadeEvent
         _SendUDPMessage
           _DelayMs
           _StackTask
             _ARPProcess
               _ARPPut
                 _MACFlush
                   _TickGet
                     _GetTickCopy
                 _MACIsTxReady
                   _MACFlush
                     _TickGet
                       _GetTickCopy
                   _TickGet
                     _GetTickCopy
                 _MACPutArray
                 _MACPutHeader
                   _MACPut
                   _MACPutArray
                 _MACSetWritePtr
                 _SwapARPPacket
                   _swaps
                 _memcpy
               _MACDiscardRx
               _MACGetArray
               _SwapARPPacket
                 _swaps
             _DHCPInit
               _UDPClose
             _DHCPIsBound
             _DHCPTask
               _LFSRRand
               _MACIsLinked
                 _ReadPHYReg
               _TickGet
                 _GetTickCopy
               _UDPClose
               _UDPIsGetReady
                 _UDPSetRxBuffer
                   _IPSetRxBuffer
                     _MACSetReadPtrInRx
               _UDPIsPutReady
                 _MACIsTxReady
                   _MACFlush
                     _TickGet
                       _GetTickCopy
                   _TickGet
                     _GetTickCopy
                 _UDPSetTxBuffer
                   _MACSetWritePtr
               _UDPOpenEx
                 _memcpy
                 _memset
               __DHCPReceive
                 _UDPDiscard
                   _MACDiscardRx
                 _UDPGet
                   _MACGet
                 _UDPGetArray
                   _MACGetArray
                 _UDPSetRxBuffer
                   _IPSetRxBuffer
                     _MACSetReadPtrInRx
               __DHCPSend
                 _UDPFlush
                   _CalcIPBufferChecksum
                     _MACGetArray
                   _CalcIPChecksum
                   _IPPutHeader
                     _CalcIPChecksum
                     _MACPutArray
                     _MACPutHeader
                       _MACPut
                       _MACPutArray
                     _SwapIPHeader
                       _swaps
                   _MACFlush
                     _TickGet
                       _GetTickCopy
                   _MACPutArray
                   _MACSetReadPtr
                   _MACSetWritePtr
                   _swaps
                 _UDPPut
                   _MACPut
                 _UDPPutArray
                   _MACPutArray
               ___lwmod
                 _LFSRRand (ARG)
               _memset
             _ICMPProcess
               _IPPutHeader
                 _CalcIPChecksum
                 _MACPutArray
                 _MACPutHeader
                   _MACPut
                   _MACPutArray
                 _SwapIPHeader
                   _swaps
               _MACCalcRxChecksum
                 _CalcIPBufferChecksum
                   _MACGetArray
               _MACFlush
                 _TickGet
                   _GetTickCopy
               _MACGetArray
               _MACIsMemCopyDone
               _MACIsTxReady
                 _MACFlush
                   _TickGet
                     _GetTickCopy
                 _TickGet
                   _GetTickCopy
               _MACMemCopyAsync
                 _MACGet
                 _MACPut
               _MACPutArray
               _MACSetWritePtr
             _IPGetHeader
               _MACCalcRxChecksum
                 _CalcIPBufferChecksum
                   _MACGetArray
               _MACGetArray
               _MACSetReadPtrInRx
               _SwapIPHeader
                 _swaps
             _MACGetHeader
               _MACDiscardRx
               _MACGetArray
               _memcpy
               _swaps
             _MACIsLinked
               _ReadPHYReg
             _UDPDiscard
               _MACDiscardRx
             _UDPProcess
               _CalcIPBufferChecksum
                 _MACGetArray
               _CalcIPChecksum
               _FindMatchingSocket
                 _memcpy
               _IPSetRxBuffer
                 _MACSetReadPtrInRx
               _MACDiscardRx
               _MACGetArray
               _swaps
             _UDPTask
               _ARPIsResolved
               _ARPResolve
                 _ARPPut
                   _MACFlush
                     _TickGet
                       _GetTickCopy
                   _MACIsTxReady
                     _MACFlush
                       _TickGet
                         _GetTickCopy
                     _TickGet
                       _GetTickCopy
                   _MACPutArray
                   _MACPutHeader
                     _MACPut
                     _MACPutArray
                   _MACSetWritePtr
                   _SwapARPPacket
                     _swaps
                   _memcpy
               _TickGetDiv256
                 _GetTickCopy
           _UDPFlush
             _CalcIPBufferChecksum
               _MACGetArray
             _CalcIPChecksum
             _IPPutHeader
               _CalcIPChecksum
               _MACPutArray
               _MACPutHeader
                 _MACPut
                 _MACPutArray
               _SwapIPHeader
                 _swaps
             _MACFlush
               _TickGet
                 _GetTickCopy
             _MACPutArray
             _MACSetReadPtr
             _MACSetWritePtr
             _swaps
           _UDPIsPutReady
             _MACIsTxReady
               _MACFlush
                 _TickGet
                   _GetTickCopy
               _TickGet
                 _GetTickCopy
             _UDPSetTxBuffer
               _MACSetWritePtr
           _UDPPutArray
             _MACPutArray
       _SendUDPMessage
         _DelayMs
         _StackTask
           _ARPProcess
             _ARPPut
               _MACFlush
                 _TickGet
                   _GetTickCopy
               _MACIsTxReady
                 _MACFlush
                   _TickGet
                     _GetTickCopy
                 _TickGet
                   _GetTickCopy
               _MACPutArray
               _MACPutHeader
                 _MACPut
                 _MACPutArray
               _MACSetWritePtr
               _SwapARPPacket
                 _swaps
               _memcpy
             _MACDiscardRx
             _MACGetArray
             _SwapARPPacket
               _swaps
           _DHCPInit
             _UDPClose
           _DHCPIsBound
           _DHCPTask
             _LFSRRand
             _MACIsLinked
               _ReadPHYReg
             _TickGet
               _GetTickCopy
             _UDPClose
             _UDPIsGetReady
               _UDPSetRxBuffer
                 _IPSetRxBuffer
                   _MACSetReadPtrInRx
             _UDPIsPutReady
               _MACIsTxReady
                 _MACFlush
                   _TickGet
                     _GetTickCopy
                 _TickGet
                   _GetTickCopy
               _UDPSetTxBuffer
                 _MACSetWritePtr
             _UDPOpenEx
               _memcpy
               _memset
             __DHCPReceive
               _UDPDiscard
                 _MACDiscardRx
               _UDPGet
                 _MACGet
               _UDPGetArray
                 _MACGetArray
               _UDPSetRxBuffer
                 _IPSetRxBuffer
                   _MACSetReadPtrInRx
             __DHCPSend
               _UDPFlush
                 _CalcIPBufferChecksum
                   _MACGetArray
                 _CalcIPChecksum
                 _IPPutHeader
                   _CalcIPChecksum
                   _MACPutArray
                   _MACPutHeader
                     _MACPut
                     _MACPutArray
                   _SwapIPHeader
                     _swaps
                 _MACFlush
                   _TickGet
                     _GetTickCopy
                 _MACPutArray
                 _MACSetReadPtr
                 _MACSetWritePtr
                 _swaps
               _UDPPut
                 _MACPut
               _UDPPutArray
                 _MACPutArray
             ___lwmod
               _LFSRRand (ARG)
             _memset
           _ICMPProcess
             _IPPutHeader
               _CalcIPChecksum
               _MACPutArray
               _MACPutHeader
                 _MACPut
                 _MACPutArray
               _SwapIPHeader
                 _swaps
             _MACCalcRxChecksum
               _CalcIPBufferChecksum
                 _MACGetArray
             _MACFlush
               _TickGet
                 _GetTickCopy
             _MACGetArray
             _MACIsMemCopyDone
             _MACIsTxReady
               _MACFlush
                 _TickGet
                   _GetTickCopy
               _TickGet
                 _GetTickCopy
             _MACMemCopyAsync
               _MACGet
               _MACPut
             _MACPutArray
             _MACSetWritePtr
           _IPGetHeader
             _MACCalcRxChecksum
               _CalcIPBufferChecksum
                 _MACGetArray
             _MACGetArray
             _MACSetReadPtrInRx
             _SwapIPHeader
               _swaps
           _MACGetHeader
             _MACDiscardRx
             _MACGetArray
             _memcpy
             _swaps
           _MACIsLinked
             _ReadPHYReg
           _UDPDiscard
             _MACDiscardRx
           _UDPProcess
             _CalcIPBufferChecksum
               _MACGetArray
             _CalcIPChecksum
             _FindMatchingSocket
               _memcpy
             _IPSetRxBuffer
               _MACSetReadPtrInRx
             _MACDiscardRx
             _MACGetArray
             _swaps
           _UDPTask
             _ARPIsResolved
             _ARPResolve
               _ARPPut
                 _MACFlush
                   _TickGet
                     _GetTickCopy
                 _MACIsTxReady
                   _MACFlush
                     _TickGet
                       _GetTickCopy
                   _TickGet
                     _GetTickCopy
                 _MACPutArray
                 _MACPutHeader
                   _MACPut
                   _MACPutArray
                 _MACSetWritePtr
                 _SwapARPPacket
                   _swaps
                 _memcpy
             _TickGetDiv256
               _GetTickCopy
         _UDPFlush
           _CalcIPBufferChecksum
             _MACGetArray
           _CalcIPChecksum
           _IPPutHeader
             _CalcIPChecksum
             _MACPutArray
             _MACPutHeader
               _MACPut
               _MACPutArray
             _SwapIPHeader
               _swaps
           _MACFlush
             _TickGet
               _GetTickCopy
           _MACPutArray
           _MACSetReadPtr
           _MACSetWritePtr
           _swaps
         _UDPIsPutReady
           _MACIsTxReady
             _MACFlush
               _TickGet
                 _GetTickCopy
             _TickGet
               _GetTickCopy
           _UDPSetTxBuffer
             _MACSetWritePtr
         _UDPPutArray
           _MACPutArray
       _TickGet
         _GetTickCopy
     _UDPIsGetReady
       _UDPSetRxBuffer
         _IPSetRxBuffer
           _MACSetReadPtrInRx
     _UDPIsPutReady
       _MACIsTxReady
         _MACFlush
           _TickGet
             _GetTickCopy
         _TickGet
           _GetTickCopy
       _UDPSetTxBuffer
         _MACSetWritePtr
   _NDCInitData
   _NDCResetState
     _InitStartState
     _TickGet
       _GetTickCopy
     _UDPClose
   _ProcessDoorIndicator
     _ProcessStateDoorIndicatorClosed
       _ProcessDoorIndicatorIsClosed
       _ProcessDoorIndicatorIsOpen
         _SendDoorOpenEvent
           _SendUDPMessage
             _DelayMs
             _StackTask
               _ARPProcess
                 _ARPPut
                   _MACFlush
                     _TickGet
                       _GetTickCopy
                   _MACIsTxReady
                     _MACFlush
                       _TickGet
                         _GetTickCopy
                     _TickGet
                       _GetTickCopy
                   _MACPutArray
                   _MACPutHeader
                     _MACPut
                     _MACPutArray
                   _MACSetWritePtr
                   _SwapARPPacket
                     _swaps
                   _memcpy
                 _MACDiscardRx
                 _MACGetArray
                 _SwapARPPacket
                   _swaps
               _DHCPInit
                 _UDPClose
               _DHCPIsBound
               _DHCPTask
                 _LFSRRand
                 _MACIsLinked
                   _ReadPHYReg
                 _TickGet
                   _GetTickCopy
                 _UDPClose
                 _UDPIsGetReady
                   _UDPSetRxBuffer
                     _IPSetRxBuffer
                       _MACSetReadPtrInRx
                 _UDPIsPutReady
                   _MACIsTxReady
                     _MACFlush
                       _TickGet
                         _GetTickCopy
                     _TickGet
                       _GetTickCopy
                   _UDPSetTxBuffer
                     _MACSetWritePtr
                 _UDPOpenEx
                   _memcpy
                   _memset
                 __DHCPReceive
                   _UDPDiscard
                     _MACDiscardRx
                   _UDPGet
                     _MACGet
                   _UDPGetArray
                     _MACGetArray
                   _UDPSetRxBuffer
                     _IPSetRxBuffer
                       _MACSetReadPtrInRx
                 __DHCPSend
                   _UDPFlush
                     _CalcIPBufferChecksum
                       _MACGetArray
                     _CalcIPChecksum
                     _IPPutHeader
                       _CalcIPChecksum
                       _MACPutArray
                       _MACPutHeader
                         _MACPut
                         _MACPutArray
                       _SwapIPHeader
                         _swaps
                     _MACFlush
                       _TickGet
                         _GetTickCopy
                     _MACPutArray
                     _MACSetReadPtr
                     _MACSetWritePtr
                     _swaps
                   _UDPPut
                     _MACPut
                   _UDPPutArray
                     _MACPutArray
                 ___lwmod
                   _LFSRRand (ARG)
                 _memset
               _ICMPProcess
                 _IPPutHeader
                   _CalcIPChecksum
                   _MACPutArray
                   _MACPutHeader
                     _MACPut
                     _MACPutArray
                   _SwapIPHeader
                     _swaps
                 _MACCalcRxChecksum
                   _CalcIPBufferChecksum
                     _MACGetArray
                 _MACFlush
                   _TickGet
                     _GetTickCopy
                 _MACGetArray
                 _MACIsMemCopyDone
                 _MACIsTxReady
                   _MACFlush
                     _TickGet
                       _GetTickCopy
                   _TickGet
                     _GetTickCopy
                 _MACMemCopyAsync
                   _MACGet
                   _MACPut
                 _MACPutArray
                 _MACSetWritePtr
               _IPGetHeader
                 _MACCalcRxChecksum
                   _CalcIPBufferChecksum
                     _MACGetArray
                 _MACGetArray
                 _MACSetReadPtrInRx
                 _SwapIPHeader
                   _swaps
               _MACGetHeader
                 _MACDiscardRx
                 _MACGetArray
                 _memcpy
                 _swaps
               _MACIsLinked
                 _ReadPHYReg
               _UDPDiscard
                 _MACDiscardRx
               _UDPProcess
                 _CalcIPBufferChecksum
                   _MACGetArray
                 _CalcIPChecksum
                 _FindMatchingSocket
                   _memcpy
                 _IPSetRxBuffer
                   _MACSetReadPtrInRx
                 _MACDiscardRx
                 _MACGetArray
                 _swaps
               _UDPTask
                 _ARPIsResolved
                 _ARPResolve
                   _ARPPut
                     _MACFlush
                       _TickGet
                         _GetTickCopy
                     _MACIsTxReady
                       _MACFlush
                         _TickGet
                           _GetTickCopy
                       _TickGet
                         _GetTickCopy
                     _MACPutArray
                     _MACPutHeader
                       _MACPut
                       _MACPutArray
                     _MACSetWritePtr
                     _SwapARPPacket
                       _swaps
                     _memcpy
                 _TickGetDiv256
                   _GetTickCopy
             _UDPFlush
               _CalcIPBufferChecksum
                 _MACGetArray
               _CalcIPChecksum
               _IPPutHeader
                 _CalcIPChecksum
                 _MACPutArray
                 _MACPutHeader
                   _MACPut
                   _MACPutArray
                 _SwapIPHeader
                   _swaps
               _MACFlush
                 _TickGet
                   _GetTickCopy
               _MACPutArray
               _MACSetReadPtr
               _MACSetWritePtr
               _swaps
             _UDPIsPutReady
               _MACIsTxReady
                 _MACFlush
                   _TickGet
                     _GetTickCopy
                 _TickGet
                   _GetTickCopy
               _UDPSetTxBuffer
                 _MACSetWritePtr
             _UDPPutArray
               _MACPutArray
       _isDoorIndicatorOpen
     _ProcessStateDoorIndicatorOpen
       _SendDoorClosedEvent
         _SendUDPMessage
           _DelayMs
           _StackTask
             _ARPProcess
               _ARPPut
                 _MACFlush
                   _TickGet
                     _GetTickCopy
                 _MACIsTxReady
                   _MACFlush
                     _TickGet
                       _GetTickCopy
                   _TickGet
                     _GetTickCopy
                 _MACPutArray
                 _MACPutHeader
                   _MACPut
                   _MACPutArray
                 _MACSetWritePtr
                 _SwapARPPacket
                   _swaps
                 _memcpy
               _MACDiscardRx
               _MACGetArray
               _SwapARPPacket
                 _swaps
             _DHCPInit
               _UDPClose
             _DHCPIsBound
             _DHCPTask
               _LFSRRand
               _MACIsLinked
                 _ReadPHYReg
               _TickGet
                 _GetTickCopy
               _UDPClose
               _UDPIsGetReady
                 _UDPSetRxBuffer
                   _IPSetRxBuffer
                     _MACSetReadPtrInRx
               _UDPIsPutReady
                 _MACIsTxReady
                   _MACFlush
                     _TickGet
                       _GetTickCopy
                   _TickGet
                     _GetTickCopy
                 _UDPSetTxBuffer
                   _MACSetWritePtr
               _UDPOpenEx
                 _memcpy
                 _memset
               __DHCPReceive
                 _UDPDiscard
                   _MACDiscardRx
                 _UDPGet
                   _MACGet
                 _UDPGetArray
                   _MACGetArray
                 _UDPSetRxBuffer
                   _IPSetRxBuffer
                     _MACSetReadPtrInRx
               __DHCPSend
                 _UDPFlush
                   _CalcIPBufferChecksum
                     _MACGetArray
                   _CalcIPChecksum
                   _IPPutHeader
                     _CalcIPChecksum
                     _MACPutArray
                     _MACPutHeader
                       _MACPut
                       _MACPutArray
                     _SwapIPHeader
                       _swaps
                   _MACFlush
                     _TickGet
                       _GetTickCopy
                   _MACPutArray
                   _MACSetReadPtr
                   _MACSetWritePtr
                   _swaps
                 _UDPPut
                   _MACPut
                 _UDPPutArray
                   _MACPutArray
               ___lwmod
                 _LFSRRand (ARG)
               _memset
             _ICMPProcess
               _IPPutHeader
                 _CalcIPChecksum
                 _MACPutArray
                 _MACPutHeader
                   _MACPut
                   _MACPutArray
                 _SwapIPHeader
                   _swaps
               _MACCalcRxChecksum
                 _CalcIPBufferChecksum
                   _MACGetArray
               _MACFlush
                 _TickGet
                   _GetTickCopy
               _MACGetArray
               _MACIsMemCopyDone
               _MACIsTxReady
                 _MACFlush
                   _TickGet
                     _GetTickCopy
                 _TickGet
                   _GetTickCopy
               _MACMemCopyAsync
                 _MACGet
                 _MACPut
               _MACPutArray
               _MACSetWritePtr
             _IPGetHeader
               _MACCalcRxChecksum
                 _CalcIPBufferChecksum
                   _MACGetArray
               _MACGetArray
               _MACSetReadPtrInRx
               _SwapIPHeader
                 _swaps
             _MACGetHeader
               _MACDiscardRx
               _MACGetArray
               _memcpy
               _swaps
             _MACIsLinked
               _ReadPHYReg
             _UDPDiscard
               _MACDiscardRx
             _UDPProcess
               _CalcIPBufferChecksum
                 _MACGetArray
               _CalcIPChecksum
               _FindMatchingSocket
                 _memcpy
               _IPSetRxBuffer
                 _MACSetReadPtrInRx
               _MACDiscardRx
               _MACGetArray
               _swaps
             _UDPTask
               _ARPIsResolved
               _ARPResolve
                 _ARPPut
                   _MACFlush
                     _TickGet
                       _GetTickCopy
                   _MACIsTxReady
                     _MACFlush
                       _TickGet
                         _GetTickCopy
                     _TickGet
                       _GetTickCopy
                   _MACPutArray
                   _MACPutHeader
                     _MACPut
                     _MACPutArray
                   _MACSetWritePtr
                   _SwapARPPacket
                     _swaps
                   _memcpy
               _TickGetDiv256
                 _GetTickCopy
           _UDPFlush
             _CalcIPBufferChecksum
               _MACGetArray
             _CalcIPChecksum
             _IPPutHeader
               _CalcIPChecksum
               _MACPutArray
               _MACPutHeader
                 _MACPut
                 _MACPutArray
               _SwapIPHeader
                 _swaps
             _MACFlush
               _TickGet
                 _GetTickCopy
             _MACPutArray
             _MACSetReadPtr
             _MACSetWritePtr
             _swaps
           _UDPIsPutReady
             _MACIsTxReady
               _MACFlush
                 _TickGet
                   _GetTickCopy
               _TickGet
                 _GetTickCopy
             _UDPSetTxBuffer
               _MACSetWritePtr
           _UDPPutArray
             _MACPutArray
       _SendDoorOpenTooLongEvent
         _SendUDPMessage
           _DelayMs
           _StackTask
             _ARPProcess
               _ARPPut
                 _MACFlush
                   _TickGet
                     _GetTickCopy
                 _MACIsTxReady
                   _MACFlush
                     _TickGet
                       _GetTickCopy
                   _TickGet
                     _GetTickCopy
                 _MACPutArray
                 _MACPutHeader
                   _MACPut
                   _MACPutArray
                 _MACSetWritePtr
                 _SwapARPPacket
                   _swaps
                 _memcpy
               _MACDiscardRx
               _MACGetArray
               _SwapARPPacket
                 _swaps
             _DHCPInit
               _UDPClose
             _DHCPIsBound
             _DHCPTask
               _LFSRRand
               _MACIsLinked
                 _ReadPHYReg
               _TickGet
                 _GetTickCopy
               _UDPClose
               _UDPIsGetReady
                 _UDPSetRxBuffer
                   _IPSetRxBuffer
                     _MACSetReadPtrInRx
               _UDPIsPutReady
                 _MACIsTxReady
                   _MACFlush
                     _TickGet
                       _GetTickCopy
                   _TickGet
                     _GetTickCopy
                 _UDPSetTxBuffer
                   _MACSetWritePtr
               _UDPOpenEx
                 _memcpy
                 _memset
               __DHCPReceive
                 _UDPDiscard
                   _MACDiscardRx
                 _UDPGet
                   _MACGet
                 _UDPGetArray
                   _MACGetArray
                 _UDPSetRxBuffer
                   _IPSetRxBuffer
                     _MACSetReadPtrInRx
               __DHCPSend
                 _UDPFlush
                   _CalcIPBufferChecksum
                     _MACGetArray
                   _CalcIPChecksum
                   _IPPutHeader
                     _CalcIPChecksum
                     _MACPutArray
                     _MACPutHeader
                       _MACPut
                       _MACPutArray
                     _SwapIPHeader
                       _swaps
                   _MACFlush
                     _TickGet
                       _GetTickCopy
                   _MACPutArray
                   _MACSetReadPtr
                   _MACSetWritePtr
                   _swaps
                 _UDPPut
                   _MACPut
                 _UDPPutArray
                   _MACPutArray
               ___lwmod
                 _LFSRRand (ARG)
               _memset
             _ICMPProcess
               _IPPutHeader
                 _CalcIPChecksum
                 _MACPutArray
                 _MACPutHeader
                   _MACPut
                   _MACPutArray
                 _SwapIPHeader
                   _swaps
               _MACCalcRxChecksum
                 _CalcIPBufferChecksum
                   _MACGetArray
               _MACFlush
                 _TickGet
                   _GetTickCopy
               _MACGetArray
               _MACIsMemCopyDone
               _MACIsTxReady
                 _MACFlush
                   _TickGet
                     _GetTickCopy
                 _TickGet
                   _GetTickCopy
               _MACMemCopyAsync
                 _MACGet
                 _MACPut
               _MACPutArray
               _MACSetWritePtr
             _IPGetHeader
               _MACCalcRxChecksum
                 _CalcIPBufferChecksum
                   _MACGetArray
               _MACGetArray
               _MACSetReadPtrInRx
               _SwapIPHeader
                 _swaps
             _MACGetHeader
               _MACDiscardRx
               _MACGetArray
               _memcpy
               _swaps
             _MACIsLinked
               _ReadPHYReg
             _UDPDiscard
               _MACDiscardRx
             _UDPProcess
               _CalcIPBufferChecksum
                 _MACGetArray
               _CalcIPChecksum
               _FindMatchingSocket
                 _memcpy
               _IPSetRxBuffer
                 _MACSetReadPtrInRx
               _MACDiscardRx
               _MACGetArray
               _swaps
             _UDPTask
               _ARPIsResolved
               _ARPResolve
                 _ARPPut
                   _MACFlush
                     _TickGet
                       _GetTickCopy
                   _MACIsTxReady
                     _MACFlush
                       _TickGet
                         _GetTickCopy
                     _TickGet
                       _GetTickCopy
                   _MACPutArray
                   _MACPutHeader
                     _MACPut
                     _MACPutArray
                   _MACSetWritePtr
                   _SwapARPPacket
                     _swaps
                   _memcpy
               _TickGetDiv256
                 _GetTickCopy
           _UDPFlush
             _CalcIPBufferChecksum
               _MACGetArray
             _CalcIPChecksum
             _IPPutHeader
               _CalcIPChecksum
               _MACPutArray
               _MACPutHeader
                 _MACPut
                 _MACPutArray
               _SwapIPHeader
                 _swaps
             _MACFlush
               _TickGet
                 _GetTickCopy
             _MACPutArray
             _MACSetReadPtr
             _MACSetWritePtr
             _swaps
           _UDPIsPutReady
             _MACIsTxReady
               _MACFlush
                 _TickGet
                   _GetTickCopy
               _TickGet
                 _GetTickCopy
             _UDPSetTxBuffer
               _MACSetWritePtr
           _UDPPutArray
             _MACPutArray
       _isDoorIndicatorOpen
     _ProcessStateDoorIndicatorOpenTooLong
       _Beep
         _TickGet
           _GetTickCopy
       _SendDoorClosedEvent
         _SendUDPMessage
           _DelayMs
           _StackTask
             _ARPProcess
               _ARPPut
                 _MACFlush
                   _TickGet
                     _GetTickCopy
                 _MACIsTxReady
                   _MACFlush
                     _TickGet
                       _GetTickCopy
                   _TickGet
                     _GetTickCopy
                 _MACPutArray
                 _MACPutHeader
                   _MACPut
                   _MACPutArray
                 _MACSetWritePtr
                 _SwapARPPacket
                   _swaps
                 _memcpy
               _MACDiscardRx
               _MACGetArray
               _SwapARPPacket
                 _swaps
             _DHCPInit
               _UDPClose
             _DHCPIsBound
             _DHCPTask
               _LFSRRand
               _MACIsLinked
                 _ReadPHYReg
               _TickGet
                 _GetTickCopy
               _UDPClose
               _UDPIsGetReady
                 _UDPSetRxBuffer
                   _IPSetRxBuffer
                     _MACSetReadPtrInRx
               _UDPIsPutReady
                 _MACIsTxReady
                   _MACFlush
                     _TickGet
                       _GetTickCopy
                   _TickGet
                     _GetTickCopy
                 _UDPSetTxBuffer
                   _MACSetWritePtr
               _UDPOpenEx
                 _memcpy
                 _memset
               __DHCPReceive
                 _UDPDiscard
                   _MACDiscardRx
                 _UDPGet
                   _MACGet
                 _UDPGetArray
                   _MACGetArray
                 _UDPSetRxBuffer
                   _IPSetRxBuffer
                     _MACSetReadPtrInRx
               __DHCPSend
                 _UDPFlush
                   _CalcIPBufferChecksum
                     _MACGetArray
                   _CalcIPChecksum
                   _IPPutHeader
                     _CalcIPChecksum
                     _MACPutArray
                     _MACPutHeader
                       _MACPut
                       _MACPutArray
                     _SwapIPHeader
                       _swaps
                   _MACFlush
                     _TickGet
                       _GetTickCopy
                   _MACPutArray
                   _MACSetReadPtr
                   _MACSetWritePtr
                   _swaps
                 _UDPPut
                   _MACPut
                 _UDPPutArray
                   _MACPutArray
               ___lwmod
                 _LFSRRand (ARG)
               _memset
             _ICMPProcess
               _IPPutHeader
                 _CalcIPChecksum
                 _MACPutArray
                 _MACPutHeader
                   _MACPut
                   _MACPutArray
                 _SwapIPHeader
                   _swaps
               _MACCalcRxChecksum
                 _CalcIPBufferChecksum
                   _MACGetArray
               _MACFlush
                 _TickGet
                   _GetTickCopy
               _MACGetArray
               _MACIsMemCopyDone
               _MACIsTxReady
                 _MACFlush
                   _TickGet
                     _GetTickCopy
                 _TickGet
                   _GetTickCopy
               _MACMemCopyAsync
                 _MACGet
                 _MACPut
               _MACPutArray
               _MACSetWritePtr
             _IPGetHeader
               _MACCalcRxChecksum
                 _CalcIPBufferChecksum
                   _MACGetArray
               _MACGetArray
               _MACSetReadPtrInRx
               _SwapIPHeader
                 _swaps
             _MACGetHeader
               _MACDiscardRx
               _MACGetArray
               _memcpy
               _swaps
             _MACIsLinked
               _ReadPHYReg
             _UDPDiscard
               _MACDiscardRx
             _UDPProcess
               _CalcIPBufferChecksum
                 _MACGetArray
               _CalcIPChecksum
               _FindMatchingSocket
                 _memcpy
               _IPSetRxBuffer
                 _MACSetReadPtrInRx
               _MACDiscardRx
               _MACGetArray
               _swaps
             _UDPTask
               _ARPIsResolved
               _ARPResolve
                 _ARPPut
                   _MACFlush
                     _TickGet
                       _GetTickCopy
                   _MACIsTxReady
                     _MACFlush
                       _TickGet
                         _GetTickCopy
                     _TickGet
                       _GetTickCopy
                   _MACPutArray
                   _MACPutHeader
                     _MACPut
                     _MACPutArray
                   _MACSetWritePtr
                   _SwapARPPacket
                     _swaps
                   _memcpy
               _TickGetDiv256
                 _GetTickCopy
           _UDPFlush
             _CalcIPBufferChecksum
               _MACGetArray
             _CalcIPChecksum
             _IPPutHeader
               _CalcIPChecksum
               _MACPutArray
               _MACPutHeader
                 _MACPut
                 _MACPutArray
               _SwapIPHeader
                 _swaps
             _MACFlush
               _TickGet
                 _GetTickCopy
             _MACPutArray
             _MACSetReadPtr
             _MACSetWritePtr
             _swaps
           _UDPIsPutReady
             _MACIsTxReady
               _MACFlush
                 _TickGet
                   _GetTickCopy
               _TickGet
                 _GetTickCopy
             _UDPSetTxBuffer
               _MACSetWritePtr
           _UDPPutArray
             _MACPutArray
       _isDoorIndicatorOpen
   _ProcessDoorSwitch
     _ProcessStateDoorSwitchIdle
       _IsDoorSwitchPressed
       _ProcessDoorSwitchIsPressed
         _NDCGetRelayActiveTime
         _SendDoorSwitchPressedEvent
           _SendUDPMessage
             _DelayMs
             _StackTask
               _ARPProcess
                 _ARPPut
                   _MACFlush
                     _TickGet
                       _GetTickCopy
                   _MACIsTxReady
                     _MACFlush
                       _TickGet
                         _GetTickCopy
                     _TickGet
                       _GetTickCopy
                   _MACPutArray
                   _MACPutHeader
                     _MACPut
                     _MACPutArray
                   _MACSetWritePtr
                   _SwapARPPacket
                     _swaps
                   _memcpy
                 _MACDiscardRx
                 _MACGetArray
                 _SwapARPPacket
                   _swaps
               _DHCPInit
                 _UDPClose
               _DHCPIsBound
               _DHCPTask
                 _LFSRRand
                 _MACIsLinked
                   _ReadPHYReg
                 _TickGet
                   _GetTickCopy
                 _UDPClose
                 _UDPIsGetReady
                   _UDPSetRxBuffer
                     _IPSetRxBuffer
                       _MACSetReadPtrInRx
                 _UDPIsPutReady
                   _MACIsTxReady
                     _MACFlush
                       _TickGet
                         _GetTickCopy
                     _TickGet
                       _GetTickCopy
                   _UDPSetTxBuffer
                     _MACSetWritePtr
                 _UDPOpenEx
                   _memcpy
                   _memset
                 __DHCPReceive
                   _UDPDiscard
                     _MACDiscardRx
                   _UDPGet
                     _MACGet
                   _UDPGetArray
                     _MACGetArray
                   _UDPSetRxBuffer
                     _IPSetRxBuffer
                       _MACSetReadPtrInRx
                 __DHCPSend
                   _UDPFlush
                     _CalcIPBufferChecksum
                       _MACGetArray
                     _CalcIPChecksum
                     _IPPutHeader
                       _CalcIPChecksum
                       _MACPutArray
                       _MACPutHeader
                         _MACPut
                         _MACPutArray
                       _SwapIPHeader
                         _swaps
                     _MACFlush
                       _TickGet
                         _GetTickCopy
                     _MACPutArray
                     _MACSetReadPtr
                     _MACSetWritePtr
                     _swaps
                   _UDPPut
                     _MACPut
                   _UDPPutArray
                     _MACPutArray
                 ___lwmod
                   _LFSRRand (ARG)
                 _memset
               _ICMPProcess
                 _IPPutHeader
                   _CalcIPChecksum
                   _MACPutArray
                   _MACPutHeader
                     _MACPut
                     _MACPutArray
                   _SwapIPHeader
                     _swaps
                 _MACCalcRxChecksum
                   _CalcIPBufferChecksum
                     _MACGetArray
                 _MACFlush
                   _TickGet
                     _GetTickCopy
                 _MACGetArray
                 _MACIsMemCopyDone
                 _MACIsTxReady
                   _MACFlush
                     _TickGet
                       _GetTickCopy
                   _TickGet
                     _GetTickCopy
                 _MACMemCopyAsync
                   _MACGet
                   _MACPut
                 _MACPutArray
                 _MACSetWritePtr
               _IPGetHeader
                 _MACCalcRxChecksum
                   _CalcIPBufferChecksum
                     _MACGetArray
                 _MACGetArray
                 _MACSetReadPtrInRx
                 _SwapIPHeader
                   _swaps
               _MACGetHeader
                 _MACDiscardRx
                 _MACGetArray
                 _memcpy
                 _swaps
               _MACIsLinked
                 _ReadPHYReg
               _UDPDiscard
                 _MACDiscardRx
               _UDPProcess
                 _CalcIPBufferChecksum
                   _MACGetArray
                 _CalcIPChecksum
                 _FindMatchingSocket
                   _memcpy
                 _IPSetRxBuffer
                   _MACSetReadPtrInRx
                 _MACDiscardRx
                 _MACGetArray
                 _swaps
               _UDPTask
                 _ARPIsResolved
                 _ARPResolve
                   _ARPPut
                     _MACFlush
                       _TickGet
                         _GetTickCopy
                     _MACIsTxReady
                       _MACFlush
                         _TickGet
                           _GetTickCopy
                       _TickGet
                         _GetTickCopy
                     _MACPutArray
                     _MACPutHeader
                       _MACPut
                       _MACPutArray
                     _MACSetWritePtr
                     _SwapARPPacket
                       _swaps
                     _memcpy
                 _TickGetDiv256
                   _GetTickCopy
             _UDPFlush
               _CalcIPBufferChecksum
                 _MACGetArray
               _CalcIPChecksum
               _IPPutHeader
                 _CalcIPChecksum
                 _MACPutArray
                 _MACPutHeader
                   _MACPut
                   _MACPutArray
                 _SwapIPHeader
                   _swaps
               _MACFlush
                 _TickGet
                   _GetTickCopy
               _MACPutArray
               _MACSetReadPtr
               _MACSetWritePtr
               _swaps
             _UDPIsPutReady
               _MACIsTxReady
                 _MACFlush
                   _TickGet
                     _GetTickCopy
                 _TickGet
                   _GetTickCopy
               _UDPSetTxBuffer
                 _MACSetWritePtr
             _UDPPutArray
               _MACPutArray
         _isOpenDoorFlag
         _setDoorOpen
           _Beep
             _TickGet
               _GetTickCopy
           _NDCGetRelayActiveTime (ARG)
       _ProcessDoorSwitchIsReleased
     _ProcessStateDoorSwitchPressed
       _IsDoorSwitchPressed
       _SendDoorSwitchPressedTooLongEvent
         _SendUDPMessage
           _DelayMs
           _StackTask
             _ARPProcess
               _ARPPut
                 _MACFlush
                   _TickGet
                     _GetTickCopy
                 _MACIsTxReady
                   _MACFlush
                     _TickGet
                       _GetTickCopy
                   _TickGet
                     _GetTickCopy
                 _MACPutArray
                 _MACPutHeader
                   _MACPut
                   _MACPutArray
                 _MACSetWritePtr
                 _SwapARPPacket
                   _swaps
                 _memcpy
               _MACDiscardRx
               _MACGetArray
               _SwapARPPacket
                 _swaps
             _DHCPInit
               _UDPClose
             _DHCPIsBound
             _DHCPTask
               _LFSRRand
               _MACIsLinked
                 _ReadPHYReg
               _TickGet
                 _GetTickCopy
               _UDPClose
               _UDPIsGetReady
                 _UDPSetRxBuffer
                   _IPSetRxBuffer
                     _MACSetReadPtrInRx
               _UDPIsPutReady
                 _MACIsTxReady
                   _MACFlush
                     _TickGet
                       _GetTickCopy
                   _TickGet
                     _GetTickCopy
                 _UDPSetTxBuffer
                   _MACSetWritePtr
               _UDPOpenEx
                 _memcpy
                 _memset
               __DHCPReceive
                 _UDPDiscard
                   _MACDiscardRx
                 _UDPGet
                   _MACGet
                 _UDPGetArray
                   _MACGetArray
                 _UDPSetRxBuffer
                   _IPSetRxBuffer
                     _MACSetReadPtrInRx
               __DHCPSend
                 _UDPFlush
                   _CalcIPBufferChecksum
                     _MACGetArray
                   _CalcIPChecksum
                   _IPPutHeader
                     _CalcIPChecksum
                     _MACPutArray
                     _MACPutHeader
                       _MACPut
                       _MACPutArray
                     _SwapIPHeader
                       _swaps
                   _MACFlush
                     _TickGet
                       _GetTickCopy
                   _MACPutArray
                   _MACSetReadPtr
                   _MACSetWritePtr
                   _swaps
                 _UDPPut
                   _MACPut
                 _UDPPutArray
                   _MACPutArray
               ___lwmod
                 _LFSRRand (ARG)
               _memset
             _ICMPProcess
               _IPPutHeader
                 _CalcIPChecksum
                 _MACPutArray
                 _MACPutHeader
                   _MACPut
                   _MACPutArray
                 _SwapIPHeader
                   _swaps
               _MACCalcRxChecksum
                 _CalcIPBufferChecksum
                   _MACGetArray
               _MACFlush
                 _TickGet
                   _GetTickCopy
               _MACGetArray
               _MACIsMemCopyDone
               _MACIsTxReady
                 _MACFlush
                   _TickGet
                     _GetTickCopy
                 _TickGet
                   _GetTickCopy
               _MACMemCopyAsync
                 _MACGet
                 _MACPut
               _MACPutArray
               _MACSetWritePtr
             _IPGetHeader
               _MACCalcRxChecksum
                 _CalcIPBufferChecksum
                   _MACGetArray
               _MACGetArray
               _MACSetReadPtrInRx
               _SwapIPHeader
                 _swaps
             _MACGetHeader
               _MACDiscardRx
               _MACGetArray
               _memcpy
               _swaps
             _MACIsLinked
               _ReadPHYReg
             _UDPDiscard
               _MACDiscardRx
             _UDPProcess
               _CalcIPBufferChecksum
                 _MACGetArray
               _CalcIPChecksum
               _FindMatchingSocket
                 _memcpy
               _IPSetRxBuffer
                 _MACSetReadPtrInRx
               _MACDiscardRx
               _MACGetArray
               _swaps
             _UDPTask
               _ARPIsResolved
               _ARPResolve
                 _ARPPut
                   _MACFlush
                     _TickGet
                       _GetTickCopy
                   _MACIsTxReady
                     _MACFlush
                       _TickGet
                         _GetTickCopy
                     _TickGet
                       _GetTickCopy
                   _MACPutArray
                   _MACPutHeader
                     _MACPut
                     _MACPutArray
                   _MACSetWritePtr
                   _SwapARPPacket
                     _swaps
                   _memcpy
               _TickGetDiv256
                 _GetTickCopy
           _UDPFlush
             _CalcIPBufferChecksum
               _MACGetArray
             _CalcIPChecksum
             _IPPutHeader
               _CalcIPChecksum
               _MACPutArray
               _MACPutHeader
                 _MACPut
                 _MACPutArray
               _SwapIPHeader
                 _swaps
             _MACFlush
               _TickGet
                 _GetTickCopy
             _MACPutArray
             _MACSetReadPtr
             _MACSetWritePtr
             _swaps
           _UDPIsPutReady
             _MACIsTxReady
               _MACFlush
                 _TickGet
                   _GetTickCopy
               _TickGet
                 _GetTickCopy
             _UDPSetTxBuffer
               _MACSetWritePtr
           _UDPPutArray
             _MACPutArray
     _ProcessStateDoorSwitchPressedTooLong
       _Beep
         _TickGet
           _GetTickCopy
       _IsDoorSwitchPressed
   _StackInit
     _ARPInit
     _DHCPDisable
       _UDPClose
     _DHCPInit
       _UDPClose
     _GenerateRandomDWORD
       _LFSRRand
       _LFSRSeedRand
         _LFSRRand
     _LFSRSeedRand
       _LFSRRand
     _MACInit
       _MACPut
       _WritePHYReg
     _UDPInit
       _UDPClose
   _StackTask
     _ARPProcess
       _ARPPut
         _MACFlush
           _TickGet
             _GetTickCopy
         _MACIsTxReady
           _MACFlush
             _TickGet
               _GetTickCopy
           _TickGet
             _GetTickCopy
         _MACPutArray
         _MACPutHeader
           _MACPut
           _MACPutArray
         _MACSetWritePtr
         _SwapARPPacket
           _swaps
         _memcpy
       _MACDiscardRx
       _MACGetArray
       _SwapARPPacket
         _swaps
     _DHCPInit
       _UDPClose
     _DHCPIsBound
     _DHCPTask
       _LFSRRand
       _MACIsLinked
         _ReadPHYReg
       _TickGet
         _GetTickCopy
       _UDPClose
       _UDPIsGetReady
         _UDPSetRxBuffer
           _IPSetRxBuffer
             _MACSetReadPtrInRx
       _UDPIsPutReady
         _MACIsTxReady
           _MACFlush
             _TickGet
               _GetTickCopy
           _TickGet
             _GetTickCopy
         _UDPSetTxBuffer
           _MACSetWritePtr
       _UDPOpenEx
         _memcpy
         _memset
       __DHCPReceive
         _UDPDiscard
           _MACDiscardRx
         _UDPGet
           _MACGet
         _UDPGetArray
           _MACGetArray
         _UDPSetRxBuffer
           _IPSetRxBuffer
             _MACSetReadPtrInRx
       __DHCPSend
         _UDPFlush
           _CalcIPBufferChecksum
             _MACGetArray
           _CalcIPChecksum
           _IPPutHeader
             _CalcIPChecksum
             _MACPutArray
             _MACPutHeader
               _MACPut
               _MACPutArray
             _SwapIPHeader
               _swaps
           _MACFlush
             _TickGet
               _GetTickCopy
           _MACPutArray
           _MACSetReadPtr
           _MACSetWritePtr
           _swaps
         _UDPPut
           _MACPut
         _UDPPutArray
           _MACPutArray
       ___lwmod
         _LFSRRand (ARG)
       _memset
     _ICMPProcess
       _IPPutHeader
         _CalcIPChecksum
         _MACPutArray
         _MACPutHeader
           _MACPut
           _MACPutArray
         _SwapIPHeader
           _swaps
       _MACCalcRxChecksum
         _CalcIPBufferChecksum
           _MACGetArray
       _MACFlush
         _TickGet
           _GetTickCopy
       _MACGetArray
       _MACIsMemCopyDone
       _MACIsTxReady
         _MACFlush
           _TickGet
             _GetTickCopy
         _TickGet
           _GetTickCopy
       _MACMemCopyAsync
         _MACGet
         _MACPut
       _MACPutArray
       _MACSetWritePtr
     _IPGetHeader
       _MACCalcRxChecksum
         _CalcIPBufferChecksum
           _MACGetArray
       _MACGetArray
       _MACSetReadPtrInRx
       _SwapIPHeader
         _swaps
     _MACGetHeader
       _MACDiscardRx
       _MACGetArray
       _memcpy
       _swaps
     _MACIsLinked
       _ReadPHYReg
     _UDPDiscard
       _MACDiscardRx
     _UDPProcess
       _CalcIPBufferChecksum
         _MACGetArray
       _CalcIPChecksum
       _FindMatchingSocket
         _memcpy
       _IPSetRxBuffer
         _MACSetReadPtrInRx
       _MACDiscardRx
       _MACGetArray
       _swaps
     _UDPTask
       _ARPIsResolved
       _ARPResolve
         _ARPPut
           _MACFlush
             _TickGet
               _GetTickCopy
           _MACIsTxReady
             _MACFlush
               _TickGet
                 _GetTickCopy
             _TickGet
               _GetTickCopy
           _MACPutArray
           _MACPutHeader
             _MACPut
             _MACPutArray
           _MACSetWritePtr
           _SwapARPPacket
             _swaps
           _memcpy
       _TickGetDiv256
         _GetTickCopy
   _TickGet
     _GetTickCopy
   _TickInit
   _XEEInit

 _LowISR (ROOT)
   _RTC
     _BeepTimerUpdate
       i1_TickGet
         i1_GetTickCopy
     _DoorIndicatorTimerUpdate
     _DoorSwitchTimerUpdate
     _NDCTick
   _TickUpdate

 _HighISR (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             E7F      0     1F4      38       13.5%
BITBANK13          100      0       0      31        0.0%
BANK13             100      0       0      32        0.0%
BITBANK12          100      0       0      30        0.0%
BANK12             100      0       0      28        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0      41      11       25.4%
BITBANK2           100      0       0       8        0.0%
BANK2              100     14      FA       9       97.7%
BITBANK1           100      0       0       6        0.0%
BANK1              100      F      F7       7       96.5%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     67      9F       5       99.4%
BITBANK14           80      0       0      33        0.0%
BANK14              80      0       0      34        0.0%
BITBANK15           60      0       0      35        0.0%
BANK15              60      0       0      36        0.0%
BIGRAM_1            60      0       0      37        0.0%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     28      43       1       71.3%
BITSFR_1             0      0       0      40        0.0%
SFR_1                0      0       0      40        0.0%
BITSFR               0      0       0      40        0.0%
SFR                  0      0       0      40        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     314      29        0.0%
DATA                 0      0     508       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.35 build -356382666 
Symbol Table                                                                                   Wed Oct 05 05:07:18 2016

          __end_of_SendDoorSwitchPressedTooLongEvent 45B6           __size_of_SendDoorSwitchPressedTooLongEvent 005C  
                ??_SendDoorSwitchPressedTooLongEvent 0029                   ?_SendDoorSwitchPressedTooLongEvent 0001  
                  _SendDoorSwitchPressedTooLongEvent 455A                                           __CFG_BW$16 000000  
                                _SendDoorClosedEvent 4612                              ??_SendDeviceReadySignal 0029  
                              __size_of__DHCPReceive 0276                                  IPGetHeader@protocol 0087  
                                        ?_ARPResolve 0060                                         MACGetArray@i 0020  
                                       MACGetArray@w 0021                                          ?_ARPProcess 0001  
                               __size_of_WritePHYReg 002E                                                   l57 4DA4  
                                                 l58 4D9E                                                   l84 3DC8  
                                       ___awdiv@sign 0021                           StackTask@bCurrentLinkState 00BC  
                                                 bsr 000FE0                                        _InitAppConfig 3B78  
                             UDPProcess@pseudoHeader 0087                                ?_CalcIPBufferChecksum 0023  
                            __size_of_InitStartState 001E    _m_doorIndicatorOpenTooLongFunctionalityActiveFlag 00D3  
                                       __CFG_CP0$OFF 000000                   __end_of_ProcessStateDoorSwitchIdle 547C  
                         _ProcessStateDoorSwitchIdle 546C                                       _CalcIPChecksum 3DCC  
                                       ?_MACPutArray 001C                                                  l156 5432  
                                                l181 3EFA                                                  l460 17D0  
                                                l546 3672                       GenerateRandomDWORD@dwTotalTime 0078  
                                                l593 373E                                                  l498 3FB2  
                                                l792 29CE                                                  l697 37CA  
                                                l796 2A7C                                                  _PR2 000FCB  
                                                _RTC 52A2                                     ARPResolve@packet 0072  
                                        __DHCPSend@i 00A0                                       ??_MACGetHeader 0029  
                                                prod 000FF3                                                  wreg 000FE8  
                                       __CFG_IESO$ON 000000                                       MACGetArray@len 001E  
                                     MACGetArray@val 001C                                        _LastPutSocket 01E6  
                  __size_of_DoorIndicatorTimerUpdate 002C                                         __CFG_MODE$MM 000000  
                          ?_DoorIndicatorTimerUpdate 0001                                                 EDATA 000F61  
                               ?_SendDoorClosedEvent 0001                                        ?_MACPutHeader 0020  
                                    __end_of_ARPInit 5390                                      __end_of_MACInit 35E8  
                                     ??_MACDiscardRx 001C                                  __end_of_GetTickCopy 5074  
                         __size_of_SendVersionString 00BE                                                 ?_RTC 0001  
                                       ?_NDCInitData 0001                                      __end_of_NDCTick 53A8  
                                       __CFG_WDT$OFF 000000                                        UDPProcess@len 0080  
                                               l2021 3886                                                 l2102 4B4C  
                                               l1321 2CC2                                                 l2018 3830  
                                               l2130 4EE2                                                 l1331 32C0  
                                               l2211 30A6                                                 l2028 47D2  
                                               l1324 2C50                                                 l2124 4F56  
                                               l1333 32D0                                                 l2221 3136  
                                               l1326 2CAE                                                 l2214 30FE  
                                               l1247 504A                                                 l1440 11C2  
                                               l2080 2914                                                 l1532 1F1C  
                                               l1452 1372                                                 l1436 1036  
                                               l2084 2950                                                 l1453 1386  
                                               l1542 2006                                                 l2079 28F8  
                                               l1484 1CD0                                                 l1830 432C  
                                               l1399 4D46                                                 l2631 2E94  
                                               l1817 4F2A                                                 l1586 39B4  
                                               l2651 4D30                                                 l1851 2D64  
                                               l1846 2CEA                                                 l1766 253E  
                                               l2574 41C0                                                 l2584 43CE  
                                               l1986 3532                                                 l9010 50EE  
                                               l8044 511E                                                 l8052 5136  
                                               l9014 5102                                                 l9112 51A6  
                                               l9032 3E2E                                                 l9024 3DEA  
                                               l7530 54BC                                       ?_MACSetReadPtr 001C  
                                               l9060 5212                                                 l9204 31E2  
                                               l9028 3E0A                                                 l7620 4DAA  
                                               l9054 47D6                                                 l9070 4B1A  
                                               l9222 502A                                                 l9302 4350  
                                               l9206 31E8                                                 l9136 4DDA  
                                               l9128 4DB6                                                 l9400 271A  
                                               l9232 4748                                                 l7704 54AA  
                                               l7616 4D96                                                 l9322 33AC  
                                               l9074 4B2A                                                 l9226 503A  
                                               l9410 2758                                                 l9092 47EE  
                                               l9076 4B3A                                                 l9500 3E5A  
                                               l9084 4E4E                                                 l9420 278A  
                                               l9412 275E                                                 l9180 316C  
                                               l9236 4764                                                 l9078 4B3E  
                                               l9432 27EE                                                 l9424 27A2  
                                               l9440 2826                                                 l9416 277A  
                                               l9184 3180                                                 l9098 4822  
                                               l9186 3188                                                 l9282 26D8  
                                               l9700 1D18                                                 l9196 31B6  
                                               l9462 4B60                                                 l9438 281C  
                                               l9358 500E                                                 l9710 1D40  
                                               l9198 31BC                                                 l9374 4E9A  
                                               l9630 206E                                                 l9622 2044  
                                               l9550 3390                                                 l9448 2842  
                                               l9608 1FD0                                                 l9490 4F38  
                                               l9474 4CA4                                                 l9298 4332  
                                               l9722 1D54                                                 l9706 1D2A  
                                               l9626 2060                                                 l9618 2036  
                                               l9802 42E4                                                 l9468 4C8A  
                                               l9732 1D7A                                                 l9636 2098  
                                               l9628 2068                                                 l9900 2D68  
                                               l9556 33A8                                                 l9734 1D80  
                                               l9670 1CC2                                                 l9654 1C7C  
                                               l9582 1F66                                                 l9574 1F4A  
                                               l9566 1F20                                                 l9822 286C  
                                               l9744 1DC4                                                 l9736 1D86  
                                               l9728 1D66                                                 l9576 1F62  
                                               l9840 28D0                                                 l9832 28AC  
                                               l9770 1E4E                                                 l9746 1DCA  
                                               l9738 1D90                                                 l9930 4D26  
                                               l9922 4D08                                                 l9834 28B4  
                                               l9914 2DC2                                                 l9772 1E54  
                                               l9764 1DF0                                                 l9676 1CDE  
                                               l9596 1F8C                                                 l9924 4D10  
                                               l9844 28E0                                                 l9828 2880  
                                               l9782 1EA6                                                 l9758 1DDE  
                                               l9774 1E5E                                                 l9926 4D14  
                                               STR_1 1001                                                 l9952 4D60  
                                               l9768 1E46                                                 l9688 1D02  
                                               l9776 1E82                                                 l9792 1ECA  
                                               l9872 297A                                                 l9856 2944  
                                               STR_2 1001                                                 STR_3 1006  
                                               l9946 4D50                                                 l9786 1EC0  
                                               l9778 1E8A                                                 l9890 2CF8  
                                __size_of_DHCPEnable 001A                                                 l9968 1010  
                                               u8120 3308                                                 u9020 15DC  
                                               u8151 339E                                                 i1l89 4FB4  
                                               u9301 2C6A                                                 u9311 2C8A  
                                               u7730 4818                                                 u8530 1EBE  
                                               u9271 2C06                                                 u7760 51A0  
                                               u9440 2B8C                                                 u7737 480E  
                                               u8490 1E30                                                 u9530 2346  
                                               u9540 2356                                                 u9620 4724  
                                               u8495 1E24                                                 u8920 1328  
                              ??_isDoorIndicatorOpen 001C                                                 u8931 1332  
                                               u8870 11A4                                                 _TMR2 000FCC  
                                               _Beep 4EEA                              ?_DoorIndicatorGetStatus 0001  
                            UDPOpenEx@remoteHostType 0064                                        __CFG_FCMEN$ON 000000  
                                       __CFG_STVR$ON 000000                                      __end_of_UDPInit 53EA  
                              FormatNetBIOSName@Name 0021                                                 _main 307E  
                                    __end_of_UDPTask 2596                               __end_of_MACSetWritePtr 54B6  
                                    __end_of_XEEInit 53D6                                                 _ltoa 4BEE  
                                     ??_MACIsTxReady 0025                                                 fsr1h 000FE2  
                                               fsr2h 000FDA                                                 indf1 000FE7  
                                               fsr1l 000FE1                                                 indf2 000FDF  
                                               fsr2l 000FD9                                                 btemp 0044  
                                       __DHCPReceive 1C5A                             MACMemCopyAsync@WriteSave 0062  
                        ?_ProcessDoorSwitchIsPressed 0001                               __end_of_isOpenDoorFlag 54D4  
                           GenerateRandomDWORD@wTime 0088                                                 prodh 000FF4  
                            ??_CheckWaitForCodeTimer 0060                                                 prodl 000FF3  
                                               start 005E                                        __CFG_FOSC2$ON 000000  
                                    __end_of_DelayMs 4C7A                                     __end_of_DHCPInit 4D76  
                                   __end_of_DHCPTask 1670                                      __end_of_HighISR 4068  
                       __end_of_ProcessDoorIndicator 5310                                     MACGetHeader@type 0028  
                        SendVersionString@textLength 01ED                               __size_of_NDCResetState 0022  
                                       ___param_bank 000010                                      _dwInternalTicks 0120  
                                              ??_RTC 0015                                     CheckKeypad@index 02F8  
                                   ??_UDPSetRxBuffer 0026         HandleConfigData@doorSwitchPressedTooLongTime 006C  
                                        _CheckKeypad 1670                                     __end_of_MACFlush 522A  
                                    __end_of_TickGet 515E                                       ?_InitAppConfig 0001  
                                      _m_NBSNodeInfo 01AC                     __end_of_CheckConfigDataWaitTimer 4BEE  
                             __end_of_CalcIPChecksum 3E58                                     ??_UDPSetTxBuffer 0022  
                                              ?_Beep 0024                                        __CFG_WAIT$OFF 000000  
                       ??_ProcessDoorIndicatorIsOpen 0029                                       __CFG_CCP2MX$ON 000000  
                                              l10000 1164                                                l10024 12E8  
                                              l10016 11D6                                                l10008 11BC  
                                              l10112 1620                                                l11000 2EC4  
                                              l10034 1334                                                l10114 1666  
                                              l10130 244A                                                l10204 2BC0  
                                              l10108 1610                                                l10060 13A6  
                                              l10150 258C                                                l10126 2418  
                                              l11110 1878                                                l10224 2C20  
                                              l10216 2BF4                                                l10064 13D6  
                                              l10304 39C6                                                l10160 3826  
                                              l10144 2552                                                l10136 2492  
                                              l10400 2300                                                l11120 18D6  
                                              l11016 167A                                                l10234 2C78  
                                              l10058 139C                                                l10314 3A1E  
                                              l10244 2CB4                                                l10076 14A6  
                                              l10068 1480                                                l10260 2FDA  
                                              l10148 256A                                                l10412 23C6  
                                              l11124 18F8                                                l11140 195C  
                                              l10500 413C                                                l10430 4C4A  
                                              l10094 15E6                                                l10086 159E  
                                              l10254 2FB8                                                l10414 23DC  
                                              l10422 2404                                                l11134 1948  
                                              l11070 179C                                                l10600 4A9A  
                                              l10432 4C64                                                l10272 3016  
                                              l10520 4180                                                l10504 4146  
                                              l10602 4AAC                                                l10426 4C38  
                                              l10434 4C6A                                                l10194 38C2  
                                              l10354 2B92                                                l10450 46D0  
                                              l10530 41B2                                                l10522 4184  
                                              l11082 17D6                                                l11402 2A32  
                                              l10428 4C3E                                                l10196 38CC  
                                              l10348 2B8C                                                l10460 4702  
                                              l10540 439A                                                l10612 2DD6  
                                              l10508 4152                                                l11324 1C0C  
                                              l11228 19C6                                                l11412 2A76  
                                              l11500 53D8                                                l10278 303C  
                                              l10390 22DA                                                l10518 4174  
                                              l10542 439E                                                l10622 2E2A  
                                              l11262 1AEE                                                l11238 19F2  
                                              l10392 22DE                                                l10384 22CA  
                                              l11088 17FE                                                l11096 1832  
                                              l11344 1C42                                                l11336 1C2E  
                                              l11280 1B40                                                l11512 53FA  
                                              l11362 4864                                                l11370 4880  
                                              l10546 43C0                                                l10538 438E  
                                              l11098 1844                                                l10490 411E  
                                              l10482 4106                                                l10562 3D58  
                                              l11186 3B10                                                l10492 4122  
                                              l10476 40F6                                                l11268 1B0E  
                                              l11366 4876                                                l11358 4852  
                                              l10398 22FA                                                l10566 3DB2  
                                              l10830 2280                                                l10742 3628  
                                              l11368 487E                                                l10488 4116  
                                              l10592 3F12                                                l11296 1B8E  
                                              l11384 29C6                                                l11554 36BC  
                                              l10666 4CD4                                                l10860 4DF4  
                                              l10588 3EFC                                                l11572 36F6  
                                              l11564 36D6                                                l10852 4E7E  
                                              l10844 4E6C                                                l11582 3720  
                                              l11558 36C4                                                l11398 2A26  
                                              l10688 4C12                                                l10928 50BA  
                                              l11728 4A06                                                l10866 4E0C  
                                              l10946 49A4                                                l11594 374A  
                                              l10868 4E10                                                l10956 49C8  
                                              l11692 37E8                                                l10972 3CAC  
                                              l11764 30EC                                                l10990 4296  
                                              l11782 3124                                                l10984 425A  
                                              l11784 312C                                                l11776 3112  
                                              l11698 380C                                                l10994 429C  
                                              l10898 4F90                                                l11778 311A  
                                              l11796 3146                                                ?_main 0001  
                                   __end_of_LFSRRand 3EE4                                      __end_of___awdiv 415C  
                                              ?_ltoa 006D                                      _activeUDPSocket 00CE  
                                    __end_of___lldiv 41D2                                                u11020 30D6  
                                              u10230 3C58                                                u10330 4962  
                                              u10260 4A5A                                                u10500 3900  
                                              u10510 3976                                                u10360 16AA  
                                              u10520 3B04                                                _T0CON 000FD5  
                                              u10290 428A                                                u10610 19EC  
                                    ___awdiv@divisor 001E                                                u10480 4AEE  
                                              u10560 4438                                                _T1CON 000FCD  
                                    __end_of___llmod 43E0                                 __size_of_DHCPDisable 0014  
                                              u10490 4BD4                                                _T2CON 000FCA  
                                              u10850 2A08                                                u10971 376C  
                                    ??_ARPIsResolved 0060                                                u10990 381C  
                                              _ERDPT 000F7A                                 __size_of_DHCPIsBound 0008  
                                              _MICMD 000EB2                                      __end_of___lwmod 4D3A  
                                              _ERXND 000EEA                                                _MIRDH 000EB9  
                                              _ETXND 000EE6                                                _MIRDL 000EB8  
                                              i2l681 4060                                                i2l682 4030  
                                              _ERXST 000EE8                                                i2l684 4052  
                                              i2l678 3FF2                                                i2l687 405E  
                                    ___awdiv@counter 0020                                                _EWRPT 000EE2  
                                              _ETXST 000EE4                                                _TMR0H 000FD7  
                                              _TMR1H 000FCF                                                _TMR0L 000FD6  
                                              _PRODH 000FF4                                                _TMR1L 000FCE  
                                              _PRODL 000FF3                                                _TRISA 000F92  
                                              _TRISD 000F95                                                _TRISF 000F97  
                                              _TRISG 000F98                                                _TRISH 000F99  
                        __end_of_MiscHexStringToByte 49D2                                                _Cache 010A  
                                     __CFG_ECCPMX$ON 000000                     DoorSwitchUpdateConfig@configData 0024  
                     ??_ProcessDoorIndicatorIsClosed 001C                           __size_of_FormatNetBIOSName 0056  
                                              _Flags 003B                    __size_of_HandleConnectionResponse 0060  
                          ?_HandleConnectionResponse 0001                                       __CFG_EASHFT$ON 000000  
                                     ??_MACPutHeader 0025                                ??_SendDoorClosedEvent 0029  
                                        ?_UDPDiscard 0001                                     __end_of_UDPClose 4BA2  
                                   ?_BeepTimerUpdate 0001                                     __end_of_UDPFlush 2710  
                           ??_DoorSwitchUpdateConfig 0060                           __size_of_ProcessDoorSwitch 001C  
                                   ??_SendDoorStatus 0029                                 CalcIPChecksum@buffer 0022  
                     __end_of_DoorIndicatorGetStatus 54BE                                   __size_of_UDPOpenEx 0144  
                                              _swaps 5284                                                _ultoa 2DC6  
                            IPGetHeader@CalcChecksum 008D                                  __size_of_ARPResolve 00C4  
                                 __size_ofi1_TickGet 0026                          ?_SendDoorSwitchPressedEvent 0001  
                             _g_serializedMACAddress 00F9                                  __size_of_ARPProcess 0106  
                               UDPFlush@wReadPtrSave 007D                                                tablat 000FF5  
                                __DHCPReceive@lbDone 0064                                                plusw1 000FE3  
                                              plusw2 000FDB                                          ?_UDPProcess 007D  
                         ??_SendDoorOpenTooLongEvent 0029                                                status 000FD8  
       __end_of_ProcessStateDoorIndicatorOpenTooLong 5248        __size_of_ProcessStateDoorIndicatorOpenTooLong 001E  
             ??_ProcessStateDoorIndicatorOpenTooLong 0029                ?_ProcessStateDoorIndicatorOpenTooLong 0001  
               _ProcessStateDoorIndicatorOpenTooLong 522A                  DoorIndicatorUpdateConfig@configData 0024  
                                    ?_MACSetWritePtr 001C                                         ?_IPGetHeader 0085  
                            MACSetReadPtrInRx@ReadPT 0020                          MACDiscardRx@NewRXRDLocation 001C  
                                    ?_isOpenDoorFlag 0001                                           _ReadPHYReg 4F46  
                                 __size_of__DHCPSend 01DE                                      ARPProcess@smARP 0172  
                                     __CFG_ETHLED$ON 000000                                 GenerateRandomDWORD@w 0076  
                                       ARPPut@packet 0028                              __size_of_GetWiegandCode 004E  
                                       __end_of_Beep 4F18                           ?_DoorIndicatorUpdateConfig 0024  
                              __DHCPSend@messageType 00A1                                      __initialization 3CB4  
                                   _MACIsMemCopyDone 54C6                                   _FindMatchingSocket 2CC4  
                                       __end_of_main 3152                                _DoorSwitchTimerUpdate 53A8  
                                       __end_of_ltoa 4C36                                  _GenerateRandomDWORD 2984  
                          SendUDPMessage@messageSize 01EA                               ??_CalcIPBufferChecksum 0025  
                            MACSetReadPtrInRx@offset 001C                                      ?_CalcIPChecksum 001C  
                                             ??_Beep 0028                                    UDPOpenEx@NextPort 0164  
                                       ?_setDoorOpen 0060                                    _MACCalcRxChecksum 42B2  
                                             ??_main 01F3                                  ?_FindMatchingSocket 0026  
                            SendUDPMessage@udpSocket 01EC                                               ??_ltoa 0029  
                __end_of_ProcessDoorSwitchIsReleased 54D0                          _ProcessDoorSwitchIsReleased 54CC  
                                   __end_of_TickInit 546C                                        __activetblptr 000003  
                                        _GetTickCopy 504A                                   ?_MACCalcRxChecksum 007D  
                                      ?_LFSRSeedRand 001F                                            ??_ARPInit 001C  
                                          ??_MACInit 0020                                      CalcIPChecksum@i 0020  
                                 DHCPInit@vInterface 0001                                            ??_NDCTick 0001  
              __end_of_ProcessStateDoorIndicatorOpen 4FA0               __size_of_ProcessStateDoorIndicatorOpen 002C  
                      _ProcessStateDoorIndicatorOpen 4F74                                        _NDCResetState 51A8  
                                    ??_MACSetReadPtr 001E                                 ?_GenerateRandomDWORD 0070  
                                          ??_UDPInit 001D                                               _ADCON0 000FC2  
                                             _ADCON1 000FC1                                               _ADCON2 000FC0  
                                          ??_UDPTask 008E                                            ??_XEEInit 001C  
                                   ___llmod@dividend 001C                                  ??_MACCalcRxChecksum 0027  
                                             _EDMAND 000EF2                                     ___awdiv@dividend 001C  
                                             _EDMAST 000EF0                                               _MAADR1 000E84  
                                             _MAADR2 000E85                                               ?_swaps 001C  
                                             ?_ultoa 0060                                               _MAADR3 000E82  
                                             _MAADR4 000E83                                               _MAADR5 000E80  
                                             _MAADR6 000E81                                               _MACON1 000EA0  
                                             _MACON3 000EA2                                               _MACON4 000EA3  
                                             _MAIPGH 000EA7                                               _ERDPTH 000F7B  
                                             _MAIPGL 000EA6                                               _ERDPTL 000F7A  
                                             _MACGet 54D8                                               _NDCFSM 36A6  
                                             i1l1247 5074                                               _ARPPut 33AA  
                                             _MACPut 548C                                               _INTCON 000FF2  
                                             i2l8910 4014                                               i2l8912 401A  
                                             i2l8914 401C                                               i2l8928 404A  
                                          ??_DelayMs 001E                                  __DHCPSend@bRenewing 0099  
                 __size_of_SendDoorTimerExpiredEvent 005E                                            ??_HighISR 0001  
                               ??_FindMatchingSocket 0060                         __size_of_IsDoorSwitchPressed 0012  
                                             _UDPGet 4FF6                                               _UDPPut 4E8C  
                                         _TickUpdate 5412                                __end_of_IPSetRxBuffer 545C  
                               __size_of_ICMPProcess 00AC                                 __size_of_MACGetArray 004C  
                                       ?_IPPutHeader 0060                                               _LowISR 0018  
                              _SendConnectionRequest 38D0                                            ??_TickGet 0020  
                                     __CFG_XINST$OFF 000000                                 __end_of_MACGetHeader 38D0  
                                  IPPutHeader@header 0065                                         ?_UDPGetArray 0023  
                               __size_of_MACIsLinked 0014                                            DHCPInit@i 001D  
                  __end_of_DoorIndicatorUpdateConfig 3DCC                                      ??_InitAppConfig 0026  
                                          DHCPTask@i 00AE                                         ??_DHCPEnable 001C  
                                          ??___awdiv 0020                                  __size_of_UDPDiscard 0012  
                                     __DHCPSend$6883 009E                                    IPPutHeader@remote 0060  
                                          ??___lldiv 0024                            __end_of_MACCalcRxChecksum 431A  
                                          ??___llmod 0024                                 __end_of_MACDiscardRx 4DEA  
                            StackTask@bLastLinkState 0174                                      WritePHYReg@Data 001C  
                                          ??___lwmod 0023                                  _HandleReceivedBytes 1984  
                                  __end_of_UDPOpenEx 2854                                    ?_HandleConfigData 0001  
                                             _memcpy 47DC                                       _InitStartState 5266  
                                             _memset 5020                                    __end_ofi1_TickGet 5184  
                                             clear_0 3CBC                                               clear_1 3CCE  
                                             clear_2 3CDA                                               clear_3 3CE6  
                                             clear_4 3CF2                                               clear_5 3CFE  
                                   ___awdiv@quotient 0022                                StackTask@cIPFrameType 00BF  
                                      _m_wiegandCode 0158                                   ??_HandleConfigData 0064  
                                     ??_LFSRSeedRand 0023                                               _strupr 4DEA  
                                     __DHCPReceive@i 006B                                       __DHCPReceive@j 0066  
                                     __DHCPReceive@v 006C                                       __DHCPSend@MyIP 009A  
                              __end_ofi1_GetTickCopy 509E                         ??_CheckIfFirstTimeConnection 001C  
                                __size_of_UDPProcess 011C                        GenerateRandomDWORD@wLastValue 0082  
                               __end_of_MACIsTxReady 51A8                                _NDCGetRelayActiveTime 5498  
                           _CheckConfigDataWaitTimer 4BA2                                         __pdataCOMRAM 0043  
                                 __size_of_StackInit 004E                                   __size_of_StackTask 0192  
                                   ReadPHYReg@Result 001F                                    __end_of__DHCPSend 20AE  
                                     ?_NDCResetState 0001                                 __size_of_MACPutArray 0026  
                __size_of_ProcessDoorSwitchIsPressed 0040                                         __mediumconst 0000  
                                             tblptrh 000FF7                                               tblptrl 000FF6  
                                             tblptru 000FF8                                     UDPPutArray@cData 0020  
                              ??_GenerateRandomDWORD 0074                                            ?_DHCPInit 0001  
                                       ?_UDPPutArray 0020                                 _ProcessDoorIndicator 52F6  
                                          ?_DHCPTask 0001                                               swaps@b 001E  
                                             ultoa@c 006C                                               swaps@t 001F  
                                             swaps@v 001C                                               ultoa@v 0068  
                    __size_of_DoorSwitchUpdateConfig 0088                                     UDPPutArray@wTemp 0024  
                                   ARPProcess@Target 0100                                 ?_HandleReceivedBytes 0001  
                           __size_of_MACMemCopyAsync 0130                                      __CFG_FOSC$HSPLL 000000  
                                 __end_of_DHCPEnable 5378                               __size_of_SendHeartBeat 00A6  
                                 _m_timer2postscaler 0177                                       IPGetHeader@len 0088  
                                 MACGetHeader@header 0060                    __size_of_KeyPressedResetIdleTimer 004E  
                                          ?_MACFlush 0001                                 __size_of_NDCInitData 001E  
                                         __accesstop 0060                              __end_of__initialization 3D36  
                          ?_KeyPressedResetIdleTimer 0001                               __size_of_OpenUDPsocket 009A  
                                   ARPProcess@packet 0060                                   FormatNetBIOSName@i 0023  
                                 MACGetHeader@remote 0026                                 CheckKeypad@stopIndex 02F0  
                                      ___rparam_used 000001                                            MACFlush@i 0024  
                                        ?_ReadPHYReg 001C                                            ?_LFSRRand 001C  
                              __end_of_SwapARPPacket 4246                                      _doorSwitchState 00CF  
                             ?_DoorSwitchTimerUpdate 0001                                            MACPut@val 001C  
                                     __pcstackCOMRAM 0001                                       _m_openDoorFlag 00D7  
                               __end_of_MACPutHeader 47DC                                    _m_timerKeyPressed 0144  
                                       __pidataBANK1 51CA                               __end_of_InitStartState 5284  
                                     _m_openDoorTime 0138                                         ??_ARPResolve 0062  
                                       ??_ARPProcess 0029                             __size_of_InitializeBoard 00BC  
                                          ?_UDPClose 0001                     __end_of_DoorIndicatorTimerUpdate 4FCC  
                                          ?_UDPFlush 0001                   __end_of_ProcessDoorIndicatorIsOpen 520A  
                         _ProcessDoorIndicatorIsOpen 51EA                                __end_of_UDPIsGetReady 4F46  
                     __size_of_SendDeviceReadySignal 0054                                        __end_of_swaps 52A2  
                                      __end_of_ultoa 2EB6                        __end_of_SendDeviceReadySignal 48DC  
                __size_of_SendDoorSwitchPressedEvent 005E                          ?_ProcessStateDoorSwitchIdle 0001  
                                          LFSRRand@i 001E                                ?_ProcessDoorIndicator 0001  
                                       _EEPROMBuffer 0321                                           ??_DHCPInit 001D  
                                         ??_DHCPTask 00A2                __end_of_ProcessStateDoorSwitchPressed 50C6  
             __size_of_ProcessStateDoorSwitchPressed 0028                        _ProcessStateDoorSwitchPressed 509E  
                              ??_HandleReceivedBytes 01EF                                 StackTask@tempLocalIP 00C0  
                            _m_timerReceiveHeartbeat 0148                                              ??_ultoa 0029  
                                            ??_swaps 001E                                          __Identifier 016A  
                                         __pbssBANK0 00C7                                           __pbssBANK1 0100  
                                         __pbssBANK2 0200                                              ?_MACGet 0001  
                                         __pbssBANK3 0300                                              ?_NDCFSM 0001  
                                            ?_ARPPut 0001                                __end_of_UDPIsPutReady 4CBC  
                                            ?_MACPut 0001                       ?_ProcessStateDoorIndicatorOpen 0001  
                             __size_of_TickGetDiv256 0026                                DHCPDisable@vInterface 0001  
                                 __end_of_ARPResolve 32E6                                           ??_MACFlush 0024  
                                 __end_of_ARPProcess 2CC4                                              ?_UDPGet 0001  
                                            ?_UDPPut 0001                                          ?_TickUpdate 0001  
                                  _m_flashDiodeState 00D5                         __size_of_CheckHeartBeatTimer 0052  
                             ?_SendConnectionRequest 0001                                           ??_LFSRRand 0060  
                          _DHCPClientInitializedOnce 0175                                       _GetWiegandCode 4A6E  
                                  __end_of_StackInit 4A20                                            ?_TickInit 0001  
                     FindMatchingSocket@partialMatch 0069                                    __end_of_StackTask 2414  
                                            ?_LowISR 0001                       __size_of_CheckWaitForCodeTimer 00E4  
                                     _m_tempDoorTime 013C                                 __size_of_IPGetHeader 00E4  
                                   _m_keyPressedFlag 00D6                                        ??_WritePHYReg 001E  
                      __end_of_CheckWaitForCodeTimer 2F9A                               _DoorSwitchUpdateConfig 3EE4  
                              _CheckFlashingLEDTimer 4246                                      ?_InitStartState 0001  
                                            UDPGet@v 001C                     __end_of_HandleConnectionResponse 4440  
                         __size_of_MACCalcRxChecksum 0068                                           ??_UDPClose 001C  
                                       ?_CheckKeypad 0001                                           ??_UDPFlush 0028  
                                            UDPPut@v 001D                                      setDoorOpen@time 0060  
                                            ?_memcpy 001C                           UDPGetArray@wBytesAvailable 0027  
                                      _SendHeartBeat 3AD2                                              ?_memset 001C  
                                         _wGetOffset 0037                                              _EDMADST 000EF4  
                                      _OpenUDPsocket 3C1A                                           _m_beepFlag 0176  
                             ?_NDCGetRelayActiveTime 001C                                              _MABBIPG 000EA4  
                                            ?_strupr 001C                                      ??_NDCResetState 0024  
                                            _EPKTCNT 000ED9                                              _ARPInit 5378  
                                            _MACInit 352A                                 __size_of_setDoorOpen 002A  
                                            _MAMXFLH 000EAB                                              _MAMXFLL 000EAA  
                                            _LCDText 0300                                            UDPClose@s 001C  
                                            _EIRbits 000F60                                              _NDCTick 5390  
                                __size_of_ReadPHYReg 002E                          __end_of_isDoorIndicatorOpen 4DB0  
                                          UDPFlush@h 0085                                            UDPFlush@p 0081  
                                 _MACPutHeader$10599 0025                                         ??_UDPDiscard 001E  
                                   MACPutHeader@type 0022                                              _OSCTUNE 000F9B  
                                    __CFG_WDTPS$2048 000000                                              _SSP1BUF 000FC9  
                           __end_of_MACIsMemCopyDone 54CC                                              _UDPInit 53D6  
                                   ??_MACSetWritePtr 001E                                            UDPTask@ss 0092  
                                            _UDPTask 2414                                              _XEEInit 53C0  
                                   ??_isOpenDoorFlag 001C                                       main@localTimer 0160  
                                    TickGetDiv256@dw 0020                                      __size_of_MACGet 0002  
                                    __size_of_NDCFSM 00BC                                              _DelayMs 4C36  
                                    __size_of_ARPPut 00C0                                      __size_of_MACPut 000C  
                                            _HighISR 0008                                         ??_UDPProcess 0029  
                              __size_of_MACGetHeader 00B2                               __end_of_GetWiegandCode 4ABC  
                                    __size_of_UDPGet 002A                                  WritePHYReg@Register 001E  
                                    __size_of_UDPPut 0030                                  StackTask@cFrameType 00BB  
                               __end_of_LFSRSeedRand 4E8C                                      _m_messageBuffer 0341  
                              __size_of_MACDiscardRx 003A                                           ??_TickInit 001C  
                                            __Hparam 0000                                    ??_MACMemCopyAsync 0023  
                                            _TickGet 5138                                     ??_CalcIPChecksum 001E  
                            __size_of_SendUDPMessage 005C                                              __Lparam 0000  
                                    __size_of_LowISR 0046                              __size_of_CheckDoorTimer 0026  
                              _m_timerWaitForPinCode 0154                                       IPPutHeader@len 0063  
                     CalcIPBufferChecksum@DataBuffer 0060                          ??_DoorIndicatorUpdateConfig 0060  
                                          _ECON1bits 000FD2                                            _ECON2bits 000EFE  
                               __size_of_IPPutHeader 00A8                                              ___awdiv 40E4  
                                            ___lldiv 415C                                           _m_userCode 0114  
                                            ___llmod 437E                                 __size_of_UDPGetArray 0064  
                                     ?_SendHeartBeat 0001                                   __end_of_UDPDiscard 544A  
                                            ___lwmod 4CFC                                __size_of_MACIsTxReady 0024  
                                          Beep@value 0024                                        ??_DHCPDisable 001D  
                                       __psmallconst 1000                                        ??_DHCPIsBound 001C  
                                      _TickGetDiv256 50C6                                        ?_SwapIPHeader 0001  
                               InitializeBoard@F7567 01C8                                   UDPOpenEx@localPort 0065  
                                     ?_OpenUDPsocket 0001                                              __pcinit 3CB4  
                                    __size_of_memcpy 0056                                      __size_of_memset 002A  
                                            __ramtop 1000                                  __end_of_WritePHYReg 4EEA  
                 __end_of_CheckIfFirstTimeConnection 54AC                           _CheckIfFirstTimeConnection 54A2  
                                _IsDoorSwitchPressed 5426                                              __ptext0 307E  
                                            __ptext1 53C0                                              __ptext2 545C  
                                            __ptext3 49D2                                              __ptext4 53D6  
                                            __ptext5 352A                                              __ptext6 4EBC  
                                            __ptext7 2984                                              __ptext8 4E58  
                                            __ptext9 53EA            _m_doorSwitchPressedTooLongTimerStartValue 01E2  
                        __end_of_SendDoorClosedEvent 466E                                           _wPutOffset 0039  
                                       ?_GetTickCopy 0001                             _DoorIndicatorTimerUpdate 4FA0  
                                       __size_of_RTC 001E                                      __size_of_strupr 0038  
                                __size_of_TickUpdate 0014                                              _m_state 00D8  
                                  ??_InitializeBoard 0021                                   __end_of_UDPProcess 2BBE  
                             ??_ProcessDoorIndicator 0029                                __end_of_ARPIsResolved 33AA  
            __end_of_ProcessStateDoorIndicatorClosed 548C             __size_of_ProcessStateDoorIndicatorClosed 0010  
                  ??_ProcessStateDoorIndicatorClosed 0029                     ?_ProcessStateDoorIndicatorClosed 0001  
                    _ProcessStateDoorIndicatorClosed 547C                                         _MACGetHeader 381E  
                HandleConfigData@doorRelayActiveTime 006E                                         CheckKeypad@i 02F2  
                                     __pintcode_body 3FEA                                 end_of_initialization 3D36  
                                       _MACDiscardRx 4DB0                                            _ESTATbits 000EFD  
                                          DelayMs@ms 001C                                 __size_of_UDPPutArray 005C  
                                 UDPFlush@wUDPLength 0083                         __size_of_MiscHexStringToByte 0050  
                                            memcpy@d 0022                                              memcpy@n 0020  
                                            memcpy@s 0024                 __size_of_ProcessDoorSwitchIsReleased 0004  
                               ?_IsDoorSwitchPressed 0001                                              memset@c 001E  
                                            memset@n 0020                                              memset@p 0022  
                                       _m_codeLength 00D2                       ?_ProcessStateDoorSwitchPressed 0001  
                                            int_func 3FEA                                      ?_GetWiegandCode 001C  
                           __size_of_BeepTimerUpdate 00C0                                __size_of_MACPutHeader 005A  
                                ARPIsResolved@IPAddr 001C                                              ltoa@buf 006D  
                                            ltoa@val 006F                                         _MACIsTxReady 5184  
                                         _remoteNode 01B6                                      ___lldiv@divisor 0020  
                                    SendUDPMessage@i 00C4                  __size_of_ProcessStateDoorSwitchIdle 0010  
                                    ___lldiv@counter 0028                                   MACPutHeader@remote 0020  
                             ?_CheckFlashingLEDTimer 0001                                       SwapARPPacket@p 0021  
                                            postdec1 000FE5                                              postdec2 000FDD  
                         ??_CheckConfigDataWaitTimer 0024                                              postinc0 000FEE  
                                            postinc1 000FE6                                              postinc2 000FDE  
                            InitializeBoard@macArray 0060                                       ?_TickGetDiv256 001C  
                                  _SendGetConfigData 48DC                                       ??_SwapIPHeader 0021  
                        CalcIPBufferChecksum@DataPtr 0076                                 UDPProcess@remoteNode 007D  
                  __size_of_SendDoorOpenTooLongEvent 005C                                   ?_SendGetConfigData 0001  
                      __size_of_CalcIPBufferChecksum 00D0                                              strupr@c 001E  
                          ?_SendDoorOpenTooLongEvent 0001                                              strupr@s 001C  
                                            strupr@t 001F                                            _PORTHbits 000F87  
                           _HandleConnectionResponse 43E0                                            _UDPOpenEx 2710  
                   __end_of_KeyPressedResetIdleTimer 4A6E                                            i1_TickGet 515E  
                            MACMemCopyAsync@ReadSave 0060                                 MACSetReadPtr@address 001C  
                                __end_of_DHCPDisable 53FE                                  UDPGetArray@wDataLen 0025  
                                __end_of_DHCPIsBound 54C6                            _DoorIndicatorUpdateConfig 3D40  
                                          _TRISBbits 000F93                                            _TRISCbits 000F94  
                                          _TRISDbits 000F95                              __size_of_UDPSetRxBuffer 001A  
                                ??_SendGetConfigData 0029                                            _TRISHbits 000F99  
                               _m_timerSendHeartbeat 014C                              __size_of_UDPSetTxBuffer 001A  
                                   _m_bytesAvailable 00C9                                         _MACPutHeader 4782  
                                          __DHCPSend 1ED0                            __size_of_HandleConfigData 01D4  
                              __end_of_MACSetReadPtr 532A                                          UDPProcess@h 0093  
                                        UDPProcess@s 0082                                    __size_of_DHCPInit 003C  
                                      ??_ICMPProcess 0029                                    __size_of_DHCPTask 0664  
                              ??_IsDoorSwitchPressed 001C                                        ??_MACGetArray 0020  
                                     __end_of_MACGet 54DA                                       __end_of_NDCFSM 3762  
                                     __end_of_ARPPut 346A                                       __end_of_MACPut 5498  
                        __size_of_FindMatchingSocket 0102                              ??_DoorSwitchTimerUpdate 0001  
                                     _dwLFSRRandSeed 01DA                                        ??_MACIsLinked 0021  
                          InitializeBoard@arrayindex 0072                                         ??_ReadPHYReg 001E  
                                     __end_of_UDPGet 5020                                    __size_of_MACFlush 0020  
                                     __end_of_UDPPut 4EBC                                            _AppConfig 0179  
                               UDPFlush@pseudoHeader 008D                              __size_of_SendDoorStatus 007E  
                                     UDPIsGetReady@s 0028                               SendVersionString@index 01EE  
                              SendUDPMessage@message 01E8                            __end_of_SendGetConfigData 4930  
                                        _WritePHYReg 4EBC                                      ??_SendHeartBeat 01ED  
                                  __size_of_LFSRRand 008C                                       __end_of_LowISR 005E  
                                    CheckKeypad@buff 02E6                                      ??_OpenUDPsocket 006C  
                            MACMemCopyAsync@destAddr 001D                                __end_of_InitAppConfig 3C1A  
                        ?_ProcessDoorIndicatorIsOpen 0001                         GenerateRandomDWORD@T0CONSave 007F  
                                      __pidataCOMRAM 54DA                                        ??_MACPutArray 0020  
                                  __size_of_UDPClose 004C                                 __size_of_CheckKeypad 0314  
                                     __end_of_memcpy 4832                                    __size_of_UDPFlush 017A  
                                     __end_of_memset 504A                          __end_of_GenerateRandomDWORD 2AA2  
                                CalcIPChecksum@count 001C             __end_of_CheckConnectionResponseWaitTimer 4B0A  
          __size_of_CheckConnectionResponseWaitTimer 004E                   ??_CheckConnectionResponseWaitTimer 0024  
                  ?_CheckConnectionResponseWaitTimer 0001                     _CheckConnectionResponseWaitTimer 4ABC  
                                       DelayMs@_dcnt 001E                                           ?_UDPOpenEx 0060  
                                _CheckHeartBeatTimer 4930                                    GetWiegandCode@tmp 0020  
                                         ?i1_TickGet 0001                             ??_DoorIndicatorGetStatus 001C  
                             __size_of_IPSetRxBuffer 0012                                       __end_of_strupr 4E22  
                                start_initialization 3CB4                                          __end_of_RTC 52C0  
                              _CurrentPacketLocation 0166                                   __end_of_ReadPHYReg 4F74  
                                          TickGet@dw 0020                                        ??_NDCInitData 001C  
                                         ?__DHCPSend 0099                                         _vTickReading 0029  
                              __size_of_LFSRSeedRand 0034                                             ??_MACGet 001C  
                                           ??_NDCFSM 0029                                             ??_ARPPut 0027  
                                           ??_MACPut 001C                              ??_SendConnectionRequest 01ED  
                                           ??_UDPGet 001C                                         ??_TickUpdate 0001  
                                           ??_UDPPut 001D                                        ?__DHCPReceive 0001  
                                    ___llmod@divisor 0020                           MiscHexStringToByte@tmpByte 001E  
                               ?_CheckHeartBeatTimer 0001                                      ___llmod@counter 0024  
                                   ??_InitStartState 001C                         ??_ProcessDoorSwitchIsPressed 0029  
                            ?_DoorSwitchUpdateConfig 0024                               __size_ofi1_GetTickCopy 002A  
                                     _SendUDPMessage 46CA                           ?_SendDoorTimerExpiredEvent 0001  
                                           ??_LowISR 0015                                       _CheckDoorTimer 5112  
                                __end_of_ICMPProcess 3A2A                        GenerateRandomDWORD@ADCON0Save 007D  
                      GenerateRandomDWORD@ADCON2Save 007E                                  __end_of_MACGetArray 4B56  
                                    ??_TickGetDiv256 0020                             MiscHexStringToByte@value 001D  
                                  __size_of_TickInit 0010                                         _m_timerState 0150  
                                  ??_BeepTimerUpdate 0009                                       MACPutArray@len 001E  
                                     MACPutArray@val 001C                         GenerateRandomDWORD@TMR0HSave 0080  
                                          _StackInit 49D2                                  __end_of_MACIsLinked 5412  
                       GenerateRandomDWORD@TMR0LSave 0081                                            _StackTask 2282  
                            ??_NDCGetRelayActiveTime 001E                      ??_ProcessStateDoorIndicatorOpen 0029  
              HandleConfigData@doorIndicatorPolarity 0068                                          __pdataBANK1 01C8  
                                   _SocketWithRxData 0043                                             ??_memcpy 0022  
                                        _DHCPDisable 53EA                                             ??_memset 0022  
                                        _DHCPIsBound 54BE                                     _m_timerFlashDiod 0140  
                                           ??_strupr 001E                                _SendDeviceReadySignal 4888  
                        __end_of_HandleReceivedBytes 1C5A                                             ?_ARPInit 0001  
                                           ?_MACInit 0001                                          __pbssBIGRAM 0341  
                                       _LFSRSeedRand 4E58                                             ?_NDCTick 0001  
                                 __end_of_TickUpdate 5426                                          __pbssCOMRAM 0029  
                                      __pcstackBANK0 0060                                        __pcstackBANK1 01E8  
                                      __pcstackBANK2 02E6                                 __size_of_GetTickCopy 002A  
                             __size_of_SwapARPPacket 0074                        InitializeBoard@macStringIndex 0074  
                                __end_of_MACPutArray 5112                                   _m_flashDiodeEnable 0040  
                                           ?_UDPInit 0001                                    CalcIPChecksum@val 0023  
                           _KeyPressedResetIdleTimer 4A20                                             ?_UDPTask 0001  
                                           ?_XEEInit 0001                                    CalcIPChecksum@sum 0024  
                                  ?_MACIsMemCopyDone 0001                                      _MACMemCopyAsync 2854  
                              MACSetWritePtr@address 001C                                 __end_of_SwapIPHeader 40E4  
                                           ?_DelayMs 001C                                   ??_MACIsMemCopyDone 001C  
                              UDPSetRxBuffer@wOffset 0024                         ??_SendDoorSwitchPressedEvent 0029  
                             __size_of_UDPIsGetReady 002E                                       ??__DHCPReceive 0060  
                                           ?_HighISR 0001                                ??_CheckHeartBeatTimer 0024  
                     __end_of_DoorSwitchUpdateConfig 3F6C                               __end_of_SendUDPMessage 4726  
                                      ??_IPGetHeader 0089                                   WritePHYReg@GIESave 001F  
                             __end_of_CheckDoorTimer 5138                                  __end_of_NDCInitData 5266  
                                      _IPSetRxBuffer 544A                         FindMatchingSocket@remoteNode 0026  
                                           ?_TickGet 001C                    _m_doorIndicatorInvertPolarityFlag 003E  
                  __end_of_SendDoorTimerExpiredEvent 455A                           __size_of_SendGetConfigData 0054  
                                UDPProcess@checksums 0083                                      _InitializeBoard 3762  
                                          __pintcode 0008                           ??_DoorIndicatorTimerUpdate 0001  
                          __DHCPReceive@tempServerID 0067                                             ?___awdiv 001C  
                                          __ptext100 53FE                                            __ptext101 4F46  
                                          __ptext110 5284                                            __ptext102 3E58  
                                          __ptext111 54AC                                            __ptext103 54BE  
                                          __ptext120 4B56                                            __ptext112 4782  
                                          __ptext104 4D3A                                            __ptext121 4246  
                                          __ptext113 50EC                                            __ptext105 2BBE  
                                          __ptext130 47DC                                            __ptext122 5112  
                                          __ptext114 548C                                            __ptext106 4B0A  
                                          __ptext131 4832                                            __ptext123 4ABC  
                                          __ptext115 5184                                            __ptext107 4DB0  
                                          __ptext140 346A                                            __ptext132 4DEA  
                                          __ptext124 4BA2                                            __ptext116 520A  
                                          __ptext108 33AA                                            __ptext141 515E  
                                          __ptext133 535E                                            __ptext125 5138  
                                          __ptext117 4C36                                            __ptext109 41D2  
                                          __ptext142 5074                                            __ptext126 504A  
                                          __ptext118 4A6E                                            __ptext135 5412  
                                          __ptext127 3762                                            __ptext119 4930  
                                          __ptext136 52A2                                            __ptext128 4982  
                                          __ptext137 5390                                            __ptext129 3B78  
                                          __ptext138 53A8                                            __ptext139 4FA0  
                                         ?_StackInit 0001                                             ?___lldiv 001C  
                                         ?_StackTask 0001                                             ?___llmod 001C  
                                     UDPIsPutReady@s 0027                                _CheckWaitForCodeTimer 2EB6  
                                           ?___lwmod 001F                                    UDPProcess@localIP 007F  
                                _MiscHexStringToByte 4982                              MACCalcRxChecksum@RDSave 0081  
                                      ??_setDoorOpen 0028                                          __pintcodelo 0018  
                                           UDPInit@s 001D                       _m_firstConnectionAfterBootFlag 01E7  
                                  _MACSetReadPtrInRx 4E22                               __size_of_UDPIsPutReady 0042  
                        ?_CheckIfFirstTimeConnection 0001                                          ??_UDPOpenEx 0026  
                                        __smallconst 1000                         ?_ProcessDoorSwitchIsReleased 0001  
                                 ?_MACSetReadPtrInRx 001C                                          ??i1_TickGet 0005  
                                      i1_GetTickCopy 5074                                __end_of_NDCResetState 51CA  
                    __size_of_DoorIndicatorGetStatus 0008                                       _UDPSetRxBuffer 5344  
                                          _m_tmpLong 002F                                       _UDPSetTxBuffer 532A  
                                           _DHCPInit 4D3A                                             _DHCPTask 100C  
                                   ??_GetWiegandCode 0020                                          ??__DHCPSend 0028  
                   _m_doorIndicatorProcessDelayTimer 0130                              MACCalcRxChecksum@offset 007D  
                                ??_MACSetReadPtrInRx 001E                                     _HandleConfigData 20AE  
                                        _m_beepValue 0128                                          _m_beepTimer 0124  
                          CalcIPBufferChecksum@F7587 011C                                       __size_of_swaps 001E  
                                     __size_of_ultoa 00F0                     MACMemCopyAsync@UpdateReadPointer 0065  
                               ?_MiscHexStringToByte 0001                                          _ICMPProcess 397E  
                                        _wTXWatchdog 0170                                             _MACFlush 520A  
                       __size_of_isDoorIndicatorOpen 003A                                          _MACGetArray 4B0A  
                                      StackInit@once 0173                   __size_of_DoorIndicatorUpdateConfig 008C  
                __size_of_ProcessDoorIndicatorIsOpen 0020                                             _LATCbits 000F8B  
                                           _LATDbits 000F8C                                      ?_SendUDPMessage 01E8  
                                           _LATFbits 000F8E                              ??_CheckFlashingLEDTimer 0024  
                                           DelayMs@i 0022                                      ?_CheckDoorTimer 0001  
                                           _MIREGADR 000EB4                                             _ERXRDPTH 000EED  
                                           _ERXRDPTL 000EEC                                       ?_IPSetRxBuffer 0022  
                                           _IPR1bits 000F9F                                             _PIE1bits 000F9D  
                   __end_of_SendDoorOpenTooLongEvent 4612                                          _MACIsLinked 53FE  
                                      ??_IPPutHeader 0028                                             _LFSRRand 3E58  
                          CalcIPBufferChecksum@Start 0074                                       _SendDoorStatus 3F6C  
                                       _WasDiscarded 003C                                        ??_UDPGetArray 0027  
                                      _SwapARPPacket 41D2                                             _PIR1bits 000F9E  
                              UDPSetTxBuffer@wOffset 0020                           ??_HandleConnectionResponse 0029  
                                           _RCONbits 000FD0                                  __end_of_IPGetHeader 307E  
                                           _SSP1CON1 000FC6                                    UDPFlush@wChecksum 007F  
                     _m_doorSwitchInvertPolarityFlag 00D4                      _m_doorIndicatorOpenTooLongTimer 012C  
                                           _UDPClose 4B56                            __end_of_MACSetReadPtrInRx 4E58  
                                         UDPOpenEx@p 006A                                           UDPOpenEx@s 0069  
                                           _UDPFlush 2596                                        _UDPIsGetReady 4F18  
                    ??_ProcessStateDoorSwitchPressed 0029                                   StackTask@dataCount 00BD  
                             ?_SendDeviceReadySignal 0001                                           _ADCON0bits 000FC2  
                                        _MACPutArray 50EC                                  MACSetReadPtr@oldVal 001E  
                             __end_of_UDPSetRxBuffer 535E                                       ?i1_GetTickCopy 0001  
                            __end_of_MACMemCopyAsync 2984                                    _m_waitForCodeTime 016E  
                             __end_of_UDPSetTxBuffer 5344                                     __size_of_ARPInit 0018  
                                   __size_of_MACInit 00BE                                  __end_of_setDoorOpen 4FF6  
                      ??_ProcessDoorSwitchIsReleased 001C                                     __size_of_NDCTick 0018  
                                        _m_bytesRead 00CB                                        ??_UDPPutArray 0024  
                                IPSetRxBuffer@Offset 0022                                     _m_wiegandCounter 0042  
                      __size_of_ProcessDoorIndicator 001A                 __end_of_SendFirstConnectionMadeEvent 44FC  
              __size_of_SendFirstConnectionMadeEvent 005E                         _SendFirstConnectionMadeEvent 449E  
                       __size_of_SendDoorClosedEvent 005C                                          _INTCON2bits 000FF1  
                                      LFSRSeedRand@i 0027                                          _INTCON3bits 000FF0  
                                        _NDCInitData 5248                                ??_MiscHexStringToByte 001C  
                                          copy_data0 3D18                                     __size_of_UDPInit 0014  
                                   __size_of_UDPTask 0182                                     __size_of_XEEInit 0016  
                       __end_of_CalcIPBufferChecksum 3222                                    __DHCPReceive@type 0065  
                                      _UDPIsPutReady 4C7A                              CalcIPBufferChecksum@len 0023  
                                   __size_of_DelayMs 0044                              __end_of_InitializeBoard 381E  
                             __end_of_SendDoorStatus 3FEA                   __end_of_ProcessDoorSwitchIsPressed 4CFC  
                         _ProcessDoorSwitchIsPressed 4CBC                                     __size_of_HighISR 4060  
                                        _m_udpSocket 0041                                          _m_sentBytes 016C  
                       GenerateRandomDWORD@vBitCount 007C                                    _SendDoorOpenEvent 466E  
                             _DoorIndicatorGetStatus 54B6                            MiscHexStringToByte@result 001C  
                                     ?_SwapARPPacket 0001                       __size_of_DoorSwitchTimerUpdate 0018  
                                 LFSRSeedRand@dwSeed 001F                                             _TickInit 545C  
                                           __Hrparam 0000                        __end_of_DoorSwitchTimerUpdate 53C0  
                                      SwapIPHeader@h 0021                              __size_of_MACSetWritePtr 000A  
          _m_doorIndicatorOpenTooLongTimerStartValue 01DE                                             __Lrparam 0000  
                                 ?_SendDoorOpenEvent 0001                                         ?_WritePHYReg 001C  
                             __size_of_ARPIsResolved 00C4                                     __size_of_TickGet 0026  
                            __size_of_isOpenDoorFlag 0004                               ?_CheckWaitForCodeTimer 0001  
                                         _DHCPClient 00D9                                           _DHCPEnable 535E  
                                        ??_StackInit 0028                                          ??_StackTask 00AF  
                                     ?_UDPIsGetReady 0026                   _isDoorIndicatorOpenFlagCachedValue 00D1  
                                __end_of_IPPutHeader 3AD2                                     __size_of___awdiv 0078  
                HandleConfigData@doorOpenTooLongTime 006A                                     __size_of___lldiv 0076  
                                   __size_of___llmod 0062                                        _g_wiegandFlag 00D0  
                                       _networkState 0178                                     __size_of___lwmod 003E  
                                __end_of_UDPGetArray 437E                                  ??_SendDoorOpenEvent 0029  
                                 _NextPacketLocation 0168                                 __end_of__DHCPReceive 1ED0  
                            __size_of_CalcIPChecksum 008C                                      ?_UDPSetRxBuffer 0024  
                       ??_ProcessStateDoorSwitchIdle 0029                                   _doorIndicatorState 003D  
                                    ?_UDPSetTxBuffer 0020                                __size_of_SwapIPHeader 007C  
                                FindMatchingSocket@h 0068                          __end_of_IsDoorSwitchPressed 5438  
                                FindMatchingSocket@p 006B                                  FindMatchingSocket@s 006A  
                  __size_of_CheckConfigDataWaitTimer 004C                                             __ptext10 5378  
                                           __ptext11 52C0                                             __ptext20 4440  
                                           __ptext12 52DC                                             __ptext21 5498  
                                           __ptext13 509E                                             __ptext30 51EA  
                                           __ptext22 5426                                             __ptext14 455A  
                                           __ptext31 466E                                             __ptext23 52F6  
                                           __ptext15 546C                                             __ptext40 38D0  
                                           __ptext32 54D4                                             __ptext24 522A  
                                           __ptext16 54CC                                             __ptext41 3C1A  
                                           __ptext33 51A8                                             __ptext25 4F74  
                                           __ptext17 4CBC                                             __ptext50 3EE4  
                                           __ptext42 4A20                                             __ptext34 5248  
                                           __ptext26 45B6                                             __ptext18 4FCC  
                                           __ptext51 3D40                                             __ptext43 5266  
                                           __ptext35 36A6                                             __ptext27 4612  
                                           __ptext19 54D0                                             __ptext60 437E  
                                           __ptext52 40E4                                             __ptext44 1984  
                                           __ptext36 3AD2                                             __ptext28 547C  
                                           __ptext61 415C                                             __ptext53 4EEA  
                                           __ptext45 35E8                                             __ptext37 449E  
                                           __ptext29 4D76                                             __ptext70 381E  
                                           __ptext62 46CA                                             __ptext54 43E0  
                                           __ptext46 44FC                                             __ptext38 54A2  
                                           __ptext71 2F9A                                             __ptext63 2282  
                                           __ptext55 48DC                                             __ptext47 3F6C  
                                           __ptext39 4888                                             __ptext80 4E8C  
                                           __ptext72 397E                                             __ptext64 2414  
                                           __ptext56 2EB6                                             __ptext48 54B6  
                                           __ptext81 2596                                             __ptext73 2854  
                                           __ptext65 50C6                                             __ptext57 1670  
                                           __ptext49 20AE                                             __ptext90 54D8  
                                           __ptext82 5310                                             __ptext74 54C6  
                                           __ptext66 3222                                             __ptext58 4BEE  
                                           __ptext91 5438                                             __ptext83 3A2A  
                                           __ptext75 42B2                                             __ptext67 32E6  
                                           __ptext59 2DC6                                             __ptext92 2710  
                                           __ptext84 4068                                             __ptext76 100C  
                                           __ptext68 2AA2                                             __ptext93 5020  
                                           __ptext85 3DCC                                             __ptext77 4CFC  
                                           __ptext69 2CC4                                             __ptext94 4C7A  
                                           __ptext86 3152                                             __ptext78 1ED0  
                                           __ptext95 532A                                             __ptext87 1C5A  
                                           __ptext79 4726                                             __ptext96 4F18  
                                           __ptext88 431A                                             __ptext97 5344  
                                           __ptext89 4FF6                                             __ptext98 544A  
                                           __ptext99 4E22                            ?_CheckConfigDataWaitTimer 0001  
                                       _SSP1CON1bits 000FC6                                     InitializeBoard@a 001F  
                                IPPutHeader@protocol 0062                        ?_SendFirstConnectionMadeEvent 0001  
                                           _m_config 01C0                   __end_of_SendDoorSwitchPressedEvent 449E  
                         _SendDoorSwitchPressedEvent 4440                           __end_of_FindMatchingSocket 2DC6  
                             CheckKeypad@messageSize 02EE                                       ?_UDPIsPutReady 0025  
                                  _SendVersionString 35E8                                        __size_of_Beep 002E  
                                    ??_IPSetRxBuffer 0024                                             _m_tmpInt 0035  
                                    _BeepTimerUpdate 346A                            __end_of_SendDoorOpenEvent 46CA  
                                __end_of_UDPPutArray 4782                       __size_of_SendConnectionRequest 00AE  
                                      __size_of_main 00D4                                      _StackInit$12046 008A  
                      __end_of_SendConnectionRequest 397E                                        __size_of_ltoa 0048  
                                    ?_SendDoorStatus 0001                                   ?_SendVersionString 0001  
                                        _IPHeaderLen 00CD                                          _IPGetHeader 2F9A  
                __size_of_CheckIfFirstTimeConnection 000A                          ??_SendDoorTimerExpiredEvent 0029  
                                           _toRotate 015C                                 DHCPEnable@vInterface 0001  
                                ??_SendVersionString 00C6                             _SendDoorOpenTooLongEvent 45B6  
                                           int$flags 0044                 __end_of_ProcessDoorIndicatorIsClosed 54D8  
              __size_of_ProcessDoorIndicatorIsClosed 0004                         _ProcessDoorIndicatorIsClosed 54D4  
                                         _ARPResolve 3222                                        ??_CheckKeypad 01ED  
                                         _ARPProcess 2BBE                           __size_of_MACSetReadPtrInRx 0036  
                              __end_of_SendHeartBeat 3B78                                  UDPOpenEx@remoteHost 0060  
                                UDPOpenEx@remotePort 0067                                         ?_DHCPDisable 0001  
                                      _UDPSocketInfo 0200                                         ?_DHCPIsBound 0001  
                                       _SSP1STATbits 000FC7                                __end_of_OpenUDPsocket 3CB4  
                             __size_of_MACSetReadPtr 001A                       __size_of_NDCGetRelayActiveTime 000A  
                                       _SwapIPHeader 4068                                      ??i1_GetTickCopy 0001  
                      __end_of_NDCGetRelayActiveTime 54A2                                          _setDoorOpen 4FCC  
                         ??_KeyPressedResetIdleTimer 0024                                    ICMPProcess@remote 0085  
                                 MACMemCopyAsync@len 0021                                     ?_MACMemCopyAsync 001D  
                                         _INTCONbits 000FF2                                             memcpy@d1 001C  
                                           memcpy@s1 001E                                        _ARPIsResolved 32E6  
                                 ReadPHYReg@Register 001E                                             memset@p1 001C  
                                  _FormatNetBIOSName 4832                      GenerateRandomDWORD@randomResult 0084  
                                          ultoa@base 0066                         __size_of_GenerateRandomDWORD 011E  
                              DHCPIsBound@vInterface 0001                            __end_of_SendVersionString 36A6  
                               ARPIsResolved@MACAddr 001E                                   ?_FormatNetBIOSName 0021  
                                           intlevel1 0000                                             intlevel2 0000  
                                MACPutHeader@dataLen 0023                                    _ProcessDoorSwitch 52C0  
                                UDPPutArray@wDataLen 0022                                             ltoa@base 0073  
                             __size_of_InitAppConfig 00A2                                           _MISTATbits 000E8A  
                                   ___lwmod@dividend 001F                                     ___lldiv@dividend 001C  
                                    ??_SwapARPPacket 0021                                   ?_ProcessDoorSwitch 0001  
                                   ?_InitializeBoard 001F                                MACCalcRxChecksum@temp 0083  
                                ??_FormatNetBIOSName 0023                            FindMatchingSocket@localIP 0028  
                                        _IPPutHeader 3A2A                      _m_doorSwitchPressedTooLongTimer 0134  
                 HandleConfigData@doorSwitchPolarity 0069                                     UDPGetArray@cData 0023  
                                        _UDPGetArray 431A                                      ??_UDPIsGetReady 0028  
                          __size_of_MACIsMemCopyDone 0006                                  ??_ProcessDoorSwitch 0029  
       __end_of_ProcessStateDoorSwitchPressedTooLong 52F6        __size_of_ProcessStateDoorSwitchPressedTooLong 001A  
             ??_ProcessStateDoorSwitchPressedTooLong 0028                ?_ProcessStateDoorSwitchPressedTooLong 0001  
               _ProcessStateDoorSwitchPressedTooLong 52DC                                          ?_DHCPEnable 0001  
                                   ICMPProcess@dwVal 0089                                __end_of_TickGetDiv256 50EC  
_m_doorSwitchPressedTooLongFunctionalityIsActiveFlag 003F                             __end_of_HandleConfigData 2282  
                                    _ARPResolve$5917 006E                        ?_ProcessDoorIndicatorIsClosed 0001  
                          MACMemCopyAsync@sourceAddr 001F                                  _isDoorIndicatorOpen 4D76  
                               _CalcIPBufferChecksum 3152                                             ultoa@buf 0060  
                                        i1TickGet@dw 0005                                             ultoa@val 0062  
                                      ??_GetTickCopy 001C                         CalcIPBufferChecksum@Checksum 0077  
                                __end_of_CheckKeypad 1984                                     ___lldiv@quotient 0024  
                                    ___lwmod@divisor 0021                    MACMemCopyAsync@UpdateWritePointer 0064  
                          _SendDoorTimerExpiredEvent 44FC                            __end_of_FormatNetBIOSName 4888  
                                    ___lwmod@counter 0023                                 MACCalcRxChecksum@len 007F  
                                     ?_ARPIsResolved 001C                         CalcIPBufferChecksum@ChunkLen 007B  
                             CheckKeypad@wiegandCode 02F4                                        ?_MACGetHeader 0026  
                            __end_of_BeepTimerUpdate 352A                                           _UDPDiscard 5438  
                                        _UDPPutArray 4726                          __end_of_CheckHeartBeatTimer 4982  
                          __end_of_ProcessDoorSwitch 52DC                                      ??_UDPIsPutReady 0027  
                                   ??_SendUDPMessage 0029                                     ??_CheckDoorTimer 001C  
                                      ?_MACDiscardRx 0001                         __size_of_HandleReceivedBytes 02D6  
                                      _MACSetReadPtr 5310                                         ?_ICMPProcess 0085  
                                         _UDPRxCount 0033                                 ?_isDoorIndicatorOpen 0001  
                                       ?_MACGetArray 001C                                           _UDPTxCount 00C7  
                         __size_of_SendDoorOpenEvent 005C                                       ICMPProcess@len 0087  
                                         _UDPProcess 2AA2                                   IPGetHeader@localIP 008F  
                     ??_SendFirstConnectionMadeEvent 0029                                    IPGetHeader@header 0090  
                                      ?_MACIsTxReady 0001                                         ?_MACIsLinked 0001  
                                     _MACSetWritePtr 54AC                       __size_of_CheckFlashingLEDTimer 006C  
                                   ARPResolve@IPAddr 0060                        __end_of_CheckFlashingLEDTimer 42B2  
                                  IPGetHeader@remote 0085                                       _isOpenDoorFlag 54D0  
